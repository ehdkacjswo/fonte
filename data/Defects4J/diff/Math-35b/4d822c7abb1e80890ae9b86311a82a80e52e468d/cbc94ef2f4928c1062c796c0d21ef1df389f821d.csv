is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,17,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,19,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,20,mport org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,21,mport org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,22,mport org.apache.commons.math.exception.util.ExceptionContext;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,23,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,24,mport org.apache.commons.math.util.IterationManager;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,25,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,28, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,29, Implementation of the SYMMLQ iterative linear solver proposed by <a
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,30," href=""#PAIG1975"">Paige and Saunders (1975)</a>. This implementation is"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,31," largely based on the FORTRAN code by Pr. Michael A. Saunders, available <a"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,32," href=""http://www.stanford.edu/group/SOL/software/symmlq/f77/"">here</a>."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,33, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,34, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,35, SYMMLQ is designed to solve the system of linear equations A &middot; x = b
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,36, where A is an n &times; n self-adjoint linear operator (defined as a
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,37," {@link RealLinearOperator}), and b is a given vector. The operator A is not"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,38," required to be positive definite. If A is known to be definite, the method of"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,39," conjugate gradients might be preferred, since it will require about the same"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,40, number of iterations as SYMMLQ but slightly less work per iteration.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,41, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,42, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,43," SYMMLQ is designed to solve the system (A - shift &middot; I) &middot; x = b,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,44," where shift is a specified scalar value. If shift and b are suitably chosen,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,45," the computed vector x may approximate an (unnormalized) eigenvector of A, as"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,46, in the methods of inverse iteration and/or Rayleigh-quotient iteration.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,47," Again, the linear operator (A - shift &middot; I) need not be positive"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,48, definite (but <em>must</em> be self-adjoint). The work per iteration is very
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,49, slightly less if shift = 0.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,50, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,51, <h3>Peconditioning</h3>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,52, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,53, Preconditioning may reduce the number of iterations required. The solver is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,54, provided with a positive definite preconditioner M = C &middot; C<sup>T</sup>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,55," that is known to approximate (A - shift &middot; I) in some sense, while"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,56, systems of the form M &middot; y = x can be solved efficiently. Then SYMMLQ
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,57, will implicitly solve the system of equations P &middot; (A - shift &middot;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,58," I) &middot; P<sup>T</sup> &middot; xhat = P &middot; b, i.e. Ahat &middot;"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,59," xhat = bhat, where P = C<sup>-1</sup>, Ahat = P &middot; (A - shift &middot;"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,60," I) &middot; P<sup>T</sup>, bhat = P &middot; b, and return the solution x ="
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,61, P<sup>T</sup> &middot; xhat. The associated residual is rhat = bhat - Ahat
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,62, &middot; xhat = P &middot; [b - (A - shift &middot; I) &middot; x] = P
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,63, &middot; r.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,64, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,65," <h3><a id=""stopcrit"">Default stopping criterion</a></h3>"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,66, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,67, A default stopping criterion is implemented. The iterations stop when || rhat
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,68," || &le; &delta; || Ahat || || xhat ||, where xhat is the current estimate of"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,69," the solution of the transformed system, rhat the current estimate of the"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,70," corresponding residual, and &delta; a user-specified tolerance."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,71, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,72, <h3>Iteration count</h3>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,73, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,74," In the present context, an iteration should be understood as one evaluation"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,75, of the matrix-vector product A &middot; x. The initialization phase therefore
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,76," counts as one iteration. If the user requires checks on the symmetry of A,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,77, this entails one further matrix-vector product by iteration. This further
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,78," product is <em>not</em> accounted for in the iteration count. In other words,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,79," the number of iterations required to reach convergence will be identical,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,80, whether checks have been required or not.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,81, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,82, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,83, The present definition of the iteration count differs from that adopted in
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,84," the original FOTRAN code, where the initialization phase was <em>not</em>"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,85, taken into account.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,86, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,87," <h3><a id=""context"">Exception context</a></h3>"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,88, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,89," Besides standard {@link DimensionMismatchException}, this class might throw"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,90, {@link NonSelfAdjointOperatorException} if the linear operator or the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,91," preconditioner are not symmetric. In this case, the {@link ExceptionContext}"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,92, provides more information
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,93, <ul>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,94," <li>key {@code ""operator""} points to the offending linear operator, say L,</li>"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,95," <li>key {@code ""vector1""} points to the first offending vector, say x,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,96," <li>key {@code ""vector2""} points to the second offending vector, say y, such"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,97, that x<sup>T</sup> &middot; L &middot; y &ne; y<sup>T</sup> &middot; L
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,98, &middot; x (within a certain accuracy).</li>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,99, </ul>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,100, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,101, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,102, {@link NonPositiveDefiniteOperatorException} might also be thrown in case the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,103, preconditioner is not positive definite. The relevant keys to the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,104, {@link ExceptionContext} are
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,105, <ul>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,106," <li>key {@code ""operator""}, which points to the offending linear operator,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,107," say L,</li>"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,108," <li>key {@code ""vector""}, which points to the offending vector, say x, such"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,109, that x<sup>T</sup> &middot; L &middot; x < 0.</li>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,110, </ul>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,111, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,112, <h3>References</h3>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,113, <dl>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,114," <dt><a id=""PAIG1975"">Paige and Saunders (1975)</a></dt>"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,115," <dd>C. C. Paige and M. A. Saunders, <a"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,116," href=""http://www.stanford.edu/group/SOL/software/symmlq/PS75.pdf""><em>"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,117," Solution of Sparse Indefinite Systems of Linear Equations</em></a>, SIAM"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,118," Journal on Numerical Analysis 12(4): 617-629, 1975</dd>"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,119, </dl>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,121, @version $Id$
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,122, @since 3.0
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,124,ublic class SymmLQ
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,125,xtends PreconditionedIterativeLinearSolver {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,128, IMPLEMENTATION NOTES
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,130, The implementation follows as closely as possible the notations of Paige
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,131, and Saunders (1975). Attention must be paid to the fact that some
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,132, quantities which are relevant to iteration k can only be computed in
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,133," iteration (k+1). Therefore, minute attention must be paid to the index of"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,134, each state variable of this algorithm.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,136, 1. Preconditioning
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,138, The Lanczos iterations associated with Ahat and bhat read
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,139,   beta[1] = |P . b|
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,140,   v[1] = P.b / beta[1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,141,   beta[k+1] * v[k+1] = Ahat * v[k] - alpha[k] * v[k] - beta[k] * v[k-1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,142,                      = P * (A - shift * I) * P' * v[k] - alpha[k] * v[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,143,                        - beta[k] * v[k-1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,144," Multiplying both sides by P', we get"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,145,   beta[k+1] * (P' * v)[k+1] = M^(-1) * (A - shift * I) * (P' * v)[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,146,                               - alpha[k] * (P' * v)[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,147,"                               - beta[k] * (P' * v[k-1]),"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,148, and
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,149,   alpha[k+1] = v[k+1]' * Ahat * v[k+1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,150,              = v[k+1]' * P * (A - shift * I) * P' * v[k+1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,151,              = (P' * v)[k+1]' * (A - shift * I) * (P' * v)[k+1].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,153," In other words, the Lanczos iterations are unchanged, except for the fact"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,154, that we really compute (P' * v) instead of v. It can easily be checked
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,155, that all other formulas are unchanged. It must be noted that P is never
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,156," explicitly used, only matrix-vector products involving M^(-1) are"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,157, invoked.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,159, 2. Accounting for the shift parameter
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,161," Is trivial: each time A.operate(x) is invoked, one must subtract shift * x"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,162, to the result.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,164, 3. Accounting for the goodb flag
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,166," When goodb is set to true, the component of xL along b is computed"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,167," separately. From Page and Saunders (1975), equation (5.9), we have"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,168,"   wbar[k+1] = s[k] * wbar[k] - c[k] * v[k+1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,169,   wbar[1] = v[1].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,170," Introducing wbar2[k] = wbar[k] - s[1] * ... * s[k-1] * v[1], it can"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,171, easily be verified by induction that what follows the same recursive
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,172, relation
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,173,"   wbar2[k+1] = s[k] * wbar2[k] - c[k] * v[k+1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,174,"   wbar2[1] = 0,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,175, and we then have
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,176,   w[k] = c[k] * wbar2[k] + s[k] * v[k+1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,177,          + s[1] * ... * s[k-1] * c[k] * v[1].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,178," Introducing w2[k] = w[k] - s[1] * ... * s[k-1] * c[k] * v[1], we find,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,179, from (5.10)
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,180,   xL[k] = zeta[1] * w[1] + ... + zeta[k] * w[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,181,         = zeta[1] * w2[1] + ... + zeta[k] * w2[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,182,           + (s[1] * c[2] * zeta[2] + ...
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,183,           + s[1] * ... * s[k-1] * c[k] * zeta[k]) * v[1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,184,"         = xL2[k] + bstep[k] * v[1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,185, where xL2[k] is defined by
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,186,"   xL2[0] = 0,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,187,"   xL2[k+1] = xL2[k] + zeta[k+1] * w2[k+1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,188, and bstep is defined by
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,189,"   bstep[1] = 0,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,190,   bstep[k] = bstep[k-1] + s[1] * ... * s[k-1] * c[k] * zeta[k].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,191," We also have, from (5.11)"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,192,   xC[k] = xL[k-1] + zbar[k] * wbar[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,193,         = xL2[k-1] + zbar[k] * wbar2[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,194,           + (bstep[k-1] + s[1] * ... * s[k-1] * zbar[k]) * v[1].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,198, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,199, A simple container holding the non-final variables used in the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,200, iterations. Making the current state of the solver visible from the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,201," outside is necessary, because during the iterations, {@code x} does not"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,202," <em>exactly</em> hold the current estimate of the solution. Indeed,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,203, {@code x} needs in general to be moved from the LQ point to the CG point.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,204," Besides, additional upudates must be carried out in case {@code goodb} is"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,205, set to {@code true}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,206, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,207, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,208," In all subsequent comments, the description of the state variables refer"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,209," to their value after a call to {@link #update()}. In these comments, k is"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,210, the current number of evaluations of matrix-vector products.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,211, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,213,rivate class State {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,215,** Reference to the linear operator. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,216,rivate final RealLinearOperator a;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,218,** Reference to the right-hand side vector. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,219,rivate final RealVector b;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,221,** The value of beta[k+1]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,222,rivate double beta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,224,** The value of beta[1]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,225,rivate double beta1;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,227,** The value of bstep[k-1]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,228,rivate double bstep;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,230,** The estimate of the norm of P * rC[k]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,231,rivate double cgnorm;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,233,** The value of dbar[k+1] = -beta[k+1] * c[k-1]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,234,rivate double dbar;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,237, The value of gamma[k] * zeta[k]. Was called {@code rhs1} in the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,238, initial code.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,240,rivate double gammaZeta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,242,** The value of gbar[k]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,243,rivate double gbar;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,245,"** The value of max(|alpha[1]|, gamma[1], ..., gamma[k-1]). */"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,246,rivate double gmax;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,248,"** The value of min(|alpha[1]|, gamma[1], ..., gamma[k-1]). */"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,249,rivate double gmin;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,251,** Copy of the {@code goodb} parameter. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,252,rivate final boolean goodb;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,254,** {@code true} if the default convergence criterion is verified. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,255,rivate boolean hasConverged;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,257,** The estimate of the norm of P * rL[k-1]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,258,rivate double lqnorm;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,260,** Reference to the preconditioner. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,261,rivate final InvertibleRealLinearOperator m;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,264, The value of (-eps[k+1] * zeta[k-1]). Was called {@code rhs2} in the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,265, initial code.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,267,rivate double minusEpsZeta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,269,** The value of M^(-1) * b. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,270,rivate final RealVector mSolveB;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,272,** The value of beta[k]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,273,rivate double oldb;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,275,** The value of beta[k] * M * P' * v[k]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,276,rivate RealVector r1;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,278,** The value of beta[k+1] * M * P' * v[k+1]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,279,rivate RealVector r2;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,281,** Copy of the {@code shift} parameter. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,282,rivate final double shift;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,284,** The value of s[1] * ... * s[k-1]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,285,rivate double snprod;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,288," An estimate of the square of the norm of A * V[k], based on Paige and"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,289," Saunders (1975), equation (3.3)."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,291,rivate double tnorm;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,294, The value of P' * wbar[k] or P' * (wbar[k] - s[1] * ... * s[k-1] *
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,295, v[1]) if {@code goodb} is {@code true}. Was called {@code w} in the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,296, initial code.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,298,rivate RealVector wbar;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,301, A reference to the vector to be updated with the solution. Contains
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,302," the value of xL[k-1] if {@code goodb} is {@code false}, (xL[k-1] -"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,303, bstep[k-1] * v[1]) otherwise.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,305,rivate final RealVector x;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,307,** The value of beta[k+1] * P' * v[k+1]. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,308,rivate RealVector y;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,310,** The value of zeta[1]^2 + ... + zeta[k-1]^2. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,311,rivate double ynorm2;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,314, Creates and inits to k = 1 a new instance of this class.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,316, @param a Linear operator A of the system.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,317, @param m Preconditioner (can be {@code null}).
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,318, @param b Right-hand side vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,319, @param x Vector to be updated with the solution. {@code x} should not
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,320," be considered as an initial guess, as it is set to 0 in the"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,321, initialization phase.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,322," @param goodb Usually {@code false}, except if {@code x} is expected"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,323, to contain a large multiple of {@code b}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,324, @param shift The amount to be subtracted to all diagonal elements of
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,325, A.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,327,"ublic State(final RealLinearOperator a,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,328,"inal InvertibleRealLinearOperator m, final RealVector b,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,329,"inal RealVector x, final boolean goodb, final double shift) {"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,330,his.a = a;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,331,his.m = m;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,332,his.b = b;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,333,his.x = x;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,334,his.goodb = goodb;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,335,his.shift = shift;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,336,his.mSolveB = m == null ? b : m.solve(b);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,337,his.hasConverged = false;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,338,nit();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,342," Move to the CG point if it seems better. In this version of SYMMLQ,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,343," the convergence tests involve only cgnorm, so we're unlikely to stop"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,344," at an LQ point, except if the iteration limit interferes."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,346, @param xRefined Vector to be updated with the refined value of x.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,348,ublic void refine(final RealVector xRefined) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,349,inal int n = this.x.getDimension();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,350,f (lqnorm < cgnorm) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,351,f (!goodb) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,352,"Refined.setSubVector(0, this.x);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,353, else {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,354,inal double step = bstep / beta1;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,355,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,356,inal double bi = mSolveB.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,357,inal double xi = this.x.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,358,"Refined.setEntry(i, xi + step * bi);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,361, else {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,362,inal double anorm = FastMath.sqrt(tnorm);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,363,inal double diag = gbar == 0. ? anorm * MACH_PREC : gbar;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,364,inal double zbar = gammaZeta / diag;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,365,inal double step = (bstep + snprod * zbar) / beta1;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,366,/ ynorm = FastMath.sqrt(ynorm2 + zbar * zbar);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,367,f (!goodb) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,368,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,369,inal double xi = this.x.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,370,inal double wi = wbar.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,371,"Refined.setEntry(i, xi + zbar * wi);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,373, else {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,374,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,375,inal double xi = this.x.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,376,inal double wi = wbar.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,377,inal double bi = mSolveB.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,378,"Refined.setEntry(i, xi + zbar * wi + step * bi);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,385," Performs the initial phase of the SYMMLQ algorithm. On return, the"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,386, value of the state variables of {@code this} object correspond to k =
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,387, 1.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,389,rivate void init() {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,390,his.x.set(0.);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,392, Set up y for the first Lanczos vector. y and beta1 will be zero
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,393, if b = 0.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,395,his.r1 = this.b.copy();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,396,his.y = this.m == null ? this.b.copy() : this.m.solve(this.r1);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,397,f ((this.m != null) && check) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,398,"heckSymmetry(this.m, this.r1, this.y, this.m.solve(this.y));"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,401,his.beta1 = this.r1.dotProduct(this.y);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,402,f (this.beta1 < 0.) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,403,"hrowNPDLOException(this.m, this.y);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,405,f (this.beta1 == 0.) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,406,"* If b = 0 exactly, stop with x = 0. */"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,407,eturn;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,409,his.beta1 = FastMath.sqrt(this.beta1);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,410,* At this point
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,411,"   r1 = b,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,412,"   y = M^(-1) * b,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,413,   beta1 = beta[1].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,415,inal RealVector v = this.y.mapMultiply(1. / this.beta1);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,416,his.y = this.a.operate(v);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,417,f (check) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,418,"heckSymmetry(this.a, v, this.y, this.a.operate(this.y));"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,421, Set up y for the second Lanczos vector. y and beta will be zero
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,422, or very small if b is an eigenvector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,424,"axpy(-this.shift, v, this.y);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,425,inal double alpha = v.dotProduct(this.y);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,426,"axpy(-alpha / this.beta1, this.r1, this.y);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,428, At this point
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,429,   alpha = alpha[1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,430,   y     = beta[2] * M * P' * v[2]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,432,* Make sure r2 will be orthogonal to the first v. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,433,inal double vty = v.dotProduct(this.y);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,434,inal double vtv = v.dotProduct(v);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,435,"axpy(-vty / vtv, v, this.y);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,436,his.r2 = this.y.copy();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,437,f (this.m != null) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,438,his.y = this.m.solve(this.r2);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,440,his.oldb = this.beta1;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,441,his.beta = this.r2.dotProduct(this.y);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,442,f (this.beta < 0.) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,443,"hrowNPDLOException(this.m, this.y);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,445,his.beta = FastMath.sqrt(this.beta);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,447, At this point
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,448,   oldb = beta[1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,449,   beta = beta[2]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,450,   y  = beta[2] * P' * v[2]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,451,   r2 = beta[2] * M * P' * v[2]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,453,his.cgnorm = this.beta1;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,454,his.gbar = alpha;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,455,his.dbar = this.beta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,456,his.gammaZeta = this.beta1;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,457,his.minusEpsZeta = 0.;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,458,his.bstep = 0.;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,459,his.snprod = 1.;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,460,his.tnorm = alpha * alpha + this.beta * this.beta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,461,his.ynorm2 = 0.;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,462,his.gmax = FastMath.abs(alpha) + MACH_PREC;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,463,his.gmin = this.gmax;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,465,f (this.goodb) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,466,his.wbar = new ArrayRealVector(this.a.getRowDimension());
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,467,his.wbar.set(0.);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,468, else {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,469,his.wbar = v;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,471,pdateNorms();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,475, Performs the next iteration of the algorithm. The iteration count
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,476," should be incremented prior to calling this method. On return, the"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,477, value of the state variables of {@code this} object correspond to the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,478, current iteration count {@code k}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,480,rivate void update() {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,481,inal RealVector v = y.mapMultiply(1. / beta);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,482, = a.operate(v);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,483,"axpbypz(-shift, v, -beta / oldb, r1, y);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,484,inal double alpha = v.dotProduct(y);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,486, At this point
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,487,"   v     = P' * v[k],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,488,"   y     = (A - shift * I) * P' * v[k] - beta[k] * M * P' * v[k-1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,489,   alpha = v'[k] * P * (A - shift * I) * P' * v[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,490,           - beta[k] * v[k]' * P * M * P' * v[k-1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,491,         = v'[k] * P * (A - shift * I) * P' * v[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,492,           - beta[k] * v[k]' * v[k-1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,493,         = alpha[k].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,495,"axpy(-alpha / beta, r2, y);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,497, At this point
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,498,   y = (A - shift * I) * P' * v[k] - alpha[k] * M * P' * v[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,499,       - beta[k] * M * P' * v[k-1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,500,     = M * P' * (P * (A - shift * I) * P' * v[k] -alpha[k] * v[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,501,       - beta[k] * v[k-1])
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,502,"     = beta[k+1] * M * P' * v[k+1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,503," from Paige and Saunders (1975), equation (3.2)."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,505, WATCH-IT: the two following line work only because y is no longer
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,506," updated up to the end of the present iteration, and is"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,507, reinitialized at the beginning of the next iteration.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,509,1 = r2;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,510,2 = y;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,511,f (m != null) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,512, = m.solve(r2);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,514,ldb = beta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,515,eta = r2.dotProduct(y);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,516,f (beta < 0.) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,517,"hrowNPDLOException(m, y);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,519,eta = FastMath.sqrt(beta);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,521, At this point
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,522,"   r1 = beta[k] * M * P' * v[k],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,523,"   r2 = beta[k+1] * M * P' * v[k+1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,524,"   y  = beta[k+1] * P' * v[k+1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,525,"   oldb = beta[k],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,526,   beta = beta[k+1].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,528,norm += alpha * alpha + oldb * oldb + beta * beta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,530, Compute the next plane rotation for Q. See Paige and Saunders
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,531," (1975), equation (5.6), with"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,532,"   gamma = gamma[k-1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,533,"   c     = c[k-1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,534,   s     = s[k-1].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,536,inal double gamma = FastMath.sqrt(gbar * gbar + oldb * oldb);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,537,inal double c = gbar / gamma;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,538,inal double s = oldb / gamma;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,540, The relations
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,541,   gbar[k] = s[k-1] * (-c[k-2] * beta[k]) - c[k-1] * alpha[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,542,"           = s[k-1] * dbar[k] - c[k-1] * alpha[k],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,543,"   delta[k] = c[k-1] * dbar[k] + s[k-1] * alpha[k],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,544," are not stated in Paige and Saunders (1975), but can be retrieved"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,545," by expanding the (k, k-1) and (k, k) coefficients of the matrix in"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,546, equation (5.5).
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,548,inal double deltak = c * dbar + s * alpha;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,549,bar = s * dbar - c * alpha;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,550,inal double eps = s * beta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,551,bar = -c * beta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,552,inal double zeta = gammaZeta / gamma;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,554, At this point
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,555,   gbar   = gbar[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,556,   deltak = delta[k]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,557,   eps    = eps[k+1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,558,   dbar   = dbar[k+1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,559,   zeta   = zeta[k-1]
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,561,inal double zetaC = zeta * c;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,562,inal double zetaS = zeta * s;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,563,inal int n = x.getDimension();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,564,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,565,inal double xi = x.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,566,inal double vi = v.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,567,inal double wi = wbar.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,568,".setEntry(i, xi + wi * zetaC + vi * zetaS);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,569,"bar.setEntry(i, wi * s - vi * c);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,572, At this point
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,573,"   x = xL[k-1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,574,"   ptwbar = P' wbar[k],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,575," see Paige and Saunders (1975), equations (5.9) and (5.10)."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,577,step += snprod * c * zeta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,578,nprod *= s;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,579,"max = FastMath.max(gmax, gamma);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,580,"min = FastMath.min(gmin, gamma);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,581,norm2 += zeta * zeta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,582,ammaZeta = minusEpsZeta - deltak * zeta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,583,inusEpsZeta = -eps * zeta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,585, At this point
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,586,"   snprod       = s[1] * ... * s[k-1],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,587,"   gmax         = max(|alpha[1]|, gamma[1], ..., gamma[k-1]),"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,588,"   gmin         = min(|alpha[1]|, gamma[1], ..., gamma[k-1]),"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,589,"   ynorm2       = zeta[1]^2 + ... + zeta[k-1]^2,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,590,"   gammaZeta    = gamma[k] * zeta[k],"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,591,   minusEpsZeta = -eps[k+1] * zeta[k-1].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,592, The relation for gammaZeta can be retrieved from Paige and
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,593," Saunders (1975), equation (5.4a), last line of the vector"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,594, gbar[k] * zbar[k] = -eps[k] * zeta[k-2] - delta[k] * zeta[k-1].
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,596,pdateNorms();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,600," Computes the norms of the residuals, and checks for convergence."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,601, Updates {@link #lqnorm} and {@link #cgnorm}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,603,rivate void updateNorms() {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,604,inal double anorm = FastMath.sqrt(tnorm);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,605,inal double ynorm = FastMath.sqrt(ynorm2);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,606,inal double epsa = anorm * MACH_PREC;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,607,inal double epsx = anorm * ynorm * MACH_PREC;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,608,inal double epsr = anorm * ynorm * delta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,609,inal double diag = gbar == 0. ? epsa : gbar;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,610,qnorm = FastMath.sqrt(gammaZeta * gammaZeta +
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,611,inusEpsZeta * minusEpsZeta);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,612,inal double qrnorm = snprod * beta1;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,613,gnorm = qrnorm * beta / FastMath.abs(diag);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,616, Estimate cond(A). In this version we look at the diagonals of L
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,617," in the factorization of the tridiagonal matrix, T = L * Q."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,618," Sometimes, T[k] can be misleadingly ill-conditioned when T[k+1]"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,619," is not, so we must be careful not to overestimate acond."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,621,inal double acond;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,622,f (lqnorm <= cgnorm) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,623,cond = gmax / gmin;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,624, else {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,625,"cond = gmax / FastMath.min(gmin, FastMath.abs(diag));"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,627,f (acond * MACH_PREC >= 0.1) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,628,hrow new IllConditionedOperatorException(acond);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,630,f (beta1 <= epsx) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,632, x has converged to an eigenvector of A corresponding to the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,633, eigenvalue shift.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,635,hrow new SingularOperatorException();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,637,asConverged = (cgnorm <= epsx) || (cgnorm <= epsr);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,641,** The cubic root of {@link #MACH_PREC}. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,642,rivate static final double CBRT_MACH_PREC;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,644,** The machine precision. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,645,rivate static final double MACH_PREC;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,647,** Key for the exception context. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,648,"rivate static final String OPERATOR = ""operator"";"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,650,** Key for the exception context. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,651,"rivate static final String THRESHOLD = ""threshold"";"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,653,** Key for the exception context. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,654,"rivate static final String VECTOR = ""vector"";"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,656,** Key for the exception context. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,657,"rivate static final String VECTOR1 = ""vector1"";"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,659,** Key for the exception context. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,660,"rivate static final String VECTOR2 = ""vector2"";"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,662,** {@code true} if symmetry of matrix and conditioner must be checked. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,663,rivate final boolean check;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,666, The value of the custom tolerance &delta; for the default stopping
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,667, criterion.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,669,rivate final double delta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,672," Creates a new instance of this class, with <a href=""#stopcrit"">default"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,673, stopping criterion</a>.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,675, @param maxIterations Maximum number of iterations.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,676, @param delta &delta; parameter for the default stopping criterion.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,677, @param check {@code true} if self-adjointedness of both matrix and
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,678, preconditioner should be checked. This entails an extra matrix-vector
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,679, product at each iteration.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,681,"ublic SymmLQ(final int maxIterations, final double delta,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,682,inal boolean check) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,683,uper(maxIterations);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,684,his.delta = delta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,685,his.check = check;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,689," Creates a new instance of this class, with <a href=""#stopcrit"">default"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,690, stopping criterion</a> and custom iteration manager.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,692, @param manager Custom iteration manager.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,693, @param delta &delta; parameter for the default stopping criterion.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,694, @param check {@code true} if self-adjointedness of both matrix and
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,695, preconditioner should be checked. This entails an extra matrix-vector
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,696, product at each iteration.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,698,"ublic SymmLQ(final IterationManager manager, final double delta,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,699,inal boolean check) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,700,uper(manager);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,701,his.delta = delta;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,702,his.check = check;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,705,tatic {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,706,ACH_PREC = Math.ulp(1.);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,707,BRT_MACH_PREC = Math.cbrt(MACH_PREC);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,711," Performs a symmetry check on the specified linear operator, and throws an"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,712," exception in case this check fails. Given a linear operator L, and a"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,713," vector x, this method checks that x' L y = y' L x (within a given"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,714," accuracy), where y = L x."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,716, @param l The linear operator L.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,717, @param x The candidate vector x.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,718, @param y The candidate vector y = L x.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,719, @param z The vector z = L y.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,720, @throws NonSelfAdjointOperatorException when the test fails.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,722,"rivate static void checkSymmetry(final RealLinearOperator l,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,723,"inal RealVector x, final RealVector y,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,724,inal RealVector z)
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,725,hrows NonSelfAdjointOperatorException {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,726,inal double s = y.dotProduct(y);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,727,inal double t = x.dotProduct(z);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,728,inal double epsa = (s + MACH_PREC) * CBRT_MACH_PREC;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,729,f (FastMath.abs(s - t) > epsa) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,730,inal NonSelfAdjointOperatorException e;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,731, = new NonSelfAdjointOperatorException();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,732,inal ExceptionContext context = e.getContext();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,733,"ontext.setValue(OPERATOR, l);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,734,"ontext.setValue(VECTOR1, x);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,735,"ontext.setValue(VECTOR2, y);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,736,"ontext.setValue(THRESHOLD, Double.valueOf(epsa));"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,737,hrow e;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,742," A BLAS-like function, for the operation z &larr; a &middot; x + b"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,743, &middot; y + z. This is for internal use only: no dimension checks are
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,744, provided.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,746, @param a The scalar by which {@code x} is to be multiplied.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,747, @param x The first vector to be added to {@code z}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,748, @param b The scalar by which {@code y} is to be multiplied.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,749, @param y The second vector to be added to {@code z}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,750, @param z The vector to be incremented.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,752,"rivate static void daxpbypz(final double a, final RealVector x,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,753,"inal double b, final RealVector y,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,754,inal RealVector z) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,755,inal int n = z.getDimension();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,756,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,757,inal double zi;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,758,i = a * x.getEntry(i) + b * y.getEntry(i) + z.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,759,".setEntry(i, zi);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,764," A clone of the BLAS {@code DAXPY} function, which carries out the"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,765, operation y &larr; a &middot; x + y. This is for internal use only: no
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,766, dimension checks are provided.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,768, @param a The scalar by which {@code x} is to be multiplied.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,769, @param x The vector to be added to {@code y}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,770, @param y The vector to be incremented.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,772,"rivate static void daxpy(final double a, final RealVector x,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,773,inal RealVector y) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,774,inal int n = x.getDimension();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,775,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,776,".setEntry(i, a * x.getEntry(i) + y.getEntry(i));"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,781, Throws a new {@link NonPositiveDefiniteOperatorException} with
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,782, appropriate context.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,784, @param l The offending linear operator.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,785, @param v The offending vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,786, @throws NonPositiveDefiniteOperatorException in any circumstances.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,788,"rivate static void throwNPDLOException(final RealLinearOperator l,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,789,inal RealVector v)
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,790,hrows NonPositiveDefiniteOperatorException {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,791,inal NonPositiveDefiniteOperatorException e;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,792, = new NonPositiveDefiniteOperatorException();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,793,inal ExceptionContext context = e.getContext();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,794,"ontext.setValue(OPERATOR, l);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,795,"ontext.setValue(VECTOR, v);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,796,hrow e;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,800," Returns {@code true} if symmetry of the matrix, and symmetry as well as"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,801, positive definiteness of the preconditioner should be checked.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,803, @return {@code true} if the tests are to be performed.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,805,ublic final boolean getCheck() {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,806,eturn check;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,810, Returns an estimate of the solution to the linear system A &middot; x =
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,811, b.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,813, @param a Linear operator A of the system.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,814, @param m Preconditioner (can be {@code null}).
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,815, @param b Right-hand side vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,816, @return A new vector containing the solution.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,817, @throws NullArgumentException if one of the parameters is {@code null}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,818, @throws NonSquareOperatorException if {@code a} or {@code m} is not
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,819, square.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,820," @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,821, have dimensions inconsistent with {@code a}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,822, @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,823," {@code true}, and {@code a} or {@code m} is not self-adjoint."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,824, @throws NonPositiveDefiniteOperatorException if {@code m} is not positive
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,825, definite.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,826, @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,827," @throws MaxCountExceededException at exhaustion of the iteration count,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,828, unless a custom {@link MaxCountExceededCallback callback} has been set at
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,829, construction.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,831,Override
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,832,"ublic RealVector solve(final RealLinearOperator a,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,833,"inal InvertibleRealLinearOperator m,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,834,inal RealVector b)
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,835,"hrows NullArgumentException, NonSquareOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,836,"imensionMismatchException, NonSelfAdjointOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,837,"onPositiveDefiniteOperatorException, IllConditionedOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,838,axCountExceededException {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,839,athUtils.checkNotNull(a);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,840,inal RealVector x = new ArrayRealVector(a.getColumnDimension());
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,841,"eturn solveInPlace(a, m, b, x, false, 0.);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,845, Returns an estimate of the solution to the linear system (A - shift
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,846, &middot; I) &middot; x = b.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,847, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,848, If the solution x is expected to contain a large multiple of {@code b}
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,849," (as in Rayleigh-quotient iteration), then better precision may be"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,850, achieved with {@code goodb} set to {@code true}; this however requires an
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,851, extra call to the preconditioner.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,852, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,853, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,854, {@code shift} should be zero if the system A &middot; x = b is to be
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,855," solved. Otherwise, it could be an approximation to an eigenvalue of A,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,856, such as the Rayleigh quotient b<sup>T</sup> &middot; A &middot; b /
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,857, (b<sup>T</sup> &middot; b) corresponding to the vector b. If b is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,858, sufficiently like an eigenvector corresponding to an eigenvalue near
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,859," shift, then the computed x may have very large components. When"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,860," normalized, x may be closer to an eigenvector than b."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,861, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,863, @param a Linear operator A of the system.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,864, @param m Preconditioner (can be {@code null}).
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,865, @param b Right-hand side vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,866," @param goodb Usually {@code false}, except if {@code x} is expected to"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,867, contain a large multiple of {@code b}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,868, @param shift The amount to be subtracted to all diagonal elements of A.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,869, @return A reference to {@code x} (shallow copy).
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,870, @throws NullArgumentException if one of the parameters is {@code null}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,871, @throws NonSquareOperatorException if {@code a} or {@code m} is not
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,872, square.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,873, @throws DimensionMismatchException if {@code m} or {@code b} have
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,874, dimensions inconsistent with {@code a}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,875, @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,876," {@code true}, and {@code a} or {@code m} is not self-adjoint."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,877, @throws NonPositiveDefiniteOperatorException if {@code m} is not positive
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,878, definite.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,879, @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,880," @throws MaxCountExceededException at exhaustion of the iteration count,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,881, unless a custom {@link MaxCountExceededCallback callback} has been set at
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,882, construction.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,884,"ublic RealVector solve(final RealLinearOperator a,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,885,"inal InvertibleRealLinearOperator m,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,886,"inal RealVector b, final boolean goodb,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,887,inal double shift)
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,888,"hrows NullArgumentException, NonSquareOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,889,"imensionMismatchException, NonSelfAdjointOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,890,"onPositiveDefiniteOperatorException, IllConditionedOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,891,axCountExceededException {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,892,athUtils.checkNotNull(a);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,893,inal RealVector x = new ArrayRealVector(a.getColumnDimension());
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,894,"eturn solveInPlace(a, m, b, x, goodb, shift);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,898, Returns an estimate of the solution to the linear system A &middot; x =
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,899, b.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,901, @param a Linear operator A of the system.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,902, @param m Preconditioner (can be {@code null}).
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,903, @param b Right-hand side vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,904, @param x Not meaningful in this implementation. Should not be considered
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,905, as an initial guess.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,906, @return A new vector containing the solution.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,907, @throws NullArgumentException if one of the parameters is {@code null}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,908, @throws NonSquareOperatorException if {@code a} or {@code m} is not
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,909, square.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,910," @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,911, have dimensions inconsistent with {@code a}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,912, @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,913," {@code true}, and {@code a} or {@code m} is not self-adjoint."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,914, @throws NonPositiveDefiniteOperatorException if {@code m} is not positive
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,915, definite.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,916, @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,917," @throws MaxCountExceededException at exhaustion of the iteration count,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,918, unless a custom {@link MaxCountExceededCallback callback} has been set at
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,919, construction.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,921,Override
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,922,"ublic RealVector solve(final RealLinearOperator a,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,923,"inal InvertibleRealLinearOperator m,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,924,"inal RealVector b, final RealVector x)"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,925,"hrows NullArgumentException, NonSquareOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,926,"imensionMismatchException, NonSelfAdjointOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,927,"onPositiveDefiniteOperatorException, IllConditionedOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,928,axCountExceededException {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,929,athUtils.checkNotNull(x);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,930,"eturn solveInPlace(a, m, b, x.copy(), false, 0.);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,934, Returns an estimate of the solution to the linear system A &middot; x =
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,935, b.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,937, @param a Linear operator A of the system.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,938, @param b Right-hand side vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,939, @return A new vector containing the solution.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,940, @throws NullArgumentException if one of the parameters is {@code null}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,941, @throws NonSquareOperatorException if {@code a} is not square.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,942, @throws DimensionMismatchException if {@code b} has dimensions
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,943, inconsistent with {@code a}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,944, @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,945," {@code true}, and {@code a} is not self-adjoint."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,946, @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,947," @throws MaxCountExceededException at exhaustion of the iteration count,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,948, unless a custom {@link MaxCountExceededCallback callback} has been set at
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,949, construction.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,951,Override
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,952,"ublic RealVector solve(final RealLinearOperator a, final RealVector b)"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,953,"hrows NullArgumentException, NonSquareOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,954,"imensionMismatchException, NonSelfAdjointOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,955,"llConditionedOperatorException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,956,athUtils.checkNotNull(a);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,957,inal RealVector x = new ArrayRealVector(a.getColumnDimension());
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,958,.set(0.);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,959,"eturn solveInPlace(a, null, b, x, false, 0.);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,963, Returns the solution to the system (A - shift &middot; I) &middot; x = b.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,964, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,965, If the solution x is expected to contain a large multiple of {@code b}
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,966," (as in Rayleigh-quotient iteration), then better precision may be"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,967, achieved with {@code goodb} set to {@code true}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,968, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,969, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,970, {@code shift} should be zero if the system A &middot; x = b is to be
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,971," solved. Otherwise, it could be an approximation to an eigenvalue of A,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,972, such as the Rayleigh quotient b<sup>T</sup> &middot; A &middot; b /
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,973, (b<sup>T</sup> &middot; b) corresponding to the vector b. If b is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,974, sufficiently like an eigenvector corresponding to an eigenvalue near
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,975," shift, then the computed x may have very large components. When"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,976," normalized, x may be closer to an eigenvector than b."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,977, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,979, @param a Linear operator A of the system.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,980, @param b Right-hand side vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,981," @param goodb Usually {@code false}, except if {@code x} is expected to"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,982, contain a large multiple of {@code b}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,983, @param shift The amount to be subtracted to all diagonal elements of A.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,984, @return a reference to {@code x}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,985, @throws NullArgumentException if one of the parameters is {@code null}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,986, @throws NonSquareOperatorException if {@code a} is not square.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,987, @throws DimensionMismatchException if {@code b} has dimensions
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,988, inconsistent with {@code a}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,989, @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,990," {@code true}, and {@code a} is not self-adjoint."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,991, @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,992," @throws MaxCountExceededException at exhaustion of the iteration count,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,993, unless a custom {@link MaxCountExceededCallback callback} has been set at
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,994, construction.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,996,"ublic RealVector solve(final RealLinearOperator a, final RealVector b,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,997,"inal boolean goodb, final double shift)"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,998,"hrows NullArgumentException, NonSquareOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,999,"imensionMismatchException, NonSelfAdjointOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1000,"llConditionedOperatorException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1001,athUtils.checkNotNull(a);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1002,inal RealVector x = new ArrayRealVector(a.getColumnDimension());
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1003,"eturn solveInPlace(a, null, b, x, goodb, shift);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1007, Returns an estimate of the solution to the linear system A &middot; x =
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1008, b.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1010, @param a Linear operator A of the system.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1011, @param b Right-hand side vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1012, @param x Not meaningful in this implementation. Should not be considered
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1013, as an initial guess.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1014, @return A new vector containing the solution.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1015, @throws NullArgumentException if one of the parameters is {@code null}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1016, @throws NonSquareOperatorException if {@code a} is not square.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1017, @throws DimensionMismatchException if {@code b} or {@code x} have
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1018, dimensions inconsistent with {@code a}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1019, @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1020," {@code true}, and {@code a} is not self-adjoint."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1021, @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1022," @throws MaxCountExceededException at exhaustion of the iteration count,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1023, unless a custom {@link MaxCountExceededCallback callback} has been set at
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1024, construction.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1026,Override
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1027,"ublic RealVector solve(final RealLinearOperator a, final RealVector b,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1028,inal RealVector x)
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1029,"hrows NullArgumentException, NonSquareOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1030,"imensionMismatchException, NonSelfAdjointOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1031,"llConditionedOperatorException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1032,athUtils.checkNotNull(x);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1033,"eturn solveInPlace(a, null, b, x.copy(), false, 0.);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1037, Returns an estimate of the solution to the linear system A &middot; x =
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1038, b. The solution is computed in-place.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1040, @param a Linear operator A of the system.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1041, @param m Preconditioner (can be {@code null}).
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1042, @param b Right-hand side vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1043, @param x Vector to be updated with the solution. {@code x} should not be
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1044," considered as an initial guess, as it is set to 0 in the initialization"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1045, phase.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1046, @return A reference to {@code x} (shallow copy) updated with the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1047, solution.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1048, @throws NullArgumentException if one of the parameters is {@code null}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1049, @throws NonSquareOperatorException if {@code a} or {@code m} is not
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1050, square.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1051," @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1052, have dimensions inconsistent with {@code a}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1053, @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1054," {@code true}, and {@code a} or {@code m} is not self-adjoint."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1055, @throws NonPositiveDefiniteOperatorException if {@code m} is not positive
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1056, definite.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1057, @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1058," @throws MaxCountExceededException at exhaustion of the iteration count,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1059, unless a custom {@link MaxCountExceededCallback callback} has been set at
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1060, construction.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1062,Override
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1063,"ublic RealVector solveInPlace(final RealLinearOperator a,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1064,"inal InvertibleRealLinearOperator m,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1065,"inal RealVector b, final RealVector x)"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1066,"hrows NullArgumentException, NonSquareOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1067,"imensionMismatchException, NonSelfAdjointOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1068,"onPositiveDefiniteOperatorException, IllConditionedOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1069,axCountExceededException {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1070,"eturn solveInPlace(a, m, b, x, false, 0.);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1074, Returns an estimate of the solution to the linear system (A - shift
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1075, &middot; I) &middot; x = b. The solution is computed in-place.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1076, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1077, If the solution x is expected to contain a large multiple of {@code b}
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1078," (as in Rayleigh-quotient iteration), then better precision may be"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1079, achieved with {@code goodb} set to {@code true}; this however requires an
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1080, extra call to the preconditioner.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1081, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1082, <p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1083, {@code shift} should be zero if the system A &middot; x = b is to be
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1084," solved. Otherwise, it could be an approximation to an eigenvalue of A,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1085, such as the Rayleigh quotient b<sup>T</sup> &middot; A &middot; b /
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1086, (b<sup>T</sup> &middot; b) corresponding to the vector b. If b is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1087, sufficiently like an eigenvector corresponding to an eigenvalue near
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1088," shift, then the computed x may have very large components. When"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1089," normalized, x may be closer to an eigenvector than b."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1090, </p>
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1092, @param a Linear operator A of the system.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1093, @param m Preconditioner (can be {@code null}).
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1094, @param b Right-hand side vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1095, @param x Vector to be updated with the solution. {@code x} should not be
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1096," considered as an initial guess, as it is set to 0 in the initialization"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1097, phase.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1098," @param goodb Usually {@code false}, except if {@code x} is expected to"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1099, contain a large multiple of {@code b}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1100, @param shift The amount to be subtracted to all diagonal elements of A.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1101, @return A reference to {@code x} (shallow copy).
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1102, @throws NullArgumentException if one of the parameters is {@code null}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1103, @throws NonSquareOperatorException if {@code a} or {@code m} is not
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1104, square.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1105," @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1106, have dimensions inconsistent with {@code a}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1107, @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1108," {@code true}, and {@code a} or {@code m} is not self-adjoint."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1109, @throws NonPositiveDefiniteOperatorException if {@code m} is not positive
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1110, definite.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1111, @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1112," @throws MaxCountExceededException at exhaustion of the iteration count,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1113, unless a custom {@link MaxCountExceededCallback callback} has been set at
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1114, construction.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1116,"ublic RealVector solveInPlace(final RealLinearOperator a,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1117,"inal InvertibleRealLinearOperator m,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1118,"inal RealVector b, final RealVector x,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1119,"inal boolean goodb, final double shift)"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1120,"hrows NullArgumentException, NonSquareOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1121,"imensionMismatchException, NonSelfAdjointOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1122,"onPositiveDefiniteOperatorException, IllConditionedOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1123,axCountExceededException {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1124,"heckParameters(a, m, b, x);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1126,inal IterationManager manager = getIterationManager();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1127,* Initialization counts as an iteration. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1128,anager.resetIterationCount();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1129,anager.incrementIterationCount();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1131,"inal State state = new State(a, m, b, x, goodb, shift);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1132,inal IterativeLinearSolverEvent event = createEvent(state);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1133,f (state.beta1 == 0.) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1134,"* If b = 0 exactly, stop with x = 0. */"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1135,anager.fireTerminationEvent(event);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1136,eturn x;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1138,* Cause termination if beta is essentially zero. */
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1139,inal boolean earlyStop;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1140,arlyStop = (state.beta < MACH_PREC) || (state.hasConverged);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1141,anager.fireInitializationEvent(event);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1142,f (!earlyStop) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1143,o {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1144,anager.incrementIterationCount();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1145,anager.fireIterationStartedEvent(event);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1146,tate.update();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1147,anager.fireIterationPerformedEvent(event);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1148, while (!state.hasConverged);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1150,tate.refine(x);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1152," The following two lines are a hack because state.x is now refined,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1153, so further calls to state.refine() (via event.getSolution()) should
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1154, *not* return an altered value of state.x.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1156,tate.bstep = 0.;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1157,tate.gammaZeta = 0.;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1158,anager.fireTerminationEvent(event);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1159,eturn x;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1163, Returns an estimate of the solution to the linear system A &middot; x =
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1164, b. The solution is computed in-place.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1166, @param a Linear operator A of the system.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1167, @param b Right-hand side vector.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1168, @param x Vector to be updated with the solution. {@code x} should not be
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1169," considered as an initial guess, as it is set to 0 in the initialization"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1170, phase.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1171, @return A reference to {@code x} (shallow copy) updated with the
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1172, solution.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1173, @throws NullArgumentException if one of the parameters is {@code null}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1174, @throws NonSquareOperatorException if {@code a} or {@code m} is not
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1175, square.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1176," @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1177, have dimensions inconsistent with {@code a}.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1178, @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1179," {@code true}, and {@code a} or {@code m} is not self-adjoint."
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1180, @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1181," @throws MaxCountExceededException at exhaustion of the iteration count,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1182, unless a custom {@link MaxCountExceededCallback callback} has been set at
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1183, construction.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1185,Override
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1186,"ublic RealVector solveInPlace(final RealLinearOperator a,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1187,"inal RealVector b, final RealVector x)"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1188,"hrows NullArgumentException, NonSquareOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1189,"imensionMismatchException, NonSelfAdjointOperatorException,"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1190,"llConditionedOperatorException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1191,"eturn solveInPlace(a, null, b, x, false, 0.);"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1195, Creates the event to be fired during the solution process. Unmodifiable
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1196," views of the RHS vector, and the current estimate of the solution are"
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1197, returned by the created event.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1199, @param state Reference to the current state of this algorithm.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1200, @return The newly created event.
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1202,rivate IterativeLinearSolverEvent createEvent(final State state) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1203,inal RealVector bb = RealVector.unmodifiableRealVector(state.b);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1205,inal IterativeLinearSolverEvent event;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1206,vent = new IterativeLinearSolverEvent(this) {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1208,Override
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1209,ublic RealVector getRightHandSideVector() {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1210,eturn bb;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1213,Override
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1214,ublic RealVector getSolution() {
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1215,inal int n = state.x.getDimension();
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1216,inal RealVector x = new ArrayRealVector(n);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1217,tate.refine(x);
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1218,eturn x;
False,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1221,eturn event;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,20,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,21,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,22,import org.apache.commons.math.exception.util.ExceptionContext;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,23,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,24,import org.apache.commons.math.util.IterationManager;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,25,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,28,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,29,* Implementation of the SYMMLQ iterative linear solver proposed by <a
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,30,"* href=""#PAIG1975"">Paige and Saunders (1975)</a>. This implementation is"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,31,"* largely based on the FORTRAN code by Pr. Michael A. Saunders, available <a"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,32,"* href=""http://www.stanford.edu/group/SOL/software/symmlq/f77/"">here</a>."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,33,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,34,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,35,* SYMMLQ is designed to solve the system of linear equations A &middot; x = b
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,36,* where A is an n &times; n self-adjoint linear operator (defined as a
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,37,"* {@link RealLinearOperator}), and b is a given vector. The operator A is not"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,38,"* required to be positive definite. If A is known to be definite, the method of"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,39,"* conjugate gradients might be preferred, since it will require about the same"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,40,* number of iterations as SYMMLQ but slightly less work per iteration.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,41,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,42,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,43,"* SYMMLQ is designed to solve the system (A - shift &middot; I) &middot; x = b,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,44,"* where shift is a specified scalar value. If shift and b are suitably chosen,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,45,"* the computed vector x may approximate an (unnormalized) eigenvector of A, as"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,46,* in the methods of inverse iteration and/or Rayleigh-quotient iteration.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,47,"* Again, the linear operator (A - shift &middot; I) need not be positive"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,48,* definite (but <em>must</em> be self-adjoint). The work per iteration is very
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,49,* slightly less if shift = 0.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,50,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,51,* <h3>Peconditioning</h3>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,52,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,53,* Preconditioning may reduce the number of iterations required. The solver is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,54,* provided with a positive definite preconditioner M = C &middot; C<sup>T</sup>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,55,"* that is known to approximate (A - shift &middot; I) in some sense, while"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,56,* systems of the form M &middot; y = x can be solved efficiently. Then SYMMLQ
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,57,* will implicitly solve the system of equations P &middot; (A - shift &middot;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,58,"* I) &middot; P<sup>T</sup> &middot; xhat = P &middot; b, i.e. Ahat &middot;"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,59,"* xhat = bhat, where P = C<sup>-1</sup>, Ahat = P &middot; (A - shift &middot;"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,60,"* I) &middot; P<sup>T</sup>, bhat = P &middot; b, and return the solution x ="
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,61,* P<sup>T</sup> &middot; xhat. The associated residual is rhat = bhat - Ahat
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,62,* &middot; xhat = P &middot; [b - (A - shift &middot; I) &middot; x] = P
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,63,* &middot; r.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,64,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,65,"* <h3><a id=""stopcrit"">Default stopping criterion</a></h3>"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,66,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,67,* A default stopping criterion is implemented. The iterations stop when || rhat
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,68,"* || &le; &delta; || Ahat || || xhat ||, where xhat is the current estimate of"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,69,"* the solution of the transformed system, rhat the current estimate of the"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,70,"* corresponding residual, and &delta; a user-specified tolerance."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,71,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,72,* <h3>Iteration count</h3>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,73,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,74,"* In the present context, an iteration should be understood as one evaluation"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,75,* of the matrix-vector product A &middot; x. The initialization phase therefore
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,76,"* counts as one iteration. If the user requires checks on the symmetry of A,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,77,* this entails one further matrix-vector product by iteration. This further
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,78,"* product is <em>not</em> accounted for in the iteration count. In other words,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,79,"* the number of iterations required to reach convergence will be identical,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,80,* whether checks have been required or not.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,81,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,82,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,83,* The present definition of the iteration count differs from that adopted in
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,84,"* the original FOTRAN code, where the initialization phase was <em>not</em>"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,85,* taken into account.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,86,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,87,"* <h3><a id=""context"">Exception context</a></h3>"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,88,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,89,"* Besides standard {@link DimensionMismatchException}, this class might throw"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,90,* {@link NonSelfAdjointOperatorException} if the linear operator or the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,91,"* preconditioner are not symmetric. In this case, the {@link ExceptionContext}"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,92,* provides more information
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,93,* <ul>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,94,"* <li>key {@code ""operator""} points to the offending linear operator, say L,</li>"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,95,"* <li>key {@code ""vector1""} points to the first offending vector, say x,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,96,"* <li>key {@code ""vector2""} points to the second offending vector, say y, such"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,97,* that x<sup>T</sup> &middot; L &middot; y &ne; y<sup>T</sup> &middot; L
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,98,* &middot; x (within a certain accuracy).</li>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,99,* </ul>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,100,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,101,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,102,* {@link NonPositiveDefiniteOperatorException} might also be thrown in case the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,103,* preconditioner is not positive definite. The relevant keys to the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,104,* {@link ExceptionContext} are
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,105,* <ul>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,106,"* <li>key {@code ""operator""}, which points to the offending linear operator,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,107,"* say L,</li>"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,108,"* <li>key {@code ""vector""}, which points to the offending vector, say x, such"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,109,* that x<sup>T</sup> &middot; L &middot; x < 0.</li>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,110,* </ul>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,111,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,112,* <h3>References</h3>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,113,* <dl>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,114,"* <dt><a id=""PAIG1975"">Paige and Saunders (1975)</a></dt>"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,115,"* <dd>C. C. Paige and M. A. Saunders, <a"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,116,"* href=""http://www.stanford.edu/group/SOL/software/symmlq/PS75.pdf""><em>"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,117,"* Solution of Sparse Indefinite Systems of Linear Equations</em></a>, SIAM"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,118,"* Journal on Numerical Analysis 12(4): 617-629, 1975</dd>"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,119,* </dl>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,121,* @version $Id$
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,122,* @since 3.0
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,124,public class SymmLQ
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,125,extends PreconditionedIterativeLinearSolver {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,128,* IMPLEMENTATION NOTES
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,130,* The implementation follows as closely as possible the notations of Paige
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,131,* and Saunders (1975). Attention must be paid to the fact that some
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,132,* quantities which are relevant to iteration k can only be computed in
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,133,"* iteration (k+1). Therefore, minute attention must be paid to the index of"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,134,* each state variable of this algorithm.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,136,* 1. Preconditioning
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,138,* The Lanczos iterations associated with Ahat and bhat read
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,139,*   beta[1] = |P . b|
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,140,*   v[1] = P.b / beta[1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,141,*   beta[k+1] * v[k+1] = Ahat * v[k] - alpha[k] * v[k] - beta[k] * v[k-1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,142,*                      = P * (A - shift * I) * P' * v[k] - alpha[k] * v[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,143,*                        - beta[k] * v[k-1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,144,"* Multiplying both sides by P', we get"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,145,*   beta[k+1] * (P' * v)[k+1] = M^(-1) * (A - shift * I) * (P' * v)[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,146,*                               - alpha[k] * (P' * v)[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,147,"*                               - beta[k] * (P' * v[k-1]),"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,148,* and
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,149,*   alpha[k+1] = v[k+1]' * Ahat * v[k+1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,150,*              = v[k+1]' * P * (A - shift * I) * P' * v[k+1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,151,*              = (P' * v)[k+1]' * (A - shift * I) * (P' * v)[k+1].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,153,"* In other words, the Lanczos iterations are unchanged, except for the fact"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,154,* that we really compute (P' * v) instead of v. It can easily be checked
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,155,* that all other formulas are unchanged. It must be noted that P is never
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,156,"* explicitly used, only matrix-vector products involving M^(-1) are"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,157,* invoked.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,159,* 2. Accounting for the shift parameter
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,161,"* Is trivial: each time A.operate(x) is invoked, one must subtract shift * x"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,162,* to the result.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,164,* 3. Accounting for the goodb flag
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,166,"* When goodb is set to true, the component of xL along b is computed"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,167,"* separately. From Page and Saunders (1975), equation (5.9), we have"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,168,"*   wbar[k+1] = s[k] * wbar[k] - c[k] * v[k+1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,169,*   wbar[1] = v[1].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,170,"* Introducing wbar2[k] = wbar[k] - s[1] * ... * s[k-1] * v[1], it can"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,171,* easily be verified by induction that what follows the same recursive
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,172,* relation
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,173,"*   wbar2[k+1] = s[k] * wbar2[k] - c[k] * v[k+1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,174,"*   wbar2[1] = 0,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,175,* and we then have
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,176,*   w[k] = c[k] * wbar2[k] + s[k] * v[k+1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,177,*          + s[1] * ... * s[k-1] * c[k] * v[1].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,178,"* Introducing w2[k] = w[k] - s[1] * ... * s[k-1] * c[k] * v[1], we find,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,179,* from (5.10)
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,180,*   xL[k] = zeta[1] * w[1] + ... + zeta[k] * w[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,181,*         = zeta[1] * w2[1] + ... + zeta[k] * w2[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,182,*           + (s[1] * c[2] * zeta[2] + ...
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,183,*           + s[1] * ... * s[k-1] * c[k] * zeta[k]) * v[1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,184,"*         = xL2[k] + bstep[k] * v[1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,185,* where xL2[k] is defined by
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,186,"*   xL2[0] = 0,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,187,"*   xL2[k+1] = xL2[k] + zeta[k+1] * w2[k+1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,188,* and bstep is defined by
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,189,"*   bstep[1] = 0,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,190,*   bstep[k] = bstep[k-1] + s[1] * ... * s[k-1] * c[k] * zeta[k].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,191,"* We also have, from (5.11)"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,192,*   xC[k] = xL[k-1] + zbar[k] * wbar[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,193,*         = xL2[k-1] + zbar[k] * wbar2[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,194,*           + (bstep[k-1] + s[1] * ... * s[k-1] * zbar[k]) * v[1].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,198,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,199,* A simple container holding the non-final variables used in the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,200,* iterations. Making the current state of the solver visible from the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,201,"* outside is necessary, because during the iterations, {@code x} does not"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,202,"* <em>exactly</em> hold the current estimate of the solution. Indeed,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,203,* {@code x} needs in general to be moved from the LQ point to the CG point.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,204,"* Besides, additional upudates must be carried out in case {@code goodb} is"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,205,* set to {@code true}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,206,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,207,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,208,"* In all subsequent comments, the description of the state variables refer"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,209,"* to their value after a call to {@link #update()}. In these comments, k is"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,210,* the current number of evaluations of matrix-vector products.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,211,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,213,private class State {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,215,/** Reference to the linear operator. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,216,private final RealLinearOperator a;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,218,/** Reference to the right-hand side vector. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,219,private final RealVector b;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,221,/** The value of beta[k+1]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,222,private double beta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,224,/** The value of beta[1]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,225,private double beta1;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,227,/** The value of bstep[k-1]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,228,private double bstep;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,230,/** The estimate of the norm of P * rC[k]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,231,private double cgnorm;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,233,/** The value of dbar[k+1] = -beta[k+1] * c[k-1]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,234,private double dbar;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,237,* The value of gamma[k] * zeta[k]. Was called {@code rhs1} in the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,238,* initial code.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,240,private double gammaZeta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,242,/** The value of gbar[k]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,243,private double gbar;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,245,"/** The value of max(|alpha[1]|, gamma[1], ..., gamma[k-1]). */"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,246,private double gmax;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,248,"/** The value of min(|alpha[1]|, gamma[1], ..., gamma[k-1]). */"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,249,private double gmin;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,251,/** Copy of the {@code goodb} parameter. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,252,private final boolean goodb;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,254,/** {@code true} if the default convergence criterion is verified. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,255,private boolean hasConverged;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,257,/** The estimate of the norm of P * rL[k-1]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,258,private double lqnorm;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,260,/** Reference to the preconditioner. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,261,private final InvertibleRealLinearOperator m;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,264,* The value of (-eps[k+1] * zeta[k-1]). Was called {@code rhs2} in the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,265,* initial code.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,267,private double minusEpsZeta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,269,/** The value of M^(-1) * b. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,270,private final RealVector mSolveB;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,272,/** The value of beta[k]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,273,private double oldb;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,275,/** The value of beta[k] * M * P' * v[k]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,276,private RealVector r1;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,278,/** The value of beta[k+1] * M * P' * v[k+1]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,279,private RealVector r2;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,281,/** Copy of the {@code shift} parameter. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,282,private final double shift;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,284,/** The value of s[1] * ... * s[k-1]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,285,private double snprod;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,288,"* An estimate of the square of the norm of A * V[k], based on Paige and"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,289,"* Saunders (1975), equation (3.3)."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,291,private double tnorm;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,294,* The value of P' * wbar[k] or P' * (wbar[k] - s[1] * ... * s[k-1] *
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,295,* v[1]) if {@code goodb} is {@code true}. Was called {@code w} in the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,296,* initial code.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,298,private RealVector wbar;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,301,* A reference to the vector to be updated with the solution. Contains
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,302,"* the value of xL[k-1] if {@code goodb} is {@code false}, (xL[k-1] -"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,303,* bstep[k-1] * v[1]) otherwise.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,305,private final RealVector x;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,307,/** The value of beta[k+1] * P' * v[k+1]. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,308,private RealVector y;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,310,/** The value of zeta[1]^2 + ... + zeta[k-1]^2. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,311,private double ynorm2;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,314,* Creates and inits to k = 1 a new instance of this class.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,316,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,317,* @param m Preconditioner (can be {@code null}).
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,318,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,319,* @param x Vector to be updated with the solution. {@code x} should not
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,320,"* be considered as an initial guess, as it is set to 0 in the"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,321,* initialization phase.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,322,"* @param goodb Usually {@code false}, except if {@code x} is expected"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,323,* to contain a large multiple of {@code b}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,324,* @param shift The amount to be subtracted to all diagonal elements of
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,325,* A.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,327,"public State(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,328,"final InvertibleRealLinearOperator m, final RealVector b,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,329,"final RealVector x, final boolean goodb, final double shift) {"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,330,this.a = a;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,331,this.m = m;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,332,this.b = b;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,333,this.x = x;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,334,this.goodb = goodb;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,335,this.shift = shift;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,336,this.mSolveB = m == null ? b : m.solve(b);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,337,this.hasConverged = false;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,338,init();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,342,"* Move to the CG point if it seems better. In this version of SYMMLQ,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,343,"* the convergence tests involve only cgnorm, so we're unlikely to stop"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,344,"* at an LQ point, except if the iteration limit interferes."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,346,* @param xRefined Vector to be updated with the refined value of x.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,348,public void refine(final RealVector xRefined) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,349,final int n = this.x.getDimension();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,350,if (lqnorm < cgnorm) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,351,if (!goodb) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,352,"xRefined.setSubVector(0, this.x);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,353,} else {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,354,final double step = bstep / beta1;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,355,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,356,final double bi = mSolveB.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,357,final double xi = this.x.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,358,"xRefined.setEntry(i, xi + step * bi);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,361,} else {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,362,final double anorm = FastMath.sqrt(tnorm);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,363,final double diag = gbar == 0. ? anorm * MACH_PREC : gbar;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,364,final double zbar = gammaZeta / diag;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,365,final double step = (bstep + snprod * zbar) / beta1;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,366,// ynorm = FastMath.sqrt(ynorm2 + zbar * zbar);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,367,if (!goodb) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,368,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,369,final double xi = this.x.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,370,final double wi = wbar.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,371,"xRefined.setEntry(i, xi + zbar * wi);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,373,} else {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,374,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,375,final double xi = this.x.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,376,final double wi = wbar.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,377,final double bi = mSolveB.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,378,"xRefined.setEntry(i, xi + zbar * wi + step * bi);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,385,"* Performs the initial phase of the SYMMLQ algorithm. On return, the"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,386,* value of the state variables of {@code this} object correspond to k =
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,387,* 1.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,389,private void init() {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,390,this.x.set(0.);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,392,* Set up y for the first Lanczos vector. y and beta1 will be zero
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,393,* if b = 0.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,395,this.r1 = this.b.copy();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,396,this.y = this.m == null ? this.b.copy() : this.m.solve(this.r1);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,397,if ((this.m != null) && check) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,398,"checkSymmetry(this.m, this.r1, this.y, this.m.solve(this.y));"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,401,this.beta1 = this.r1.dotProduct(this.y);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,402,if (this.beta1 < 0.) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,403,"throwNPDLOException(this.m, this.y);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,405,if (this.beta1 == 0.) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,406,"/* If b = 0 exactly, stop with x = 0. */"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,407,return;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,409,this.beta1 = FastMath.sqrt(this.beta1);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,410,/* At this point
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,411,"*   r1 = b,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,412,"*   y = M^(-1) * b,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,413,*   beta1 = beta[1].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,415,final RealVector v = this.y.mapMultiply(1. / this.beta1);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,416,this.y = this.a.operate(v);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,417,if (check) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,418,"checkSymmetry(this.a, v, this.y, this.a.operate(this.y));"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,421,* Set up y for the second Lanczos vector. y and beta will be zero
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,422,* or very small if b is an eigenvector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,424,"daxpy(-this.shift, v, this.y);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,425,final double alpha = v.dotProduct(this.y);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,426,"daxpy(-alpha / this.beta1, this.r1, this.y);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,428,* At this point
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,429,*   alpha = alpha[1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,430,*   y     = beta[2] * M * P' * v[2]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,432,/* Make sure r2 will be orthogonal to the first v. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,433,final double vty = v.dotProduct(this.y);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,434,final double vtv = v.dotProduct(v);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,435,"daxpy(-vty / vtv, v, this.y);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,436,this.r2 = this.y.copy();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,437,if (this.m != null) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,438,this.y = this.m.solve(this.r2);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,440,this.oldb = this.beta1;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,441,this.beta = this.r2.dotProduct(this.y);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,442,if (this.beta < 0.) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,443,"throwNPDLOException(this.m, this.y);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,445,this.beta = FastMath.sqrt(this.beta);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,447,* At this point
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,448,*   oldb = beta[1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,449,*   beta = beta[2]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,450,*   y  = beta[2] * P' * v[2]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,451,*   r2 = beta[2] * M * P' * v[2]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,453,this.cgnorm = this.beta1;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,454,this.gbar = alpha;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,455,this.dbar = this.beta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,456,this.gammaZeta = this.beta1;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,457,this.minusEpsZeta = 0.;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,458,this.bstep = 0.;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,459,this.snprod = 1.;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,460,this.tnorm = alpha * alpha + this.beta * this.beta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,461,this.ynorm2 = 0.;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,462,this.gmax = FastMath.abs(alpha) + MACH_PREC;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,463,this.gmin = this.gmax;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,465,if (this.goodb) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,466,this.wbar = new ArrayRealVector(this.a.getRowDimension());
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,467,this.wbar.set(0.);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,468,} else {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,469,this.wbar = v;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,471,updateNorms();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,475,* Performs the next iteration of the algorithm. The iteration count
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,476,"* should be incremented prior to calling this method. On return, the"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,477,* value of the state variables of {@code this} object correspond to the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,478,* current iteration count {@code k}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,480,private void update() {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,481,final RealVector v = y.mapMultiply(1. / beta);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,482,y = a.operate(v);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,483,"daxpbypz(-shift, v, -beta / oldb, r1, y);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,484,final double alpha = v.dotProduct(y);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,486,* At this point
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,487,"*   v     = P' * v[k],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,488,"*   y     = (A - shift * I) * P' * v[k] - beta[k] * M * P' * v[k-1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,489,*   alpha = v'[k] * P * (A - shift * I) * P' * v[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,490,*           - beta[k] * v[k]' * P * M * P' * v[k-1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,491,*         = v'[k] * P * (A - shift * I) * P' * v[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,492,*           - beta[k] * v[k]' * v[k-1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,493,*         = alpha[k].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,495,"daxpy(-alpha / beta, r2, y);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,497,* At this point
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,498,*   y = (A - shift * I) * P' * v[k] - alpha[k] * M * P' * v[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,499,*       - beta[k] * M * P' * v[k-1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,500,*     = M * P' * (P * (A - shift * I) * P' * v[k] -alpha[k] * v[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,501,*       - beta[k] * v[k-1])
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,502,"*     = beta[k+1] * M * P' * v[k+1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,503,"* from Paige and Saunders (1975), equation (3.2)."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,505,* WATCH-IT: the two following line work only because y is no longer
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,506,"* updated up to the end of the present iteration, and is"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,507,* reinitialized at the beginning of the next iteration.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,509,r1 = r2;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,510,r2 = y;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,511,if (m != null) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,512,y = m.solve(r2);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,514,oldb = beta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,515,beta = r2.dotProduct(y);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,516,if (beta < 0.) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,517,"throwNPDLOException(m, y);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,519,beta = FastMath.sqrt(beta);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,521,* At this point
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,522,"*   r1 = beta[k] * M * P' * v[k],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,523,"*   r2 = beta[k+1] * M * P' * v[k+1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,524,"*   y  = beta[k+1] * P' * v[k+1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,525,"*   oldb = beta[k],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,526,*   beta = beta[k+1].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,528,tnorm += alpha * alpha + oldb * oldb + beta * beta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,530,* Compute the next plane rotation for Q. See Paige and Saunders
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,531,"* (1975), equation (5.6), with"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,532,"*   gamma = gamma[k-1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,533,"*   c     = c[k-1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,534,*   s     = s[k-1].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,536,final double gamma = FastMath.sqrt(gbar * gbar + oldb * oldb);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,537,final double c = gbar / gamma;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,538,final double s = oldb / gamma;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,540,* The relations
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,541,*   gbar[k] = s[k-1] * (-c[k-2] * beta[k]) - c[k-1] * alpha[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,542,"*           = s[k-1] * dbar[k] - c[k-1] * alpha[k],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,543,"*   delta[k] = c[k-1] * dbar[k] + s[k-1] * alpha[k],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,544,"* are not stated in Paige and Saunders (1975), but can be retrieved"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,545,"* by expanding the (k, k-1) and (k, k) coefficients of the matrix in"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,546,* equation (5.5).
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,548,final double deltak = c * dbar + s * alpha;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,549,gbar = s * dbar - c * alpha;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,550,final double eps = s * beta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,551,dbar = -c * beta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,552,final double zeta = gammaZeta / gamma;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,554,* At this point
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,555,*   gbar   = gbar[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,556,*   deltak = delta[k]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,557,*   eps    = eps[k+1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,558,*   dbar   = dbar[k+1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,559,*   zeta   = zeta[k-1]
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,561,final double zetaC = zeta * c;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,562,final double zetaS = zeta * s;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,563,final int n = x.getDimension();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,564,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,565,final double xi = x.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,566,final double vi = v.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,567,final double wi = wbar.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,568,"x.setEntry(i, xi + wi * zetaC + vi * zetaS);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,569,"wbar.setEntry(i, wi * s - vi * c);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,572,* At this point
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,573,"*   x = xL[k-1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,574,"*   ptwbar = P' wbar[k],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,575,"* see Paige and Saunders (1975), equations (5.9) and (5.10)."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,577,bstep += snprod * c * zeta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,578,snprod *= s;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,579,"gmax = FastMath.max(gmax, gamma);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,580,"gmin = FastMath.min(gmin, gamma);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,581,ynorm2 += zeta * zeta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,582,gammaZeta = minusEpsZeta - deltak * zeta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,583,minusEpsZeta = -eps * zeta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,585,* At this point
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,586,"*   snprod       = s[1] * ... * s[k-1],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,587,"*   gmax         = max(|alpha[1]|, gamma[1], ..., gamma[k-1]),"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,588,"*   gmin         = min(|alpha[1]|, gamma[1], ..., gamma[k-1]),"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,589,"*   ynorm2       = zeta[1]^2 + ... + zeta[k-1]^2,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,590,"*   gammaZeta    = gamma[k] * zeta[k],"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,591,*   minusEpsZeta = -eps[k+1] * zeta[k-1].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,592,* The relation for gammaZeta can be retrieved from Paige and
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,593,"* Saunders (1975), equation (5.4a), last line of the vector"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,594,* gbar[k] * zbar[k] = -eps[k] * zeta[k-2] - delta[k] * zeta[k-1].
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,596,updateNorms();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,600,"* Computes the norms of the residuals, and checks for convergence."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,601,* Updates {@link #lqnorm} and {@link #cgnorm}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,603,private void updateNorms() {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,604,final double anorm = FastMath.sqrt(tnorm);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,605,final double ynorm = FastMath.sqrt(ynorm2);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,606,final double epsa = anorm * MACH_PREC;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,607,final double epsx = anorm * ynorm * MACH_PREC;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,608,final double epsr = anorm * ynorm * delta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,609,final double diag = gbar == 0. ? epsa : gbar;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,610,lqnorm = FastMath.sqrt(gammaZeta * gammaZeta +
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,611,minusEpsZeta * minusEpsZeta);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,612,final double qrnorm = snprod * beta1;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,613,cgnorm = qrnorm * beta / FastMath.abs(diag);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,616,* Estimate cond(A). In this version we look at the diagonals of L
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,617,"* in the factorization of the tridiagonal matrix, T = L * Q."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,618,"* Sometimes, T[k] can be misleadingly ill-conditioned when T[k+1]"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,619,"* is not, so we must be careful not to overestimate acond."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,621,final double acond;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,622,if (lqnorm <= cgnorm) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,623,acond = gmax / gmin;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,624,} else {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,625,"acond = gmax / FastMath.min(gmin, FastMath.abs(diag));"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,627,if (acond * MACH_PREC >= 0.1) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,628,throw new IllConditionedOperatorException(acond);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,630,if (beta1 <= epsx) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,632,* x has converged to an eigenvector of A corresponding to the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,633,* eigenvalue shift.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,635,throw new SingularOperatorException();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,637,hasConverged = (cgnorm <= epsx) || (cgnorm <= epsr);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,641,/** The cubic root of {@link #MACH_PREC}. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,642,private static final double CBRT_MACH_PREC;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,644,/** The machine precision. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,645,private static final double MACH_PREC;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,647,/** Key for the exception context. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,648,"private static final String OPERATOR = ""operator"";"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,650,/** Key for the exception context. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,651,"private static final String THRESHOLD = ""threshold"";"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,653,/** Key for the exception context. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,654,"private static final String VECTOR = ""vector"";"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,656,/** Key for the exception context. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,657,"private static final String VECTOR1 = ""vector1"";"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,659,/** Key for the exception context. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,660,"private static final String VECTOR2 = ""vector2"";"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,662,/** {@code true} if symmetry of matrix and conditioner must be checked. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,663,private final boolean check;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,666,* The value of the custom tolerance &delta; for the default stopping
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,667,* criterion.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,669,private final double delta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,672,"* Creates a new instance of this class, with <a href=""#stopcrit"">default"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,673,* stopping criterion</a>.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,675,* @param maxIterations Maximum number of iterations.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,676,* @param delta &delta; parameter for the default stopping criterion.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,677,* @param check {@code true} if self-adjointedness of both matrix and
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,678,* preconditioner should be checked. This entails an extra matrix-vector
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,679,* product at each iteration.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,681,"public SymmLQ(final int maxIterations, final double delta,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,682,final boolean check) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,683,super(maxIterations);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,684,this.delta = delta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,685,this.check = check;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,689,"* Creates a new instance of this class, with <a href=""#stopcrit"">default"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,690,* stopping criterion</a> and custom iteration manager.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,692,* @param manager Custom iteration manager.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,693,* @param delta &delta; parameter for the default stopping criterion.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,694,* @param check {@code true} if self-adjointedness of both matrix and
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,695,* preconditioner should be checked. This entails an extra matrix-vector
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,696,* product at each iteration.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,698,"public SymmLQ(final IterationManager manager, final double delta,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,699,final boolean check) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,700,super(manager);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,701,this.delta = delta;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,702,this.check = check;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,705,static {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,706,MACH_PREC = Math.ulp(1.);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,707,CBRT_MACH_PREC = Math.cbrt(MACH_PREC);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,711,"* Performs a symmetry check on the specified linear operator, and throws an"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,712,"* exception in case this check fails. Given a linear operator L, and a"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,713,"* vector x, this method checks that x' L y = y' L x (within a given"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,714,"* accuracy), where y = L x."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,716,* @param l The linear operator L.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,717,* @param x The candidate vector x.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,718,* @param y The candidate vector y = L x.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,719,* @param z The vector z = L y.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,720,* @throws NonSelfAdjointOperatorException when the test fails.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,722,"private static void checkSymmetry(final RealLinearOperator l,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,723,"final RealVector x, final RealVector y,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,724,final RealVector z)
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,725,throws NonSelfAdjointOperatorException {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,726,final double s = y.dotProduct(y);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,727,final double t = x.dotProduct(z);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,728,final double epsa = (s + MACH_PREC) * CBRT_MACH_PREC;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,729,if (FastMath.abs(s - t) > epsa) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,730,final NonSelfAdjointOperatorException e;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,731,e = new NonSelfAdjointOperatorException();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,732,final ExceptionContext context = e.getContext();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,733,"context.setValue(OPERATOR, l);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,734,"context.setValue(VECTOR1, x);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,735,"context.setValue(VECTOR2, y);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,736,"context.setValue(THRESHOLD, Double.valueOf(epsa));"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,737,throw e;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,742,"* A BLAS-like function, for the operation z &larr; a &middot; x + b"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,743,* &middot; y + z. This is for internal use only: no dimension checks are
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,744,* provided.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,746,* @param a The scalar by which {@code x} is to be multiplied.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,747,* @param x The first vector to be added to {@code z}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,748,* @param b The scalar by which {@code y} is to be multiplied.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,749,* @param y The second vector to be added to {@code z}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,750,* @param z The vector to be incremented.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,752,"private static void daxpbypz(final double a, final RealVector x,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,753,"final double b, final RealVector y,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,754,final RealVector z) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,755,final int n = z.getDimension();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,756,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,757,final double zi;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,758,zi = a * x.getEntry(i) + b * y.getEntry(i) + z.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,759,"z.setEntry(i, zi);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,764,"* A clone of the BLAS {@code DAXPY} function, which carries out the"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,765,* operation y &larr; a &middot; x + y. This is for internal use only: no
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,766,* dimension checks are provided.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,768,* @param a The scalar by which {@code x} is to be multiplied.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,769,* @param x The vector to be added to {@code y}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,770,* @param y The vector to be incremented.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,772,"private static void daxpy(final double a, final RealVector x,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,773,final RealVector y) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,774,final int n = x.getDimension();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,775,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,776,"y.setEntry(i, a * x.getEntry(i) + y.getEntry(i));"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,781,* Throws a new {@link NonPositiveDefiniteOperatorException} with
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,782,* appropriate context.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,784,* @param l The offending linear operator.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,785,* @param v The offending vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,786,* @throws NonPositiveDefiniteOperatorException in any circumstances.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,788,"private static void throwNPDLOException(final RealLinearOperator l,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,789,final RealVector v)
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,790,throws NonPositiveDefiniteOperatorException {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,791,final NonPositiveDefiniteOperatorException e;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,792,e = new NonPositiveDefiniteOperatorException();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,793,final ExceptionContext context = e.getContext();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,794,"context.setValue(OPERATOR, l);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,795,"context.setValue(VECTOR, v);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,796,throw e;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,800,"* Returns {@code true} if symmetry of the matrix, and symmetry as well as"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,801,* positive definiteness of the preconditioner should be checked.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,803,* @return {@code true} if the tests are to be performed.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,805,public final boolean getCheck() {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,806,return check;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,810,* Returns an estimate of the solution to the linear system A &middot; x =
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,811,* b.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,813,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,814,* @param m Preconditioner (can be {@code null}).
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,815,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,816,* @return A new vector containing the solution.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,817,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,818,* @throws NonSquareOperatorException if {@code a} or {@code m} is not
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,819,* square.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,820,"* @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,821,* have dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,822,* @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,823,"* {@code true}, and {@code a} or {@code m} is not self-adjoint."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,824,* @throws NonPositiveDefiniteOperatorException if {@code m} is not positive
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,825,* definite.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,826,* @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,827,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,828,* unless a custom {@link MaxCountExceededCallback callback} has been set at
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,829,* construction.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,831,@Override
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,832,"public RealVector solve(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,833,"final InvertibleRealLinearOperator m,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,834,final RealVector b)
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,835,"throws NullArgumentException, NonSquareOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,836,"DimensionMismatchException, NonSelfAdjointOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,837,"NonPositiveDefiniteOperatorException, IllConditionedOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,838,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,839,MathUtils.checkNotNull(a);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,840,final RealVector x = new ArrayRealVector(a.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,841,"return solveInPlace(a, m, b, x, false, 0.);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,845,* Returns an estimate of the solution to the linear system (A - shift
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,846,* &middot; I) &middot; x = b.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,847,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,848,* If the solution x is expected to contain a large multiple of {@code b}
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,849,"* (as in Rayleigh-quotient iteration), then better precision may be"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,850,* achieved with {@code goodb} set to {@code true}; this however requires an
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,851,* extra call to the preconditioner.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,852,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,853,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,854,* {@code shift} should be zero if the system A &middot; x = b is to be
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,855,"* solved. Otherwise, it could be an approximation to an eigenvalue of A,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,856,* such as the Rayleigh quotient b<sup>T</sup> &middot; A &middot; b /
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,857,* (b<sup>T</sup> &middot; b) corresponding to the vector b. If b is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,858,* sufficiently like an eigenvector corresponding to an eigenvalue near
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,859,"* shift, then the computed x may have very large components. When"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,860,"* normalized, x may be closer to an eigenvector than b."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,861,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,863,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,864,* @param m Preconditioner (can be {@code null}).
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,865,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,866,"* @param goodb Usually {@code false}, except if {@code x} is expected to"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,867,* contain a large multiple of {@code b}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,868,* @param shift The amount to be subtracted to all diagonal elements of A.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,869,* @return A reference to {@code x} (shallow copy).
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,870,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,871,* @throws NonSquareOperatorException if {@code a} or {@code m} is not
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,872,* square.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,873,* @throws DimensionMismatchException if {@code m} or {@code b} have
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,874,* dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,875,* @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,876,"* {@code true}, and {@code a} or {@code m} is not self-adjoint."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,877,* @throws NonPositiveDefiniteOperatorException if {@code m} is not positive
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,878,* definite.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,879,* @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,880,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,881,* unless a custom {@link MaxCountExceededCallback callback} has been set at
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,882,* construction.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,884,"public RealVector solve(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,885,"final InvertibleRealLinearOperator m,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,886,"final RealVector b, final boolean goodb,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,887,final double shift)
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,888,"throws NullArgumentException, NonSquareOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,889,"DimensionMismatchException, NonSelfAdjointOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,890,"NonPositiveDefiniteOperatorException, IllConditionedOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,891,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,892,MathUtils.checkNotNull(a);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,893,final RealVector x = new ArrayRealVector(a.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,894,"return solveInPlace(a, m, b, x, goodb, shift);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,898,* Returns an estimate of the solution to the linear system A &middot; x =
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,899,* b.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,901,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,902,* @param m Preconditioner (can be {@code null}).
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,903,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,904,* @param x Not meaningful in this implementation. Should not be considered
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,905,* as an initial guess.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,906,* @return A new vector containing the solution.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,907,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,908,* @throws NonSquareOperatorException if {@code a} or {@code m} is not
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,909,* square.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,910,"* @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,911,* have dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,912,* @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,913,"* {@code true}, and {@code a} or {@code m} is not self-adjoint."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,914,* @throws NonPositiveDefiniteOperatorException if {@code m} is not positive
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,915,* definite.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,916,* @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,917,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,918,* unless a custom {@link MaxCountExceededCallback callback} has been set at
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,919,* construction.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,921,@Override
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,922,"public RealVector solve(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,923,"final InvertibleRealLinearOperator m,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,924,"final RealVector b, final RealVector x)"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,925,"throws NullArgumentException, NonSquareOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,926,"DimensionMismatchException, NonSelfAdjointOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,927,"NonPositiveDefiniteOperatorException, IllConditionedOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,928,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,929,MathUtils.checkNotNull(x);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,930,"return solveInPlace(a, m, b, x.copy(), false, 0.);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,934,* Returns an estimate of the solution to the linear system A &middot; x =
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,935,* b.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,937,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,938,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,939,* @return A new vector containing the solution.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,940,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,941,* @throws NonSquareOperatorException if {@code a} is not square.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,942,* @throws DimensionMismatchException if {@code b} has dimensions
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,943,* inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,944,* @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,945,"* {@code true}, and {@code a} is not self-adjoint."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,946,* @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,947,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,948,* unless a custom {@link MaxCountExceededCallback callback} has been set at
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,949,* construction.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,951,@Override
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,952,"public RealVector solve(final RealLinearOperator a, final RealVector b)"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,953,"throws NullArgumentException, NonSquareOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,954,"DimensionMismatchException, NonSelfAdjointOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,955,"IllConditionedOperatorException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,956,MathUtils.checkNotNull(a);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,957,final RealVector x = new ArrayRealVector(a.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,958,x.set(0.);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,959,"return solveInPlace(a, null, b, x, false, 0.);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,963,* Returns the solution to the system (A - shift &middot; I) &middot; x = b.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,964,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,965,* If the solution x is expected to contain a large multiple of {@code b}
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,966,"* (as in Rayleigh-quotient iteration), then better precision may be"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,967,* achieved with {@code goodb} set to {@code true}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,968,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,969,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,970,* {@code shift} should be zero if the system A &middot; x = b is to be
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,971,"* solved. Otherwise, it could be an approximation to an eigenvalue of A,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,972,* such as the Rayleigh quotient b<sup>T</sup> &middot; A &middot; b /
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,973,* (b<sup>T</sup> &middot; b) corresponding to the vector b. If b is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,974,* sufficiently like an eigenvector corresponding to an eigenvalue near
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,975,"* shift, then the computed x may have very large components. When"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,976,"* normalized, x may be closer to an eigenvector than b."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,977,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,979,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,980,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,981,"* @param goodb Usually {@code false}, except if {@code x} is expected to"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,982,* contain a large multiple of {@code b}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,983,* @param shift The amount to be subtracted to all diagonal elements of A.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,984,* @return a reference to {@code x}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,985,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,986,* @throws NonSquareOperatorException if {@code a} is not square.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,987,* @throws DimensionMismatchException if {@code b} has dimensions
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,988,* inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,989,* @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,990,"* {@code true}, and {@code a} is not self-adjoint."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,991,* @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,992,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,993,* unless a custom {@link MaxCountExceededCallback callback} has been set at
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,994,* construction.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,996,"public RealVector solve(final RealLinearOperator a, final RealVector b,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,997,"final boolean goodb, final double shift)"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,998,"throws NullArgumentException, NonSquareOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,999,"DimensionMismatchException, NonSelfAdjointOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1000,"IllConditionedOperatorException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1001,MathUtils.checkNotNull(a);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1002,final RealVector x = new ArrayRealVector(a.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1003,"return solveInPlace(a, null, b, x, goodb, shift);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1007,* Returns an estimate of the solution to the linear system A &middot; x =
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1008,* b.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1010,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1011,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1012,* @param x Not meaningful in this implementation. Should not be considered
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1013,* as an initial guess.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1014,* @return A new vector containing the solution.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1015,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1016,* @throws NonSquareOperatorException if {@code a} is not square.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1017,* @throws DimensionMismatchException if {@code b} or {@code x} have
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1018,* dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1019,* @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1020,"* {@code true}, and {@code a} is not self-adjoint."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1021,* @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1022,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1023,* unless a custom {@link MaxCountExceededCallback callback} has been set at
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1024,* construction.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1026,@Override
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1027,"public RealVector solve(final RealLinearOperator a, final RealVector b,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1028,final RealVector x)
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1029,"throws NullArgumentException, NonSquareOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1030,"DimensionMismatchException, NonSelfAdjointOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1031,"IllConditionedOperatorException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1032,MathUtils.checkNotNull(x);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1033,"return solveInPlace(a, null, b, x.copy(), false, 0.);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1037,* Returns an estimate of the solution to the linear system A &middot; x =
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1038,* b. The solution is computed in-place.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1040,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1041,* @param m Preconditioner (can be {@code null}).
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1042,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1043,* @param x Vector to be updated with the solution. {@code x} should not be
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1044,"* considered as an initial guess, as it is set to 0 in the initialization"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1045,* phase.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1046,* @return A reference to {@code x} (shallow copy) updated with the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1047,* solution.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1048,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1049,* @throws NonSquareOperatorException if {@code a} or {@code m} is not
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1050,* square.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1051,"* @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1052,* have dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1053,* @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1054,"* {@code true}, and {@code a} or {@code m} is not self-adjoint."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1055,* @throws NonPositiveDefiniteOperatorException if {@code m} is not positive
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1056,* definite.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1057,* @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1058,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1059,* unless a custom {@link MaxCountExceededCallback callback} has been set at
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1060,* construction.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1062,@Override
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1063,"public RealVector solveInPlace(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1064,"final InvertibleRealLinearOperator m,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1065,"final RealVector b, final RealVector x)"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1066,"throws NullArgumentException, NonSquareOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1067,"DimensionMismatchException, NonSelfAdjointOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1068,"NonPositiveDefiniteOperatorException, IllConditionedOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1069,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1070,"return solveInPlace(a, m, b, x, false, 0.);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1074,* Returns an estimate of the solution to the linear system (A - shift
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1075,* &middot; I) &middot; x = b. The solution is computed in-place.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1076,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1077,* If the solution x is expected to contain a large multiple of {@code b}
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1078,"* (as in Rayleigh-quotient iteration), then better precision may be"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1079,* achieved with {@code goodb} set to {@code true}; this however requires an
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1080,* extra call to the preconditioner.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1081,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1082,* <p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1083,* {@code shift} should be zero if the system A &middot; x = b is to be
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1084,"* solved. Otherwise, it could be an approximation to an eigenvalue of A,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1085,* such as the Rayleigh quotient b<sup>T</sup> &middot; A &middot; b /
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1086,* (b<sup>T</sup> &middot; b) corresponding to the vector b. If b is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1087,* sufficiently like an eigenvector corresponding to an eigenvalue near
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1088,"* shift, then the computed x may have very large components. When"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1089,"* normalized, x may be closer to an eigenvector than b."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1090,* </p>
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1092,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1093,* @param m Preconditioner (can be {@code null}).
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1094,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1095,* @param x Vector to be updated with the solution. {@code x} should not be
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1096,"* considered as an initial guess, as it is set to 0 in the initialization"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1097,* phase.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1098,"* @param goodb Usually {@code false}, except if {@code x} is expected to"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1099,* contain a large multiple of {@code b}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1100,* @param shift The amount to be subtracted to all diagonal elements of A.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1101,* @return A reference to {@code x} (shallow copy).
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1102,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1103,* @throws NonSquareOperatorException if {@code a} or {@code m} is not
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1104,* square.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1105,"* @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1106,* have dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1107,* @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1108,"* {@code true}, and {@code a} or {@code m} is not self-adjoint."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1109,* @throws NonPositiveDefiniteOperatorException if {@code m} is not positive
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1110,* definite.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1111,* @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1112,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1113,* unless a custom {@link MaxCountExceededCallback callback} has been set at
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1114,* construction.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1116,"public RealVector solveInPlace(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1117,"final InvertibleRealLinearOperator m,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1118,"final RealVector b, final RealVector x,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1119,"final boolean goodb, final double shift)"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1120,"throws NullArgumentException, NonSquareOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1121,"DimensionMismatchException, NonSelfAdjointOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1122,"NonPositiveDefiniteOperatorException, IllConditionedOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1123,MaxCountExceededException {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1124,"checkParameters(a, m, b, x);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1126,final IterationManager manager = getIterationManager();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1127,/* Initialization counts as an iteration. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1128,manager.resetIterationCount();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1129,manager.incrementIterationCount();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1131,"final State state = new State(a, m, b, x, goodb, shift);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1132,final IterativeLinearSolverEvent event = createEvent(state);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1133,if (state.beta1 == 0.) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1134,"/* If b = 0 exactly, stop with x = 0. */"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1135,manager.fireTerminationEvent(event);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1136,return x;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1138,/* Cause termination if beta is essentially zero. */
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1139,final boolean earlyStop;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1140,earlyStop = (state.beta < MACH_PREC) || (state.hasConverged);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1141,manager.fireInitializationEvent(event);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1142,if (!earlyStop) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1143,do {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1144,manager.incrementIterationCount();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1145,manager.fireIterationStartedEvent(event);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1146,state.update();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1147,manager.fireIterationPerformedEvent(event);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1148,} while (!state.hasConverged);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1150,state.refine(x);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1152,"* The following two lines are a hack because state.x is now refined,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1153,* so further calls to state.refine() (via event.getSolution()) should
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1154,* *not* return an altered value of state.x.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1156,state.bstep = 0.;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1157,state.gammaZeta = 0.;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1158,manager.fireTerminationEvent(event);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1159,return x;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1163,* Returns an estimate of the solution to the linear system A &middot; x =
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1164,* b. The solution is computed in-place.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1166,* @param a Linear operator A of the system.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1167,* @param b Right-hand side vector.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1168,* @param x Vector to be updated with the solution. {@code x} should not be
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1169,"* considered as an initial guess, as it is set to 0 in the initialization"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1170,* phase.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1171,* @return A reference to {@code x} (shallow copy) updated with the
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1172,* solution.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1173,* @throws NullArgumentException if one of the parameters is {@code null}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1174,* @throws NonSquareOperatorException if {@code a} or {@code m} is not
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1175,* square.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1176,"* @throws DimensionMismatchException if {@code m}, {@code b} or {@code x}"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1177,* have dimensions inconsistent with {@code a}.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1178,* @throws NonSelfAdjointOperatorException if {@link #getCheck()} is
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1179,"* {@code true}, and {@code a} or {@code m} is not self-adjoint."
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1180,* @throws IllConditionedOperatorException if {@code a} is ill-conditioned.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1181,"* @throws MaxCountExceededException at exhaustion of the iteration count,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1182,* unless a custom {@link MaxCountExceededCallback callback} has been set at
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1183,* construction.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1185,@Override
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1186,"public RealVector solveInPlace(final RealLinearOperator a,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1187,"final RealVector b, final RealVector x)"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1188,"throws NullArgumentException, NonSquareOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1189,"DimensionMismatchException, NonSelfAdjointOperatorException,"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1190,"IllConditionedOperatorException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1191,"return solveInPlace(a, null, b, x, false, 0.);"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1195,* Creates the event to be fired during the solution process. Unmodifiable
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1196,"* views of the RHS vector, and the current estimate of the solution are"
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1197,* returned by the created event.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1199,* @param state Reference to the current state of this algorithm.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1200,* @return The newly created event.
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1202,private IterativeLinearSolverEvent createEvent(final State state) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1203,final RealVector bb = RealVector.unmodifiableRealVector(state.b);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1205,final IterativeLinearSolverEvent event;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1206,event = new IterativeLinearSolverEvent(this) {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1208,@Override
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1209,public RealVector getRightHandSideVector() {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1210,return bb;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1213,@Override
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1214,public RealVector getSolution() {
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1215,final int n = state.x.getDimension();
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1216,final RealVector x = new ArrayRealVector(n);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1217,state.refine(x);
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1218,return x;
True,src/main/java/org/apache/commons/math/linear/SymmLQ.java,src/main/java/org/apache/commons/math/linear/SymmLQ.java,1221,return event;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,17,ackage org.apache.commons.math.linear;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,19,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,20,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,21,mport org.apache.commons.math.util.IterationEvent;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,22,mport org.apache.commons.math.util.IterationListener;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,23,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,24,mport org.junit.Test;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,26,ublic class SymmLQTest {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,28,"ublic void saundersTest(final int n, final boolean goodb,"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,29,"inal boolean precon, final double shift,"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,30,inal double pertbn) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,31,inal RealLinearOperator a = new RealLinearOperator() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,33,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,34,ublic RealVector operate(final RealVector x) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,35,f (x.getDimension() != n) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,36,"hrow new DimensionMismatchException(x.getDimension(), n);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,38,inal double[] y = new double[n];
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,39,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,40,[i] = (i + 1) * 1.1 / n * x.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,42,"eturn new ArrayRealVector(y, false);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,45,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,46,ublic int getRowDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,47,eturn n;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,50,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,51,ublic int getColumnDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,52,eturn n;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,55,inal double shiftm = shift;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,56,inal double pertm = FastMath.abs(pertbn);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,57,inal InvertibleRealLinearOperator m;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,58,f (precon) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,59, = new InvertibleRealLinearOperator() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,61,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,62,ublic RealVector operate(final RealVector x) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,63,f (x.getDimension() != n) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,64,"hrow new DimensionMismatchException(x.getDimension(),"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,65,);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,67,inal double[] y = new double[n];
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,68,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,69,ouble d = (i + 1) * 1.1 / n;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,70, = FastMath.abs(d - shiftm);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,71,f (i % 10 == 0) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,72, += pertm;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,74,[i] = d * x.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,76,"eturn new ArrayRealVector(y, false);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,79,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,80,ublic int getRowDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,81,eturn n;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,84,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,85,ublic int getColumnDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,86,eturn n;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,89,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,90,ublic RealVector solve(final RealVector b) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,91,f (b.getDimension() != n) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,92,"hrow new DimensionMismatchException(b.getDimension(),"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,93,);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,95,inal double[] x = new double[n];
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,96,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,97,ouble d = (i + 1) * 1.1 / n;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,98, = FastMath.abs(d - shiftm);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,99,f (i % 10 == 0) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,100, += pertm;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,102,[i] = b.getEntry(i) / d;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,104,"eturn new ArrayRealVector(x, false);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,107, else {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,108, = null;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,110,inal RealVector xtrue = new ArrayRealVector(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,111,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,112,"true.setEntry(i, n - i);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,114,inal RealVector b = a.operate(xtrue);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,115,".combineToSelf(1.0, -shift, xtrue);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,116,"inal SymmLQ solver = new SymmLQ(2 * n, 1E-12, true);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,117,"inal RealVector x = solver.solve(a, m, b, goodb, shift);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,118,inal RealVector y = a.operate(x);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,119,inal RealVector r1 = new ArrayRealVector(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,120,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,121,inal double bi = b.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,122,inal double yi = y.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,123,inal double xi = x.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,124,"1.setEntry(i, bi - yi + shift * xi);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,126,inal double enorm = x.subtract(xtrue).getNorm() / xtrue.getNorm();
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,127,inal double etol = 1E-5;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,128,"ssert.assertTrue(""enorm="""
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,129, enorm
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,131, solver.getIterationManager()
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,132,"getIterations(),"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,133,norm <= etol);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,136,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,137,ublic void testSolveSaunders1() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,138,"aundersTest(1, false, false, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,141,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,142,ublic void testSolveSaunders2() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,143,"aundersTest(2, false, false, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,146,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,147,ublic void testSolveSaunders3() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,148,"aundersTest(1, false, true, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,151,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,152,ublic void testSolveSaunders4() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,153,"aundersTest(2, false, true, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,156,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,157,ublic void testSolveSaunders5() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,158,"aundersTest(5, false, true, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,161,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,162,ublic void testSolveSaunders6() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,163,"aundersTest(5, false, true, 0.25, 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,166,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,167,ublic void testSolveSaunders7() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,168,"aundersTest(50, false, false, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,171,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,172,ublic void testSolveSaunders8() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,173,"aundersTest(50, false, false, 0.25, 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,176,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,177,ublic void testSolveSaunders9() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,178,"aundersTest(50, false, true, 0., 0.10);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,181,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,182,ublic void testSolveSaunders10() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,183,"aundersTest(50, false, true, 0.25, 0.10);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,186,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,187,ublic void testSolveSaunders11() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,188,"aundersTest(1, true, false, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,191,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,192,ublic void testSolveSaunders12() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,193,"aundersTest(2, true, false, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,196,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,197,ublic void testSolveSaunders13() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,198,"aundersTest(1, true, true, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,201,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,202,ublic void testSolveSaunders14() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,203,"aundersTest(2, true, true, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,206,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,207,ublic void testSolveSaunders15() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,208,"aundersTest(5, true, true, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,211,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,212,ublic void testSolveSaunders16() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,213,"aundersTest(5, true, true, 0.25, 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,216,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,217,ublic void testSolveSaunders17() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,218,"aundersTest(50, true, false, 0., 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,221,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,222,ublic void testSolveSaunders18() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,223,"aundersTest(50, true, false, 0.25, 0.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,226,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,227,ublic void testSolveSaunders19() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,228,"aundersTest(50, true, true, 0., 0.10);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,231,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,232,ublic void testSolveSaunders20() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,233,"aundersTest(50, true, true, 0.25, 0.10);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,236,Test(expected = NonSquareOperatorException.class)
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,237,ublic void testNonSquareOperator() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,238,"inal Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 3);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,239,inal IterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,240,"olver = new SymmLQ(10, 0., false);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,241,inal ArrayRealVector b = new ArrayRealVector(a.getRowDimension());
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,242,inal ArrayRealVector x = new ArrayRealVector(a.getColumnDimension());
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,243,"olver.solve(a, b, x);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,246,Test(expected = DimensionMismatchException.class)
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,247,ublic void testDimensionMismatchRightHandSide() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,248,"inal Array2DRowRealMatrix a = new Array2DRowRealMatrix(3, 3);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,249,inal IterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,250,"olver = new SymmLQ(10, 0., false);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,251,inal ArrayRealVector b = new ArrayRealVector(2);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,252,"olver.solve(a, b);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,255,Test(expected = DimensionMismatchException.class)
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,256,ublic void testDimensionMismatchSolution() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,257,"inal Array2DRowRealMatrix a = new Array2DRowRealMatrix(3, 3);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,258,inal IterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,259,"olver = new SymmLQ(10, 0., false);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,260,inal ArrayRealVector b = new ArrayRealVector(3);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,261,inal ArrayRealVector x = new ArrayRealVector(2);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,262,"olver.solve(a, b, x);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,265,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,266,ublic void testUnpreconditionedSolution() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,267,inal int n = 5;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,268,inal int maxIterations = 100;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,269,inal RealLinearOperator a = new HilbertMatrix(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,270,inal InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,271,inal IterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,272,"olver = new SymmLQ(maxIterations, 1E-10, true);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,273,inal RealVector b = new ArrayRealVector(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,274,or (int j = 0; j < n; j++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,275,.set(0.);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,276,".setEntry(j, 1.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,277,"inal RealVector x = solver.solve(a, b);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,278,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,279,inal double actual = x.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,280,"inal double expected = ainv.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,281,inal double delta = 1E-6 * Math.abs(expected);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,282,"inal String msg = String.format(""entry[%d][%d]"", i, j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,283,"ssert.assertEquals(msg, expected, actual, delta);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,288,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,289,ublic void testUnpreconditionedInPlaceSolutionWithInitialGuess() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,290,inal int n = 5;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,291,inal int maxIterations = 100;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,292,inal RealLinearOperator a = new HilbertMatrix(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,293,inal InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,294,inal IterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,295,"olver = new SymmLQ(maxIterations, 1E-10, true);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,296,inal RealVector b = new ArrayRealVector(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,297,or (int j = 0; j < n; j++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,298,.set(0.);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,299,".setEntry(j, 1.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,300,inal RealVector x0 = new ArrayRealVector(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,301,0.set(1.);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,302,"inal RealVector x = solver.solveInPlace(a, b, x0);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,303,"ssert.assertSame(""x should be a reference to x0"", x0, x);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,304,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,305,inal double actual = x.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,306,"inal double expected = ainv.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,307,inal double delta = 1E-6 * Math.abs(expected);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,308,"inal String msg = String.format(""entry[%d][%d)"", i, j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,309,"ssert.assertEquals(msg, expected, actual, delta);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,314,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,315,ublic void testUnpreconditionedSolutionWithInitialGuess() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,316,inal int n = 5;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,317,inal int maxIterations = 100;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,318,inal RealLinearOperator a = new HilbertMatrix(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,319,inal InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,320,inal IterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,321,"olver = new SymmLQ(maxIterations, 1E-10, true);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,322,inal RealVector b = new ArrayRealVector(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,323,or (int j = 0; j < n; j++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,324,.set(0.);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,325,".setEntry(j, 1.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,326,inal RealVector x0 = new ArrayRealVector(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,327,0.set(1.);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,328,"inal RealVector x = solver.solve(a, b, x0);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,329,"ssert.assertNotSame(""x should not be a reference to x0"", x0, x);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,330,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,331,inal double actual = x.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,332,"inal double expected = ainv.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,333,inal double delta = 1E-6 * Math.abs(expected);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,334,"inal String msg = String.format(""entry[%d][%d]"", i, j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,335,"ssert.assertEquals(msg, expected, actual, delta);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,336,"ssert.assertEquals(msg, x0.getEntry(i), 1., Math.ulp(1.));"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,341,Test(expected = NonSquareOperatorException.class)
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,342,ublic void testNonSquarePreconditioner() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,343,"inal Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,344,inal InvertibleRealLinearOperator m;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,345, = new InvertibleRealLinearOperator() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,347,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,348,ublic RealVector operate(final RealVector x) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,349,hrow new UnsupportedOperationException();
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,352,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,353,ublic int getRowDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,354,eturn 2;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,357,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,358,ublic int getColumnDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,359,eturn 3;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,362,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,363,ublic RealVector solve(final RealVector b) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,364,hrow new UnsupportedOperationException();
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,367,inal PreconditionedIterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,368,"olver = new SymmLQ(10, 0., false);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,369,inal ArrayRealVector b = new ArrayRealVector(a.getRowDimension());
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,370,"olver.solve(a, m, b);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,373,Test(expected = DimensionMismatchException.class)
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,374,ublic void testMismatchedOperatorDimensions() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,375,"inal Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,376,inal InvertibleRealLinearOperator m;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,377, = new InvertibleRealLinearOperator() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,379,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,380,ublic RealVector operate(final RealVector x) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,381,hrow new UnsupportedOperationException();
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,384,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,385,ublic int getRowDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,386,eturn 3;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,389,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,390,ublic int getColumnDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,391,eturn 3;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,394,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,395,ublic RealVector solve(final RealVector b) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,396,hrow new UnsupportedOperationException();
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,399,inal PreconditionedIterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,400,"olver = new SymmLQ(10, 0d, false);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,401,inal ArrayRealVector b = new ArrayRealVector(a.getRowDimension());
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,402,"olver.solve(a, m, b);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,405,Test(expected = NonPositiveDefiniteOperatorException.class)
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,406,ublic void testNonPositiveDefinitePreconditioner() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,407,"inal Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,408,".setEntry(0, 0, 1d);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,409,".setEntry(0, 1, 2d);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,410,".setEntry(1, 0, 3d);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,411,".setEntry(1, 1, 4d);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,412,inal InvertibleRealLinearOperator m;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,413, = new InvertibleRealLinearOperator() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,415,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,416,ublic RealVector operate(final RealVector x) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,417,inal ArrayRealVector y = new ArrayRealVector(2);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,418,".setEntry(0, -x.getEntry(0));"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,419,".setEntry(1, -x.getEntry(1));"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,420,eturn y;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,423,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,424,ublic int getRowDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,425,eturn 2;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,428,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,429,ublic int getColumnDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,430,eturn 2;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,433,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,434,ublic RealVector solve(final RealVector b) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,435,inal ArrayRealVector x = new ArrayRealVector(2);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,436,".setEntry(0, -b.getEntry(0));"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,437,".setEntry(1, -b.getEntry(1));"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,438,eturn x;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,441,inal PreconditionedIterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,442,"olver = new SymmLQ(10, 0d, true);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,443,inal ArrayRealVector b = new ArrayRealVector(2);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,444,".setEntry(0, -1d);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,445,".setEntry(1, -1d);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,446,"olver.solve(a, m, b);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,449,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,450,ublic void testPreconditionedSolution() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,451,inal int n = 8;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,452,inal int maxIterations = 100;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,453,inal RealLinearOperator a = new HilbertMatrix(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,454,inal InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,455,inal InvertibleRealLinearOperator m = JacobiPreconditioner.create(a);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,456,inal PreconditionedIterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,457,"olver = new SymmLQ(maxIterations, 1E-15, true);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,458,inal RealVector b = new ArrayRealVector(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,459,or (int j = 0; j < n; j++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,460,.set(0.);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,461,".setEntry(j, 1.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,462,"inal RealVector x = solver.solve(a, m, b);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,463,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,464,inal double actual = x.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,465,"inal double expected = ainv.getEntry(i, j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,466,inal double delta = 1E-6 * Math.abs(expected);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,467,"inal String msg = String.format(""coefficient (%d, %d)"", i, j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,468,"ssert.assertEquals(msg, expected, actual, delta);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,473,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,474,ublic void testPreconditionedSolution2() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,475,inal int n = 100;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,476,inal int maxIterations = 100000;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,477,"inal Array2DRowRealMatrix a = new Array2DRowRealMatrix(n, n);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,478,ouble daux = 1.;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,479,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,480,".setEntry(i, i, daux);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,481,aux *= 1.2;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,482,or (int j = i + 1; j < n; j++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,483,f (i == j) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,484, else {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,485,inal double value = 1.0;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,486,".setEntry(i, j, value);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,487,".setEntry(j, i, value);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,491,inal InvertibleRealLinearOperator m = JacobiPreconditioner.create(a);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,492,inal PreconditionedIterativeLinearSolver prec;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,493,inal IterativeLinearSolver unprec;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,494,"rec = new SymmLQ(maxIterations, 1E-15, true);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,495,"nprec = new SymmLQ(maxIterations, 1E-15, true);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,496,inal RealVector b = new ArrayRealVector(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,497,"inal String pattern = ""preconditioned SymmLQ (%d iterations) should"""
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,498," "" have been faster than unpreconditioned (%d iterations)"";"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,499,tring msg;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,500,or (int j = 0; j < 1; j++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,501,.set(0.);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,502,".setEntry(j, 1.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,503,"inal RealVector px = prec.solve(a, m, b);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,504,"inal RealVector x = unprec.solve(a, b);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,505,inal int npcg = prec.getIterationManager().getIterations();
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,506,inal int ncg = unprec.getIterationManager().getIterations();
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,507,"sg = String.format(pattern, npcg, ncg);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,508,"ssert.assertTrue(msg, npcg < ncg);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,509,or (int i = 0; i < n; i++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,510,"sg = String.format(""row %d, column %d"", i, j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,511,inal double expected = x.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,512,inal double actual = px.getEntry(i);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,513,inal double delta = 5E-5 * Math.abs(expected);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,514,"ssert.assertEquals(msg, expected, actual, delta);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,519,Test
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,520,ublic void testEventManagement() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,521,inal int n = 5;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,522,inal int maxIterations = 100;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,523,inal RealLinearOperator a = new HilbertMatrix(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,524,inal IterativeLinearSolver solver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,525,inal int[] count = new int[] {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,526,", 0, 0, 0"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,528,inal IterationListener listener = new IterationListener() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,530,ublic void initializationPerformed(final IterationEvent e) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,531,ount[0] = 1;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,532,ount[1] = 0;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,533,ount[2] = 0;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,534,ount[3] = 0;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,538,ublic void iterationPerformed(final IterationEvent e) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,539,+count[2];
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,542,ublic void iterationStarted(final IterationEvent e) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,543,+count[1];
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,547,ublic void terminationPerformed(final IterationEvent e) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,548,+count[3];
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,551,"olver = new SymmLQ(maxIterations, 1E-10, true);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,552,olver.getIterationManager().addIterationListener(listener);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,553,inal RealVector b = new ArrayRealVector(n);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,554,or (int j = 0; j < n; j++) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,555,.set(0.);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,556,".setEntry(j, 1.);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,557,"olver.solve(a, b);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,558,"tring msg = String.format(""column %d (initialization)"", j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,559,"ssert.assertEquals(msg, 1, count[0]);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,560,"sg = String.format(""column %d (iterations started)"", j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,561,"ssert.assertEquals(msg, solver.getIterationManager()"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,562,"getIterations() - 1, count[1]);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,563,"sg = String.format(""column %d (iterations performed)"", j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,564,"ssert.assertEquals(msg, solver.getIterationManager()"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,565,"getIterations() - 1, count[2]);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,566,"sg = String.format(""column %d (finalization)"", j);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,567,"ssert.assertEquals(msg, 1, count[3]);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,571,Test(expected = NonSelfAdjointOperatorException.class)
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,572,ublic void testNonSelfAdjointOperator() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,573,inal RealLinearOperator a;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,574, = new Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,576,"., 2., 3."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,578,"., 4., 5."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,580,".999, 5., 6."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,583,inal RealVector b;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,584, = new ArrayRealVector(new double[] {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,585,"., 1., 1."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,587,"ew SymmLQ(100, 1., true).solve(a, b);"
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,590,Test(expected = NonSelfAdjointOperatorException.class)
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,591,ublic void testNonSelfAdjointPreconditioner() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,592,inal RealLinearOperator a = new Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,594,"., 2., 3."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,596,"., 4., 5."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,598,"., 5., 6."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,601,inal Array2DRowRealMatrix mMat;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,602,Mat = new Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,604,"., 0., 1."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,606,"., 1., 0."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,608,"., 0., 1."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,611,inal DecompositionSolver mSolver;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,612,Solver = new LUDecomposition(mMat).getSolver();
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,613,inal InvertibleRealLinearOperator m;
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,614, = new InvertibleRealLinearOperator() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,616,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,617,ublic RealVector operate(final RealVector x) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,618,eturn mMat.operate(x);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,621,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,622,ublic int getRowDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,623,eturn mMat.getRowDimension();
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,626,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,627,ublic int getColumnDimension() {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,628,eturn mMat.getColumnDimension();
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,631,Override
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,632,ublic RealVector solve(final RealVector b) {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,633,eturn mSolver.solve(b);
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,636,inal RealVector b = new ArrayRealVector(new double[] {
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,637,"., 1., 1."
False,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,639,"ew SymmLQ(100, 1., true).solve(a, m, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,17,package org.apache.commons.math.linear;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,20,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,21,import org.apache.commons.math.util.IterationEvent;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,22,import org.apache.commons.math.util.IterationListener;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,26,public class SymmLQTest {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,28,"public void saundersTest(final int n, final boolean goodb,"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,29,"final boolean precon, final double shift,"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,30,final double pertbn) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,31,final RealLinearOperator a = new RealLinearOperator() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,33,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,34,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,35,if (x.getDimension() != n) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,36,"throw new DimensionMismatchException(x.getDimension(), n);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,38,final double[] y = new double[n];
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,39,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,40,y[i] = (i + 1) * 1.1 / n * x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,42,"return new ArrayRealVector(y, false);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,45,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,46,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,47,return n;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,50,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,51,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,52,return n;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,55,final double shiftm = shift;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,56,final double pertm = FastMath.abs(pertbn);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,57,final InvertibleRealLinearOperator m;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,58,if (precon) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,59,m = new InvertibleRealLinearOperator() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,61,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,62,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,63,if (x.getDimension() != n) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,64,"throw new DimensionMismatchException(x.getDimension(),"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,65,n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,67,final double[] y = new double[n];
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,68,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,69,double d = (i + 1) * 1.1 / n;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,70,d = FastMath.abs(d - shiftm);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,71,if (i % 10 == 0) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,72,d += pertm;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,74,y[i] = d * x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,76,"return new ArrayRealVector(y, false);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,79,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,80,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,81,return n;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,84,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,85,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,86,return n;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,89,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,90,public RealVector solve(final RealVector b) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,91,if (b.getDimension() != n) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,92,"throw new DimensionMismatchException(b.getDimension(),"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,93,n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,95,final double[] x = new double[n];
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,96,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,97,double d = (i + 1) * 1.1 / n;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,98,d = FastMath.abs(d - shiftm);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,99,if (i % 10 == 0) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,100,d += pertm;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,102,x[i] = b.getEntry(i) / d;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,104,"return new ArrayRealVector(x, false);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,107,} else {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,108,m = null;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,110,final RealVector xtrue = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,111,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,112,"xtrue.setEntry(i, n - i);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,114,final RealVector b = a.operate(xtrue);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,115,"b.combineToSelf(1.0, -shift, xtrue);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,116,"final SymmLQ solver = new SymmLQ(2 * n, 1E-12, true);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,117,"final RealVector x = solver.solve(a, m, b, goodb, shift);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,118,final RealVector y = a.operate(x);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,119,final RealVector r1 = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,120,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,121,final double bi = b.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,122,final double yi = y.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,123,final double xi = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,124,"r1.setEntry(i, bi - yi + shift * xi);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,126,final double enorm = x.subtract(xtrue).getNorm() / xtrue.getNorm();
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,127,final double etol = 1E-5;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,128,"Assert.assertTrue(""enorm="""
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,129,+ enorm
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,131,+ solver.getIterationManager()
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,132,".getIterations(),"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,133,enorm <= etol);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,136,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,137,public void testSolveSaunders1() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,138,"saundersTest(1, false, false, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,141,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,142,public void testSolveSaunders2() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,143,"saundersTest(2, false, false, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,146,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,147,public void testSolveSaunders3() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,148,"saundersTest(1, false, true, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,151,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,152,public void testSolveSaunders4() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,153,"saundersTest(2, false, true, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,156,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,157,public void testSolveSaunders5() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,158,"saundersTest(5, false, true, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,161,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,162,public void testSolveSaunders6() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,163,"saundersTest(5, false, true, 0.25, 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,166,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,167,public void testSolveSaunders7() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,168,"saundersTest(50, false, false, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,171,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,172,public void testSolveSaunders8() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,173,"saundersTest(50, false, false, 0.25, 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,176,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,177,public void testSolveSaunders9() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,178,"saundersTest(50, false, true, 0., 0.10);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,181,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,182,public void testSolveSaunders10() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,183,"saundersTest(50, false, true, 0.25, 0.10);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,186,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,187,public void testSolveSaunders11() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,188,"saundersTest(1, true, false, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,191,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,192,public void testSolveSaunders12() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,193,"saundersTest(2, true, false, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,196,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,197,public void testSolveSaunders13() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,198,"saundersTest(1, true, true, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,201,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,202,public void testSolveSaunders14() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,203,"saundersTest(2, true, true, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,206,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,207,public void testSolveSaunders15() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,208,"saundersTest(5, true, true, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,211,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,212,public void testSolveSaunders16() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,213,"saundersTest(5, true, true, 0.25, 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,216,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,217,public void testSolveSaunders17() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,218,"saundersTest(50, true, false, 0., 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,221,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,222,public void testSolveSaunders18() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,223,"saundersTest(50, true, false, 0.25, 0.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,226,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,227,public void testSolveSaunders19() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,228,"saundersTest(50, true, true, 0., 0.10);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,231,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,232,public void testSolveSaunders20() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,233,"saundersTest(50, true, true, 0.25, 0.10);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,236,@Test(expected = NonSquareOperatorException.class)
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,237,public void testNonSquareOperator() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,238,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 3);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,239,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,240,"solver = new SymmLQ(10, 0., false);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,241,final ArrayRealVector b = new ArrayRealVector(a.getRowDimension());
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,242,final ArrayRealVector x = new ArrayRealVector(a.getColumnDimension());
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,243,"solver.solve(a, b, x);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,246,@Test(expected = DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,247,public void testDimensionMismatchRightHandSide() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,248,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(3, 3);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,249,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,250,"solver = new SymmLQ(10, 0., false);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,251,final ArrayRealVector b = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,252,"solver.solve(a, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,255,@Test(expected = DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,256,public void testDimensionMismatchSolution() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,257,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(3, 3);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,258,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,259,"solver = new SymmLQ(10, 0., false);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,260,final ArrayRealVector b = new ArrayRealVector(3);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,261,final ArrayRealVector x = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,262,"solver.solve(a, b, x);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,265,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,266,public void testUnpreconditionedSolution() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,267,final int n = 5;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,268,final int maxIterations = 100;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,269,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,270,final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,271,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,272,"solver = new SymmLQ(maxIterations, 1E-10, true);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,273,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,274,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,275,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,276,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,277,"final RealVector x = solver.solve(a, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,278,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,279,final double actual = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,280,"final double expected = ainv.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,281,final double delta = 1E-6 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,282,"final String msg = String.format(""entry[%d][%d]"", i, j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,283,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,288,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,289,public void testUnpreconditionedInPlaceSolutionWithInitialGuess() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,290,final int n = 5;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,291,final int maxIterations = 100;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,292,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,293,final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,294,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,295,"solver = new SymmLQ(maxIterations, 1E-10, true);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,296,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,297,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,298,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,299,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,300,final RealVector x0 = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,301,x0.set(1.);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,302,"final RealVector x = solver.solveInPlace(a, b, x0);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,303,"Assert.assertSame(""x should be a reference to x0"", x0, x);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,304,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,305,final double actual = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,306,"final double expected = ainv.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,307,final double delta = 1E-6 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,308,"final String msg = String.format(""entry[%d][%d)"", i, j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,309,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,314,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,315,public void testUnpreconditionedSolutionWithInitialGuess() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,316,final int n = 5;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,317,final int maxIterations = 100;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,318,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,319,final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,320,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,321,"solver = new SymmLQ(maxIterations, 1E-10, true);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,322,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,323,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,324,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,325,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,326,final RealVector x0 = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,327,x0.set(1.);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,328,"final RealVector x = solver.solve(a, b, x0);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,329,"Assert.assertNotSame(""x should not be a reference to x0"", x0, x);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,330,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,331,final double actual = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,332,"final double expected = ainv.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,333,final double delta = 1E-6 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,334,"final String msg = String.format(""entry[%d][%d]"", i, j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,335,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,336,"Assert.assertEquals(msg, x0.getEntry(i), 1., Math.ulp(1.));"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,341,@Test(expected = NonSquareOperatorException.class)
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,342,public void testNonSquarePreconditioner() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,343,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,344,final InvertibleRealLinearOperator m;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,345,m = new InvertibleRealLinearOperator() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,347,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,348,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,349,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,352,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,353,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,354,return 2;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,357,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,358,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,359,return 3;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,362,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,363,public RealVector solve(final RealVector b) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,364,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,367,final PreconditionedIterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,368,"solver = new SymmLQ(10, 0., false);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,369,final ArrayRealVector b = new ArrayRealVector(a.getRowDimension());
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,370,"solver.solve(a, m, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,373,@Test(expected = DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,374,public void testMismatchedOperatorDimensions() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,375,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,376,final InvertibleRealLinearOperator m;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,377,m = new InvertibleRealLinearOperator() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,379,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,380,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,381,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,384,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,385,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,386,return 3;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,389,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,390,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,391,return 3;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,394,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,395,public RealVector solve(final RealVector b) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,396,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,399,final PreconditionedIterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,400,"solver = new SymmLQ(10, 0d, false);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,401,final ArrayRealVector b = new ArrayRealVector(a.getRowDimension());
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,402,"solver.solve(a, m, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,405,@Test(expected = NonPositiveDefiniteOperatorException.class)
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,406,public void testNonPositiveDefinitePreconditioner() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,407,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(2, 2);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,408,"a.setEntry(0, 0, 1d);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,409,"a.setEntry(0, 1, 2d);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,410,"a.setEntry(1, 0, 3d);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,411,"a.setEntry(1, 1, 4d);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,412,final InvertibleRealLinearOperator m;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,413,m = new InvertibleRealLinearOperator() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,415,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,416,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,417,final ArrayRealVector y = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,418,"y.setEntry(0, -x.getEntry(0));"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,419,"y.setEntry(1, -x.getEntry(1));"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,420,return y;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,423,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,424,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,425,return 2;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,428,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,429,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,430,return 2;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,433,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,434,public RealVector solve(final RealVector b) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,435,final ArrayRealVector x = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,436,"x.setEntry(0, -b.getEntry(0));"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,437,"x.setEntry(1, -b.getEntry(1));"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,438,return x;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,441,final PreconditionedIterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,442,"solver = new SymmLQ(10, 0d, true);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,443,final ArrayRealVector b = new ArrayRealVector(2);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,444,"b.setEntry(0, -1d);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,445,"b.setEntry(1, -1d);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,446,"solver.solve(a, m, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,449,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,450,public void testPreconditionedSolution() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,451,final int n = 8;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,452,final int maxIterations = 100;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,453,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,454,final InverseHilbertMatrix ainv = new InverseHilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,455,final InvertibleRealLinearOperator m = JacobiPreconditioner.create(a);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,456,final PreconditionedIterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,457,"solver = new SymmLQ(maxIterations, 1E-15, true);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,458,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,459,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,460,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,461,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,462,"final RealVector x = solver.solve(a, m, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,463,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,464,final double actual = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,465,"final double expected = ainv.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,466,final double delta = 1E-6 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,467,"final String msg = String.format(""coefficient (%d, %d)"", i, j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,468,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,473,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,474,public void testPreconditionedSolution2() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,475,final int n = 100;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,476,final int maxIterations = 100000;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,477,"final Array2DRowRealMatrix a = new Array2DRowRealMatrix(n, n);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,478,double daux = 1.;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,479,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,480,"a.setEntry(i, i, daux);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,481,daux *= 1.2;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,482,for (int j = i + 1; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,483,if (i == j) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,484,} else {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,485,final double value = 1.0;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,486,"a.setEntry(i, j, value);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,487,"a.setEntry(j, i, value);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,491,final InvertibleRealLinearOperator m = JacobiPreconditioner.create(a);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,492,final PreconditionedIterativeLinearSolver prec;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,493,final IterativeLinearSolver unprec;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,494,"prec = new SymmLQ(maxIterations, 1E-15, true);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,495,"unprec = new SymmLQ(maxIterations, 1E-15, true);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,496,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,497,"final String pattern = ""preconditioned SymmLQ (%d iterations) should"""
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,498,"+ "" have been faster than unpreconditioned (%d iterations)"";"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,499,String msg;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,500,for (int j = 0; j < 1; j++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,501,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,502,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,503,"final RealVector px = prec.solve(a, m, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,504,"final RealVector x = unprec.solve(a, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,505,final int npcg = prec.getIterationManager().getIterations();
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,506,final int ncg = unprec.getIterationManager().getIterations();
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,507,"msg = String.format(pattern, npcg, ncg);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,508,"Assert.assertTrue(msg, npcg < ncg);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,509,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,510,"msg = String.format(""row %d, column %d"", i, j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,511,final double expected = x.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,512,final double actual = px.getEntry(i);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,513,final double delta = 5E-5 * Math.abs(expected);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,514,"Assert.assertEquals(msg, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,519,@Test
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,520,public void testEventManagement() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,521,final int n = 5;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,522,final int maxIterations = 100;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,523,final RealLinearOperator a = new HilbertMatrix(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,524,final IterativeLinearSolver solver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,525,final int[] count = new int[] {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,526,"0, 0, 0, 0"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,528,final IterationListener listener = new IterationListener() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,530,public void initializationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,531,count[0] = 1;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,532,count[1] = 0;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,533,count[2] = 0;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,534,count[3] = 0;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,538,public void iterationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,539,++count[2];
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,542,public void iterationStarted(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,543,++count[1];
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,547,public void terminationPerformed(final IterationEvent e) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,548,++count[3];
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,551,"solver = new SymmLQ(maxIterations, 1E-10, true);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,552,solver.getIterationManager().addIterationListener(listener);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,553,final RealVector b = new ArrayRealVector(n);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,554,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,555,b.set(0.);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,556,"b.setEntry(j, 1.);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,557,"solver.solve(a, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,558,"String msg = String.format(""column %d (initialization)"", j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,559,"Assert.assertEquals(msg, 1, count[0]);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,560,"msg = String.format(""column %d (iterations started)"", j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,561,"Assert.assertEquals(msg, solver.getIterationManager()"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,562,".getIterations() - 1, count[1]);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,563,"msg = String.format(""column %d (iterations performed)"", j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,564,"Assert.assertEquals(msg, solver.getIterationManager()"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,565,".getIterations() - 1, count[2]);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,566,"msg = String.format(""column %d (finalization)"", j);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,567,"Assert.assertEquals(msg, 1, count[3]);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,571,@Test(expected = NonSelfAdjointOperatorException.class)
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,572,public void testNonSelfAdjointOperator() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,573,final RealLinearOperator a;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,574,a = new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,576,"1., 2., 3."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,578,"2., 4., 5."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,580,"2.999, 5., 6."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,583,final RealVector b;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,584,b = new ArrayRealVector(new double[] {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,585,"1., 1., 1."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,587,"new SymmLQ(100, 1., true).solve(a, b);"
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,590,@Test(expected = NonSelfAdjointOperatorException.class)
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,591,public void testNonSelfAdjointPreconditioner() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,592,final RealLinearOperator a = new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,594,"1., 2., 3."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,596,"2., 4., 5."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,598,"3., 5., 6."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,601,final Array2DRowRealMatrix mMat;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,602,mMat = new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,604,"1., 0., 1."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,606,"0., 1., 0."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,608,"0., 0., 1."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,611,final DecompositionSolver mSolver;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,612,mSolver = new LUDecomposition(mMat).getSolver();
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,613,final InvertibleRealLinearOperator m;
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,614,m = new InvertibleRealLinearOperator() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,616,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,617,public RealVector operate(final RealVector x) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,618,return mMat.operate(x);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,621,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,622,public int getRowDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,623,return mMat.getRowDimension();
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,626,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,627,public int getColumnDimension() {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,628,return mMat.getColumnDimension();
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,631,@Override
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,632,public RealVector solve(final RealVector b) {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,633,return mSolver.solve(b);
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,636,final RealVector b = new ArrayRealVector(new double[] {
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,637,"1., 1., 1."
True,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,src/test/java/org/apache/commons/math/linear/SymmLQTest.java,639,"new SymmLQ(100, 1., true).solve(a, m, b);"

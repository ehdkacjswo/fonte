is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,15, limitations under the License.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,17,ackage org.apache.commons.math.fraction;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,19,mport java.math.BigInteger;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,20,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,21,mport org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,24, Representation of a rational number.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,26, @since 1.1
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,27, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,29,ublic class Fraction extends Number implements Comparable {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,31,"** A fraction representing ""1 / 1"". */"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,32,"ublic static final Fraction ONE = new Fraction(1, 1);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,34,"** A fraction representing ""0 / 1"". */"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,35,"ublic static final Fraction ZERO = new Fraction(0, 1);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,37,** Serializable version identifier */
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,38,rivate static final long serialVersionUID = 65382027393090L;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,40,** The denominator. */
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,41,rivate int denominator;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,43,** The numerator. */
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,44,rivate int numerator;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,47, Create a fraction given the double value.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,48, @param value the double value to convert to a fraction.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,49, @throws ConvergenceException if the continued fraction failed to
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,50,         converge.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,52,ublic Fraction(double value) throws ConvergenceException {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,53,"his(value, 1.0e-5, 100);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,57, Create a fraction given the double value.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,58, <p>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,59, References:
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,60, <ul>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,61," <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,62, Continued Fraction</a> equations (11) and (22)-(26)</li>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,63, </ul>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,64, </p>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,65, @param value the double value to convert to a fraction.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,66, @param epsilon maximum error allowed.  The resulting fraction is within
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,67,"        <code>epsilon</code> of <code>value</code>, in absolute terms."
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,68, @param maxIterations maximum number of convergents
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,69, @throws ConvergenceException if the continued fraction failed to
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,70,         converge.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,72,"ublic Fraction(double value, double epsilon, int maxIterations)"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,73,hrows ConvergenceException
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,75,ouble r0 = value;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,76,nt a0 = (int)Math.floor(r0);
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,78,"/ check for (almost) integer arguments, which should not go"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,79,/ to iterations.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,80,f (Math.abs(a0 - value) < epsilon) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,81,his.numerator = a0;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,82,his.denominator = 1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,83,eturn;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,86,nt p0 = 1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,87,nt q0 = 0;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,88,nt p1 = a0;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,89,nt q1 = 1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,91,nt p2 = 0;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,92,nt q2 = 1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,94,nt n = 0;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,95,oolean stop = false;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,96,o {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,97,+n;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,98,ouble r1 = 1.0 / (r0 - a0);
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,99,nt a1 = (int)Math.floor(r1);
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,100,2 = (a1 * p1) + p0;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,101,2 = (a1 * q1) + q0;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,103,ouble convergent = (double)p2 / (double)q2;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,104,f (n < maxIterations && Math.abs(convergent - value) > epsilon) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,105,0 = p1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,106,1 = p2;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,107,0 = q1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,108,1 = q2;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,109,0 = a1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,110,0 = r1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,111, else {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,112,top = true;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,114, while (!stop);
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,116,f (n >= maxIterations) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,117,hrow new ConvergenceException(
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,118,"Unable to convert double to fraction"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,121,his.numerator = p2;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,122,his.denominator = q2;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,123,educe();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,127, Create a fraction given the numerator and denominator.  The fraction is
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,128, reduced to lowest terms.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,129, @param num the numerator.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,130, @param den the denominator.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,131, @throws ArithmeticException if the denomiator is <code>zero</code>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,133,"ublic Fraction(int num, int den) {"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,134,uper();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,135,f (den == 0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,136,"hrow new ArithmeticException(""The denominator must not be zero"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,138,f (den < 0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,139,f (num == Integer.MIN_VALUE ||
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,140,en == Integer.MIN_VALUE) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,141,"hrow new ArithmeticException(""overflow: can't negate"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,143,um = -num;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,144,en = -den;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,146,his.numerator = num;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,147,his.denominator = den;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,148,educe();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,152, Returns the absolute value of this fraction.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,153, @return the absolute value.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,155,ublic Fraction abs() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,156,raction ret;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,157,f (numerator >= 0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,158,et = this;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,159, else {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,160,et = negate();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,162,eturn ret;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,166, Compares this object to another based on size.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,167, @param object the object to compare to
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,168," @return -1 if this is less than <tt>object</tt>, +1 if this is greater"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,169,"         than <tt>object</tt>, 0 if they are equal."
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,171,ublic int compareTo(Object object) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,172,nt ret = 0;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,174,f (this != object) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,175,raction other = (Fraction)object;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,176,ouble first = doubleValue();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,177,ouble second = other.doubleValue();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,179,f (first < second) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,180,et = -1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,181, else if (first > second) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,182,et = 1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,186,eturn ret;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,190, Gets the fraction as a <tt>double</tt>. This calculates the fraction as
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,191, the numerator divided by denominator.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,192, @return the fraction as a <tt>double</tt>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,194,ublic double doubleValue() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,195,eturn (double)numerator / (double)denominator;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,199, Test for the equality of two fractions.  If the lowest term
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,200," numerator and denominators are the same for both fractions, the two"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,201, fractions are considered to be equal.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,202, @param other fraction to test for equality to this fraction
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,203," @return true if two fractions are equal, false if object is"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,204,"         <tt>null</tt>, not an instance of {@link Fraction}, or not equal"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,205,         to this fraction instance.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,207,ublic boolean equals(Object other) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,208,oolean ret;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,210,f (this == other) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,211,et = true;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,212, else if (other == null) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,213,et = false;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,214, else {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,215,ry {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,216,"/ since fractions are always in lowest terms, numerators and"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,217,/ denominators can be compared directly for equality.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,218,raction rhs = (Fraction)other;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,219,et = (numerator == rhs.numerator) &&
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,220,denominator == rhs.denominator);
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,221, catch (ClassCastException ex) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,222,/ ignore exception
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,223,et = false;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,227,eturn ret;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,231, Gets the fraction as a <tt>float</tt>. This calculates the fraction as
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,232, the numerator divided by denominator.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,233, @return the fraction as a <tt>float</tt>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,235,ublic float floatValue() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,236,eturn (float)doubleValue();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,240, Access the denominator.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,241, @return the denominator.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,243,ublic int getDenominator() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,244,eturn denominator;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,248, Access the numerator.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,249, @return the numerator.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,251,ublic int getNumerator() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,252,eturn numerator;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,256, Gets a hashCode for the fraction.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,257, @return a hash code value for this object
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,259,ublic int hashCode() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,260,eturn 37 * (37 * 17 + getNumerator()) + getDenominator();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,264, Gets the fraction as an <tt>int</tt>. This returns the whole number part
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,265, of the fraction.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,266, @return the whole number fraction part
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,268,ublic int intValue() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,269,eturn (int)doubleValue();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,273, Gets the fraction as a <tt>long</tt>. This returns the whole number part
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,274, of the fraction.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,275, @return the whole number fraction part
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,277,ublic long longValue() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,278,eturn (long)doubleValue();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,282, Return the additive inverse of this fraction.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,283, @return the negation of this fraction.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,285,ublic Fraction negate() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,286,f (numerator==Integer.MIN_VALUE) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,287,"hrow new ArithmeticException(""overflow: too large to negate"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,289,"eturn new Fraction(-numerator, denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,293, Return the multiplicative inverse of this fraction.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,294, @return the reciprocal fraction
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,296,ublic Fraction reciprocal() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,297,"eturn new Fraction(denominator, numerator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,301," <p>Adds the value of this fraction to another, returning the result in reduced form."
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,302," The algorithm follows Knuth, 4.5.1.</p>"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,304," @param fraction  the fraction to add, must not be <code>null</code>"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,305, @return a <code>Fraction</code> instance with the resulting values
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,306, @throws IllegalArgumentException if the fraction is <code>null</code>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,307, @throws ArithmeticException if the resulting numerator or denominator exceeds
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,308,  <code>Integer.MAX_VALUE</code>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,310,ublic Fraction add(Fraction fraction) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,311,"eturn addSub(fraction, true /* add */);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,315," <p>Subtracts the value of another fraction from the value of this one,"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,316, returning the result in reduced form.</p>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,318," @param fraction  the fraction to subtract, must not be <code>null</code>"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,319, @return a <code>Fraction</code> instance with the resulting values
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,320, @throws IllegalArgumentException if the fraction is <code>null</code>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,321, @throws ArithmeticException if the resulting numerator or denominator
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,322,   cannot be represented in an <code>int</code>.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,324,ublic Fraction subtract(Fraction fraction) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,325,"eturn addSub(fraction, false /* subtract */);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,329, Implement add and subtract using algorithm described in Knuth 4.5.1.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,331," @param fraction the fraction to subtract, must not be <code>null</code>"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,332," @param isAdd true to add, false to subtract"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,333, @return a <code>Fraction</code> instance with the resulting values
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,334, @throws IllegalArgumentException if the fraction is <code>null</code>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,335, @throws ArithmeticException if the resulting numerator or denominator
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,336,   cannot be represented in an <code>int</code>.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,338,"rivate Fraction addSub(Fraction fraction, boolean isAdd) {"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,339,f (fraction == null) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,340,"hrow new IllegalArgumentException(""The fraction must not be null"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,342,/ zero is identity for addition.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,343,f (numerator == 0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,344,eturn isAdd ? fraction : fraction.negate();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,346,f (fraction.numerator == 0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,347,eturn this;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,349,"/ if denominators are randomly distributed, d1 will be 1 about 61%"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,350,/ of the time.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,351,"nt d1 = MathUtils.gcd(denominator, fraction.denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,352,f (d1==1) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,353,/ result is ( (u*v' +/- u'v) / u'v')
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,354,"nt uvp = MathUtils.mulAndCheck(numerator, fraction.denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,355,"nt upv = MathUtils.mulAndCheck(fraction.numerator, denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,356,eturn new Fraction
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,357,"isAdd ? MathUtils.addAndCheck(uvp, upv) :"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,358,"athUtils.subAndCheck(uvp, upv),"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,359,"athUtils.mulAndCheck(denominator, fraction.denominator));"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,361,/ the quantity 't' requires 65 bits of precision; see knuth 4.5.1
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,362,/ exercise 7.  we're going to use a BigInteger.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,363,/ t = u(v'/d1) +/- v(u'/d1)
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,364,igInteger uvp = BigInteger.valueOf(numerator)
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,365,multiply(BigInteger.valueOf(fraction.denominator/d1));
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,366,igInteger upv = BigInteger.valueOf(fraction.numerator)
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,367,multiply(BigInteger.valueOf(denominator/d1));
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,368,igInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,369,/ but d2 doesn't need extra precision because
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,370,"/ d2 = gcd(t,d1) = gcd(t mod d1, d1)"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,371,nt tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,372,"nt d2 = (tmodd1==0)?d1:MathUtils.gcd(tmodd1, d1);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,374,/ result is (t/d2) / (u'/d1)(v'/d2)
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,375,igInteger w = t.divide(BigInteger.valueOf(d2));
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,376,f (w.bitLength() > 31) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,377,hrow new ArithmeticException
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,378,"""overflow: numerator too large after multiply"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,380,"eturn new Fraction (w.intValue(),"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,381,"athUtils.mulAndCheck(denominator/d1,"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,382,raction.denominator/d2));
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,386," <p>Multiplies the value of this fraction by another, returning the"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,387, result in reduced form.</p>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,389," @param fraction  the fraction to multiply by, must not be <code>null</code>"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,390, @return a <code>Fraction</code> instance with the resulting values
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,391, @throws IllegalArgumentException if the fraction is <code>null</code>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,392, @throws ArithmeticException if the resulting numerator or denominator exceeds
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,393,  <code>Integer.MAX_VALUE</code>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,395,ublic Fraction multiply(Fraction fraction) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,396,f (fraction == null) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,397,"hrow new IllegalArgumentException(""The fraction must not be null"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,399,f (numerator == 0 || fraction.numerator == 0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,400,eturn ZERO;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,402,/ knuth 4.5.1
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,403,/ make sure we don't overflow unless the result *must* overflow.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,404,"nt d1 = MathUtils.gcd(numerator, fraction.denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,405,"nt d2 = MathUtils.gcd(fraction.numerator, denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,406,eturn getReducedFraction
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,407,"MathUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,408,"athUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,412, <p>Divide the value of this fraction by another.</p>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,414," @param fraction  the fraction to divide by, must not be <code>null</code>"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,415, @return a <code>Fraction</code> instance with the resulting values
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,416, @throws IllegalArgumentException if the fraction is <code>null</code>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,417, @throws ArithmeticException if the fraction to divide by is zero
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,418, @throws ArithmeticException if the resulting numerator or denominator exceeds
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,419,  <code>Integer.MAX_VALUE</code>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,421,ublic Fraction divide(Fraction fraction) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,422,f (fraction == null) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,423,"hrow new IllegalArgumentException(""The fraction must not be null"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,425,f (fraction.numerator == 0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,426,"hrow new ArithmeticException(""The fraction to divide by must not be zero"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,428,eturn multiply(fraction.reciprocal());
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,432, <p>Creates a <code>Fraction</code> instance with the 2 parts
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,433, of a fraction Y/Z.</p>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,435, <p>Any negative signs are resolved to be on the numerator.</p>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,437," @param numerator  the numerator, for example the three in 'three sevenths'"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,438," @param denominator  the denominator, for example the seven in 'three sevenths'"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,439," @return a new fraction instance, with the numerator and denominator reduced"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,440, @throws ArithmeticException if the denominator is <code>zero</code>
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,442,"ublic static Fraction getReducedFraction(int numerator, int denominator) {"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,443,f (denominator == 0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,444,"hrow new ArithmeticException(""The denominator must not be zero"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,446,f (numerator==0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,447,eturn ZERO; // normalize zero.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,449,/ allow 2^k/-2^31 as a valid fraction (where k>0)
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,450,f (denominator==Integer.MIN_VALUE && (numerator&1)==0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,451,umerator/=2; denominator/=2;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,453,f (denominator < 0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,454,f (numerator==Integer.MIN_VALUE ||
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,455,enominator==Integer.MIN_VALUE) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,456,"hrow new ArithmeticException(""overflow: can't negate"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,458,umerator = -numerator;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,459,enominator = -denominator;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,461,/ simplify fraction.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,462,"nt gcd = MathUtils.gcd(numerator, denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,463,umerator /= gcd;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,464,enominator /= gcd;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,465,"eturn new Fraction(numerator, denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,469, Reduce this fraction to lowest terms.  This is accomplished by dividing
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,470, both numerator and denominator by their greatest common divisor.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,472,rivate void reduce() {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,473,/ reduce numerator and denominator by greatest common denominator.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,474,"nt d = MathUtils.gcd(numerator, denominator);"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,475,f (d > 1) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,476,umerator /= d;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,477,enominator /= d;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,480,/ move sign to numerator.
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,481,f (denominator < 0) {
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,482,umerator *= -1;
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,483,enominator *= -1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,17,package org.apache.commons.math.fraction;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,19,import java.math.BigInteger;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,20,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,23,* Representation of a rational number.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,25,* @since 1.1
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,28,public class Fraction extends Number implements Comparable {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,30,"/** A fraction representing ""1 / 1"". */"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,31,"public static final Fraction ONE = new Fraction(1, 1);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,33,"/** A fraction representing ""0 / 1"". */"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,34,"public static final Fraction ZERO = new Fraction(0, 1);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,36,/** Serializable version identifier */
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,37,private static final long serialVersionUID = 6222990762865980424L;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,40,/** The denominator. */
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,41,private int denominator;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,43,/** The numerator. */
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,44,private int numerator;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,47,* Create a fraction given the double value.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,48,* @param value the double value to convert to a fraction.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,49,* @throws FractionConversionException if the continued fraction failed to
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,50,*         converge.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,52,public Fraction(double value) throws FractionConversionException {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,53,"this(value, 1.0e-5, 100);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,57,* Create a fraction given the double value.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,58,* <p>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,59,* References:
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,60,* <ul>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,61,"* <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,62,* Continued Fraction</a> equations (11) and (22)-(26)</li>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,63,* </ul>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,64,* </p>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,65,* @param value the double value to convert to a fraction.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,66,* @param epsilon maximum error allowed.  The resulting fraction is within
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,67,"*        <code>epsilon</code> of <code>value</code>, in absolute terms."
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,68,* @param maxIterations maximum number of convergents
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,69,* @throws FractionConversionException if the continued fraction failed to
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,70,*         converge.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,72,"public Fraction(double value, double epsilon, int maxIterations)"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,73,throws FractionConversionException
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,75,double r0 = value;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,76,int a0 = (int)Math.floor(r0);
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,78,"// check for (almost) integer arguments, which should not go"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,79,// to iterations.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,80,if (Math.abs(a0 - value) < epsilon) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,81,this.numerator = a0;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,82,this.denominator = 1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,83,return;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,86,int p0 = 1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,87,int q0 = 0;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,88,int p1 = a0;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,89,int q1 = 1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,91,int p2 = 0;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,92,int q2 = 1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,94,int n = 0;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,95,boolean stop = false;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,96,do {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,97,++n;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,98,double r1 = 1.0 / (r0 - a0);
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,99,int a1 = (int)Math.floor(r1);
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,100,p2 = (a1 * p1) + p0;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,101,q2 = (a1 * q1) + q0;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,103,double convergent = (double)p2 / (double)q2;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,104,if (n < maxIterations && Math.abs(convergent - value) > epsilon) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,105,p0 = p1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,106,p1 = p2;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,107,q0 = q1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,108,q1 = q2;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,109,a0 = a1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,110,r0 = r1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,111,} else {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,112,stop = true;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,114,} while (!stop);
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,116,if (n >= maxIterations) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,117,"throw new FractionConversionException(value, maxIterations);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,120,this.numerator = p2;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,121,this.denominator = q2;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,122,reduce();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,126,* Create a fraction given the numerator and denominator.  The fraction is
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,127,* reduced to lowest terms.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,128,* @param num the numerator.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,129,* @param den the denominator.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,130,* @throws ArithmeticException if the denomiator is <code>zero</code>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,132,"public Fraction(int num, int den) {"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,133,super();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,134,if (den == 0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,135,"throw new ArithmeticException(""The denominator must not be zero"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,137,if (den < 0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,138,if (num == Integer.MIN_VALUE ||
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,139,den == Integer.MIN_VALUE) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,140,"throw new ArithmeticException(""overflow: can't negate"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,142,num = -num;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,143,den = -den;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,145,this.numerator = num;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,146,this.denominator = den;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,147,reduce();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,151,* Returns the absolute value of this fraction.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,152,* @return the absolute value.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,154,public Fraction abs() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,155,Fraction ret;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,156,if (numerator >= 0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,157,ret = this;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,158,} else {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,159,ret = negate();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,161,return ret;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,165,* Compares this object to another based on size.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,166,* @param object the object to compare to
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,167,"* @return -1 if this is less than <tt>object</tt>, +1 if this is greater"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,168,"*         than <tt>object</tt>, 0 if they are equal."
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,170,public int compareTo(Object object) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,171,int ret = 0;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,173,if (this != object) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,174,Fraction other = (Fraction)object;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,175,double first = doubleValue();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,176,double second = other.doubleValue();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,178,if (first < second) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,179,ret = -1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,180,} else if (first > second) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,181,ret = 1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,185,return ret;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,189,* Gets the fraction as a <tt>double</tt>. This calculates the fraction as
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,190,* the numerator divided by denominator.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,191,* @return the fraction as a <tt>double</tt>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,193,public double doubleValue() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,194,return (double)numerator / (double)denominator;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,198,* Test for the equality of two fractions.  If the lowest term
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,199,"* numerator and denominators are the same for both fractions, the two"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,200,* fractions are considered to be equal.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,201,* @param other fraction to test for equality to this fraction
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,202,"* @return true if two fractions are equal, false if object is"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,203,"*         <tt>null</tt>, not an instance of {@link Fraction}, or not equal"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,204,*         to this fraction instance.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,206,public boolean equals(Object other) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,207,boolean ret;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,209,if (this == other) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,210,ret = true;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,211,} else if (other == null) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,212,ret = false;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,213,} else {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,214,try {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,215,"// since fractions are always in lowest terms, numerators and"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,216,// denominators can be compared directly for equality.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,217,Fraction rhs = (Fraction)other;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,218,ret = (numerator == rhs.numerator) &&
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,219,(denominator == rhs.denominator);
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,220,} catch (ClassCastException ex) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,221,// ignore exception
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,222,ret = false;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,226,return ret;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,230,* Gets the fraction as a <tt>float</tt>. This calculates the fraction as
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,231,* the numerator divided by denominator.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,232,* @return the fraction as a <tt>float</tt>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,234,public float floatValue() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,235,return (float)doubleValue();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,239,* Access the denominator.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,240,* @return the denominator.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,242,public int getDenominator() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,243,return denominator;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,247,* Access the numerator.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,248,* @return the numerator.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,250,public int getNumerator() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,251,return numerator;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,255,* Gets a hashCode for the fraction.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,256,* @return a hash code value for this object
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,258,public int hashCode() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,259,return 37 * (37 * 17 + getNumerator()) + getDenominator();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,263,* Gets the fraction as an <tt>int</tt>. This returns the whole number part
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,264,* of the fraction.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,265,* @return the whole number fraction part
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,267,public int intValue() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,268,return (int)doubleValue();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,272,* Gets the fraction as a <tt>long</tt>. This returns the whole number part
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,273,* of the fraction.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,274,* @return the whole number fraction part
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,276,public long longValue() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,277,return (long)doubleValue();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,281,* Return the additive inverse of this fraction.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,282,* @return the negation of this fraction.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,284,public Fraction negate() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,285,if (numerator==Integer.MIN_VALUE) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,286,"throw new ArithmeticException(""overflow: too large to negate"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,288,"return new Fraction(-numerator, denominator);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,292,* Return the multiplicative inverse of this fraction.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,293,* @return the reciprocal fraction
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,295,public Fraction reciprocal() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,296,"return new Fraction(denominator, numerator);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,300,"* <p>Adds the value of this fraction to another, returning the result in reduced form."
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,301,"* The algorithm follows Knuth, 4.5.1.</p>"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,303,"* @param fraction  the fraction to add, must not be <code>null</code>"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,304,* @return a <code>Fraction</code> instance with the resulting values
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,305,* @throws IllegalArgumentException if the fraction is <code>null</code>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,306,* @throws ArithmeticException if the resulting numerator or denominator exceeds
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,307,*  <code>Integer.MAX_VALUE</code>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,309,public Fraction add(Fraction fraction) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,310,"return addSub(fraction, true /* add */);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,314,"* <p>Subtracts the value of another fraction from the value of this one,"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,315,* returning the result in reduced form.</p>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,317,"* @param fraction  the fraction to subtract, must not be <code>null</code>"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,318,* @return a <code>Fraction</code> instance with the resulting values
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,319,* @throws IllegalArgumentException if the fraction is <code>null</code>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,320,* @throws ArithmeticException if the resulting numerator or denominator
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,321,*   cannot be represented in an <code>int</code>.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,323,public Fraction subtract(Fraction fraction) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,324,"return addSub(fraction, false /* subtract */);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,328,* Implement add and subtract using algorithm described in Knuth 4.5.1.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,330,"* @param fraction the fraction to subtract, must not be <code>null</code>"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,331,"* @param isAdd true to add, false to subtract"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,332,* @return a <code>Fraction</code> instance with the resulting values
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,333,* @throws IllegalArgumentException if the fraction is <code>null</code>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,334,* @throws ArithmeticException if the resulting numerator or denominator
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,335,*   cannot be represented in an <code>int</code>.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,337,"private Fraction addSub(Fraction fraction, boolean isAdd) {"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,338,if (fraction == null) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,339,"throw new IllegalArgumentException(""The fraction must not be null"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,341,// zero is identity for addition.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,342,if (numerator == 0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,343,return isAdd ? fraction : fraction.negate();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,345,if (fraction.numerator == 0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,346,return this;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,348,"// if denominators are randomly distributed, d1 will be 1 about 61%"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,349,// of the time.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,350,"int d1 = MathUtils.gcd(denominator, fraction.denominator);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,351,if (d1==1) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,352,// result is ( (u*v' +/- u'v) / u'v')
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,353,"int uvp = MathUtils.mulAndCheck(numerator, fraction.denominator);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,354,"int upv = MathUtils.mulAndCheck(fraction.numerator, denominator);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,355,return new Fraction
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,356,"(isAdd ? MathUtils.addAndCheck(uvp, upv) :"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,357,"MathUtils.subAndCheck(uvp, upv),"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,358,"MathUtils.mulAndCheck(denominator, fraction.denominator));"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,360,// the quantity 't' requires 65 bits of precision; see knuth 4.5.1
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,361,// exercise 7.  we're going to use a BigInteger.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,362,// t = u(v'/d1) +/- v(u'/d1)
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,363,BigInteger uvp = BigInteger.valueOf(numerator)
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,364,.multiply(BigInteger.valueOf(fraction.denominator/d1));
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,365,BigInteger upv = BigInteger.valueOf(fraction.numerator)
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,366,.multiply(BigInteger.valueOf(denominator/d1));
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,367,BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,368,// but d2 doesn't need extra precision because
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,369,"// d2 = gcd(t,d1) = gcd(t mod d1, d1)"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,370,int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,371,"int d2 = (tmodd1==0)?d1:MathUtils.gcd(tmodd1, d1);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,373,// result is (t/d2) / (u'/d1)(v'/d2)
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,374,BigInteger w = t.divide(BigInteger.valueOf(d2));
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,375,if (w.bitLength() > 31) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,376,throw new ArithmeticException
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,377,"(""overflow: numerator too large after multiply"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,379,"return new Fraction (w.intValue(),"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,380,"MathUtils.mulAndCheck(denominator/d1,"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,381,fraction.denominator/d2));
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,385,"* <p>Multiplies the value of this fraction by another, returning the"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,386,* result in reduced form.</p>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,388,"* @param fraction  the fraction to multiply by, must not be <code>null</code>"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,389,* @return a <code>Fraction</code> instance with the resulting values
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,390,* @throws IllegalArgumentException if the fraction is <code>null</code>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,391,* @throws ArithmeticException if the resulting numerator or denominator exceeds
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,392,*  <code>Integer.MAX_VALUE</code>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,394,public Fraction multiply(Fraction fraction) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,395,if (fraction == null) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,396,"throw new IllegalArgumentException(""The fraction must not be null"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,398,if (numerator == 0 || fraction.numerator == 0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,399,return ZERO;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,401,// knuth 4.5.1
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,402,// make sure we don't overflow unless the result *must* overflow.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,403,"int d1 = MathUtils.gcd(numerator, fraction.denominator);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,404,"int d2 = MathUtils.gcd(fraction.numerator, denominator);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,405,return getReducedFraction
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,406,"(MathUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,407,"MathUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,411,* <p>Divide the value of this fraction by another.</p>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,413,"* @param fraction  the fraction to divide by, must not be <code>null</code>"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,414,* @return a <code>Fraction</code> instance with the resulting values
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,415,* @throws IllegalArgumentException if the fraction is <code>null</code>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,416,* @throws ArithmeticException if the fraction to divide by is zero
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,417,* @throws ArithmeticException if the resulting numerator or denominator exceeds
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,418,*  <code>Integer.MAX_VALUE</code>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,420,public Fraction divide(Fraction fraction) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,421,if (fraction == null) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,422,"throw new IllegalArgumentException(""The fraction must not be null"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,424,if (fraction.numerator == 0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,425,"throw new ArithmeticException(""The fraction to divide by must not be zero"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,427,return multiply(fraction.reciprocal());
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,431,* <p>Creates a <code>Fraction</code> instance with the 2 parts
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,432,* of a fraction Y/Z.</p>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,434,* <p>Any negative signs are resolved to be on the numerator.</p>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,436,"* @param numerator  the numerator, for example the three in 'three sevenths'"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,437,"* @param denominator  the denominator, for example the seven in 'three sevenths'"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,438,"* @return a new fraction instance, with the numerator and denominator reduced"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,439,* @throws ArithmeticException if the denominator is <code>zero</code>
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,441,"public static Fraction getReducedFraction(int numerator, int denominator) {"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,442,if (denominator == 0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,443,"throw new ArithmeticException(""The denominator must not be zero"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,445,if (numerator==0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,446,return ZERO; // normalize zero.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,448,// allow 2^k/-2^31 as a valid fraction (where k>0)
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,449,if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,450,numerator/=2; denominator/=2;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,452,if (denominator < 0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,453,if (numerator==Integer.MIN_VALUE ||
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,454,denominator==Integer.MIN_VALUE) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,455,"throw new ArithmeticException(""overflow: can't negate"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,457,numerator = -numerator;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,458,denominator = -denominator;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,460,// simplify fraction.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,461,"int gcd = MathUtils.gcd(numerator, denominator);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,462,numerator /= gcd;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,463,denominator /= gcd;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,464,"return new Fraction(numerator, denominator);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,468,* Reduce this fraction to lowest terms.  This is accomplished by dividing
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,469,* both numerator and denominator by their greatest common divisor.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,471,private void reduce() {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,472,// reduce numerator and denominator by greatest common denominator.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,473,"int d = MathUtils.gcd(numerator, denominator);"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,474,if (d > 1) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,475,numerator /= d;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,476,denominator /= d;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,479,// move sign to numerator.
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,480,if (denominator < 0) {
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,481,numerator *= -1;
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,482,denominator *= -1;
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,1,package org.apache.commons.math.fraction;
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,3,import org.apache.commons.math.MaxIterationsExceededException;
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,5,public class FractionConversionException extends MaxIterationsExceededException {
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,7,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,8,private static final long serialVersionUID = 4588659344016668813L;
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,11,* Constructs an exception with specified formatted detail message.
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,12,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,13,* @param value double value to convert
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,14,* @param maxIterations maximal number of iterations allowed
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,16,"public FractionConversionException(double value, int maxIterations) {"
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,17,"super(maxIterations,"
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,18,"""Unable to convert {0} to fraction after {1} iterations"","
True,src/java/org/apache/commons/math/fraction/FractionConversionException.java,src/java/org/apache/commons/math/fraction/FractionConversionException.java,19,"new Object[] { new Double(value), new Integer(maxIterations) });"

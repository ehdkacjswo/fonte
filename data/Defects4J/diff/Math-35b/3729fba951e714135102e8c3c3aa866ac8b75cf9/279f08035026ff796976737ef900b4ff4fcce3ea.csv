is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,256,oolean ret;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,259,et = true;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,260, else if (other == null) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,261,et = false;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,262, else  {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,263,ry {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,264,omplex rhs = (Complex)other;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,265,f (rhs.isNaN()) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,266,et = this.isNaN();
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,267, else {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,268,et = (real == rhs.real) && (imaginary == rhs.imaginary);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,270, catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,271,/ ignore exception
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,272,et = false;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,257,return true;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,259,if (other instanceof Complex){
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,260,Complex rhs = (Complex)other;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,261,if (rhs.isNaN()) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,262,return this.isNaN();
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,263,} else {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,264,return (real == rhs.real) && (imaginary == rhs.imaginary);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,276,eturn ret;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,267,return false;
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,341,oolean ret;
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,344,et = true;
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,345, else if (other == null) {
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,346,et = false;
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,347, else {
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,348,ry {
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,349,"/ since fractions are always in lowest terms, numerators and"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,350,/ denominators can be compared directly for equality.
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,351,raction rhs = (Fraction)other;
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,352,et = (numerator == rhs.numerator) &&
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,353,denominator == rhs.denominator);
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,354, catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,355,/ ignore exception
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,356,et = false;
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,342,return true;
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,360,eturn ret;
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,344,if (other instanceof Fraction) {
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,345,"// since fractions are always in lowest terms, numerators and"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,346,// denominators can be compared directly for equality.
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,347,Fraction rhs = (Fraction)other;
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,348,return (numerator == rhs.numerator) &&
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,349,(denominator == rhs.denominator);
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,351,return false;
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,418,f (other == null) {
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,419,eturn false;
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,422,ry {
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,418,if (other instanceof Vector3D) {
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,431, catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,432,/ ignore exception
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,433,eturn false;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,426,return false;
False,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,195,f (other == null) {
False,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,196,eturn false;
False,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,199,ry {
True,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,195,if (other instanceof LinearConstraint) {
False,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,206, catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,207,/ ignore exception
False,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,208,eturn false;
True,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,201,return false;
False,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,112,f (other == null) {
False,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,113,eturn false;
False,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,116,ry {
True,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,112,if (other instanceof LinearObjectiveFunction) {
False,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,121, catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,122,/ ignore exception
False,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,123,eturn false;
True,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,117,return false;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,541,f (other == null) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,542,eturn false;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,545,ry {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,541,if (other instanceof SimplexTableau) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,557, catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,558,/ ignore exception
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,559,eturn false;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,552,return false;
False,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,267,ry {
False,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,268,f (other == null) {
False,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,269,eturn false;
False,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,271,eturn d.equals(((BigReal) other).d);
False,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,272, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,273,eturn false;
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,267,if (this == other){
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,268,return true;
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,271,if (other instanceof BigReal){
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,272,return d.equals(((BigReal) other).d);
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,274,return false;
False,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,161,f (other == null) {
False,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,162,eturn false;
False,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,164,ry {
True,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,161,if (other instanceof TransformerMap) {
False,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,178, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,179,eturn false;
True,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,176,return false;

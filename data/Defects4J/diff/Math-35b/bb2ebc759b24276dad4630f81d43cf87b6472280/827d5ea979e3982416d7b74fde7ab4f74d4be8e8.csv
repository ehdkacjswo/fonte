is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,17,package org.apache.commons.math;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,19,import org.apache.commons.math.analysis.function.Add;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,20,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,21,import org.apache.commons.math.analysis.FunctionUtils;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,24,* Simple benchmarking utilities.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,26,public class PerfTestUtils {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,27,/** Nanoseconds to milliseconds conversion factor ({@value}). */
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,28,public static final double NANO_TO_MILLI = 1e-6;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,31,* Timing.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,33,* @param repeatChunk Each timing measurement will done done for that
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,34,* number of repeats of the code.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,35,* @param repeatStat Timing will be averaged over that number of runs.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,36,* @param methods Code being timed.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,37,"* @return for each of the given {@code methods}, the averaged time (in"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,38,* milliseconds) taken by a call to {@code run}.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,40,"public static double[] time(int repeatChunk,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,41,"int repeatStat,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,42,Runnable ... methods) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,43,final int numMethods = methods.length;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,44,final double[][] times = new double[numMethods][repeatStat];
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,46,for (int k = 0; k < repeatStat; k++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,47,for (int j = 0; j < numMethods; j++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,48,final Runnable r = methods[j];
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,49,final long start = System.nanoTime();
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,50,for (int i = 0; i < repeatChunk; i++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,51,r.run();
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,53,times[j][k] = (System.nanoTime() - start) * NANO_TO_MILLI;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,57,"final MultivariateRealFunction acc = FunctionUtils.collector(new Add(), 0);"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,58,final double[] avgTimes = new double[numMethods];
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,60,final double normFactor = 1d / (repeatStat * repeatChunk);
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,61,for (int j = 0; j < numMethods; j++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,62,avgTimes[j] = normFactor * acc.value(times[j]);
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,65,return avgTimes;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,69,* Timing and report (to standard output).
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,71,* @param title Title of the test (for the report).
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,72,* @param repeatChunk Each timing measurement will done done for that
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,73,* number of repeats of the code.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,74,* @param repeatStat Timing will be averaged over that number of runs.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,75,* @param methods Code being timed.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,76,"* @return for each of the given {@code methods}, the averaged time (in"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,77,* milliseconds) taken by a call to {@code run}.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,79,"public static double[] timeAndReport(String title,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,80,"int repeatChunk,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,81,"int repeatStat,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,82,RunTest ... methods) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,83,System.out.println(title);
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,84,"final double[] time = time(repeatChunk, repeatStat, methods);"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,85,for (int i = 0; i < time.length; i++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,86,"System.out.println(methods[i].getName() + "": "" + time[i] + "" ms"");"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,89,return time;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,93,* Utility class for storing a test label.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,95,public static abstract class RunTest implements Runnable {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,96,private final String name;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,99,* @param name Test name.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,101,public RunTest(String name) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,102,this.name = name;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,106,* @return the name of this test.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,108,public String getName() {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,109,return name;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,112,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,113,public abstract void run();

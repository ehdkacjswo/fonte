is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,83,"DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,137,"INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,139,"INVALID_CROSSOVER_CHROMOSOME_LENGTH(""both chromosomes must have same lengths: ({0}) ({1})""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,140,"INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover works only on instances of AbstractListChromosome""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,277,"OUT_OF_RANGE_CROSSOVER_RATE(""crossover rate ({0}) out of [{1}, {2}] range""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,278,"OUT_OF_RANGE_ELITISM_RATE(""elitism rate ({0}) out of [{1}, {2}] range""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,279,"OUT_OF_RANGE_MUTATION_RATE(""mutation rate ({0}) out of [{1}, {2}] range""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,313,"TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,318,"TOO_SMALL_GENERATION_COUNT(""number of generations ({0}) must be >= {1}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,352,"WRONG_SEQUENCE_LENGTH_RANDOMKEY(""length of sequence for decoding ({0}) has to be equal to the RandomKey length ({1})""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,353,"WRONG_REPR_AND_SREPR_SIZE(""size of representation and sorted representation must be equals: {0} != {1}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,354,"WRONG_ORIG_AND_PERMUTED_SIZE(""original and permuted data must have same length: {0} != {1}""),"
True,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,39,* @throws InvalidRepresentationException iff the <code>representation</code> can not represent
True,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math/genetics/AbstractListChromosome.java,40,*         a valid chromosome
True,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,35,* @throws InvalidRepresentationException iff the <code>representation</code> can not represent
True,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,36,*         a valid chromosome
True,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,45,* @throws InvalidRepresentationException iff the <code>representation</code> can not represent
True,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math/genetics/BinaryChromosome.java,46,*         a valid chromosome
True,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,22,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,37,* @throws MathIllegalArgumentException if the <code>chromosome</code> is not an instance
True,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,38,*         of {@link BinaryChromosome}.
False,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,37,"hrow new IllegalArgumentException(""Binary mutation works on BinaryChromosome only."");"
True,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,42,throw new MathIllegalArgumentException(LocalizedFormats.INVALID_BINARY_CHROMOSOME);
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,31, Cached value of the fitness of this chromosome.
True,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,30,/** Cached value of the fitness of this chromosome. */
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,64,ublic int compareTo(Chromosome another) {
True,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,62,public int compareTo(final Chromosome another) {
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,75,rotected boolean isSame(Chromosome another) {
True,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,73,protected boolean isSame(final Chromosome another) {
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,84, @param population
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,85,            Population to search
True,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,82,* @param population Population to search
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,89,rotected Chromosome findSameChromosome(Population population) {
True,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,86,protected Chromosome findSameChromosome(final Population population) {
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,102, @param population
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,103,            Population to search
True,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,99,* @param population Population to search
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,105,ublic void searchForFitnessUpdate(Population population) {
True,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,101,public void searchForFitnessUpdate(final Population population) {
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,39, @param chromosomes
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,40,            list of chromosomes in the population
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,41, @param populationLimit
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,42,            maximal size of the population
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,43, @param elitismRate
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,44,            how many best chromosomes will be directly transferred to the
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,45,            next generation [in %]
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,41,* @param chromosomes list of chromosomes in the population
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,42,* @param populationLimit maximal size of the population
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,43,* @param elitismRate how many best chromosomes will be directly transferred to the
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,44,*                    next generation [in %]
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,47,"ublic ElitisticListPopulation(List<Chromosome> chromosomes, int populationLimit, double elitismRate) {"
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,46,"public ElitisticListPopulation(final List<Chromosome> chromosomes,"
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,47,"final int populationLimit,"
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,48,final double elitismRate) {
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,57, @param elitismRate
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,58,            how many best chromosomes will be directly transferred to the
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,59,            next generation [in %]
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,58,* @param elitismRate how many best chromosomes will be directly transferred to the
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,59,*                    next generation [in %]
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,61,"ublic ElitisticListPopulation(int populationLimit, double elitismRate) {"
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,61,"public ElitisticListPopulation(final int populationLimit, final double elitismRate) {"
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,67, Start the population for the next generation. The
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,68, <code>{@link #elitismRate}<code> percents of the best
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,69, chromosomes are directly copied to the next generation.
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,67,* Start the population for the next generation. The <code>{@link #elitismRate}<code>
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,68,* percents of the best chromosomes are directly copied to the next generation.
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,92, @param elitismRate
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,93,            how many best chromosomes will be directly transferred to the
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,94,            next generation [in %]
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,91,* @param elitismRate how many best chromosomes will be directly transferred to the
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,92,*                    next generation [in %]
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,93,"* @throws OutOfRangeException if the elitism rate is outside the [0, 1] range"
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,96,ublic void setElitismRate(double elitismRate) {
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,95,public void setElitismRate(final double elitismRate) {
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,98,"hrow new IllegalArgumentException(""Elitism rate has to be in [0,1]"");"
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,97,"throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_ELITISM_RATE, elitismRate, 0, 1);"
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,19,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,20,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,43,* @throws NumberIsTooSmallException if the number of generations is &lt; 1
False,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,41,ublic FixedGenerationCount(int maxGenerations) {
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,45,public FixedGenerationCount(final int maxGenerations) {
False,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,43,"hrow new IllegalArgumentException(""The number of generations has to be >= 0"");"
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,47,"throw new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_GENERATION_COUNT,"
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,48,"maxGenerations, 1, true);"
False,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,56,ublic boolean isSatisfied(Population population) {
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,61,public boolean isSatisfied(final Population population) {
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,19,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,20,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,66,"* @throws OutOfRangeException if the crossover or mutation rate is outside the [0, 1] range"
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,65,ublic GeneticAlgorithm(
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,66,"rossoverPolicy crossoverPolicy, double crossoverRate,"
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,67,"utationPolicy mutationPolicy, double mutationRate,"
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,68,electionPolicy selectionPolicy) {
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,68,"public GeneticAlgorithm(final CrossoverPolicy crossoverPolicy,"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,69,"final double crossoverRate,"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,70,"final MutationPolicy mutationPolicy,"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,71,"final double mutationRate,"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,72,final SelectionPolicy selectionPolicy) {
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,70,"hrow new IllegalArgumentException(""crossoverRate must be between 0 and 1"");"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,75,"throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_CROSSOVER_RATE,"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,76,"crossoverRate, 0, 1);"
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,73,"hrow new IllegalArgumentException(""mutationRate must be between 0 and 1"");"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,79,"throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_MUTATION_RATE,"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,80,"mutationRate, 0, 1);"
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,87,ublic static synchronized void setRandomGenerator(RandomGenerator random) {
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,94,public static synchronized void setRandomGenerator(final RandomGenerator random) {
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,110,"ublic Population evolve(Population initial, StoppingCondition condition) {"
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,117,"public Population evolve(final Population initial, final StoppingCondition condition) {"
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,142,ublic Population nextGeneration(Population current) {
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,149,public Population nextGeneration(final Population current) {
False,src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,39,"ublic InvalidRepresentationException(Localizable pattern,"
False,src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,40,bject ... args) {
True,src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java,39,"public InvalidRepresentationException(Localizable pattern, Object ... args) {"
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,47,* @throws NumberIsTooLargeException if the list of chromosomes exceeds the population limit
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,48,* @throws NotPositiveException if the population limit is not a positive number (&lt; 1)
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,48,"ublic ListPopulation (List<Chromosome> chromosomes, int populationLimit) {"
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,50,"public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {"
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,53,f (populationLimit < 0) {
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,55,if (populationLimit <= 0) {
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,62, Creates a new ListPopulation instance and initializes its inner
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,63, chromosome list.
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,64,* Creates a new ListPopulation instance and initializes its inner chromosome list.
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,67,* @throws NotPositiveException if the population limit is not a positive number (&lt; 1)
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,67,ublic ListPopulation (int populationLimit) {
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,68,f (populationLimit < 0) {
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,69,public ListPopulation(final int populationLimit) {
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,70,if (populationLimit <= 0) {
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,79,ublic void setChromosomes(List<Chromosome> chromosomes) {
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,81,public void setChromosomes(final List<Chromosome> chromosomes) {
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,95,ublic void addChromosome(Chromosome chromosome) {
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,97,public void addChromosome(final Chromosome chromosome) {
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,127,ublic void setPopulationLimit(int populationLimit) {
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,129,public void setPopulationLimit(final int populationLimit) {
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,22,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,71,* @throws MathIllegalArgumentException iff one of the chromosomes is
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,72,*         not an instance of {@link AbstractListChromosome} or the length
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,73,*         of the two chromosomes is not equal
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,70,"ublic ChromosomePair crossover(Chromosome first, Chromosome second) {"
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,76,"public ChromosomePair crossover(final Chromosome first, final Chromosome second) {"
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,72,"hrow new IllegalArgumentException(""One point crossover works on FixedLengthChromosomes only."");"
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,78,throw new MathIllegalArgumentException(LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME);
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,90,* @throws MathIllegalArgumentException if the length of the two chromosomes is different
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,85,"rivate ChromosomePair crossover(AbstractListChromosome<T> first, AbstractListChromosome<T> second) {"
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,92,"private ChromosomePair crossover(final AbstractListChromosome<T> first,"
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,93,final AbstractListChromosome<T> second) {
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,88,"hrow new IllegalArgumentException(""Both chromosomes must have same lengths."");"
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,96,"throw new MathIllegalArgumentException(LocalizedFormats.INVALID_CROSSOVER_CHROMOSOME_LENGTH,"
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,97,"length, second.getLength());"
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,112,eturn new ChromosomePair(
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,113,"irst.newFixedLengthChromosome(child1Rep),"
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,114,econd.newFixedLengthChromosome(child2Rep)
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,121,"return new ChromosomePair(first.newFixedLengthChromosome(child1Rep),"
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,122,second.newFixedLengthChromosome(child2Rep));
False,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,37, @param sequence
False,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,38,            the unpermuted (original) sequence of objects
False,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,39, @return permutation of <code>sequence</code> represented by this
False,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,40,         permutation
True,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,37,* @param sequence the unpermuted (original) sequence of objects
True,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,src/main/java/org/apache/commons/math/genetics/PermutationChromosome.java,38,* @return permutation of <code>sequence</code> represented by this permutation
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,25,import org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,68, Cache of sorted representation (unmodifiable).
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,69,/** Cache of sorted representation (unmodifiable). */
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,81,* @throws InvalidRepresentationException iff the <code>representation</code> can not represent
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,82,*         a valid chromosome
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,82,ublic RandomKey(List<Double> representation) {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,84,public RandomKey(final List<Double> representation) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,99,ublic RandomKey(Double[] representation) {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,101,public RandomKey(final Double[] representation) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,106,ublic List<T> decode(List<T> sequence) {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,108,public List<T> decode(final List<T> sequence) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,120,"rivate static <S> List<S> decodeGeneric(List<S> sequence, List<Double> representation, List<Double> sortedRepr) {"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,122,"private static <S> List<S> decodeGeneric(final List<S> sequence, List<Double> representation,"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,123,final List<Double> sortedRepr) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,124,"hrow new IllegalArgumentException(String.format(""Length of sequence for decoding (%s) has to be equal to the length of the RandomKey (%s)"", l, representation.size()));"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,127,"throw new MathIllegalArgumentException(LocalizedFormats.WRONG_SEQUENCE_LENGTH_RANDOMKEY,"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,128,"l, representation.size());"
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,127,"hrow new IllegalArgumentException(String.format(""Representation and sortedRepr must have same sizes, %d != %d"", representation.size(), sortedRepr.size()));"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,131,"throw new MathIllegalArgumentException(LocalizedFormats.WRONG_REPR_AND_SREPR_SIZE,"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,132,"representation.size(), sortedRepr.size());"
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,150,rotected boolean isSame(Chromosome another) {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,155,protected boolean isSame(final Chromosome another) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,179,rotected void checkValidity(java.util.List<Double> chromosomeRepresentation) throws InvalidRepresentationException {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,184,protected void checkValidity(final List<Double> chromosomeRepresentation)
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,185,throws InvalidRepresentationException {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,182,hrow new InvalidRepresentationException(
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,183,"ocalizedFormats.OUT_OF_RANGE_SIMPLE, val, 0, 1);"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,189,"throw new InvalidRepresentationException(LocalizedFormats.OUT_OF_RANGE_SIMPLE, val, 0, 1);"
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,193, @param l
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,194,            length of the permutation
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,199,* @param l length of the permutation
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,197,ublic static final List<Double> randomPermutation(int l) {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,202,public static final List<Double> randomPermutation(final int l) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,209, @param l
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,210,            length of the permutation
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,214,* @param l length of the permutation
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,213,ublic static final List<Double> identityPermutation(int l) {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,217,public static final List<Double> identityPermutation(final int l) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,234,"ublic static <S> List<Double> comparatorPermutation(List<S> data, Comparator<S> comparator) {"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,238,"public static <S> List<Double> comparatorPermutation(final List<S> data,"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,239,final Comparator<S> comparator) {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,251, @return representation of a permutation corresponding to the permutation <code>originalData -> permutedData</code>
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,252, @throws IllegalArgumentException iff the <code>permutedData</code> and <code>originalData</code> contains different data
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,256,* @return representation of a permutation corresponding to the permutation
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,257,* <code>originalData -> permutedData</code>
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,258,* @throws IllegalArgumentException iff the <code>permutedData</code> and
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,259,* <code>originalData</code> contains different data
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,254,"ublic static <S> List<Double> inducedPermutation(List<S> originalData, List<S> permutedData) throws IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,261,"public static <S> List<Double> inducedPermutation(final List<S> originalData,"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,262,final List<S> permutedData)
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,263,throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,256,"hrow new IllegalArgumentException(""originalData and permutedData must have same length"");"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,266,"throw new MathIllegalArgumentException(LocalizedFormats.WRONG_ORIG_AND_PERMUTED_SIZE,"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,267,"originalData.size(), permutedData.size());"
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,266,"hrow new IllegalArgumentException(""originalData and permutedData must contain the same objects."");"
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,277,throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,288,rivate static List<Integer> baseSequence(int l) {
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,299,private static List<Integer> baseSequence(final int l) {
False,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,40,ublic Chromosome mutate(Chromosome original) {
True,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,40,public Chromosome mutate(final Chromosome original) {
False,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,42,hrow new MathIllegalArgumentException(
False,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,43,"ocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS,"
False,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,44,riginal.getClass().getSimpleName());
True,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,42,"throw new MathIllegalArgumentException(LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS,"
True,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,43,original.getClass().getSimpleName());
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,22,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,39, @param arity
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,40,            how many chromosomes will be drawn to the tournament
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,42,* @param arity how many chromosomes will be drawn to the tournament
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,42,ublic TournamentSelection(int arity) {
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,44,public TournamentSelection(final int arity) {
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,52, @param population
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,53,            the population from which the chromosomes are choosen.
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,54,* @param population the population from which the chromosomes are choosen.
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,56,ublic ChromosomePair select(Population population) {
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,57,eturn new ChromosomePair(
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,58,"ournament((ListPopulation) population),"
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,59,ournament((ListPopulation)population)
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,57,public ChromosomePair select(final Population population) {
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,58,"return new ChromosomePair(tournament((ListPopulation) population),"
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,59,tournament((ListPopulation)population));
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,68, @param population
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,69,            the population from which the chromosomes are choosen.
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,67,* @param population the population from which the chromosomes are choosen.
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,69,* @throws MathIllegalArgumentException if the tournament arity is bigger than the
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,70,* population size
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,72,rivate Chromosome tournament(ListPopulation population) {
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,72,private Chromosome tournament(final ListPopulation population) {
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,74,"hrow new IllegalArgumentException(""Tournament arity cannot be bigger than population size."");"
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,74,"throw new MathIllegalArgumentException(LocalizedFormats.TOO_LARGE_TOURNAMENT_ARITY,"
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,75,"arity, population.getPopulationSize());"
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,111,ublic void setArity(int arity) {
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,112,public void setArity(final int arity) {

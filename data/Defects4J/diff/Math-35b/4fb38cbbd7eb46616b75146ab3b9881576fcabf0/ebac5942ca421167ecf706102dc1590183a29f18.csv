is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,185,"les points {0} et {1} ne sont pas strictements croissants ({2} >= {3})"" },"
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,185,"""les points {0} et {1} ne sont pas strictement croissants ({2} >= {3})"" },"
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,186,"{ ""points {0} and {1} are not strictly decreasing ({2} <= {3})"","
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,187,"""les points {0} et {1} ne sont pas strictement d\u00e9croissants ({2} <= {3})"" },"
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,188,"{ ""points {0} and {1} are not increasing ({2} > {3})"","
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,189,"""les points {0} et {1} ne sont pas croissants ({2} > {3})"" },"
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,190,"{ ""points {0} and {1} are not decreasing ({2} < {3})"","
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,191,"""les points {0} et {1} ne sont pas d\u00e9croissants ({2} < {3})"" },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,19,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,20,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,21,import org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,22,import org.apache.commons.math.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,23,import org.apache.commons.math.analysis.BivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,26,* Function that implements the
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,27,"* <a href=""http://en.wikipedia.org/wiki/Bicubic_interpolation"">"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,28,* bicubic spline interpolation</a>.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,30,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,32,public class BicubicSplineInterpolatingFunction
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,33,implements BivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,35,* Matrix to compute the spline coefficients from the function values
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,36,* and function derivatives values
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,38,private final static double[][] aInv = {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,39,"{ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,40,"{ 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,41,"{ -3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,42,"{ 2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,43,"{ 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,44,"{ 0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,45,"{ 0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,46,"{ 0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,47,"{ -3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,48,"{ 0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,49,"{ 9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,50,"{ -6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,51,"{ 2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,52,"{ 0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,53,"{ -6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1 },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,54,"{ 4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1 }"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,57,/** Samples x-coordinates */
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,58,private final double[] xval;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,59,/** Samples y-coordinates */
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,60,private final double[] yval;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,61,/** Set of cubic splines pacthing the whole data grid */
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,62,private final BicubicSplineFunction[][] splines;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,65,"* @param x Sample values of the x-coordinate, in increasing order"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,66,"* @param y Sample values of the y-coordinate, in increasing order"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,67,* @param z Values of the function on every grid point
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,68,* @param dZdX Values of the partial derivative of function with respect
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,69,* to x on every grid point
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,70,* @param dZdY Values of the partial derivative of function with respect
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,71,* to y on every grid point
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,72,* @param dZdXdY Values of the cross partial derivative of function on
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,73,* every grid point
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,74,* @throws DimensionMismatchException if the various arrays do not contain
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,75,* the expected number of elements.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,76,* @throws IllegalArgumentException if {@code x} or {@code y} are not strictly
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,77,* increasing.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,79,"public BicubicSplineInterpolatingFunction(double[] x,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,80,"double[] y,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,81,"double[][] z,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,82,"double[][] dZdX,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,83,"double[][] dZdY,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,84,double[][] dZdXdY)
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,85,throws MathException {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,86,final int xLen = x.length;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,87,final int yLen = y.length;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,89,if (xLen == 0 || yLen == 0 || z.length == 0 || z[0].length == 0) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,90,"throw MathRuntimeException.createIllegalArgumentException(""no data"");"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,92,if (xLen != z.length) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,93,"throw new DimensionMismatchException(xLen, z.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,95,if (xLen != dZdX.length) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,96,"throw new DimensionMismatchException(xLen, dZdX.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,98,if (xLen != dZdY.length) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,99,"throw new DimensionMismatchException(xLen, dZdY.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,101,if (xLen != dZdXdY.length) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,102,"throw new DimensionMismatchException(xLen, dZdXdY.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,105,"MathUtils.checkOrder(x, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,106,"MathUtils.checkOrder(y, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,108,xval = x.clone();
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,109,yval = y.clone();
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,111,final int lastI = xLen - 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,112,final int lastJ = yLen - 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,113,splines = new BicubicSplineFunction[lastI][lastJ];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,115,for (int i = 0; i < lastI; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,116,if (z[i].length != yLen) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,117,"throw new DimensionMismatchException(z[i].length, yLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,119,if (dZdX[i].length != yLen) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,120,"throw new DimensionMismatchException(dZdX[i].length, yLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,122,if (dZdY[i].length != yLen) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,123,"throw new DimensionMismatchException(dZdY[i].length, yLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,125,if (dZdXdY[i].length != yLen) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,126,"throw new DimensionMismatchException(dZdXdY[i].length, yLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,128,final int ip1 = i + 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,129,for (int j = 0; j < lastJ; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,130,final int jp1 = j + 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,131,final double[] beta = new double[] {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,132,"z[i][j],      z[ip1][j],      z[i][jp1],      z[ip1][jp1],"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,133,"dZdX[i][j],   dZdX[ip1][j],   dZdX[i][jp1],   dZdX[ip1][jp1],"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,134,"dZdY[i][j],   dZdY[ip1][j],   dZdY[i][jp1],   dZdY[ip1][jp1],"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,135,"dZdXdY[i][j], dZdXdY[ip1][j], dZdXdY[i][jp1], dZdXdY[ip1][jp1]"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,138,splines[i][j] = new BicubicSplineFunction(computeSplineCoefficients(beta));
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,144,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,146,"public double value(double x, double y) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,147,"final int i = searchIndex(x, xval);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,148,if (i == -1) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,149,"throw MathRuntimeException.createIllegalArgumentException(""{0} out of [{1}, {2}] range"","
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,150,"x, xval[0], xval[xval.length - 1]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,152,"final int j = searchIndex(y, yval);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,153,if (j == -1) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,154,"throw MathRuntimeException.createIllegalArgumentException(""{0} out of [{1}, {2}] range"","
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,155,"y, yval[0], yval[yval.length - 1]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,158,final double xN = (x - xval[i]) / (xval[i + 1] - xval[i]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,159,final double yN = (y - yval[j]) / (yval[j + 1] - yval[j]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,161,"return splines[i][j].value(xN, yN);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,165,* @param c coordinate
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,166,* @param val coordinate samples
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,167,* @return the index in {@code val} corresponding to the interval
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,168,"* containing {@code c}, or {@code -1} if {@code c} is out of the"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,169,* range defined by the end values of {@code val}
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,171,"private int searchIndex(double c, double[] val) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,172,if (c < val[0]) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,173,return -1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,176,"for (int i = 1, max = val.length; i < max; i++) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,177,if (c <= val[i]) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,178,return i - 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,182,return -1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,186,* Compute the spline coefficients from the list of function values and
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,187,* function partial derivatives values at the four corners of a grid
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,188,* element. They must be specified in the following order:
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,189,* <ul>
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,190,"*  <li>f(0,0)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,191,"*  <li>f(1,0)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,192,"*  <li>f(0,1)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,193,"*  <li>f(1,1)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,194,"*  <li>fx(0,0)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,195,"*  <li>fx(1,0)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,196,"*  <li>fx(0,1)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,197,"*  <li>fx(1,1)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,198,"*  <li>fy(0,0)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,199,"*  <li>fy(1,0)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,200,"*  <li>fy(0,1)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,201,"*  <li>fy(1,1)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,202,"*  <li>fxy(0,0)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,203,"*  <li>fxy(1,0)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,204,"*  <li>fxy(0,1)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,205,"*  <li>fxy(1,1)</li>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,206,* </ul>
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,207,* @param beta List of function values and function partial derivatives
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,208,* values
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,209,* @return the spline coefficients
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,211,private double[] computeSplineCoefficients(double[] beta) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,212,final double[] a = new double[16];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,214,for (int i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,215,double result = 0;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,216,final double[] row = aInv[i];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,217,for (int j = 0; j < 16; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,218,result += row[j] * beta[j];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,220,a[i] = result;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,223,return a;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,228,* 2D-spline function.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,230,class BicubicSplineFunction
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,231,implements BivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,232,/** Coefficients */
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,233,private final double
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,234,"a00, a01, a02, a03,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,235,"a10, a11, a12, a13,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,236,"a20, a21, a22, a23,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,237,"a30, a31, a32, a33;"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,240,* @param a Spline coefficients
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,242,public BicubicSplineFunction(double[] a) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,243,this.a00 = a[0];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,244,this.a10 = a[1];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,245,this.a20 = a[2];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,246,this.a30 = a[3];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,247,this.a01 = a[4];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,248,this.a11 = a[5];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,249,this.a21 = a[6];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,250,this.a31 = a[7];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,251,this.a02 = a[8];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,252,this.a12 = a[9];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,253,this.a22 = a[10];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,254,this.a32 = a[11];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,255,this.a03 = a[12];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,256,this.a13 = a[13];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,257,this.a23 = a[14];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,258,this.a33 = a[15];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,262,* @param x x-coordinate of the interpolation point
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,263,* @param y y-coordinate of the interpolation point
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,264,* @return the interpolated value.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,266,"public double value(double x, double y) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,267,if (x < 0 || x > 1) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,268,"throw MathRuntimeException.createIllegalArgumentException(""{0} out of [{1}, {2}] range"","
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,269,"x, 0, 1);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,271,if (y < 0 || y > 1) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,272,"throw MathRuntimeException.createIllegalArgumentException(""{0} out of [{1}, {2}] range"","
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,273,"y, 0, 1);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,276,final double x2 = x * x;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,277,final double x3 = x2 * x;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,278,final double y2 = y * y;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,279,final double y3 = y2 * y;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,281,return a00 + a01 * y + a02 * y2 + a03 * y3
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,282,+ a10 * x + a11 * x * y + a12 * x * y2 + a13 * x * y3
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,283,+ a20 * x2 + a21 * x2 * y + a22 * x2 * y2 + a23 * x2 * y3
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,284,+ a30 * x3 + a31 * x3 * y + a32 * x3 * y2 + a33 * x3 * y3;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,19,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,20,import org.apache.commons.math.analysis.BivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,23,* Interface representing a bivariate real interpolating function where the
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,24,* sample points must be specified on a regular grid.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,26,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,28,public interface BivariateRealGridInterpolator {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,31,* Computes an interpolating function for the data set.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,33,"* @param xval all the x-coordinates of the interpolation points, sorted"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,34,* in increasing order.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,35,"* @param yval all the y-coordinates of the interpolation points, sorted"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,36,* in increasing order.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,37,* @param zval the values of the interpolation points on all the grid knots:
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,38,"* {@code zval[i][j] = f(xval[i], yval[j])}"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,39,* @return a function which interpolates the data set
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,40,* @throws MathException if arguments violate assumptions made by the
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,41,*         interpolation algorithm
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,43,"BivariateRealFunction interpolate(double[] xval, double[] yval, double[][] zval)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,44,throws MathException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,19,import org.apache.commons.math.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,20,import org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,21,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,22,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,23,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,24,import org.apache.commons.math.analysis.BivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,25,import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,28,* Generates a bicubic interpolation function.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,29,"* Before interpolating, smoothing of the input data is performed using"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,30,* splines.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,31,"* See <b>Handbook on splines for the user</b>, ISBN 084939404X,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,32,* chapter 2.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,34,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,36,public class SmoothingBicubicSplineInterpolator
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,37,implements BivariateRealGridInterpolator {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,39,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,41,"public BivariateRealFunction interpolate(final double[] xval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,42,"final double[] yval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,43,final double[][] zval)
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,44,"throws MathException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,45,if (xval.length == 0 || yval.length == 0 || zval.length == 0) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,46,"throw MathRuntimeException.createIllegalArgumentException(""no data"");"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,48,if (xval.length != zval.length) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,49,"throw new DimensionMismatchException(xval.length, zval.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,52,"MathUtils.checkOrder(xval, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,53,"MathUtils.checkOrder(yval, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,55,final int xLen = xval.length;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,56,final int yLen = yval.length;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,58,"// Samples (first index is y-coordinate, i.e. subarray variable is x)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,59,// 0 <= i < xval.length
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,60,// 0 <= j < yval.length
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,61,"// zX[j][i] = f(xval[i], yval[j])"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,62,final double[][] zX = new double[yLen][xLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,63,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,64,if (zval[i].length != yLen) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,65,"throw new DimensionMismatchException(zval[i].length, yLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,68,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,69,zX[j][i] = zval[i][j];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,73,final SplineInterpolator spInterpolator = new SplineInterpolator();
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,75,"// For each line y[j] (0 <= j < yLen), construct a 1D spline with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,76,// respect to variable x
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,77,final PolynomialSplineFunction[] ySplineX = new PolynomialSplineFunction[yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,78,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,79,"ySplineX[j] = spInterpolator.interpolate(xval, zX[j]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,82,"// For every knot (xval[i], yval[j]) of the grid, calculate corrected"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,83,// values zY_1
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,84,final double[][] zY_1 = new double[xLen][yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,85,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,86,final PolynomialSplineFunction f = ySplineX[j];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,87,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,88,zY_1[i][j] = f.value(xval[i]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,92,"// For each line x[i] (0 <= i < xLen), construct a 1D spline with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,93,// respect to variable y generated by array zY_1[i]
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,94,final PolynomialSplineFunction[] xSplineY = new PolynomialSplineFunction[xLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,95,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,96,"xSplineY[i] = spInterpolator.interpolate(yval, zY_1[i]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,99,"// For every knot (xval[i], yval[j]) of the grid, calculate corrected"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,100,// values zY_2
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,101,final double[][] zY_2 = new double[xLen][yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,102,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,103,final PolynomialSplineFunction f = xSplineY[i];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,104,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,105,zY_2[i][j] = f.value(yval[j]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,109,// Partial derivatives with respect to x at the grid knots
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,110,final double[][] dZdX = new double[xLen][yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,111,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,112,final UnivariateRealFunction f = ySplineX[j].derivative();
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,113,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,114,dZdX[i][j] = f.value(xval[i]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,118,// Partial derivatives with respect to y at the grid knots
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,119,final double[][] dZdY = new double[xLen][yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,120,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,121,final UnivariateRealFunction f = xSplineY[i].derivative();
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,122,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,123,dZdY[i][j] = f.value(yval[j]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,127,// Cross partial derivatives
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,128,final double[][] dZdXdY = new double[xLen][yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,129,for (int i = 0; i < xLen ; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,130,"final int nI = nextIndex(i, xLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,131,final int pI = previousIndex(i);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,132,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,133,"final int nJ = nextIndex(j, yLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,134,final int pJ = previousIndex(j);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,135,dZdXdY[i][j] =  (zY_2[nI][nJ] - zY_2[nI][pJ]
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,136,- zY_2[pI][nJ] + zY_2[pI][pJ])
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,137,/ ((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) ;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,141,// Create the interpolating splines
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,142,"return new BicubicSplineInterpolatingFunction(xval, yval, zY_2,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,143,"dZdX, dZdY, dZdXdY);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,147,"* Compute the next index of an array, clipping if necessary."
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,148,* It is assumed (but not checked) that {@code i} is larger than or equal to 0}.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,150,* @param i Index
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,151,* @param max Upper limit of the array
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,152,* @return the next index
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,154,"private int nextIndex(int i, int max) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,155,final int index = i + 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,156,return index < max ? index : index - 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,159,"* Compute the previous index of an array, clipping if necessary."
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,160,* It is assumed (but not checked) that {@code i} is smaller than the size of the array.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,162,* @param i Index
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,163,* @param max Upper limit of the array
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,164,* @return the previous index
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,166,private int previousIndex(int i) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,167,final int index = i - 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,168,return index >= 0 ? index : 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,107,* Remove all observations.
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,109,public void clearObservations() {
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,110,observations.clear();
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1792,* Checks that the given array is sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1794,* @param val Values
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1795,"* @param dir Order direction (-1 for decreasing, 1 for increasing)"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1796,* @param strict Whether the order should be strict
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1797,* @throws IllegalArgumentException if the array is not sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1799,"public static void checkOrder(double[] val, int dir, boolean strict) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1800,double previous = val[0];
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1802,"for (int i = 1, max = val.length; i < max; i++) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1803,if (dir > 0) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1804,if (strict) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1805,if (val[i] <= previous) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1806,"throw MathRuntimeException.createIllegalArgumentException(""points {0} and {1} are not strictly increasing ({2} >= {3})"","
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1807,"i - 1, i, previous, val[i]);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1809,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1810,if (val[i] < previous) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1811,"throw MathRuntimeException.createIllegalArgumentException(""points {0} and {1} are not increasing ({2} > {3})"","
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1812,"i - 1, i, previous, val[i]);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1815,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1816,if (strict) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1817,if (val[i] >= previous) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1818,"throw MathRuntimeException.createIllegalArgumentException(""points {0} and {1} are not strictly decreasing ({2} <= {3})"","
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1819,"i - 1, i, previous, val[i]);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1821,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1822,if (val[i] > previous) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1823,"throw MathRuntimeException.createIllegalArgumentException(""points {0} and {1} are not decreasing ({2} < {3})"","
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1824,"i - 1, i, previous, val[i]);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1829,previous = val[i];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,19,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,20,import org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,21,import org.apache.commons.math.analysis.BivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,26,* Testcase for the bicubic function.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,28,"* @version $Revision: 821626 $ $Date: 2009-10-04 23:57:30 +0200 (Sun, 04 Oct 2009) $"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,30,public final class BicubicSplineInterpolatingFunctionTest {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,32,* Test preconditions.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,34,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,35,public void testPreconditions() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,36,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,37,"double[] yval = new double[] {-4, -3, -1, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,38,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,40,"BivariateRealFunction bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,41,"zval, zval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,43,"double[] wxval = new double[] {3, 2, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,44,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,45,"bcf = new BicubicSplineInterpolatingFunction(wxval, yval, zval, zval, zval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,46,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,47,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,48,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,50,"double[] wyval = new double[] {-4, -1, -1, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,51,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,52,"bcf = new BicubicSplineInterpolatingFunction(xval, wyval, zval, zval, zval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,53,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,54,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,55,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,57,double[][] wzval = new double[xval.length][yval.length - 1];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,58,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,59,"bcf = new BicubicSplineInterpolatingFunction(xval, yval, wzval, zval, zval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,60,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,61,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,62,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,64,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,65,"bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval, wzval, zval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,66,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,67,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,68,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,70,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,71,"bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval, zval, wzval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,72,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,73,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,74,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,76,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,77,"bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval, zval, zval, wzval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,78,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,79,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,80,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,83,wzval = new double[xval.length - 1][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,84,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,85,"bcf = new BicubicSplineInterpolatingFunction(xval, yval, wzval, zval, zval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,86,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,87,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,88,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,90,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,91,"bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval, wzval, zval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,92,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,93,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,94,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,96,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,97,"bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval, zval, wzval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,98,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,99,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,100,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,102,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,103,"bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval, zval, zval, wzval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,104,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,105,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,106,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,111,* Test for a plane.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,112,* <p>
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,113,* z = 2 x - 3 y + 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,115,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,116,public void testPlane() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,117,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,118,"double[] yval = new double[] {-4, -3, -1, 2, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,119,// Function values
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,120,BivariateRealFunction f = new BivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,121,"public double value(double x, double y) {"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,122,return 2 * x - 3 * y + 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,125,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,126,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,127,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,128,"zval[i][j] = f.value(xval[i], yval[j]);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,131,// Partial derivatives with respect to x
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,132,double[][] dZdX = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,133,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,134,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,135,dZdX[i][j] = 2;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,138,// Partial derivatives with respect to y
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,139,double[][] dZdY = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,140,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,141,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,142,dZdY[i][j] = -3;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,145,// Partial cross-derivatives
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,146,double[][] dZdXdY = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,147,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,148,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,149,dZdXdY[i][j] = 0;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,153,"BivariateRealFunction bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,154,"dZdX, dZdY, dZdXdY);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,155,"double x, y;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,156,"double expected, result;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,158,x = 4;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,159,y = -3;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,160,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,161,"result = bcf.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,162,"Assert.assertEquals(""On sample point"","
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,163,"expected, result, 1e-15);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,165,x = 4.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,166,y = -1.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,167,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,168,"result = bcf.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,169,"Assert.assertEquals(""Half-way between sample points (middle of the patch)"","
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,170,"expected, result, 0.3);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,172,x = 3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,173,y = -3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,174,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,175,"result = bcf.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,176,"Assert.assertEquals(""Half-way between sample points (border of the patch)"","
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,177,"expected, result, 0.3);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,181,* Test for a paraboloid.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,182,* <p>
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,183,* z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,185,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,186,public void testParaboloid() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,187,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,188,"double[] yval = new double[] {-4, -3, -1, 2, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,189,// Function values
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,190,BivariateRealFunction f = new BivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,191,"public double value(double x, double y) {"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,192,return 2 * x * x - 3 * y * y + 4 * x * y - 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,195,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,196,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,197,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,198,"zval[i][j] = f.value(xval[i], yval[j]);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,201,// Partial derivatives with respect to x
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,202,double[][] dZdX = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,203,BivariateRealFunction dfdX = new BivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,204,"public double value(double x, double y) {"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,205,return 4 * (x + y);
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,208,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,209,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,210,"dZdX[i][j] = dfdX.value(xval[i], yval[j]);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,213,// Partial derivatives with respect to y
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,214,double[][] dZdY = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,215,BivariateRealFunction dfdY = new BivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,216,"public double value(double x, double y) {"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,217,return 4 * x - 6 * y;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,220,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,221,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,222,"dZdY[i][j] = dfdY.value(xval[i], yval[j]);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,225,// Partial cross-derivatives
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,226,double[][] dZdXdY = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,227,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,228,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,229,dZdXdY[i][j] = 4;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,233,"BivariateRealFunction bcf = new BicubicSplineInterpolatingFunction(xval, yval, zval,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,234,"dZdX, dZdY, dZdXdY);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,235,"double x, y;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,236,"double expected, result;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,238,x = 4;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,239,y = -3;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,240,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,241,"result = bcf.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,242,"Assert.assertEquals(""On sample point"","
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,243,"expected, result, 1e-15);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,245,x = 4.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,246,y = -1.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,247,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,248,"result = bcf.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,249,"Assert.assertEquals(""Half-way between sample points (middle of the patch)"","
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,250,"expected, result, 2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,252,x = 3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,253,y = -3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,254,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,255,"result = bcf.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,256,"Assert.assertEquals(""Half-way between sample points (border of the patch)"","
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,257,"expected, result, 2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,19,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,20,import org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,21,import org.apache.commons.math.analysis.BivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,26,* Testcase for the bicubic interpolator.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,28,"* @version $Revision: 821626 $ $Date: 2009-10-04 23:57:30 +0200 (Sun, 04 Oct 2009) $"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,30,public final class SmoothingBicubicSplineInterpolatorTest {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,32,* Test preconditions.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,34,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,35,public void testPreconditions() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,36,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,37,"double[] yval = new double[] {-4, -3, -1, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,38,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,40,BivariateRealGridInterpolator interpolator = new SmoothingBicubicSplineInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,42,"BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,44,"double[] wxval = new double[] {3, 2, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,45,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,46,"p = interpolator.interpolate(wxval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,47,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,48,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,49,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,52,"double[] wyval = new double[] {-4, -3, -1, -1};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,53,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,54,"p = interpolator.interpolate(xval, wyval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,55,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,56,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,57,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,60,double[][] wzval = new double[xval.length][yval.length + 1];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,61,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,62,"p = interpolator.interpolate(xval, wyval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,63,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,64,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,65,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,67,wzval = new double[xval.length - 1][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,68,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,69,"p = interpolator.interpolate(xval, yval, wzval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,70,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,71,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,72,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,74,wzval = new double[xval.length][yval.length - 1];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,75,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,76,"p = interpolator.interpolate(xval, yval, wzval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,77,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,78,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,79,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,84,* Test of interpolator for a plane.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,85,* <p>
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,86,* z = 2 x - 3 y + 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,88,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,89,public void testPlane() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,90,BivariateRealFunction f = new BivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,91,"public double value(double x, double y) {"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,92,return 2 * x - 3 * y + 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,96,BivariateRealGridInterpolator interpolator = new SmoothingBicubicSplineInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,98,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,99,"double[] yval = new double[] {-4, -3, -1, 2, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,100,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,101,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,102,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,103,"zval[i][j] = f.value(xval[i], yval[j]);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,107,"BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,108,"double x, y;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,109,"double expected, result;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,111,x = 4;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,112,y = -3;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,113,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,114,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,115,"Assert.assertEquals(""On sample point"", expected, result, 1e-15);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,117,x = 4.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,118,y = -1.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,119,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,120,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,121,"Assert.assertEquals(""half-way between sample points (middle of the patch)"", expected, result, 0.3);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,123,x = 3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,124,y = -3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,125,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,126,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,127,"Assert.assertEquals(""half-way between sample points (border of the patch)"", expected, result, 0.3);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,131,* Test of interpolator for a paraboloid.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,132,* <p>
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,133,* z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,135,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,136,public void testParaboloid() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,137,BivariateRealFunction f = new BivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,138,"public double value(double x, double y) {"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,139,return 2 * x * x - 3 * y * y + 4 * x * y - 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,143,BivariateRealGridInterpolator interpolator = new SmoothingBicubicSplineInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,145,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,146,"double[] yval = new double[] {-4, -3, -2, -1, 0.5, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,147,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,148,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,149,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,150,"zval[i][j] = f.value(xval[i], yval[j]);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,154,"BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,155,"double x, y;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,156,"double expected, result;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,158,x = 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,159,y = 0.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,160,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,161,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,162,"Assert.assertEquals(""On sample point"", expected, result, 1e-13);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,164,x = 4.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,165,y = -1.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,166,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,167,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,168,"Assert.assertEquals(""half-way between sample points (middle of the patch)"", expected, result, 0.2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,170,x = 3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,171,y = -3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,172,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,173,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,174,"Assert.assertEquals(""half-way between sample points (border of the patch)"", expected, result, 0.2);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1384,public void testCheckOrder() {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1385,"MathUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 15}, 1, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1386,"MathUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 2}, 1, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1387,"MathUtils.checkOrder(new double[] {3, -5.5, -11, -27.5}, -1, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1388,"MathUtils.checkOrder(new double[] {3, 0, 0, -5.5, -11, -27.5}, -1, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1390,try {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1391,"MathUtils.checkOrder(new double[] {-15, -5.5, -1, -1, 2, 15}, 1, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1392,"fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1393,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1394,// Expected
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1396,try {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1397,"MathUtils.checkOrder(new double[] {-15, -5.5, -1, -2, 2}, 1, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1398,"fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1399,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1400,// Expected
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1402,try {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1403,"MathUtils.checkOrder(new double[] {3, 3, -5.5, -11, -27.5}, -1, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1404,"fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1405,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1406,// Expected
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1408,try {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1409,"MathUtils.checkOrder(new double[] {3, -1, 0, -5.5, -11, -27.5}, -1, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1410,"fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1411,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1412,// Expected

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,31,import org.apache.commons.math.linear.RealMatrix;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,256,/** verifies that two matrices are close (1-norm) */
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,257,"public static void assertEquals(String msg, RealMatrix expected, RealMatrix observed,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,258,double tolerance) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,260,if (observed == null) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,261,"Assert.fail(msg + ""\nObserved is null"");"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,264,if (expected.getColumnDimension() != observed.getColumnDimension() ||
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,265,expected.getRowDimension() != observed.getRowDimension()) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,266,StringBuffer messageBuffer = new StringBuffer(msg);
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,267,"messageBuffer.append(""\nObserved has incorrect dimensions."");"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,268,"messageBuffer.append(""\nobserved is "" + observed.getRowDimension() +"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,269,""" x "" + observed.getColumnDimension());"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,270,"messageBuffer.append(""\nexpected "" + expected.getRowDimension() +"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,271,""" x "" + expected.getColumnDimension());"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,272,Assert.fail(messageBuffer.toString());
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,275,RealMatrix delta = expected.subtract(observed);
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,276,if (delta.getNorm() >= tolerance) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,277,StringBuffer messageBuffer = new StringBuffer(msg);
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,278,"messageBuffer.append(""\nExpected: "" + expected);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,279,"messageBuffer.append(""\nObserved: "" + observed);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,280,"messageBuffer.append(""\nexpected - observed: "" + delta);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,281,Assert.fail(messageBuffer.toString());
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,285,/** verifies that two arrays are close (sup norm) */
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,286,"public static void assertEquals(String msg, double[] m, double[] n,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,287,double tolerance) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,288,if (m.length != n.length) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,289,"Assert.fail(""vectors not same length"");"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,291,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,292,"Assert.assertEquals(msg + "" "" +  i + "" elements differ"","
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,293,"m[i],n[i],tolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,23,import org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,174,"ssertClose(""m-n = m + -n"",m.subtract(m2),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,176,"TestUtils.assertEquals(""m-n = m + -n"",m.subtract(m2),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,190,"ssertClose(""inverse multiply"",m.multiply(mInv),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,192,"TestUtils.assertEquals(""inverse multiply"",m.multiply(mInv),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,192,"ssertClose(""inverse multiply"",mInv.multiply(m),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,194,"TestUtils.assertEquals(""inverse multiply"",mInv.multiply(m),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,194,"ssertClose(""identity multiply"",m.multiply(identity),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,196,"TestUtils.assertEquals(""identity multiply"",m.multiply(identity),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,196,"ssertClose(""identity multiply"",identity.multiply(mInv),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,198,"TestUtils.assertEquals(""identity multiply"",identity.multiply(mInv),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,198,"ssertClose(""identity multiply"",m2.multiply(identity),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,200,"TestUtils.assertEquals(""identity multiply"",m2.multiply(identity),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,218,"ssertClose(""m3*m4=m5"", m3.multiply(m4), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,220,"TestUtils.assertEquals(""m3*m4=m5"", m3.multiply(m4), m5, entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,237,"ssertClose(""scalar add"",new RealMatrixImpl(testDataPlus2),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,239,"TestUtils.assertEquals(""scalar add"",new RealMatrixImpl(testDataPlus2),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,244,"ssertClose(""identity operate"", testVector,"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,246,"TestUtils.assertEquals(""identity operate"", testVector,"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,246,"ssertClose(""identity operate"", testVector,"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,248,"TestUtils.assertEquals(""identity operate"", testVector,"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,274,"ssertClose(""inverse-transpose"", mIT, mTI, normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,276,"TestUtils.assertEquals(""inverse-transpose"", mIT, mTI, normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,277,"ssertClose(""transpose"",mt,m.transpose(),normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,279,"TestUtils.assertEquals(""transpose"",mt,m.transpose(),normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,283,"ssertClose(""premultiply"", m.preMultiply(testVector),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,285,"TestUtils.assertEquals(""premultiply"", m.preMultiply(testVector),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,285,"ssertClose(""premultiply"", m.preMultiply(new RealVectorImpl(testVector).getData()),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,287,"TestUtils.assertEquals(""premultiply"", m.preMultiply(new RealVectorImpl(testVector).getData()),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,300,"ssertClose(""m3*m4=m5"", m4.preMultiply(m3), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,302,"TestUtils.assertEquals(""m3*m4=m5"", m4.preMultiply(m3), m5, entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,305,"ssertClose(""inverse multiply"",m.preMultiply(mInv),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,307,"TestUtils.assertEquals(""inverse multiply"",m.preMultiply(mInv),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,307,"ssertClose(""inverse multiply"",mInv.preMultiply(m),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,309,"TestUtils.assertEquals(""inverse multiply"",mInv.preMultiply(m),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,309,"ssertClose(""identity multiply"",m.preMultiply(identity),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,311,"TestUtils.assertEquals(""identity multiply"",m.preMultiply(identity),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,311,"ssertClose(""identity multiply"",identity.preMultiply(mInv),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,313,"TestUtils.assertEquals(""identity multiply"",identity.preMultiply(mInv),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,323,"ssertClose(""get row"",m.getRow(0),testDataRow1,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,324,"ssertClose(""get col"",m.getColumn(2),testDataCol3,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,325,"TestUtils.assertEquals(""get row"",m.getRow(0),testDataRow1,entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,326,"TestUtils.assertEquals(""get col"",m.getColumn(2),testDataCol3,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,958,** verifies that two matrices are close (1-norm) */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,959,"rotected void assertClose(String msg, RealMatrix m, RealMatrix n,"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,960,ouble tolerance) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,961,"ssertTrue(msg,m.subtract(n).getNorm() < tolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,964,** verifies that two vectors are close (sup norm) */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,965,"rotected void assertClose(String msg, double[] m, double[] n,"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,966,ouble tolerance) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,967,f (m.length != n.length) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,968,"ail(""vectors not same length"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,970,or (int i = 0; i < m.length; i++) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,971,"ssertEquals(msg + "" "" +  i + "" elements differ"","
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,972,"[i],n[i],tolerance);"

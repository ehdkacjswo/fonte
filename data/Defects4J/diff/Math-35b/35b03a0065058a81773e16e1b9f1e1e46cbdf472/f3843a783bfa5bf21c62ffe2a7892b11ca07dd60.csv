is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,36,public void testCostExceptions() throws ConvergenceException {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,37,CostFunction wrong =
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,38,new CostFunction() {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,39,public double cost(double[] x) throws CostException {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,40,if (x[0] < 0) {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,41,"throw new CostException(""{0}"", new Object[] { ""oops""});"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,42,} else if (x[0] > 1) {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,43,"throw new CostException(new RuntimeException(""oops""));"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,44,} else {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,45,return x[0] * (1 - x[0]);
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,49,try {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,50,"new MultiDirectional(1.9, 0.4).minimizes(wrong, 10, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,51,"new double[] { -0.5 }, new double[] { 0.5 });"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,52,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,53,} catch (CostException ce) {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,54,// expected behavior
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,55,assertNull(ce.getCause());
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,56,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,57,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,59,try {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,60,"new MultiDirectional(1.9, 0.4).minimizes(wrong, 10, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,61,"new double[] { 0.5 }, new double[] { 1.5 });"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,62,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,63,} catch (CostException ce) {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,64,// expected behavior
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,65,assertNotNull(ce.getCause());
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,66,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,67,"fail(""wrong exception caught: "" + e.getMessage());"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,52,"ew double[] { -1.2,  1.0 },"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,53,"ew double[] {  3.5, -2.3 });"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,87,new double[][] {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,88,"{ -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,56,ssertTrue(optimum.cost > 0.02);
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,92,assertTrue(optimum.cost > 0.01);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,26,import org.apache.commons.math.random.JDKRandomGenerator;
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,27,import org.apache.commons.math.random.NotPositiveDefiniteMatrixException;
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,28,import org.apache.commons.math.random.RandomGenerator;
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,29,import org.apache.commons.math.random.RandomVectorGenerator;
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,30,import org.apache.commons.math.random.UncorrelatedRandomVectorGenerator;
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,31,import org.apache.commons.math.random.UniformRandomGenerator;
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,42,public void testCostExceptions() throws ConvergenceException {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,43,CostFunction wrong =
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,44,new CostFunction() {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,45,public double cost(double[] x) throws CostException {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,46,if (x[0] < 0) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,47,"throw new CostException(""{0}"", new Object[] { ""oops""});"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,48,} else if (x[0] > 1) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,49,"throw new CostException(new RuntimeException(""oops""));"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,50,} else {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,51,return x[0] * (1 - x[0]);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,55,try {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,56,"new NelderMead(0.9, 1.9, 0.4, 0.6).minimizes(wrong, 10, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,57,"new double[] { -0.5 }, new double[] { 0.5 });"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,58,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,59,} catch (CostException ce) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,60,// expected behavior
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,61,assertNull(ce.getCause());
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,62,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,63,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,65,try {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,66,"new NelderMead(0.9, 1.9, 0.4, 0.6).minimizes(wrong, 10, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,67,"new double[] { 0.5 }, new double[] { 1.5 });"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,68,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,69,} catch (CostException ce) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,70,// expected behavior
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,71,assertNotNull(ce.getCause());
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,72,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,73,"fail(""wrong exception caught: "" + e.getMessage());"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,37,"hrows CostException, ConvergenceException {"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,78,"throws CostException, ConvergenceException, NotPositiveDefiniteMatrixException {"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,90,count = 0;
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,91,NelderMead nm = new NelderMead();
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,92,try {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,93,"nm.minimizes(rosenbrock, 100, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,94,new double[][] {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,95,"{ -1.2, 1.0 }, { 3.5, -2.3 }, { 0.4, 1.5 }"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,96,"}, 1, 5384353l);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,97,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,98,} catch (ConvergenceException ce) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,99,// expected behavior
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,100,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,101,"fail(""wrong exception caught: "" + e.getMessage());"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,51,"ew NelderMead().minimizes(rosenbrock, 100, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,52,"ew double[] { -1.2,  1.0 },"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,53,"ew double[] {  3.5, -2.3 });"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,106,"nm.minimizes(rosenbrock, 100, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,107,new double[][] {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,108,"{ -1.2, 1.0 }, { 0.9, 1.2 }, { 3.5, -2.3 }"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,109,"}, 3, 1642738l);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,111,assertTrue(count < 200);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,112,"assertEquals(0.0, optimum.cost, 5.0e-5);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,113,"assertEquals(1.0, optimum.point[0], 0.01);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,114,"assertEquals(1.0, optimum.point[1], 0.01);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,116,PointCostPair[] minima = nm.getMinima();
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,117,"assertEquals(3, minima.length);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,118,for (int i = 1; i < minima.length; ++i) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,119,if (minima[i] != null) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,120,assertTrue(minima[i-1].cost <= minima[i].cost);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,55,ssertTrue(count < 50);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,56,"ssertEquals(0.0, optimum.cost, 6.0e-4);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,57,"ssertEquals(1.0, optimum.point[0], 0.05);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,58,"ssertEquals(1.0, optimum.point[1], 0.05);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,124,RandomGenerator rg = new JDKRandomGenerator();
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,125,rg.setSeed(64453353l);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,126,RandomVectorGenerator rvg =
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,127,"new UncorrelatedRandomVectorGenerator(new double[] { 0.9, 1.1 },"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,128,"new double[] { 0.2, 0.2 },"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,129,new UniformRandomGenerator(rg));
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,130,optimum =
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,131,"nm.minimizes(rosenbrock, 100, new ValueChecker(1.0e-3), rvg);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,132,"assertEquals(0.0, optimum.cost, 2.0e-4);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,133,optimum =
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,134,"nm.minimizes(rosenbrock, 100, new ValueChecker(1.0e-3), rvg, 3);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,135,"assertEquals(0.0, optimum.cost, 3.0e-5);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,155,NelderMead nm = new NelderMead();
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,79,"ew NelderMead().minimizes(powell, 200, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,80,"ew double[] {  3.0, -1.0, 0.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,81,"ew double[] {  4.0,  0.0, 1.0, 2.0 });"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,157,"nm.minimizes(powell, 200, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,158,"new double[] {  3.0, -1.0, 0.0, 1.0 },"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,159,"new double[] {  4.0,  0.0, 1.0, 2.0 },"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,160,"1, 1642738l);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,40,*   <li>a {@link #getDeterminant() getDeterminant} method has been added.</li>
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,41,*   <li>a {@link #getSolver() getSolver} method has been added.</li>
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,99,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,100,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,102,double getDeterminant();
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,105,* Get a solver for A &times; X = B.
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,106,* @return a solver
True,src/java/org/apache/commons/math/linear/EigenDecomposition.java,src/java/org/apache/commons/math/linear/EigenDecomposition.java,108,DecompositionSolver getSolver();
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,58,rivate static final long serialVersionUID = 3125911889630623276L;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,58,private static final long serialVersionUID = 1625101476333719659L;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,304,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,305,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,306,* @see #isNonSingular()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,308,public double getDeterminant() {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,309,double determinant = 1;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,310,for (double lambda : eigenvalues) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,311,determinant *= lambda;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,313,return determinant;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,316,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,317,public DecompositionSolver getSolver() {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,318,if (eigenvectors == null) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,319,findEigenVectors();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,321,"return new Solver(eigenvalues, eigenvectors);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,324,/** Specialized solver. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,325,private static class Solver implements DecompositionSolver {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,327,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,328,private static final long serialVersionUID = -8965845906036558410L;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,330,/** Eigenvalues. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,331,private final double[] eigenvalues;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,333,/** Eigenvectors. */
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,334,private final RealVectorImpl[] eigenvectors;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,337,* Build a solver from decomposed matrix.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,338,* @param eigenvalues eigenvalues
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,339,* @param eigenvectors eigenvectors
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,341,"private Solver(final double[] eigenvalues, final RealVectorImpl[] eigenvectors) {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,342,this.eigenvalues  = eigenvalues;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,343,this.eigenvectors = eigenvectors;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,346,/** Solve the linear equation A &times; X = B for symmetric matrices A.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,347,"* <p>This method only find exact linear solutions, i.e. solutions for"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,348,* which ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,349,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,350,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,351,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,352,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,354,public double[] solve(final double[] b)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,355,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,357,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,358,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,361,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,362,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,363,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,366,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,367,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,368,final RealVectorImpl v = eigenvectors[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,369,final double[] vData = v.getDataRef();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,370,final double s = v.dotProduct(b) / eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,371,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,372,bp[j] += s * vData[j];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,376,return bp;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,380,/** Solve the linear equation A &times; X = B for symmetric matrices A.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,381,"* <p>This method only find exact linear solutions, i.e. solutions for"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,382,* which ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,383,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,384,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,385,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,386,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,388,public RealVector solve(final RealVector b)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,389,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,391,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,392,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,395,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,396,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,397,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,400,final double[] bp = new double[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,401,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,402,final RealVectorImpl v = eigenvectors[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,403,final double[] vData = v.getDataRef();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,404,final double s = v.dotProduct(b) / eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,405,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,406,bp[j] += s * vData[j];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,410,"return new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,414,/** Solve the linear equation A &times; X = B for symmetric matrices A.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,415,"* <p>This method only find exact linear solutions, i.e. solutions for"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,416,* which ||A &times; X - B|| is exactly 0.</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,417,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,418,* @return a matrix X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,419,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,420,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,422,public RealMatrix solve(final RealMatrix b)
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,423,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,425,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,426,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,429,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,430,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,431,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,434,final int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,435,final double[][] bp = new double[m][nColB];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,436,for (int k = 0; k < nColB; ++k) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,437,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,438,final RealVectorImpl v = eigenvectors[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,439,final double[] vData = v.getDataRef();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,440,double s = 0;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,441,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,442,"s += v.getEntry(j) * b.getEntry(j, k);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,444,s /= eigenvalues[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,445,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,446,bp[j][k] += s * vData[j];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,451,return MatrixUtils.createRealMatrix(bp);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,456,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,457,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,459,public boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,460,for (double lambda : eigenvalues) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,461,if (lambda == 0) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,462,return false;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,465,return true;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,468,/** Get the inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,469,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,470,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,472,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,473,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,475,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,476,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,479,final int m = eigenvalues.length;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,480,final double[][] invData = new double[m][m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,482,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,483,final double[] invI = invData[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,484,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,485,double invIJ = 0;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,486,for (int k = 0; k < m; ++k) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,487,final double[] vK = eigenvectors[k].getDataRef();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,488,invIJ += vK[i] * vK[j] / eigenvalues[k];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,490,invI[j] = invIJ;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,493,return MatrixUtils.createRealMatrix(invData);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,32,rivate static final long serialVersionUID = 4339008311386325953L;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,32,private static final long serialVersionUID = -74798755223915020L;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,34,** Underlying decomposition. */
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,35,rivate final EigenDecomposition decomposition;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,34,/** Underlying solver. */
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,35,private final DecompositionSolver solver;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,37,/** Determinant. */
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,38,private final double determinant;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,42,his.decomposition = decomposition;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,45,this.solver      = decomposition.getSolver();
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,46,this.determinant = decomposition.getDeterminant();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,56,f (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,57,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,60,inal double[] eigenvalues = decomposition.getEigenvalues();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,61,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,62,f (b.length != m) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,63,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,66,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,67,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,68,inal RealVector v = decomposition.getEigenvector(i);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,69,inal double s = v.dotProduct(b) / eigenvalues[i];
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,70,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,71,p[j] += s * v.getEntry(j);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,75,eturn bp;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,59,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,90,f (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,91,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,94,inal double[] eigenvalues = decomposition.getEigenvalues();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,95,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,96,f (b.getDimension() != m) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,97,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,100,inal double[] bp = new double[m];
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,101,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,102,inal RealVector v = decomposition.getEigenvector(i);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,103,inal double s = v.dotProduct(b) / eigenvalues[i];
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,104,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,105,p[j] += s * v.getEntry(j);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,109,"eturn new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,72,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,124,f (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,125,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,128,inal double[] eigenvalues = decomposition.getEigenvalues();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,129,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,130,f (b.getRowDimension() != m) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,131,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,134,inal int nColB = b.getColumnDimension();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,135,inal double[][] bp = new double[m][nColB];
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,136,or (int k = 0; k < nColB; ++k) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,137,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,138,inal RealVector v = decomposition.getEigenvector(i);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,139,ouble s = 0;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,140,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,141," += v.getEntry(j) * b.getEntry(j, k);"
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,143, /= eigenvalues[i];
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,144,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,145,p[j][k] += s * v.getEntry(j);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,150,eturn MatrixUtils.createRealMatrix(bp);
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,85,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,160,ouble determinant = 1;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,161,or (double lambda : decomposition.getEigenvalues()) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,162,eterminant *= lambda;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,172,or (double lambda : decomposition.getEigenvalues()) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,173,f (lambda == 0) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,174,eturn false;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,177,eturn true;
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,102,return solver.isNonSingular();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,187,f (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,188,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,191,inal double[] eigenvalues = decomposition.getEigenvalues();
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,192,inal int m = eigenvalues.length;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,193,inal double[][] invData = new double[m][m];
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,195,or (int i = 0; i < m; ++i) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,196,inal double[] invI = invData[i];
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,197,or (int j = 0; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,198,ouble invIJ = 0;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,199,or (int k = 0; k < m; ++k) {
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,200,inal RealVector vK = decomposition.getEigenvector(k);
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,201,nvIJ += vK.getEntry(i) * vK.getEntry(j) / eigenvalues[k];
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,203,nvI[j] = invIJ;
False,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,206,eturn MatrixUtils.createRealMatrix(invData);
True,src/java/org/apache/commons/math/linear/EigenSolver.java,src/java/org/apache/commons/math/linear/EigenSolver.java,111,return solver.getInverse();

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,23,import java.util.Comparator;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,65,rotected boolean statesInitialized;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,66,private boolean statesInitialized;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,212,/** Set the stateInitialized flag.
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,213,* <p>This method must be called by integrators with the value
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,214,"* {@code false} before they start integration, so a proper lazy"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,215,* initialization is done automatically on the first step.</p>
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,216,* @param stateInitialized new value for the flag
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,218,protected void setStateInitialized(final boolean stateInitialized) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,219,this.statesInitialized = stateInitialized;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,248,SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,250,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,251,"public int compare(EventState es0, EventState es1) {"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,252,"return Double.compare(es0.getEventTime(), es1.getEventTime());"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,238,ortedSet<EventState> occuringEvents = new TreeSet<EventState>();
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,251,"nterpolator.setSoftBounds(previousT, eventT);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,270,interpolator.setSoftPreviousTime(previousT);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,271,interpolator.setSoftCurrentTime(eventT);
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,281,"nterpolator.setSoftBounds(eventT, currentT);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,301,interpolator.setSoftPreviousTime(eventT);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,302,interpolator.setSoftCurrentTime(currentT);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,41,ublic class EventState implements Comparable<EventState> {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,41,public class EventState {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,303,** Get the occurrence time of the event triggered in the current
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,304, step.
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,303,/** Get the occurrence time of the event triggered in the current step.
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,306, step.
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,305,* step or positive infinity if no events are triggered
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,309,eturn pendingEventTime;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,308,return pendingEvent ? pendingEventTime : Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,372,** Compare the instance with another event state.
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,373, <p>
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,374, Event state ordering is based on occurrence time within the last
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,375," evaluated step. If no event occurs during the step, a time arbitrarily"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,376, set to positive infinity is used.
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,377, </p>
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,378, @param state other event state to compare the instance to
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,379," @return a negative integer, zero, or a positive integer as the event"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,380," occurs before, simultaneous, or after the specified event of the"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,381, specified state.
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,383,ublic int compareTo(final EventState state) {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,384,inal double instanceTime = pendingEvent ? pendingEventTime : Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,385,inal double otherTime = state.pendingEvent ? state.pendingEventTime : Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,386,"eturn Double.compare(instanceTime, otherTime);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,213,tatesInitialized = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,213,setStateInitialized(false);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,233,tatesInitialized = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,233,setStateInitialized(false);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,229,tatesInitialized = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,229,setStateInitialized(false);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,636,tatesInitialized = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,636,setStateInitialized(false);
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,134,tatesInitialized = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,134,setStateInitialized(false);
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,46,** global previous time */
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,47,rivate double globalPreviousTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,49,** global current time */
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,50,rivate double globalCurrentTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,52,** soft previous time */
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,53,rivate double softPreviousTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,55,** soft current time */
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,56,rivate double softCurrentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,61,/** global previous time */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,62,private double globalPreviousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,64,/** global current time */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,65,private double globalCurrentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,67,/** soft previous time */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,68,private double softPreviousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,70,/** soft current time */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,71,private double softCurrentTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,248, <em>only</em> changes the value returned by {@link #getPreviousTime()}
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,249," and {@link #getCurrentTime()}, it does not change any"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,248,"* <em>only</em> changes the value returned by {@link #getPreviousTime()},"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,249,* it does not change any other property
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,252, @param softCurrentTime end of the restricted step
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,252,* @since 2.2
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,254,"ublic void setSoftBounds(final double softPreviousTime, final double softCurrentTime) {"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,254,public void setSoftPreviousTime(final double softPreviousTime) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,258,/** Restrict step range to a limited part of the global step.
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,259,* <p>
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,260,* This method can be used to restrict a step and make it appear
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,261,* as if the original step was smaller. Calling this method
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,262,"* <em>only</em> changes the value returned by {@link #getCurrentTime()},"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,263,* it does not change any other property
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,264,* </p>
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,265,* @param softCurrentTime end of the restricted step
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,266,* @since 2.2
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,268,public void setSoftCurrentTime(final double softCurrentTime) {
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,278," @see #setSoftBounds(double, double)"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,291,* @see #setSoftPreviousTime(double)
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,287," @see #setSoftBounds(double, double)"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,300,* @see #setSoftCurrentTime(double)
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1362,ouble numer = (bits & 0x3ffffffffffL);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1362,double numer = bits & 0x3ffffffffffL;

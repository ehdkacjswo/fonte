is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,18,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,21,import org.apache.commons.math.MaxIterationsExceededException;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,22,import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,23,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,24,import org.apache.commons.math.optimization.GoalType;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,25,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,26,import org.apache.commons.math.optimization.RealConvergenceChecker;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,27,import org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,28,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,29,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,32,* Base class for implementing optimizers for multivariate scalar functions.
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,33,* <p>This base class handles the boilerplate methods associated to thresholds
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,34,"* settings, iterations and evaluations counting.</p>"
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,35,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,36,* @since 2.0
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,38,public abstract class AbstractScalarDifferentiableOptimizer
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,39,implements DifferentiableMultivariateRealOptimizer{
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,41,/** Default maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,42,public static final int DEFAULT_MAX_ITERATIONS = 100;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,44,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,45,private static final long serialVersionUID = 1357126012308766636L;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,47,/** Maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,48,private int maxIterations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,50,/** Number of iterations already performed. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,51,private int iterations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,53,/** Number of evaluations already performed. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,54,private int evaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,56,/** Number of gradient evaluations. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,57,private int gradientEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,59,/** Convergence checker. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,60,protected RealConvergenceChecker checker;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,62,/** Objective function. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,63,private DifferentiableMultivariateRealFunction f;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,65,/** Objective function gradient. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,66,private MultivariateVectorialFunction gradient;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,68,/** Type of optimization. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,69,protected GoalType goalType;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,71,/** Current point set. */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,72,protected double[] point;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,74,/** Simple constructor with default settings.
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,75,* <p>The convergence check is set to a {@link SimpleScalarValueChecker}
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,76,* and the maximal number of evaluation is set to its default value.</p>
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,78,protected AbstractScalarDifferentiableOptimizer() {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,79,setConvergenceChecker(new SimpleScalarValueChecker());
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,80,setMaxIterations(DEFAULT_MAX_ITERATIONS);
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,83,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,84,public void setMaxIterations(int maxIterations) {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,85,this.maxIterations = maxIterations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,88,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,89,public int getMaxIterations() {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,90,return maxIterations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,93,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,94,public int getIterations() {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,95,return iterations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,98,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,99,public int getEvaluations() {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,100,return evaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,103,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,104,public int getGradientEvaluations() {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,105,return gradientEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,108,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,109,public void setConvergenceChecker(RealConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,110,this.checker = checker;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,113,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,114,public RealConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,115,return checker;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,118,/** Increment the iterations counter by 1.
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,119,* @exception OptimizationException if the maximal number
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,120,* of iterations is exceeded
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,122,protected void incrementIterationsCounter()
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,123,throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,124,if (++iterations > maxIterations) {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,125,if (++iterations > maxIterations) {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,126,throw new OptimizationException(new MaxIterationsExceededException(maxIterations));
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,132,* Compute the gradient vector.
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,133,* @param point point at which the gradient must be evaluated
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,134,* @return gradient at the specified point
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,135,* @exception FunctionEvaluationException if the function gradient
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,137,protected double[] computeObjectiveGradient(final double[] point)
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,138,throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,139,++gradientEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,140,return gradient.value(point);
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,144,* Compute the objective function value.
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,145,* @param point point at which the objective function must be evaluated
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,146,* @return objective function value at specified point
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,147,* @exception FunctionEvaluationException if the function cannot be evaluated
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,148,* or its dimension doesn't match problem dimension
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,150,protected double computeObjectiveValue(final double[] point)
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,151,throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,152,++evaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,153,return f.value(point);
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,156,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,157,"public RealPointValuePair optimize(final DifferentiableMultivariateRealFunction f,"
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,158,"final GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,159,final double[] startPoint)
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,160,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,162,// reset counters
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,163,iterations          = 0;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,164,evaluations         = 0;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,165,gradientEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,167,// store optimization problem characteristics
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,168,this.f        = f;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,169,gradient      = f.gradient();
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,170,this.goalType = goalType;
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,171,point         = startPoint.clone();
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,173,return doOptimize();
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,177,/** Perform the bulk of optimization algorithm.
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,178,* @return the point/value pair giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,179,* @exception FunctionEvaluationException if the objective function throws one during
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,180,* the search
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,181,* @exception OptimizationException if the algorithm failed to converge
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,182,* @exception IllegalArgumentException if the start point dimension is wrong
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,184,abstract protected RealPointValuePair doOptimize()
True,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,185,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,18,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,21,* Available choices of update formulas for the &beta; parameter
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,22,* in {@link NonLinearConjugateGradientOptimizer}.
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,23,* <p>
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,24,* The &beta; parameter is used to compute the successive conjugate
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,25,"* search directions. For non-linear conjugate gradients, there are"
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,26,* two formulas to compute &beta;:
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,27,* <ul>
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,28,*   <li>Fletcher-Reeves formula</li>
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,29,*   <li>Polak-Ribi&egrave;re formula</li>
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,30,* </ul>
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,31,"* On the one hand, the Fletcher-Reeves formula is guaranteed to converge"
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,32,* if the start point is close enough of the optimum whether the
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,33,* Polak-Ribi&egrave;re formula may not converge in rare cases. On the
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,34,"* other hand, the Polak-Ribi&egrave;re formula is often faster when it"
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,35,* does converge. Polak-Ribi&egrave;re is often used.
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,36,* <p>
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,37,* @see NonLinearConjugateGradientOptimizer
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,38,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,39,* @since 2.0
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,41,public enum ConjugateGradientFormula {
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,43,/** Fletcher-Reeves formula. */
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,44,"FLETCHER_REEVES,"
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,46,/** Polak-Ribi&egrave;re formula. */
True,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,src/java/org/apache/commons/math/optimization/general/ConjugateGradientFormula.java,47,POLAK_RIBIERE
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,18,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,20,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,21,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,22,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,23,import org.apache.commons.math.analysis.solvers.BrentSolver;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,24,import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,25,import org.apache.commons.math.optimization.GoalType;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,26,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,27,import org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,28,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,29,import org.apache.commons.math.optimization.SimpleVectorialValueChecker;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,32,* Non-linear conjugate gradient optimizer.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,33,* <p>
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,34,* This class supports both the Fletcher-Reeves and the Polak-Ribi&egrave;re
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,35,* update formulas for the conjugate search directions. It also supports
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,36,* optional preconditioning.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,37,* </p>
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,39,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,40,* @since 2.0
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,44,public class NonLinearConjugateGradientOptimizer
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,45,extends AbstractScalarDifferentiableOptimizer
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,46,implements DifferentiableMultivariateRealOptimizer {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,48,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,49,private static final long serialVersionUID = -6545223926568155458L;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,51,/** Update formula for the beta parameter. */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,52,private final ConjugateGradientFormula updateFormula;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,54,/** Preconditioner (may be null). */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,55,private Preconditioner preconditioner;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,57,/** solver to use in the line search (may be null). */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,58,private UnivariateRealSolver solver;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,60,/** Initial step used to bracket the optimum in line search. */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,61,private double initialStep;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,63,/** Simple constructor with default settings.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,64,* <p>The convergence check is set to a {@link SimpleVectorialValueChecker}
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,65,* and the maximal number of evaluation is set to
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,66,* {@link AbstractLeastSquaresOptimizer#DEFAULT_MAX_EVALUATIONS}.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,67,"* @param updateFormula formula to use for updating the &beta; parameter,"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,68,* must be one of {@link UpdateFormula#FLETCHER_REEVES} or {@link
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,69,* UpdateFormula#POLAK_RIBIERE}
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,71,public NonLinearConjugateGradientOptimizer(final ConjugateGradientFormula updateFormula) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,72,this.updateFormula = updateFormula;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,73,preconditioner     = null;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,74,solver             = null;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,75,initialStep        = 1.0;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,79,* Set the preconditioner.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,80,"* @param preconditioner preconditioner to use for next optimization,"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,81,* may be null to remove an already registered preconditioner
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,83,public void setPreconditioner(final Preconditioner preconditioner) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,84,this.preconditioner = preconditioner;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,88,* Set the solver to use during line search.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,89,"* @param solver solver to use during line search, may be null"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,90,* to remove an already registered solver and fall back to the
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,91,* default {@link BrentSolver Brent solver}.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,93,public void setLineSearchSolver(final UnivariateRealSolver solver) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,94,this.solver = solver;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,98,* Set the initial step used to bracket the optimum in line search.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,99,* <p>
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,100,"* The initial step is a factor with respect to the search direction,"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,101,* which itself is roughly related to the gradient of the function
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,102,* </p>
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,103,"* @param initialStep initial step used to bracket the optimum in line search,"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,104,"* if a non-positive value is used, the initial step is reset to its"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,105,* default value of 1.0
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,107,public void setInitialStep(final double initialStep) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,108,if (initialStep <= 0) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,109,this.initialStep = 1.0;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,110,} else {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,111,this.initialStep = initialStep;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,115,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,116,protected RealPointValuePair doOptimize()
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,117,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,118,try {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,120,// initialization
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,121,if (preconditioner == null) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,122,preconditioner = new IdentityPreconditioner();
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,124,if (solver == null) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,125,solver = new BrentSolver();
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,127,final int n = point.length;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,128,double[] r = computeObjectiveGradient(point);
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,129,if (goalType == GoalType.MINIMIZE) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,130,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,131,r[i] = -r[i];
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,135,// initial search direction
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,136,"double[] steepestDescent = preconditioner.precondition(point, r);"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,137,double[] searchDirection = steepestDescent.clone();
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,139,double delta = 0;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,140,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,141,delta += r[i] * searchDirection[i];
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,144,RealPointValuePair current = null;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,145,while (true) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,147,final double objective = computeObjectiveValue(point);
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,148,RealPointValuePair previous = current;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,149,"current = new RealPointValuePair(point, objective);"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,150,if (previous != null) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,151,"if (checker.converged(getIterations(), previous, current)) {"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,152,// we have found an optimum
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,153,return current;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,157,incrementIterationsCounter();
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,159,double dTd = 0;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,160,for (final double di : searchDirection) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,161,dTd += di * di;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,164,// find the optimal step in the search direction
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,165,final UnivariateRealFunction lsf = new LineSearchFunction(searchDirection);
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,166,"final double step = solver.solve(lsf, 0, findUpperBound(lsf, 0, initialStep));"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,168,// validate new point
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,169,for (int i = 0; i < point.length; ++i) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,170,point[i] += step * searchDirection[i];
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,172,r = computeObjectiveGradient(point);
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,173,if (goalType == GoalType.MINIMIZE) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,174,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,175,r[i] = -r[i];
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,179,// compute beta
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,180,final double deltaOld = delta;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,181,"final double[] newSteepestDescent = preconditioner.precondition(point, r);"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,182,delta = 0;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,183,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,184,delta += r[i] * newSteepestDescent[i];
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,187,final double beta;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,188,if (updateFormula == ConjugateGradientFormula.FLETCHER_REEVES) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,189,beta = delta / deltaOld;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,190,} else {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,191,double deltaMid = 0;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,192,for (int i = 0; i < r.length; ++i) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,193,deltaMid += r[i] * steepestDescent[i];
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,195,beta = (delta - deltaMid) / deltaOld;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,197,steepestDescent = newSteepestDescent;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,199,// compute conjugate search direction
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,200,if ((getIterations() % n == 0) || (beta < 0)) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,201,// break conjugation: reset search direction
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,202,searchDirection = steepestDescent.clone();
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,203,} else {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,204,// compute new conjugate search direction
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,205,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,206,searchDirection[i] = steepestDescent[i] + beta * searchDirection[i];
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,212,} catch (ConvergenceException ce) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,213,throw new OptimizationException(ce);
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,218,* Find the upper bound b ensuring bracketing of a root between a and b
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,219,* @param f function whose root must be bracketed
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,220,* @param a lower bound of the interval
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,221,* @param h initial step to try
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,222,* @return b such that f(a) and f(b) have opposite signs
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,223,* @exception FunctionEvaluationException if the function cannot be computed
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,224,* @exception OptimizationException if no bracket can be found
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,226,"private double findUpperBound(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,227,"final double a, final double h)"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,228,"throws FunctionEvaluationException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,229,final double yA = f.value(a);
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,230,double yB = yA;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,231,"for (double step = h; step < Double.MAX_VALUE; step *= Math.max(2, yA / yB)) {"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,232,final double b = a + step;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,233,yB = f.value(b);
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,234,if (yA * yB <= 0) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,235,return b;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,238,"throw new OptimizationException(""unable to bracket optimum in line search"");"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,241,/** Default identity preconditioner. */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,242,private static class IdentityPreconditioner implements Preconditioner {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,244,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,245,private static final long serialVersionUID = 1868235977809734023L;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,247,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,248,"public double[] precondition(double[] variables, double[] r) {"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,249,return r.clone();
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,254,/** Internal class for line search.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,255,* <p>
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,256,* The function represented by this class is the dot product of
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,257,* the objective function gradient and the search direction. Its
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,258,* value is zero when the gradient is orthogonal to the search
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,259,"* direction, i.e. when the objective function value is a local"
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,260,* extremum along the search direction.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,261,* </p>
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,263,private class LineSearchFunction implements UnivariateRealFunction {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,265,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,266,private static final long serialVersionUID = 8184683950487801424L;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,268,/** Search direction. */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,269,private final double[] searchDirection;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,271,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,272,* @param searchDirection search direction
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,274,public LineSearchFunction(final double[] searchDirection) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,275,this.searchDirection = searchDirection;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,278,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,279,public double value(double x) throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,281,// current point in the search direction
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,282,final double[] shiftedPoint = point.clone();
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,283,for (int i = 0; i < shiftedPoint.length; ++i) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,284,shiftedPoint[i] += x * searchDirection[i];
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,287,// gradient of the objective function
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,288,final double[] gradient = computeObjectiveGradient(shiftedPoint);
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,290,// dot product with the search direction
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,291,double dotProduct = 0;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,292,for (int i = 0; i < gradient.length; ++i) {
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,293,dotProduct += gradient[i] * searchDirection[i];
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,296,return dotProduct;
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,18,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,25,* This interface represents a preconditioner for differentiable scalar
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,26,* objective function optimizers.
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,28,* @since 2.0
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,30,public interface Preconditioner extends Serializable {
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,33,* Precondition a search direction.
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,34,* <p>
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,35,* The returned preconditioned search direction must be computed fast or
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,36,* the algorithm performances will drop drastically. A classical approach
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,37,* is to compute only the diagonal elements of the hessian and to divide
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,38,* the raw search direction by these elements if they are all positive.
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,39,"* If at least one of them is negative, it is safer to return a clone of"
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,40,* the raw search direction as if the hessian was the identity matrix. The
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,41,* rationale for this simplified choice is that a negative diagonal element
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,42,* means the current point is far from the optimum and preconditioning will
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,43,* not be efficient anyway in this case.
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,44,* </p>
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,45,* @param point current point at which the search direction was computed
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,46,* @param r raw search direction (i.e. opposite of the gradient)
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,47,* @return approximation of H<sup>-1</sup>r where H is the objective function hessian
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,48,* @exception FunctionEvaluationException if no cost can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,49,* @exception IllegalArgumentException if point dimension is wrong
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,51,"double[] precondition(double[] point, double[] r)"
True,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,src/java/org/apache/commons/math/optimization/general/Preconditioner.java,52,"throws FunctionEvaluationException, IllegalArgumentException;"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,18,package org.apache.commons.math.optimization.general;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,20,import java.awt.geom.Point2D;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,21,import java.util.ArrayList;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,23,import junit.framework.Test;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,25,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,27,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,28,import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,29,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,30,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,31,import org.apache.commons.math.analysis.solvers.BrentSolver;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,32,import org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,33,import org.apache.commons.math.linear.RealMatrix;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,34,import org.apache.commons.math.optimization.GoalType;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,35,import org.apache.commons.math.optimization.OptimizationException;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,36,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,37,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,40,* <p>Some of the unit tests are re-implementations of the MINPACK <a
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,41,"* href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,42,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,43,* The redistribution policy for MINPACK is available <a
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,44,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,45,"* convenience, it is reproduced below.</p>"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,47,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,48,* <tr><td>
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,49,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,50,*    All rights reserved
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,51,* </td></tr>
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,52,* <tr><td>
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,53,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,54,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,55,* are met:
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,56,* <ol>
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,57,*  <li>Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,58,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,59,* <li>Redistributions in binary form must reproduce the above
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,60,"*     copyright notice, this list of conditions and the following"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,61,*     disclaimer in the documentation and/or other materials provided
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,62,*     with the distribution.</li>
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,63,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,64,*     must include the following acknowledgment:
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,65,*     <code>This product includes software developed by the University of
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,66,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,67,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,68,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,69,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,70,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,71,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,72,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,73,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,74,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,75,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,76,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,77,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,78,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,79,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,80,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,81,*     BE CORRECTED.</strong></li>
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,82,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,83,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,84,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,85,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,86,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,87,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,88,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,89,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,90,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,91,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,92,* <ol></td></tr>
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,93,* </table>
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,95,* @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,96,* @author Burton S. Garbow (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,97,* @author Kenneth E. Hillstrom (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,98,* @author Jorge J. More (original fortran minpack tests)
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,99,* @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,101,public class NonLinearConjugateGradientOptimizerTest
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,102,extends TestCase {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,104,public NonLinearConjugateGradientOptimizerTest(String name) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,105,super(name);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,108,"public void testTrivial() throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,109,LinearProblem problem =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,110,"new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,111,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,112,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,113,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,114,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,115,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,116,"optimizer.optimize(problem, GoalType.MINIMIZE, new double[] { 0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,117,"assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,118,"assertEquals(0.0, optimum.getValue(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,121,"public void testColumnsPermutation() throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,123,LinearProblem problem =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,124,"new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,125,"new double[] { 4.0, 6.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,127,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,128,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,129,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,130,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,131,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,132,"optimizer.optimize(problem, GoalType.MINIMIZE, new double[] { 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,133,"assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,134,"assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,135,"assertEquals(0.0, optimum.getValue(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,139,"public void testNoDependency() throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,140,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,141,"{ 2, 0, 0, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,142,"{ 0, 2, 0, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,143,"{ 0, 0, 2, 0, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,144,"{ 0, 0, 0, 2, 0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,145,"{ 0, 0, 0, 0, 2, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,146,"{ 0, 0, 0, 0, 0, 2 }"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,147,"}, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,148,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,149,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,150,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,151,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,152,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,153,"optimizer.optimize(problem, GoalType.MINIMIZE, new double[] { 0, 0, 0, 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,154,for (int i = 0; i < problem.target.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,155,"assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,159,"public void testOneSet() throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,161,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,162,"{  1,  0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,163,"{ -1,  1, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,164,"{  0, -1, 1 }"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,165,"}, new double[] { 1, 1, 1});"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,166,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,167,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,168,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,169,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,170,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,171,"optimizer.optimize(problem, GoalType.MINIMIZE, new double[] { 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,172,"assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,173,"assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,174,"assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,178,"public void testTwoSets() throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,179,final double epsilon = 1.0e-7;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,180,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,181,"{  2,  1,   0,  4,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,182,"{ -4, -2,   3, -7,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,183,"{  4,  1,  -2,  8,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,184,"{  0, -3, -12, -1,       0, 0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,185,"{  0,  0,   0,  0, epsilon, 1 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,186,"{  0,  0,   0,  0,       1, 1 }"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,187,"}, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,189,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,190,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,191,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,192,optimizer.setPreconditioner(new Preconditioner() {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,193,private static final long serialVersionUID = -2935127802358453014L;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,194,"public double[] precondition(double[] point, double[] r) {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,195,double[] d = r.clone();
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,196,d[0] /=  72.0;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,197,d[1] /=  30.0;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,198,d[2] /= 314.0;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,199,d[3] /= 260.0;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,200,d[4] /= 2 * (1 + epsilon * epsilon);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,201,d[5] /= 4.0;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,202,return d;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,205,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-13, 1.0e-13));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,207,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,208,"optimizer.optimize(problem, GoalType.MINIMIZE, new double[] { 0, 0, 0, 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,209,"assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,210,"assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,211,"assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,212,"assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,213,"assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,214,"assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,218,"public void testNonInversible() throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,220,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,221,"{  1, 2, -3 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,222,"{  2, 1,  3 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,223,"{ -3, 0, -9 }"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,224,"}, new double[] { 1, 1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,225,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,226,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,227,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,228,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,229,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,230,"optimizer.optimize(problem, GoalType.MINIMIZE, new double[] { 0, 0, 0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,231,assertTrue(optimum.getValue() > 0.5);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,234,"public void testIllConditioned() throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,235,LinearProblem problem1 = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,236,"{ 10.0, 7.0,  8.0,  7.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,237,"{  7.0, 5.0,  6.0,  5.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,238,"{  8.0, 6.0, 10.0,  9.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,239,"{  7.0, 5.0,  9.0, 10.0 }"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,240,"}, new double[] { 32, 23, 33, 31 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,241,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,242,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,243,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,244,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-13, 1.0e-13));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,245,BrentSolver solver = new BrentSolver();
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,246,solver.setAbsoluteAccuracy(1.0e-15);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,247,solver.setRelativeAccuracy(1.0e-15);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,248,optimizer.setLineSearchSolver(solver);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,249,RealPointValuePair optimum1 =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,250,"optimizer.optimize(problem1, GoalType.MINIMIZE, new double[] { 0, 1, 2, 3 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,251,"assertEquals(1.0, optimum1.getPoint()[0], 1.0e-5);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,252,"assertEquals(1.0, optimum1.getPoint()[1], 1.0e-5);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,253,"assertEquals(1.0, optimum1.getPoint()[2], 1.0e-5);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,254,"assertEquals(1.0, optimum1.getPoint()[3], 1.0e-5);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,256,LinearProblem problem2 = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,257,"{ 10.00, 7.00, 8.10, 7.20 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,258,"{  7.08, 5.04, 6.00, 5.00 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,259,"{  8.00, 5.98, 9.89, 9.00 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,260,"{  6.99, 4.99, 9.00, 9.98 }"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,261,"}, new double[] { 32, 23, 33, 31 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,262,RealPointValuePair optimum2 =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,263,"optimizer.optimize(problem2, GoalType.MINIMIZE, new double[] { 0, 1, 2, 3 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,264,"assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-1);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,265,"assertEquals(137.0, optimum2.getPoint()[1], 1.0e-1);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,266,"assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-1);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,267,"assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-1);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,271,public void testMoreEstimatedParametersSimple()
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,272,"throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,274,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,275,"{ 3.0, 2.0,  0.0, 0.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,276,"{ 0.0, 1.0, -1.0, 1.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,277,"{ 2.0, 0.0,  1.0, 0.0 }"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,278,"}, new double[] { 7.0, 3.0, 5.0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,280,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,281,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,282,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,283,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,284,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,285,"optimizer.optimize(problem, GoalType.MINIMIZE, new double[] { 7, 6, 5, 4 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,286,"assertEquals(0, optimum.getValue(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,290,public void testMoreEstimatedParametersUnsorted()
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,291,"throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,292,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,293,"{ 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,294,"{ 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,295,"{ 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,296,"{ 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,297,"{ 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,298,"}, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,299,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,300,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,301,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,302,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,303,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,304,"optimizer.optimize(problem, GoalType.MINIMIZE, new double[] { 2, 2, 2, 2, 2, 2 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,305,"assertEquals(0, optimum.getValue(), 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,308,"public void testRedundantEquations() throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,309,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,310,"{ 1.0,  1.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,311,"{ 1.0, -1.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,312,"{ 1.0,  3.0 }"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,313,"}, new double[] { 3.0, 1.0, 5.0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,315,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,316,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,317,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,318,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,319,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,320,"optimizer.optimize(problem, GoalType.MINIMIZE, new double[] { 1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,321,"assertEquals(2.0, optimum.getPoint()[0], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,322,"assertEquals(1.0, optimum.getPoint()[1], 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,326,"public void testInconsistentEquations() throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,327,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,328,"{ 1.0,  1.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,329,"{ 1.0, -1.0 },"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,330,"{ 1.0,  3.0 }"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,331,"}, new double[] { 3.0, 1.0, 4.0 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,333,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,334,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,335,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,336,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-6, 1.0e-6));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,337,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,338,"optimizer.optimize(problem, GoalType.MINIMIZE, new double[] { 1, 1 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,339,assertTrue(optimum.getValue() > 0.1);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,343,"public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,344,Circle circle = new Circle();
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,345,"circle.addPoint( 30.0,  68.0);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,346,"circle.addPoint( 50.0,  -6.0);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,347,"circle.addPoint(110.0, -20.0);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,348,"circle.addPoint( 35.0,  15.0);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,349,"circle.addPoint( 45.0,  97.0);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,350,NonLinearConjugateGradientOptimizer optimizer =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,351,new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,352,optimizer.setMaxIterations(100);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,353,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-30, 1.0e-30));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,354,BrentSolver solver = new BrentSolver();
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,355,solver.setAbsoluteAccuracy(1.0e-13);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,356,solver.setRelativeAccuracy(1.0e-15);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,357,optimizer.setLineSearchSolver(solver);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,358,RealPointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,359,"optimizer.optimize(circle, GoalType.MINIMIZE, new double[] { 98.680, 47.345 });"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,360,"Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,361,"assertEquals(69.960161753, circle.getRadius(center), 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,362,"assertEquals(96.075902096, center.x, 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,363,"assertEquals(48.135167894, center.y, 1.0e-8);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,366,private static class LinearProblem implements DifferentiableMultivariateRealFunction {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,368,private static final long serialVersionUID = 703247177355019415L;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,369,final RealMatrix factors;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,370,final double[] target;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,371,"public LinearProblem(double[][] factors, double[] target) {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,372,this.factors = new DenseRealMatrix(factors);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,373,this.target  = target;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,376,private double[] gradient(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,377,double[] r = factors.operate(point);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,378,for (int i = 0; i < r.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,379,r[i] -= target[i];
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,381,double[] p = factors.transpose().operate(r);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,382,for (int i = 0; i < p.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,383,p[i] *= 2;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,385,return p;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,388,public double value(double[] variables) throws FunctionEvaluationException {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,389,double[] y = factors.operate(variables);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,390,double sum = 0;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,391,for (int i = 0; i < y.length; ++i) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,392,double ri = y[i] - target[i];
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,393,sum += ri * ri;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,395,return sum;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,398,public MultivariateVectorialFunction gradient() {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,399,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,400,private static final long serialVersionUID = 2621997811350805819L;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,401,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,402,return gradient(point);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,407,public MultivariateRealFunction partialDerivative(final int k) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,408,return new MultivariateRealFunction() {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,409,private static final long serialVersionUID = -6186178619133562011L;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,410,public double value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,411,return gradient(point)[k];
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,418,private static class Circle implements DifferentiableMultivariateRealFunction {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,420,private static final long serialVersionUID = -4711170319243817874L;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,422,private ArrayList<Point2D.Double> points;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,424,public Circle() {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,425,points  = new ArrayList<Point2D.Double>();
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,428,"public void addPoint(double px, double py) {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,429,"points.add(new Point2D.Double(px, py));"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,432,public int getN() {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,433,return points.size();
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,436,public double getRadius(Point2D.Double center) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,437,double r = 0;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,438,for (Point2D.Double point : points) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,439,r += point.distance(center);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,441,return r / points.size();
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,444,private double[] gradient(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,446,// optimal radius
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,447,"Point2D.Double center = new Point2D.Double(point[0], point[1]);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,448,double radius = getRadius(center);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,450,// gradient of the sum of squared residuals
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,451,double dJdX = 0;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,452,double dJdY = 0;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,453,for (Point2D.Double pk : points) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,454,double dk = pk.distance(center);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,455,dJdX += (center.x - pk.x) * (dk - radius) / dk;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,456,dJdY += (center.y - pk.y) * (dk - radius) / dk;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,458,dJdX *= 2;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,459,dJdY *= 2;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,461,"return new double[] { dJdX, dJdY };"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,465,public double value(double[] variables)
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,466,"throws IllegalArgumentException, FunctionEvaluationException {"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,468,"Point2D.Double center = new Point2D.Double(variables[0], variables[1]);"
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,469,double radius = getRadius(center);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,471,double sum = 0;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,472,for (Point2D.Double point : points) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,473,double di = point.distance(center) - radius;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,474,sum += di * di;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,477,return sum;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,481,public MultivariateVectorialFunction gradient() {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,482,return new MultivariateVectorialFunction() {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,483,private static final long serialVersionUID = 3174909643301201710L;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,484,public double[] value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,485,return gradient(point);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,490,public MultivariateRealFunction partialDerivative(final int k) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,491,return new MultivariateRealFunction() {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,492,private static final long serialVersionUID = 3073956364104833888L;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,493,public double value(double[] point) {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,494,return gradient(point)[k];
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,501,public static Test suite() {
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,502,return new TestSuite(NonLinearConjugateGradientOptimizerTest.class);

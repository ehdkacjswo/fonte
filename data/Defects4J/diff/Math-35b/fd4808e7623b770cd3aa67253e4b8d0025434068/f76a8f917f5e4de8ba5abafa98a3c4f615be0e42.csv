is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,413,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,414,ublic FieldVector<T> add(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,415,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,416,[] out = buildArray(data.length);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,417,or (int i = 0; i < data.length; i++) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,418,ut[i] = data[i].add(v[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,420,"eturn new ArrayFieldVector<T>(field, out, false);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,430,eturn (ArrayFieldVector<T>) add(v.data);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,420,checkVectorDimensions(v.data.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,421,T[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,422,for (int i = 0; i < data.length; i++) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,423,out[i] = data[i].add(v.data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,425,"return new ArrayFieldVector<T>(field, out, false);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,447,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,448,ublic FieldVector<T> subtract(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,449,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,450,[] out = buildArray(data.length);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,451,or (int i = 0; i < data.length; i++) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,452,ut[i] = data[i].subtract(v[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,454,"eturn new ArrayFieldVector<T>(field, out, false);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,464,eturn (ArrayFieldVector<T>) subtract(v.data);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,449,checkVectorDimensions(v.data.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,450,T[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,451,for (int i = 0; i < data.length; i++) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,452,out[i] = data[i].subtract(v.data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,454,"return new ArrayFieldVector<T>(field, out, false);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,568,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,569,ublic FieldVector<T> ebeMultiply(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,570,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,571,[] out = buildArray(data.length);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,572,or (int i = 0; i < data.length; i++) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,573,ut[i] = data[i].multiply(v[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,575,"eturn new ArrayFieldVector<T>(field, out, false);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,585,eturn (ArrayFieldVector<T>) ebeMultiply(v.data);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,565,checkVectorDimensions(v.data.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,566,T[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,567,for (int i = 0; i < data.length; i++) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,568,out[i] = data[i].multiply(v.data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,570,"return new ArrayFieldVector<T>(field, out, false);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,602,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,603,ublic FieldVector<T> ebeDivide(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,604,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,605,[] out = buildArray(data.length);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,606,or (int i = 0; i < data.length; i++) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,607,ut[i] = data[i].divide(v[i]);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,609,"eturn new ArrayFieldVector<T>(field, out, false);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,619,eturn (ArrayFieldVector<T>) ebeDivide(v.data);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,594,checkVectorDimensions(v.data.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,595,T[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,596,for (int i = 0; i < data.length; i++) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,597,out[i] = data[i].divide(v.data[i]);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,599,"return new ArrayFieldVector<T>(field, out, false);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,650,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,651,ublic T dotProduct(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,652,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,653, dot = field.getZero();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,654,or (int i = 0; i < data.length; i++) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,655,ot = dot.add(data[i].multiply(v[i]));
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,657,eturn dot;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,667,eturn dotProduct(v.data);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,637,checkVectorDimensions(v.data.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,638,T dot = field.getZero();
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,639,for (int i = 0; i < data.length; i++) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,640,dot = dot.add(data[i].multiply(v.data[i]));
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,642,return dot;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,675,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,676,ublic FieldVector<T> projection(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,677,"eturn projection(new ArrayFieldVector<T>(getField(), v, false));"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,713,eturn outerProduct(v.data);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,716,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,717,ublic FieldMatrix<T> outerProduct(T[] v) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,719,inal int n = v.length;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,684,final int n = v.data.length;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,723,"ut.setEntry(i, j, data[i].multiply(v[j]));"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,688,"out.setEntry(i, j, data[i].multiply(v.data[j]));"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,765,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,766,ublic FieldVector<T> append(T[] in) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,767,"eturn new ArrayFieldVector<T>(this, in);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,807,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,808,"ublic void setSubVector(int index, T[] v) {"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,809,ry {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,810,"ystem.arraycopy(v, 0, data, index, v.length);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,811, catch (IndexOutOfBoundsException e) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,812,heckIndex(index);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,813,heckIndex(index + v.length - 1);
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,826,"etSubVector(index, v.data);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,776,try {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,777,"System.arraycopy(v.data, 0, data, index, v.data.length);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,778,} catch (IndexOutOfBoundsException e) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,779,checkIndex(index);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,780,checkIndex(index + v.data.length - 1);
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,70, Compute the sum of this and v.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,71, @param v vector to be added
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,72, @return this + v
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,73, @throws IllegalArgumentException if v is not the same size as this
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,75,ieldVector<T> add(T[] v)
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,76,hrows IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,88, Compute this minus v.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,89, @param v vector to be subtracted
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,90, @return this + v
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,91, @throws IllegalArgumentException if v is not the same size as this
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,93,ieldVector<T> subtract(T[] v)
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,94,hrows IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,178, Element-by-element multiplication.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,179, @param v vector by which instance elements must be multiplied
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,180, @return a vector containing this[i] * v[i] for all i
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,181, @throws IllegalArgumentException if v is not the same size as this
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,183,ieldVector<T> ebeMultiply(T[] v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,194, Element-by-element division.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,195, @param v vector by which instance elements must be divided
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,196, @return a vector containing this[i] / v[i] for all i
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,197, @throws IllegalArgumentException if v is not the same size as this
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,199,ieldVector<T> ebeDivide(T[] v) throws IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,217, Compute the dot product.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,218, @param v vector with which dot product should be computed
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,219, @return the scalar dot product between instance and v
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,220, @exception IllegalArgumentException if v is not the same size as this
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,222, dotProduct(T[] v)
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,223,hrows IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,233,** Find the orthogonal projection of this vector onto another vector.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,234, @param v vector onto which instance must be projected
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,235, @return projection of the instance onto v
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,236, @throws IllegalArgumentException if v is not the same size as this
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,238,ieldVector<T> projection(T[] v)
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,239,hrows IllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,249, Compute the outer product.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,250, @param v vector with which outer product should be computed
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,251, @return the matrix outer product between instance and v
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,253,ieldMatrix<T> outerProduct(T[] v);
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,297, Construct a vector by appending a T array to this vector.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,298, @param a T array to append.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,299, @return a new vector
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,301,ieldVector<T> append(T[] a);
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,324, Set a set of consecutive elements.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,325, @param index index of first element to be set.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,326, @param v vector containing the values to set.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,327, @throws org.apache.commons.math.exception.OutOfRangeException
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,328, if the index is inconsistent with vector size.
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,329," @see #setSubVector(int, FieldVector)"
False,src/main/java/org/apache/commons/math/linear/FieldVector.java,src/main/java/org/apache/commons/math/linear/FieldVector.java,331,"oid setSubVector(int index, T[] v);"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,162,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,163,ublic FieldVector<T> add(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,164,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,165,"parseFieldVector<T> res = new SparseFieldVector<T>(field,getDimension());"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,166,or (int i = 0; i < v.length; i++) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,167,"es.setEntry(i, v[i].add(getEntry(i)));"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,169,eturn res;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,193,eturn append(v.toArray());
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,182,final int n = v.getDimension();
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,183,"FieldVector<T> res = new SparseFieldVector<T>(this, n);"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,184,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,185,"res.setEntry(i + virtualSize, v.getEntry(i));"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,187,return res;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,204,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,205,ublic FieldVector<T> append(T[] a) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,206,"ieldVector<T> res = new SparseFieldVector<T>(this, a.length);"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,207,or (int i = 0; i < a.length; i++) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,208,"es.setEntry(i + virtualSize, a[i]);"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,210,eturn res;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,230,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,231,ublic T dotProduct(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,232,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,233, res = field.getZero();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,234,penIntToFieldHashMap<T>.Iterator iter = entries.iterator();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,235,hile (iter.hasNext()) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,236,nt idx = iter.key();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,237, value = field.getZero();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,238,f (idx < v.length) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,239,alue = v[idx];
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,241,es = res.add(value.multiply(iter.value()));
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,243,eturn res;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,258,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,259,ublic FieldVector<T> ebeDivide(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,260,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,261,parseFieldVector<T> res = new SparseFieldVector<T>(this);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,262,penIntToFieldHashMap<T>.Iterator iter = res.entries.iterator();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,263,hile (iter.hasNext()) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,264,ter.advance();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,265,"es.setEntry(iter.key(), iter.value().divide(v[iter.key()]));"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,267,eturn res;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,282,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,283,ublic FieldVector<T> ebeMultiply(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,284,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,285,parseFieldVector<T> res = new SparseFieldVector<T>(this);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,286,penIntToFieldHashMap<T>.Iterator iter = res.entries.iterator();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,287,hile (iter.hasNext()) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,288,ter.advance();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,289,"es.setEntry(iter.key(), iter.value().multiply(v[iter.key()]));"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,291,eturn res;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,426,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,427,ublic FieldMatrix<T> outerProduct(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,428,inal int n = v.length;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,429,"ieldMatrix<T> res = new SparseFieldMatrix<T>(field, virtualSize, n);"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,430,penIntToFieldHashMap<T>.Iterator iter = entries.iterator();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,431,hile (iter.hasNext()) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,432,ter.advance();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,433,nt row = iter.key();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,434,ieldElement<T>value = iter.value();
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,435,or (int col = 0; col < n; col++) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,436,"es.setEntry(row, col, value.multiply(v[col]));"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,439,eturn res;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,447,eturn outerProduct(v.toArray());
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,376,final int n = v.getDimension();
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,377,"FieldMatrix<T> res = new SparseFieldMatrix<T>(field, virtualSize, n);"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,378,OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,379,while (iter.hasNext()) {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,380,iter.advance();
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,381,int row = iter.key();
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,382,FieldElement<T>value = iter.value();
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,383,for (int col = 0; col < n; col++) {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,384,"res.setEntry(row, col, value.multiply(v.getEntry(col)));"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,387,return res;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,457,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,458,ublic FieldVector<T> projection(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,459,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,460,"eturn projection(new SparseFieldVector<T>(field,v));"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,480,"etSubVector(index, v.getData());"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,483,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,484,"ublic void setSubVector(int index, T[] v) {"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,485,heckIndex(index);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,486,heckIndex(index + v.length - 1);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,487,or (int i = 0; i < v.length; i++) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,488,"etEntry(i + index, v[i]);"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,414,final int n = v.getDimension();
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,415,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,416,"setEntry(i + index, v.getEntry(i));"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,522,eturn subtract(v.toArray());
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,526,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,527,ublic FieldVector<T> subtract(T[] v) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,528,heckVectorDimensions(v.length);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,529,parseFieldVector<T> res = new SparseFieldVector<T>(this);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,530,or (int i = 0; i < v.length; i++) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,531,f (entries.containsKey(i)) {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,532,"es.setEntry(i, entries.get(i).subtract(v[i]));"
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,533, else {
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,534,"es.setEntry(i, field.getZero().subtract(v[i]));"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,449,final int n = v.getDimension();
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,450,checkVectorDimensions(n);
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,451,SparseFieldVector<T> res = new SparseFieldVector<T>(this);
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,452,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,453,if (entries.containsKey(i)) {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,454,"res.setEntry(i, entries.get(i).subtract(v.getEntry(i)));"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,455,} else {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,456,"res.setEntry(i, field.getZero().subtract(v.getEntry(i)));"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,459,return res;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,537,eturn res;
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,572,eturn add((SparseFieldVector<T>)v);
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,495,return add((SparseFieldVector<T>) v);
False,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,574,eturn add(v.toArray());
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,497,final int n = v.getDimension();
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,498,checkVectorDimensions(n);
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,499,"SparseFieldVector<T> res = new SparseFieldVector<T>(field,"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,500,getDimension());
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,501,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,502,"res.setEntry(i, v.getEntry(i).add(getEntry(i)));"
True,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math/linear/SparseFieldVector.java,504,return res;
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,345,ieldVector<Fraction> v_append_3 = v1.append(vec2);
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,346,"ssert.assertEquals(6, v_append_3.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,347,"ssert.assertEquals(new Fraction(4), v_append_3.getEntry(3));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,118,"parseFieldVector<Fraction> v2_t = new SparseFieldVector<Fraction>(field,vec2);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,118,FieldVector<Fraction> v2_t = new ArrayFieldVectorTest.FieldVectorTestImpl<Fraction>(vec2);
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,125,"parseFieldVector<Fraction> vt2 = new SparseFieldVector<Fraction>(field,vec2);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,125,FieldVector<Fraction> vt2 = new ArrayFieldVectorTest.FieldVectorTestImpl<Fraction>(vec2);

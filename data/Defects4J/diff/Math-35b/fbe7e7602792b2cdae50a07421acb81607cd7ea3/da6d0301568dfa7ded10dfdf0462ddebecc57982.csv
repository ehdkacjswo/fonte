is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,17,ackage org.apache.commons.math.analysis.interpolation;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,19,mport org.apache.commons.math.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,21,mport org.apache.commons.math.MathException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,22,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,23,mport org.apache.commons.math.util.MathUtils.OrderDirection;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,24,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,25,mport org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,26,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,29, Generates a bicubic interpolation function.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,30," Before interpolating, smoothing of the input data is performed using"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,31, splines.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,32," See <b>Handbook on splines for the user</b>, ISBN 084939404X,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,33, chapter 2.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,35, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,36, @since 2.1
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,37, @deprecated This class does not perform smoothing; the name is thus misleading.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,38, Please use {@link org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolator}
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,39," instead. If smoothing is desired, a tentative implementation is provided in class"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,40, {@link org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator}.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,41, This class will be removed in math 3.0.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,43,Deprecated
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,44,ublic class SmoothingBicubicSplineInterpolator
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,45,mplements BivariateRealGridInterpolator {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,47, {@inheritDoc}
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,49,"ublic BicubicSplineInterpolatingFunction interpolate(final double[] xval,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,50,"inal double[] yval,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,51,inal double[][] zval)
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,52,"hrows MathException, IllegalArgumentException {"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,53,f (xval.length == 0 || yval.length == 0 || zval.length == 0) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,54,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_DATA);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,56,f (xval.length != zval.length) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,57,"hrow new DimensionMismatchException(xval.length, zval.length);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,60,"athUtils.checkOrder(xval, OrderDirection.INCREASING, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,61,"athUtils.checkOrder(yval, OrderDirection.INCREASING, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,63,inal int xLen = xval.length;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,64,inal int yLen = yval.length;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,66,"/ Samples (first index is y-coordinate, i.e. subarray variable is x)"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,67,/ 0 <= i < xval.length
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,68,/ 0 <= j < yval.length
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,69,"/ zX[j][i] = f(xval[i], yval[j])"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,70,inal double[][] zX = new double[yLen][xLen];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,71,or (int i = 0; i < xLen; i++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,72,f (zval[i].length != yLen) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,73,"hrow new DimensionMismatchException(zval[i].length, yLen);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,76,or (int j = 0; j < yLen; j++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,77,X[j][i] = zval[i][j];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,81,inal SplineInterpolator spInterpolator = new SplineInterpolator();
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,83,"/ For each line y[j] (0 <= j < yLen), construct a 1D spline with"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,84,/ respect to variable x
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,85,inal PolynomialSplineFunction[] ySplineX = new PolynomialSplineFunction[yLen];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,86,or (int j = 0; j < yLen; j++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,87,"SplineX[j] = spInterpolator.interpolate(xval, zX[j]);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,90,"/ For every knot (xval[i], yval[j]) of the grid, calculate corrected"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,91,/ values zY_1
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,92,inal double[][] zY_1 = new double[xLen][yLen];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,93,or (int j = 0; j < yLen; j++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,94,inal PolynomialSplineFunction f = ySplineX[j];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,95,or (int i = 0; i < xLen; i++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,96,Y_1[i][j] = f.value(xval[i]);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,100,"/ For each line x[i] (0 <= i < xLen), construct a 1D spline with"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,101,/ respect to variable y generated by array zY_1[i]
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,102,inal PolynomialSplineFunction[] xSplineY = new PolynomialSplineFunction[xLen];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,103,or (int i = 0; i < xLen; i++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,104,"SplineY[i] = spInterpolator.interpolate(yval, zY_1[i]);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,107,"/ For every knot (xval[i], yval[j]) of the grid, calculate corrected"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,108,/ values zY_2
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,109,inal double[][] zY_2 = new double[xLen][yLen];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,110,or (int i = 0; i < xLen; i++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,111,inal PolynomialSplineFunction f = xSplineY[i];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,112,or (int j = 0; j < yLen; j++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,113,Y_2[i][j] = f.value(yval[j]);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,117,/ Partial derivatives with respect to x at the grid knots
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,118,inal double[][] dZdX = new double[xLen][yLen];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,119,or (int j = 0; j < yLen; j++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,120,inal UnivariateRealFunction f = ySplineX[j].derivative();
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,121,or (int i = 0; i < xLen; i++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,122,ZdX[i][j] = f.value(xval[i]);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,126,/ Partial derivatives with respect to y at the grid knots
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,127,inal double[][] dZdY = new double[xLen][yLen];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,128,or (int i = 0; i < xLen; i++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,129,inal UnivariateRealFunction f = xSplineY[i].derivative();
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,130,or (int j = 0; j < yLen; j++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,131,ZdY[i][j] = f.value(yval[j]);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,135,/ Cross partial derivatives
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,136,inal double[][] dZdXdY = new double[xLen][yLen];
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,137,or (int i = 0; i < xLen ; i++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,138,"inal int nI = nextIndex(i, xLen);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,139,inal int pI = previousIndex(i);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,140,or (int j = 0; j < yLen; j++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,141,"inal int nJ = nextIndex(j, yLen);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,142,inal int pJ = previousIndex(j);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,143,ZdXdY[i][j] = (zY_2[nI][nJ] - zY_2[nI][pJ] -
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,144,Y_2[pI][nJ] + zY_2[pI][pJ]) /
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,145,(xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,149,/ Create the interpolating splines
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,150,"eturn new BicubicSplineInterpolatingFunction(xval, yval, zY_2,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,151,"ZdX, dZdY, dZdXdY);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,155," Compute the next index of an array, clipping if necessary."
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,156, It is assumed (but not checked) that {@code i} is larger than or equal to 0}.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,158, @param i Index
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,159, @param max Upper limit of the array
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,160, @return the next index
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,162,"rivate int nextIndex(int i, int max) {"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,163,inal int index = i + 1;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,164,eturn index < max ? index : index - 1;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,167," Compute the previous index of an array, clipping if necessary."
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,168, It is assumed (but not checked) that {@code i} is smaller than the size of the array.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,170, @param i Index
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,171, @return the previous index
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,173,rivate int previousIndex(int i) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,174,inal int index = i - 1;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,175,eturn index >= 0 ? index : 0;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,17,ackage org.apache.commons.math.analysis.interpolation;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,20,mport org.apache.commons.math.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,21,mport org.apache.commons.math.analysis.BivariateRealFunction;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,22,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,23,mport org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,26, Testcase for the bicubic interpolator.
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,28, @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,29, @deprecated To be removed in math 3.0 (when the class for which it is a test will also be removed).
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,31,Deprecated
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,32,ublic final class SmoothingBicubicSplineInterpolatorTest {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,34, Test preconditions.
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,36,Test
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,37,ublic void testPreconditions() throws MathException {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,38,"ouble[] xval = new double[] {3, 4, 5, 6.5};"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,39,"ouble[] yval = new double[] {-4, -3, -1, 2.5};"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,40,ouble[][] zval = new double[xval.length][yval.length];
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,42,ivariateRealGridInterpolator interpolator = new SmoothingBicubicSplineInterpolator();
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,44,"SuppressWarnings(""unused"")"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,45,"ivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,47,"ouble[] wxval = new double[] {3, 2, 5, 6.5};"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,48,ry {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,49," = interpolator.interpolate(wxval, yval, zval);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,50,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,51, catch (IllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,52,/ Expected
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,55,"ouble[] wyval = new double[] {-4, -3, -1, -1};"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,56,ry {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,57," = interpolator.interpolate(xval, wyval, zval);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,58,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,59, catch (IllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,60,/ Expected
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,63,ouble[][] wzval = new double[xval.length][yval.length + 1];
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,64,ry {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,65," = interpolator.interpolate(xval, yval, wzval);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,66,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,67, catch (DimensionMismatchException e) {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,68,/ Expected
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,70,zval = new double[xval.length - 1][yval.length];
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,71,ry {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,72," = interpolator.interpolate(xval, yval, wzval);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,73,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,74, catch (DimensionMismatchException e) {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,75,/ Expected
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,77,zval = new double[xval.length][yval.length - 1];
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,78,ry {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,79," = interpolator.interpolate(xval, yval, wzval);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,80,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,81, catch (DimensionMismatchException e) {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,82,/ Expected
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,87, Test of interpolator for a plane.
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,88, <p>
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,89, z = 2 x - 3 y + 5
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,91,Test
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,92,ublic void testPlane() throws MathException {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,93,ivariateRealFunction f = new BivariateRealFunction() {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,94,"ublic double value(double x, double y) {"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,95,eturn 2 * x - 3 * y + 5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,99,ivariateRealGridInterpolator interpolator = new SmoothingBicubicSplineInterpolator();
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,101,"ouble[] xval = new double[] {3, 4, 5, 6.5};"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,102,"ouble[] yval = new double[] {-4, -3, -1, 2, 2.5};"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,103,ouble[][] zval = new double[xval.length][yval.length];
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,104,or (int i = 0; i < xval.length; i++) {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,105,or (int j = 0; j < yval.length; j++) {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,106,"val[i][j] = f.value(xval[i], yval[j]);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,110,"ivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,111,"ouble x, y;"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,112,"ouble expected, result;"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,114, = 4;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,115, = -3;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,116,"xpected = f.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,117,"esult = p.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,118,"ssert.assertEquals(""On sample point"", expected, result, 1e-15);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,120, = 4.5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,121, = -1.5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,122,"xpected = f.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,123,"esult = p.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,124,"ssert.assertEquals(""half-way between sample points (middle of the patch)"", expected, result, 0.3);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,126, = 3.5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,127, = -3.5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,128,"xpected = f.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,129,"esult = p.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,130,"ssert.assertEquals(""half-way between sample points (border of the patch)"", expected, result, 0.3);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,134, Test of interpolator for a paraboloid.
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,135, <p>
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,136, z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,138,Test
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,139,ublic void testParaboloid() throws MathException {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,140,ivariateRealFunction f = new BivariateRealFunction() {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,141,"ublic double value(double x, double y) {"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,142,eturn 2 * x * x - 3 * y * y + 4 * x * y - 5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,146,ivariateRealGridInterpolator interpolator = new SmoothingBicubicSplineInterpolator();
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,148,"ouble[] xval = new double[] {3, 4, 5, 6.5};"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,149,"ouble[] yval = new double[] {-4, -3, -2, -1, 0.5, 2.5};"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,150,ouble[][] zval = new double[xval.length][yval.length];
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,151,or (int i = 0; i < xval.length; i++) {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,152,or (int j = 0; j < yval.length; j++) {
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,153,"val[i][j] = f.value(xval[i], yval[j]);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,157,"ivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,158,"ouble x, y;"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,159,"ouble expected, result;"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,161, = 5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,162, = 0.5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,163,"xpected = f.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,164,"esult = p.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,165,"ssert.assertEquals(""On sample point"", expected, result, 1e-13);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,167, = 4.5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,168, = -1.5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,169,"xpected = f.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,170,"esult = p.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,171,"ssert.assertEquals(""half-way between sample points (middle of the patch)"", expected, result, 0.2);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,173, = 3.5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,174, = -3.5;
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,175,"xpected = f.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,176,"esult = p.value(x, y);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,177,"ssert.assertEquals(""half-way between sample points (border of the patch)"", expected, result, 0.2);"

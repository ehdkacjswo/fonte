is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,107, <p>The created instance is completely independant from the
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,107,* <p>The created instance is completely independent from the
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,195, (really a {@link Vector2D Vector2D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,195,* or null if there are no intersection points
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,197,ublic Vector2D intersection(final Hyperplane<Euclidean2D> other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,198,inal Line otherL = (Line) other;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,199,inal double d = sin * otherL.cos - otherL.sin * cos;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,197,public Vector2D intersection(final Line other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,198,final double d = sin * other.cos - other.sin * cos;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,203,"eturn new Vector2D((cos * otherL.originOffset - otherL.cos * originOffset) / d,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,204,sin * otherL.originOffset - otherL.sin * originOffset) / d);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,202,"return new Vector2D((cos * other.originOffset - other.cos * originOffset) / d,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,203,(sin * other.originOffset - other.sin * originOffset) / d);

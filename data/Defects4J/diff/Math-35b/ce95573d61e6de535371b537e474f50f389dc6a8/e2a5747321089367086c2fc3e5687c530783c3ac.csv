is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,21,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,22,mport org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,23,mport org.apache.commons.math.exception.MathUserException;
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,21,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,22,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,23,import org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,122,** Build a Legendre-Gauss integrator.
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,123,* Build a Legendre-Gauss integrator with given accuracies and iterations counts.
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,124, @param defaultMaximalIterationCount maximum number of iterations
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,125, @exception IllegalArgumentException if the number of points is not
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,126, in the supported range
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,125,* @param relativeAccuracy relative accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,126,* @param absoluteAccuracy absolute accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,127,* @param minimalIterationCount minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,128,* @param maximalIterationCount maximum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,129,* @exception NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,130,* is not strictly positive
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,131,* @exception NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,132,* is lesser than or equal to the minimal number of iterations
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,128,"ublic LegendreGaussIntegrator(final int n, final int defaultMaximalIterationCount)"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,129,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,130,uper(defaultMaximalIterationCount);
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,134,"public LegendreGaussIntegrator(final int n,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,135,"final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,136,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,137,"final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,138,final int maximalIterationCount)
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,139,"throws NotStrictlyPositiveException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,140,"super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,156,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,157,"ublic double integrate(final UnivariateRealFunction f, final double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,158,"hrows ConvergenceException,  MathUserException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,167,* Build a Legendre-Gauss integrator with given accuracies.
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,168,* @param n number of points desired (must be between 2 and 5 inclusive)
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,169,* @param relativeAccuracy relative accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,170,* @param absoluteAccuracy absolute accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,172,"public LegendreGaussIntegrator(final int n,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,173,"final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,174,final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,175,"this(n, relativeAccuracy, absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,176,"DEFAULT_MIN_ITERATIONS_COUNT, DEFAULT_MAX_ITERATIONS_COUNT);"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,160,learResult();
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,161,"erifyInterval(min, max);"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,162,erifyIterationCount();
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,180,* Build a Legendre-Gauss integrator with given iteration counts.
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,181,* @param n number of points desired (must be between 2 and 5 inclusive)
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,182,* @param minimalIterationCount minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,183,* @param maximalIterationCount maximum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,184,* @exception NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,185,* is not strictly positive
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,186,* @exception NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,187,* is lesser than or equal to the minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,189,"public LegendreGaussIntegrator(final int n,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,190,"final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,191,final int maximalIterationCount) {
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,192,"this(n, DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY,"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,193,"minimalIterationCount, maximalIterationCount);"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,196,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,197,protected double doIntegrate()
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,198,"throws TooManyEvaluationsException, ConvergenceException {"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,165,"ouble oldt = stage(f, min, max, 1);"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,201,double oldt = stage(1);
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,168,or (int i = 0; i < maximalIterationCount; ++i) {
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,204,while (true) {
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,171,"inal double t = stage(f, min, max, n);"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,207,final double t = stage(n);
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,180,f ((i + 1 >= minimalIterationCount) && (delta <= limit)) {
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,181,"etResult(t, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,216,if ((iterations.getCount() + 1 >= minimalIterationCount) && (delta <= limit)) {
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,217,setResult(t);
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,225,iterations.incrementCount();
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,192,hrow new MaxCountExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,198, @param f the integrand function
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,199, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,200, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,203, @throws MathUserException if an error occurs evaluating the
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,204, function
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,235,* @throws TooManyEvaluationsException if the maximal number of evaluations
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,236,* is exceeded.
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,206,"rivate double stage(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,207,"inal double min, final double max, final int n)"
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,208,hrows MathUserException {
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,238,private double stage(final int n)
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,239,throws TooManyEvaluationsException {
False,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,219,um += weights[j] * f.value(midPoint + halfStep * abscissas[j]);
True,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,250,sum += weights[j] * computeObjectiveValue(midPoint + halfStep * abscissas[j]);
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,19,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,21,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,22,mport org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,19,import org.apache.commons.math.ConvergenceException;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,20,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,21,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,22,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,23,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,41,/** Maximal number of iterations for Romberg. */
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,42,public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,42, Construct an integrator.
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,45,* Build a Romberg integrator with given accuracies and iterations counts.
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,46,* @param relativeAccuracy relative accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,47,* @param absoluteAccuracy absolute accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,48,* @param minimalIterationCount minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,49,* @param maximalIterationCount maximum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,50,* (must be less than or equal to {@link #ROMBERG_MAX_ITERATIONS_COUNT})
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,51,* @exception NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,52,* is not strictly positive
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,53,* @exception NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,54,* is lesser than or equal to the minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,55,* @exception NumberIsTooLargeException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,56,* is greater than {@link #ROMBERG_MAX_ITERATIONS_COUNT}
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,58,"public RombergIntegrator(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,59,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,60,"final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,61,final int maximalIterationCount)
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,62,"throws NotStrictlyPositiveException, NumberIsTooSmallException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,63,"super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,64,if (maximalIterationCount > ROMBERG_MAX_ITERATIONS_COUNT) {
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,65,"throw new NumberIsTooLargeException(maximalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,66,"ROMBERG_MAX_ITERATIONS_COUNT, false);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,71,* Build a Romberg integrator with given iteration counts.
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,72,* @param minimalIterationCount minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,73,* @param maximalIterationCount maximum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,74,* (must be less than or equal to {@link #ROMBERG_MAX_ITERATIONS_COUNT})
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,75,* @exception NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,76,* is not strictly positive
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,77,* @exception NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,78,* is lesser than or equal to the minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,79,* @exception NumberIsTooLargeException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,80,* is greater than {@link #ROMBERG_MAX_ITERATIONS_COUNT}
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,82,"public RombergIntegrator(final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,83,final int maximalIterationCount)
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,84,"throws NotStrictlyPositiveException, NumberIsTooSmallException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,85,"super(minimalIterationCount, maximalIterationCount);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,86,if (maximalIterationCount > ROMBERG_MAX_ITERATIONS_COUNT) {
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,87,"throw new NumberIsTooLargeException(maximalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,88,"ROMBERG_MAX_ITERATIONS_COUNT, false);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,93,* Construct a Romberg integrator with default settings
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,94,* (max iteration count set to {@link #ROMBERG_MAX_ITERATIONS_COUNT})
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,45,uper(32);
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,97,"super(DEFAULT_MIN_ITERATIONS_COUNT, ROMBERG_MAX_ITERATIONS_COUNT);"
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,49,"ublic double integrate(final UnivariateRealFunction f, final double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,50,"hrows MaxCountExceededException, MathUserException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,101,protected double doIntegrate()
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,102,"throws TooManyEvaluationsException, ConvergenceException {"
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,52,inal int m = maximalIterationCount + 1;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,104,final int m = iterations.getMaximalCount() + 1;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,56,learResult();
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,57,"erifyInterval(min, max);"
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,58,erifyIterationCount();
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,61,"urrentRow[0] = qtrap.stage(f, min, max, 0);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,109,"currentRow[0] = qtrap.stage(this, 0);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,110,iterations.incrementCount();
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,63,or (int i = 1; i <= maximalIterationCount; ++i) {
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,112,while (true) {
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,114,final int i = iterations.getCount();
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,70,"urrentRow[0] = qtrap.stage(f, min, max, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,121,"currentRow[0] = qtrap.stage(this, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,122,iterations.incrementCount();
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,82,"etResult(s, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,134,setResult(s);
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,88,hrow new MaxCountExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,91,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,92,Override
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,93,rotected void verifyIterationCount() throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,94,uper.verifyIterationCount();
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,95,/ at most 32 bisection refinements due to higher order divider
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,96,f (maximalIterationCount > 32) {
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,97,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,98,"ocalizedFormats.INVALID_ITERATIONS_LIMITS,"
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,99,", 32);"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,19,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,21,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,22,mport org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,19,import org.apache.commons.math.ConvergenceException;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,20,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,21,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,22,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,23,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,40,/** Maximal number of iterations for Simpson. */
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,41,public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,44,* Build a Simpson integrator with given accuracies and iterations counts.
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,45,* @param relativeAccuracy relative accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,46,* @param absoluteAccuracy absolute accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,47,* @param minimalIterationCount minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,48,* @param maximalIterationCount maximum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,49,* (must be less than or equal to {@link #SIMPSON_MAX_ITERATIONS_COUNT})
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,50,* @exception NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,51,* is not strictly positive
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,52,* @exception NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,53,* is lesser than or equal to the minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,54,* @exception NumberIsTooLargeException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,55,* is greater than {@link #SIMPSON_MAX_ITERATIONS_COUNT}
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,57,"public SimpsonIntegrator(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,58,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,59,"final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,60,final int maximalIterationCount)
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,61,"throws NotStrictlyPositiveException, NumberIsTooSmallException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,62,"super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,63,if (maximalIterationCount > SIMPSON_MAX_ITERATIONS_COUNT) {
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,64,"throw new NumberIsTooLargeException(maximalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,65,"SIMPSON_MAX_ITERATIONS_COUNT, false);"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,70,* Build a Simpson integrator with given iteration counts.
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,71,* @param minimalIterationCount minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,72,* @param maximalIterationCount maximum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,73,* (must be less than or equal to {@link #SIMPSON_MAX_ITERATIONS_COUNT})
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,74,* @exception NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,75,* is not strictly positive
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,76,* @exception NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,77,* is lesser than or equal to the minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,78,* @exception NumberIsTooLargeException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,79,* is greater than {@link #SIMPSON_MAX_ITERATIONS_COUNT}
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,81,"public SimpsonIntegrator(final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,82,final int maximalIterationCount)
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,83,"throws NotStrictlyPositiveException, NumberIsTooSmallException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,84,"super(minimalIterationCount, maximalIterationCount);"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,85,if (maximalIterationCount > SIMPSON_MAX_ITERATIONS_COUNT) {
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,86,"throw new NumberIsTooLargeException(maximalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,87,"SIMPSON_MAX_ITERATIONS_COUNT, false);"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,41, Construct an integrator.
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,92,* Construct an integrator with default settings.
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,93,* (max iteration count set to {@link #SIMPSON_MAX_ITERATIONS_COUNT})
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,44,uper(64);
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,96,"super(DEFAULT_MIN_ITERATIONS_COUNT, SIMPSON_MAX_ITERATIONS_COUNT);"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,48,"ublic double integrate(final UnivariateRealFunction f, final double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,49,"hrows MaxCountExceededException, MathUserException, IllegalArgumentException {"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,51,learResult();
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,52,"erifyInterval(min, max);"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,53,erifyIterationCount();
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,100,protected double doIntegrate()
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,101,"throws TooManyEvaluationsException, ConvergenceException {"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,57,"inal double s = (4 * qtrap.stage(f, min, max, 1) - qtrap.stage(f, min, max, 0)) / 3.0;"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,58,"etResult(s, 1);"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,105,"final double s = (4 * qtrap.stage(this, 1) - qtrap.stage(this, 0)) / 3.0;"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,106,setResult(s);
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,63,"ouble oldt = qtrap.stage(f, min, max, 0);"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,64,or (int i = 1; i <= maximalIterationCount; ++i) {
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,65,"inal double t = qtrap.stage(f, min, max, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,111,"double oldt = qtrap.stage(this, 0);"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,112,while (true) {
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,113,"final double t = qtrap.stage(this, iterations.getCount());"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,114,iterations.incrementCount();
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,67,f (i >= minimalIterationCount) {
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,116,if (iterations.getCount() >= minimalIterationCount) {
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,72,"etResult(s, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,121,setResult(s);
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,79,hrow new MaxCountExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,82,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,83,Override
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,84,rotected void verifyIterationCount() throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,85,uper.verifyIterationCount();
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,86,/ at most 64 bisection refinements
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,87,f (maximalIterationCount > 64) {
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,88,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,89,"ocalizedFormats.INVALID_ITERATIONS_LIMITS,"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,90,", 64);"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,19,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,21,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,22,mport org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,19,import org.apache.commons.math.ConvergenceException;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,20,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,21,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,22,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,23,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,39,/** Maximal number of iterations for trapezoid. */
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,40,public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,43, Construct an integrator.
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,46,* Build a trapezoid integrator with given accuracies and iterations counts.
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,47,* @param relativeAccuracy relative accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,48,* @param absoluteAccuracy absolute accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,49,* @param minimalIterationCount minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,50,* @param maximalIterationCount maximum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,51,* (must be less than or equal to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT)
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,52,* @exception NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,53,* is not strictly positive
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,54,* @exception NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,55,* is lesser than or equal to the minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,56,* @exception NumberIsTooLargeException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,57,* is greater than {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,59,"public TrapezoidIntegrator(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,60,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,61,"final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,62,final int maximalIterationCount)
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,63,"throws NotStrictlyPositiveException, NumberIsTooSmallException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,64,"super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,65,if (maximalIterationCount > TRAPEZOID_MAX_ITERATIONS_COUNT) {
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,66,"throw new NumberIsTooLargeException(maximalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,67,"TRAPEZOID_MAX_ITERATIONS_COUNT, false);"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,72,* Build a trapezoid integrator with given iteration counts.
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,73,* @param minimalIterationCount minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,74,* @param maximalIterationCount maximum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,75,* (must be less than or equal to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT)
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,76,* @exception NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,77,* is not strictly positive
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,78,* @exception NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,79,* is lesser than or equal to the minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,80,* @exception NumberIsTooLargeException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,81,* is greater than {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,83,"public TrapezoidIntegrator(final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,84,final int maximalIterationCount)
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,85,"throws NotStrictlyPositiveException, NumberIsTooSmallException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,86,"super(minimalIterationCount, maximalIterationCount);"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,87,if (maximalIterationCount > TRAPEZOID_MAX_ITERATIONS_COUNT) {
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,88,"throw new NumberIsTooLargeException(maximalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,89,"TRAPEZOID_MAX_ITERATIONS_COUNT, false);"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,94,* Construct a trapezoid integrator with default settings.
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,95,* (max iteration count set to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT})
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,46,uper(64);
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,98,"super(DEFAULT_MIN_ITERATIONS_COUNT, TRAPEZOID_MAX_ITERATIONS_COUNT);"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,58, @param f the integrand function
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,59, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,60, @param max the upper bound for the interval
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,110,* @param baseIntegrator integrator holdingintegration parameters
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,63, @throws MathUserException if an error occurs evaluating the function
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,113,* @throws TooManyEvaluationsException if the maximal number of evaluations
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,114,* is exceeded.
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,65,"ouble stage(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,66,"inal double min, final double max, final int n)"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,67,hrows MathUserException {
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,116,"double stage(final UnivariateRealIntegratorImpl baseIntegrator, final int n)"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,117,throws TooManyEvaluationsException {
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,70, = 0.5 * (max - min) * (f.value(min) + f.value(max));
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,120,s = 0.5 * (baseIntegrator.max - baseIntegrator.min) *
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,121,(baseIntegrator.computeObjectiveValue(baseIntegrator.min) +
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,122,baseIntegrator.computeObjectiveValue(baseIntegrator.max));
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,75,inal double spacing = (max - min) / np; // spacing between adjacent new points
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,76,ouble x = min + 0.5 * spacing;    // the first new point
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,127,// spacing between adjacent new points
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,128,final double spacing = (baseIntegrator.max - baseIntegrator.min) / np;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,129,double x = baseIntegrator.min + 0.5 * spacing;    // the first new point
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,78,um += f.value(x);
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,131,sum += baseIntegrator.computeObjectiveValue(x);
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,88,"ublic double integrate(final UnivariateRealFunction f, final double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,89,"hrows MaxCountExceededException, MathUserException, IllegalArgumentException {"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,91,learResult();
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,92,"erifyInterval(min, max);"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,93,erifyIterationCount();
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,141,protected double doIntegrate()
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,142,"throws TooManyEvaluationsException, ConvergenceException {"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,95,"ouble oldt = stage(f, min, max, 0);"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,96,or (int i = 1; i <= maximalIterationCount; ++i) {
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,97,"inal double t = stage(f, min, max, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,144,"double oldt = stage(this, 0);"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,145,iterations.incrementCount();
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,146,while (true) {
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,147,final int i = iterations.getCount();
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,148,"final double t = stage(this, i);"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,103,"etResult(t, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,154,setResult(t);
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,159,iterations.incrementCount();
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,109,hrow new MaxCountExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,112,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,113,Override
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,114,rotected void verifyIterationCount() throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,115,uper.verifyIterationCount();
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,116,/ at most 64 bisection refinements
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,117,f (maximalIterationCount > 64) {
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,118,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,119,"ocalizedFormats.INVALID_ITERATIONS_LIMITS,"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,120,", 64);"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,20,mport org.apache.commons.math.exception.MathUserException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,21,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,22,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,23,import org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,32, Set the upper limit for the number of iterations.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,33, <p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,34," Usually a high iteration count indicates convergence problems. However,"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,35," the ""reasonable value"" varies widely for different algorithms. Users are"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,36, advised to use the default value supplied by the algorithm.</p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,37, <p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,38, A {@link ConvergenceException} will be thrown if this number
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,39, is exceeded.</p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,41, @param count maximum number of iterations
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,43,oid setMaximalIterationCount(int count);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,46, Get the upper limit for the number of iterations.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,48, @return the actual upper limit
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,50,nt getMaximalIterationCount();
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,53, Set the absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,54, <p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,55, The default is usually chosen so that results in the interval
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,56, -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,57," expected absolute value of your results is of much smaller magnitude, set"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,58, this to a smaller value.</p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,59, <p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,60, Algorithms are advised to do a plausibility check with the relative
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,61," accuracy, but clients should not rely on this.</p>"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,63, @param accuracy the accuracy.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,64, @throws IllegalArgumentException if the accuracy can't be achieved by
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,65, the solver or is otherwise deemed unreasonable.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,67,oid setAbsoluteAccuracy(double accuracy);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,70, Get the actual absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,72, @return the accuracy
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,74,ouble getAbsoluteAccuracy();
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,77, Set the relative accuracy.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,78, <p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,79, This is used to stop iterations if the absolute accuracy can't be
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,80, achieved due to large values or short mantissa length.</p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,81, <p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,82, If this should be the primary criterion for convergence rather then a
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,83," safety measure, set the absolute accuracy to a ridiculously small value,"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,84, like {@link org.apache.commons.math.util.MathUtils#SAFE_MIN MathUtils.SAFE_MIN}.</p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,86, @param accuracy the relative accuracy.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,88,oid setRelativeAccuracy(double accuracy);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,97, Set the lower limit for the number of iterations.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,98, <p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,99," Minimal iteration is needed to avoid false early convergence, e.g."
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,100, the sample points happen to be zeroes of the function. Users can
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,101, use the default value or choose one that they see as appropriate.</p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,102, <p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,103, A <code>ConvergenceException</code> will be thrown if this number
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,104, is not met.</p>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,40,* Get the actual absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,106, @param count minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,42,* @return the accuracy
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,108,oid setMinimalIterationCount(int count);
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,44,double getAbsoluteAccuracy();
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,111, Get the lower limit for the number of iterations.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,47,* Get the min limit for the number of iterations.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,113, @return the actual lower limit
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,49,* @return the actual min limit
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,118, Reset the lower limit for the number of iterations to the default.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,119, <p>
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,120, The default value is supplied by the implementation.</p>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,54,* Get the upper limit for the number of iterations.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,122, @see #setMinimalIterationCount(int)
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,56,* @return the actual upper limit
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,124,oid resetMinimalIterationCount();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,58,int getMaximalIterationCount();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,63,* @param maxEval Maximum number of evaluations.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,130, @param min the lower bound for the interval
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,65,* @param min the min bound for the interval
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,68,* @throws TooManyEvaluationsException if the maximal number of evaluations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,69,* is exceeded.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,135, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,136, @throws IllegalArgumentException if min > max or the endpoints do not
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,72,* @throws MathIllegalArgumentException if min > max or the endpoints do not
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,74,* @throws NullArgumentException if {@code f} is {@code null}.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,139,"ouble integrate(UnivariateRealFunction f, double min, double max)"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,140,"hrows ConvergenceException, MathUserException, IllegalArgumentException;"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,76,"double integrate(int maxEval, UnivariateRealFunction f, double min, double max)"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,77,"throws TooManyEvaluationsException, ConvergenceException,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,78,"MathIllegalArgumentException, NullArgumentException;"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,90,* Get the number of function evaluations of the last run of the integrator.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,91,* @return number of function evaluations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,92,"* @throws IllegalStateException if there is no result available, either"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,93,* because no result was yet computed or the last attempt failed
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,95,int getEvaluations() throws IllegalStateException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,98,* Get the number of iterations of the last run of the integrator.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,99,* @return number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,100,"* @throws IllegalStateException if there is no result available, either"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,101,* because no result was yet computed or the last attempt failed
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,103,int getIterations() throws IllegalStateException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,19,import org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,20,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,21,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,22,import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,23,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,25,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,26,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,27,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,28,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,29,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,30,import org.apache.commons.math.util.Incrementor;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,31,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,41,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,42,public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,44,/** Default relative accuracy. */
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,45,public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,47,/** Default minimal iteration count. */
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,48,public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,50,/** Default maximal iteration count. */
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,51,public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,37,** Maximum number of iterations. */
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,38,rotected int maximalIterationCount;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,43,** default minimum number of iterations */
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,44,rotected int defaultMinimalIterationCount;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,62,/** The iteration count. */
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,63,protected Incrementor iterations;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,65,/** The functions evaluation count. */
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,66,protected Incrementor evaluations;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,68,/** Function to integrate. */
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,69,protected UnivariateRealFunction function;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,46,** The last iteration count. */
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,47,rotected int iterationCount;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,71,/** Lower bound for the interval. */
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,72,protected double min;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,74,/** Upper bound for the interval. */
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,75,protected double max;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,56, Construct an integrator with given iteration count and accuracy.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,84,* Construct an integrator with given accuracies and iteration counts.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,85,* <p>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,86,* The meanings of the various parameters are:
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,87,* <ul>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,88,*   <li>relative accuracy:
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,89,*       this is used to stop iterations if the absolute accuracy can't be
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,90,*       achieved due to large values or short mantissa length. If this
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,91,*       should be the primary criterion for convergence rather then a
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,92,"*       safety measure, set the absolute accuracy to a ridiculously small value,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,93,*       like {@link org.apache.commons.math.util.MathUtils#SAFE_MIN MathUtils.SAFE_MIN}.</li>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,94,*   <li>absolute accuracy:
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,95,*       The default is usually chosen so that results in the interval
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,96,*       -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,97,"*       expected absolute value of your results is of much smaller magnitude, set"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,98,*       this to a smaller value.</li>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,99,*   <li>minimum number of iterations:
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,100,"*       minimal iteration is needed to avoid false early convergence, e.g."
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,101,*       the sample points happen to be zeroes of the function. Users can
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,102,*       use the default value or choose one that they see as appropriate.</li>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,103,*   <li>maximum number of iterations:
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,104,"*       usually a high iteration count indicates convergence problems. However,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,105,"*       the ""reasonable value"" varies widely for different algorithms. Users are"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,106,*       advised to use the default value supplied by the algorithm.</li>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,107,* </ul>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,108,* </p>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,109,* @param relativeAccuracy relative accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,110,* @param absoluteAccuracy absolute accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,111,* @param minimalIterationCount minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,113,* @exception NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,114,* is not strictly positive
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,115,* @exception NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,116,* is lesser than or equal to the minimal number of iterations
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,60,rotected UnivariateRealIntegratorImpl(final int maximalIterationCount) {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,118,"protected UnivariateRealIntegratorImpl(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,119,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,120,"final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,121,final int maximalIterationCount)
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,122,"throws NotStrictlyPositiveException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,124,// accuracy settings
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,125,this.relativeAccuracy      = relativeAccuracy;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,126,this.absoluteAccuracy      = absoluteAccuracy;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,62,etMaximalIterationCount(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,63,etAbsoluteAccuracy(1.0e-15);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,64,etRelativeAccuracy(1.0e-6);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,65,etMinimalIterationCount(3);
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,128,// iterations count settings
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,129,if (minimalIterationCount <= 0) {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,130,throw new NotStrictlyPositiveException(minimalIterationCount);
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,132,if (maximalIterationCount <= minimalIterationCount) {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,133,"throw new NumberIsTooSmallException(maximalIterationCount, minimalIterationCount, false);"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,135,this.minimalIterationCount = minimalIterationCount;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,136,this.iterations            = new Incrementor();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,137,iterations.setMaximalCount(maximalIterationCount);
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,139,"// prepare evaluations counter, but do not set it yet"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,140,evaluations = new Incrementor();
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,67,erifyIterationCount();
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,70,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,71,ublic void setMaximalIterationCount(final int count) {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,72,aximalIterationCount = count;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,145,* Construct an integrator with given accuracies.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,146,* @param relativeAccuracy relative accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,147,* @param absoluteAccuracy absolute accuracy of the result
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,149,"protected UnivariateRealIntegratorImpl(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,150,final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,151,"this(relativeAccuracy, absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,152,"DEFAULT_MIN_ITERATIONS_COUNT, DEFAULT_MAX_ITERATIONS_COUNT);"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,75,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,76,ublic int getMaximalIterationCount() {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,77,eturn maximalIterationCount;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,156,* Construct an integrator with given iteration counts.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,157,* @param minimalIterationCount minimum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,158,* @param maximalIterationCount maximum number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,159,* @exception NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,160,* is not strictly positive
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,161,* @exception NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,162,* is lesser than or equal to the minimal number of iterations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,164,"protected UnivariateRealIntegratorImpl(final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,165,final int maximalIterationCount)
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,166,"throws NotStrictlyPositiveException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,167,"this(DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,168,"minimalIterationCount, maximalIterationCount);"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,81,ublic void setAbsoluteAccuracy(double accuracy) {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,82,bsoluteAccuracy = accuracy;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,172,public double getRelativeAccuracy() {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,173,return relativeAccuracy;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,91,ublic void setRelativeAccuracy(final double accuracy) {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,92,elativeAccuracy = accuracy;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,182,public int getMinimalIterationCount() {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,183,return minimalIterationCount;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,96,ublic double getRelativeAccuracy() {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,97,eturn relativeAccuracy;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,187,public int getMaximalIterationCount() {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,188,return iterations.getMaximalCount();
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,110, Convenience function for implementations.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,112, @param newResult the result to set
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,113, @param newCount the iteration count to set
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,115,"rotected final void setResult(final double newResult, final int newCount) {"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,116,his.result         = newResult;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,117,his.iterationCount = newCount;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,118,his.resultComputed = true;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,122, Convenience function for implementations.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,124,rotected final void clearResult() {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,125,his.iterationCount = 0;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,126,his.resultComputed = false;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,129,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,130,ublic void setMinimalIterationCount(final int count) {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,131,inimalIterationCount = count;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,135,ublic int getMinimalIterationCount() {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,136,eturn minimalIterationCount;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,201,public int getEvaluations() throws IllegalStateException {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,202,if (resultComputed) {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,203,return evaluations.getCount();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,204,} else {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,205,throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_RESULT_AVAILABLE);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,140,ublic void resetMinimalIterationCount() {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,141,inimalIterationCount = defaultMinimalIterationCount;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,210,public int getIterations() throws IllegalStateException {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,211,if (resultComputed) {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,212,return iterations.getCount();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,213,} else {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,214,throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_RESULT_AVAILABLE);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,145, Verifies that the endpoints specify an interval.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,219,* Convenience function for implementations.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,147, @param lower lower endpoint
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,148, @param upper upper endpoint
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,149, @throws IllegalArgumentException if not interval
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,221,* @param newResult the result to set
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,222,* @param newCount the iteration count to set
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,151,"rotected void verifyInterval(final double lower, final double upper)"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,152,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,153,f (lower >= upper) {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,154,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,155,"ocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,156,"ower, upper);"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,224,protected final void setResult(final double newResult) {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,225,result         = newResult;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,226,resultComputed = true;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,161, Verifies that the upper and lower limits of iterations are valid.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,230,* Compute the objective function value.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,163, @throws IllegalArgumentException if not valid
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,232,* @param point Point at which the objective function must be evaluated.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,233,* @return the objective function value at specified point.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,234,* @throws TooManyEvaluationsException if the maximal number of evaluations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,235,* is exceeded.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,165,rotected void verifyIterationCount() throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,166,f ((minimalIterationCount <= 0) || (maximalIterationCount <= minimalIterationCount)) {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,167,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,168,"ocalizedFormats.INVALID_ITERATIONS_LIMITS,"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,169,"inimalIterationCount, maximalIterationCount);"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,237,protected double computeObjectiveValue(final double point)
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,238,throws TooManyEvaluationsException {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,239,try {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,240,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,241,} catch (MaxCountExceededException e) {
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,242,throw new TooManyEvaluationsException(e.getMax());
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,244,return function.value(point);
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,174, Reset the iterations counter to 0.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,248,* Prepare for computation.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,249,* Subclasses must call this method if they override any of the
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,250,* {@code solve} methods.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,176, @since 2.2
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,252,* @param maxEval Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,253,* @param f the integrand function
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,254,* @param min the min bound for the interval
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,255,* @param upper the upper bound for the interval
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,256,* @throws NullArgumentException if {@code f} is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,257,* @throws MathIllegalArgumentException if {@code min >= max}.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,178,rotected void resetIterationsCounter() {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,179,terationCount = 0;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,259,"protected void setup(final int maxEval,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,260,"final UnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,261,"final double min, final double max)"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,262,"throws NullArgumentException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,264,// Checks.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,265,MathUtils.checkNotNull(f);
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,266,"UnivariateRealSolverUtils.verifyInterval(min, max);"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,268,// Reset.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,269,this.min = min;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,270,this.max = max;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,271,function = f;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,272,evaluations.setMaximalCount(maxEval);
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,273,evaluations.resetCount();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,274,iterations.resetCount();
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,275,resultComputed = false;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,279,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,280,"public double integrate(final int maxEval, final UnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,281,"final double min, final double max)"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,282,"throws TooManyEvaluationsException, ConvergenceException,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,283,"MathIllegalArgumentException, NullArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,285,// Initialization.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,286,"setup(maxEval, f, min, max);"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,288,// Perform computation.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,289,return doIntegrate();
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,183, Increment the iterations counter by 1.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,294,* Method for implementing actual integration algorithms in derived
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,295,* classes.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,185, @throws MaxCountExceededException if the maximal number
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,186, of iterations is exceeded.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,187, @since 2.2
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,297,* @return the root.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,298,* @throws TooManyEvaluationsException if the maximal number of evaluations
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,299,* is exceeded.
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,300,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,301,* or the integrator detects convergence problems otherwise
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,189,rotected void incrementIterationsCounter() {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,190,f (++iterationCount > maximalIterationCount) {
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,191,hrow new MaxCountExceededException(maximalIterationCount);
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,303,protected abstract double doIntegrate()
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,304,"throws TooManyEvaluationsException, ConvergenceException;"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,28,import org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,38,"nivariateRealIntegratorImpl integrator = new LegendreGaussIntegrator(5, 64);"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,39,ntegrator.setAbsoluteAccuracy(1.0e-10);
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,40,ntegrator.setRelativeAccuracy(1.0e-14);
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,41,ntegrator.setMinimalIterationCount(2);
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,42,ntegrator.setMaximalIterationCount(15);
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,39,"UnivariateRealIntegratorImpl integrator = new LegendreGaussIntegrator(5, 1.0e-14, 1.0e-10, 2, 15);"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,48,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,45,"result = integrator.integrate(10000, f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,54,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,51,"result = integrator.integrate(10000, f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,61,"nivariateRealIntegrator integrator = new LegendreGaussIntegrator(3, 64);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,58,UnivariateRealIntegrator integrator =
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,59,"new LegendreGaussIntegrator(3,"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,60,"UnivariateRealIntegratorImpl.DEFAULT_RELATIVE_ACCURACY,"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,61,"UnivariateRealIntegratorImpl.DEFAULT_ABSOLUTE_ACCURACY,"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,62,"UnivariateRealIntegratorImpl.DEFAULT_MIN_ITERATIONS_COUNT,"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,63,64);
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,65,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,67,"result = integrator.integrate(10000, f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,69,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,71,"result = integrator.integrate(10000, f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,73,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,75,"result = integrator.integrate(10000, f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,83,"ew LegendreGaussIntegrator(n, 64);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,85,"new LegendreGaussIntegrator(n,"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,86,"UnivariateRealIntegratorImpl.DEFAULT_RELATIVE_ACCURACY,"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,87,"UnivariateRealIntegratorImpl.DEFAULT_ABSOLUTE_ACCURACY,"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,88,"UnivariateRealIntegratorImpl.DEFAULT_MIN_ITERATIONS_COUNT,"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,89,64);
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,93,"ouble result    = integrator.integrate(p, -5.0, 15.0);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,99,"double result    = integrator.integrate(10000, p, -5.0, 15.0);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,108,@Test
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,109,public void testIssue464() throws ConvergenceException {
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,110,final double value = 0.2;
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,111,UnivariateRealFunction f = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,112,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,113,return (x >= 0 && x <= 5) ? value : 0.0;
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,116,"LegendreGaussIntegrator gauss = new LegendreGaussIntegrator(5, 3, 100);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,118,"// due to the discontinuity, integration implies *many* calls"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,119,double maxX = 0.32462367623786328;
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,120,"Assert.assertEquals(maxX * value, gauss.integrate(Integer.MAX_VALUE, f, -10, maxX), 1.0e-7);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,121,Assert.assertTrue(gauss.getEvaluations() > 37000000);
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,122,Assert.assertTrue(gauss.getIterations() < 30);
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,124,// setting up limits prevents such large number of calls
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,125,try {
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,126,"gauss.integrate(1000, f, -10, maxX);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,127,"Assert.fail(""expected TooManyEvaluationsException"");"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,128,} catch (TooManyEvaluationsException tmee) {
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,129,// expected
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,130,"Assert.assertEquals(1000, tmee.getMax());"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,133,// integrating on the two sides should be simpler
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,134,"double sum1 = gauss.integrate(1000, f, -10, 0);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,135,int eval1   = gauss.getEvaluations();
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,136,"double sum2 = gauss.integrate(1000, f, 0, maxX);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,137,int eval2   = gauss.getEvaluations();
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,138,"Assert.assertEquals(maxX * value, sum1 + sum2, 1.0e-7);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,139,Assert.assertTrue(eval1 + eval2 < 200);
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,23,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,24,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,50,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,52,"result = integrator.integrate(100, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,53,Assert.assertTrue(integrator.getEvaluations() < 50);
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,54,Assert.assertTrue(integrator.getIterations()  < 10);
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,55,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,59,"result = integrator.integrate(100, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,60,Assert.assertTrue(integrator.getEvaluations() < 50);
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,61,Assert.assertTrue(integrator.getIterations()  < 10);
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,70,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,76,"result = integrator.integrate(100, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,77,Assert.assertTrue(integrator.getEvaluations() < 10);
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,78,Assert.assertTrue(integrator.getIterations()  < 5);
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,75,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,83,"result = integrator.integrate(100, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,84,Assert.assertTrue(integrator.getEvaluations() < 10);
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,85,Assert.assertTrue(integrator.getIterations()  < 5);
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,80,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,90,"result = integrator.integrate(100, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,91,Assert.assertTrue(integrator.getEvaluations() < 10);
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,92,Assert.assertTrue(integrator.getIterations()  < 5);
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,90,nivariateRealIntegrator integrator = new RombergIntegrator();
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,94,"ntegrator.integrate(f, 1, -1);"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,95,"ssert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,96, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,105,"new RombergIntegrator().integrate(1000, f, 1, -1);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,106,"Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,107,} catch (NumberIsTooLargeException ex) {
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,101,ntegrator.setMinimalIterationCount(5);
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,102,ntegrator.setMaximalIterationCount(4);
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,103,"ntegrator.integrate(f, -1, 1);"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,104,"ssert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,105, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,112,"new RombergIntegrator(5, 4);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,113,"Assert.fail(""Expecting NumberIsTooSmallException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,114,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,110,ntegrator.setMinimalIterationCount(10);
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,111,ntegrator.setMaximalIterationCount(50);
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,112,"ntegrator.integrate(f, -1, 1);"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,113,"ssert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,114, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,119,"new RombergIntegrator(10, 50);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,120,"Assert.fail(""Expecting NumberIsTooLargeException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,121,} catch (NumberIsTooLargeException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,23,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,24,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,49,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,51,"result = integrator.integrate(1000, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,52,Assert.assertTrue(integrator.getEvaluations() < 100);
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,53,Assert.assertTrue(integrator.getIterations()  < 10);
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,54,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,58,"result = integrator.integrate(1000, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,59,Assert.assertTrue(integrator.getEvaluations() < 50);
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,60,Assert.assertTrue(integrator.getIterations()  < 10);
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,69,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,75,"result = integrator.integrate(1000, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,76,Assert.assertTrue(integrator.getEvaluations() < 150);
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,77,Assert.assertTrue(integrator.getIterations()  < 10);
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,74,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,82,"result = integrator.integrate(1000, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,83,Assert.assertTrue(integrator.getEvaluations() < 100);
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,84,Assert.assertTrue(integrator.getIterations()  < 10);
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,79,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,89,"result = integrator.integrate(1000, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,90,Assert.assertTrue(integrator.getEvaluations() < 150);
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,91,Assert.assertTrue(integrator.getIterations()  < 10);
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,89,nivariateRealIntegrator integrator = new SimpsonIntegrator();
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,93,"ntegrator.integrate(f, 1, -1);"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,94,"ssert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,95, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,103,"new SimpsonIntegrator().integrate(1000, f, 1, -1);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,104,"Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,105,} catch (NumberIsTooLargeException ex) {
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,100,ntegrator.setMinimalIterationCount(5);
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,101,ntegrator.setMaximalIterationCount(4);
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,102,"ntegrator.integrate(f, -1, 1);"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,103,"ssert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,104, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,110,"new SimpsonIntegrator(5, 4);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,111,"Assert.fail(""Expecting NumberIsTooSmallException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,112,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,109,ntegrator.setMinimalIterationCount(10);
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,110,ntegrator.setMaximalIterationCount(99);
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,111,"ntegrator.integrate(f, -1, 1);"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,112,"ssert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,113, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,117,"new SimpsonIntegrator(10, 99);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,118,"Assert.fail(""Expecting NumberIsTooLargeException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,119,} catch (NumberIsTooLargeException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,23,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,24,import org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,49,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,51,"result = integrator.integrate(10000, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,52,Assert.assertTrue(integrator.getEvaluations() < 2500);
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,53,Assert.assertTrue(integrator.getIterations()  < 15);
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,54,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,58,"result = integrator.integrate(10000, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,59,Assert.assertTrue(integrator.getEvaluations() < 2500);
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,60,Assert.assertTrue(integrator.getIterations()  < 15);
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,69,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,75,"result = integrator.integrate(10000, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,76,Assert.assertTrue(integrator.getEvaluations() < 5000);
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,77,Assert.assertTrue(integrator.getIterations()  < 15);
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,74,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,82,"result = integrator.integrate(10000, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,83,Assert.assertTrue(integrator.getEvaluations() < 2500);
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,84,Assert.assertTrue(integrator.getIterations()  < 15);
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,79,"esult = integrator.integrate(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,89,"result = integrator.integrate(10000, f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,90,Assert.assertTrue(integrator.getEvaluations() < 5000);
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,91,Assert.assertTrue(integrator.getIterations()  < 15);
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,89,nivariateRealIntegrator integrator = new TrapezoidIntegrator();
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,93,"ntegrator.integrate(f, 1, -1);"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,94,"ssert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,95, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,105,"new TrapezoidIntegrator().integrate(1000, f, 1, -1);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,106,"Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,107,} catch (NumberIsTooLargeException ex) {
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,100,ntegrator.setMinimalIterationCount(5);
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,101,ntegrator.setMaximalIterationCount(4);
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,102,"ntegrator.integrate(f, -1, 1);"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,103,"ssert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,104, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,112,"new TrapezoidIntegrator(5, 4);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,113,"Assert.fail(""Expecting NumberIsTooSmallException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,114,} catch (NumberIsTooSmallException ex) {
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,109,ntegrator.setMinimalIterationCount(10);
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,110,ntegrator.setMaximalIterationCount(99);
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,111,"ntegrator.integrate(f, -1, 1);"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,112,"ssert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,113, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,119,"new TrapezoidIntegrator(10,99);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,120,"Assert.fail(""Expecting NumberIsTooLargeException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,121,} catch (NumberIsTooLargeException ex) {

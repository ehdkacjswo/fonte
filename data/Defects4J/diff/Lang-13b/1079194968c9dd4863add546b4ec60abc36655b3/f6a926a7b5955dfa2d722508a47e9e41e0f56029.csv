is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,19, <p>Thrown when an object is an instance of an unexpected type (a class or interface).</p>
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,19,* <p>Thrown when an object is an instance of an unexpected type (a class or interface).
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,20,* This exception supplements the standard <code>IllegalArgumentException</code>
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,21,* by providing a more semantically rich description of the problem.</p>
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,23,* <p><code>IllegalClassException</code> represents the case where a method takes
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,24,* in a genericly typed parameter like Object (typically because it has to due to some
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,25,"* other interface it implements), but this implementation only actually accepts a specific"
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,26,"* type, for example String. This exception would be used in place of"
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,27,"* <code>IllegalArgumentException</code>, yet it still extends it.</p>"
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,29,* <pre>
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,30,* public void foo(Object obj) {
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,31,*   if (obj instanceof String == false) {
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,32,"*     throw new IllegalClassException(String.class, obj);"
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,34,*   // do something with the string
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,36,* </pre>
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,40,* @author Stephen Colebourne
False,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,24," @version $Id: IllegalClassException.java,v 1.6 2004/02/18 22:59:50 ggregory Exp $"
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,42,"* @version $Id: IllegalClassException.java,v 1.7 2004/10/15 20:55:01 scolebourne Exp $"
False,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,29, <p>Instantiates with the specified types (classes or interfaces).</p>
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,47,"* <p>Instantiates with the expected type, and actual object.</p>"
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,49,* @param expected  the expected type
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,50,* @param actual  the actual object
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,51,* @since 2.1
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,53,"public IllegalClassException(Class expected, Object actual) {"
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,54,super(
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,55,"""Expected: """
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,56,+ safeGetClassName(expected)
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,57,"+ "", actual: """
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,58,"+ (actual == null ? ""null"" : actual.getClass().getName()));"
True,src/java/org/apache/commons/lang/IllegalClassException.java,src/java/org/apache/commons/lang/IllegalClassException.java,62,* <p>Instantiates with the expected and actual types.</p>
False,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,21, <p>Thrown to indicate an incomplete argument to a method.</p>
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,21,* <p>Thrown to indicate an incomplete argument to a method.
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,22,* This exception supplements the standard <code>IllegalArgumentException</code>
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,23,* by providing a more semantically rich description of the problem.</p>
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,25,* <p><code>IncompleteArgumentException</code> represents the case where a method takes
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,26,"* in a parameter that has a number of properties, some of which have not been set."
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,27,* A case might be a search requirements bean that must have three properties set
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,28,"* in order for the method to run, but only one is actually set."
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,29,* This exception would be used in place of
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,30,"* <code>IllegalArgumentException</code>, yet it still extends it.</p>"
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,32,* <pre>
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,33,* public void foo(PersonSearcher search) {
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,34,*   if (search.getSurname() == null ||
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,35,*       search.getForename() == null ||
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,36,*       search.getSex() == null) {
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,37,"*     throw new IncompleteArgumentException(""search"");"
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,39,*   // do something with the searcher
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,41,* </pre>
False,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,25," @version $Id: IncompleteArgumentException.java,v 1.6 2004/02/18 22:59:50 ggregory Exp $"
True,src/java/org/apache/commons/lang/IncompleteArgumentException.java,src/java/org/apache/commons/lang/IncompleteArgumentException.java,45,"* @version $Id: IncompleteArgumentException.java,v 1.7 2004/10/15 20:55:01 scolebourne Exp $"
False,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,25, <p>Thrown to indicate that a block of code has not been implemented.</p>
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,25,* <p>Thrown to indicate that a block of code has not been implemented.
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,26,* This exception supplements <code>UnsupportedOperationException</code>
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,27,* by providing a more semantically rich description of the problem.</p>
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,29,* <p><code>NotImplementedException</code> represents the case where the
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,30,* author has yet to implement the logic at this point in the program.
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,31,* This can act as an exception based TODO tag.
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,32,"* Because this logic might be within a catch block, this exception"
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,33,* suports exception chaining.</p>
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,35,* <pre>
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,36,* public void foo() {
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,37,*   try {
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,38,*     // do something that throws an Exception
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,39,*   } catch (Exception ex) {
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,40,*     // don't know what to do here yet
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,41,"*     throw new NotImplementedException(""TODO"", ex);"
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,44,* </pre>
False,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,30," @version $Id: NotImplementedException.java,v 1.8 2004/03/16 22:42:58 scolebourne Exp $"
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,49,"* @version $Id: NotImplementedException.java,v 1.9 2004/10/15 20:55:01 scolebourne Exp $"
False,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,20, not have been.</p>
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,20,* not have been.
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,21,* This exception supplements the standard <code>IllegalArgumentException</code>
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,22,* by providing a more semantically rich description of the problem.</p>
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,24,* <p><code>NullArgumentException</code> represents the case where a method takes
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,25,* in a parameter that must not be <code>null</code>.
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,26,"* Some coding standards would use <code>NullPointerException</code> for this case,"
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,27,* others will use <code>IllegalArgumentException</code>.
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,28,* Thus this exception would be used in place of
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,29,"* <code>IllegalArgumentException</code>, yet it still extends it.</p>"
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,31,* <pre>
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,32,* public void foo(String str) {
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,33,*   if (str == null) {
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,34,"*     throw new NullArgumentException(""str"");"
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,36,*   // do something with the string
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,38,* </pre>
False,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,25," @version $Id: NullArgumentException.java,v 1.7 2004/02/18 22:59:50 ggregory Exp $"
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,43,"* @version $Id: NullArgumentException.java,v 1.8 2004/10/15 20:55:01 scolebourne Exp $"
False,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,35,"uper(argName + "" must not be null."");"
True,src/java/org/apache/commons/lang/NullArgumentException.java,src/java/org/apache/commons/lang/NullArgumentException.java,53,"super((argName == null ? ""Argument"" : argName) + "" must not be null."");"
False,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,21, Thrown when it is impossible or undesirable to consume
False,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,22, or throw a checked exception.
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,21,* <p>Thrown when it is impossible or undesirable to consume or throw a checked exception.</p>
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,22,* This exception supplements the standard exception classes by providing a more
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,23,* semantically rich description of the problem.</p>
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,25,* <p><code>UnhandledException</code> represents the case where a method has to deal
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,26,* with a checked exception but does not wish to.
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,27,"* Instead, the checked exception is rethrown in this unchecked wrapper.</p>"
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,29,* <pre>
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,30,* public void foo() {
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,31,*   try {
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,32,*     // do something that throws IOException
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,33,*   } catch (IOException ex) {
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,34,*     // don't want to or can't throw IOException from foo()
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,35,*     throw new UnhandledException(ex);
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,38,* </pre>
False,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,26," @version $Id: UnhandledException.java,v 1.5 2004/02/18 22:59:50 ggregory Exp $"
True,src/java/org/apache/commons/lang/UnhandledException.java,src/java/org/apache/commons/lang/UnhandledException.java,42,"* @version $Id: UnhandledException.java,v 1.6 2004/10/15 20:55:01 scolebourne Exp $"

is_addition,old_file_path,new_file_path,line_num,content
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,49,estSuite suite = new TestSuite(CalendarUtilsTest.class);
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,50,"uite.setName(""CalendarUtilsTest Tests"");"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,49,TestSuite suite = new TestSuite(CalendarUtilsTest.class);
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,50,"suite.setName(""CalendarUtilsTest Tests"");"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,37,rivate static final int months = 7;   // second final prime before 12
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,38,rivate static final int days = 23;    // second final prime before 31 (and valid)
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,39,rivate static final int hours = 19;   // second final prime before 24
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,40,rivate static final int minutes = 53; // second final prime before 60
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,41,rivate static final int seconds = 47; // third final prime before 60
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,42,rivate static final int millis = 991; // second final prime before 1000
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,37,private static final int months = 7;   // second final prime before 12
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,38,private static final int days = 23;    // second final prime before 31 (and valid)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,39,private static final int hours = 19;   // second final prime before 24
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,40,private static final int minutes = 53; // second final prime before 60
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,41,private static final int seconds = 47; // third final prime before 60
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,42,private static final int millis = 991; // second final prime before 1000
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,44,rivate Date aDate;
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,45,rivate Calendar aCalendar;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,44,private Date aDate;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,45,private Calendar aCalendar;
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,47,Override
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,47,@Override
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,49,Calendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,50,"Calendar.set(2005, months, days, hours, minutes, seconds);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,51,"Calendar.set(Calendar.MILLISECOND, millis);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,52,Date = aCalendar.getTime();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,55,ublic void testNullDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,56,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,57,"ateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,58,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,59, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,61,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,62,"ateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,63,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,64, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,66,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,67,"ateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,68,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,69, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,71,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,72,"ateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,73,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,74, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,76,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,77,"ateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,78,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,79, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,82,ublic void testNullCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,83,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,84,"ateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,85,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,86, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,88,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,89,"ateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,90,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,91, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,93,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,94,"ateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,95,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,96, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,98,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,99,"ateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,100,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,101, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,103,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,104,"ateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,105,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,106, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,109,ublic void testInvalidFragmentWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,110,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,111,"ateUtils.getFragmentInMilliseconds(aDate, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,112,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,113, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,115,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,116,"ateUtils.getFragmentInSeconds(aDate, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,117,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,118, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,120,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,121,"ateUtils.getFragmentInMinutes(aDate, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,122,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,123, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,125,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,126,"ateUtils.getFragmentInHours(aDate, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,127,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,128, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,130,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,131,"ateUtils.getFragmentInDays(aDate, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,132,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,133, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,136,ublic void testInvalidFragmentWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,137,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,138,"ateUtils.getFragmentInMilliseconds(aCalendar, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,139,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,140, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,142,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,143,"ateUtils.getFragmentInSeconds(aCalendar, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,144,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,145, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,147,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,148,"ateUtils.getFragmentInMinutes(aCalendar, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,149,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,150, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,152,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,153,"ateUtils.getFragmentInHours(aCalendar, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,154,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,155, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,157,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,158,"ateUtils.getFragmentInDays(aCalendar, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,159,ail();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,160, catch(IllegalArgumentException iae) {}
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,163,ublic void testMillisecondFragmentInLargerUnitWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,164,"ssertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,165,"ssertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,166,"ssertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,167,"ssertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,168,"ssertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,171,ublic void testMillisecondFragmentInLargerUnitWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,172,"ssertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,173,"ssertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,174,"ssertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,175,"ssertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,176,"ssertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,179,ublic void testSecondFragmentInLargerUnitWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,180,"ssertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,181,"ssertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,182,"ssertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,183,"ssertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,186,ublic void testSecondFragmentInLargerUnitWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,187,"ssertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,188,"ssertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,189,"ssertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,190,"ssertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,193,ublic void testMinuteFragmentInLargerUnitWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,194,"ssertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,195,"ssertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,196,"ssertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,199,ublic void testMinuteFragmentInLargerUnitWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,200,"ssertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,201,"ssertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,202,"ssertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,205,ublic void testHourOfDayFragmentInLargerUnitWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,206,"ssertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,207,"ssertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,210,ublic void testHourOfDayFragmentInLargerUnitWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,211,"ssertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,212,"ssertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,215,ublic void testDayOfYearFragmentInLargerUnitWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,216,"ssertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,219,ublic void testDayOfYearFragmentInLargerUnitWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,220,"ssertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,223,ublic void testDateFragmentInLargerUnitWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,224,"ssertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,227,ublic void testDateFragmentInLargerUnitWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,228,"ssertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,231,/Calendar.SECOND as useful fragment
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,233,ublic void testMillisecondsOfSecondWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,234,"ong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,235,"ssertEquals(millis, testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,238,ublic void testMillisecondsOfSecondWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,239,"ong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,240,"ssertEquals(millis, testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,241,"ssertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,244,/Calendar.MINUTE as useful fragment
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,246,ublic void testMillisecondsOfMinuteWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,247,"ong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,248,"ssertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,251,ublic void testMillisecondsOfMinuteWithCalender() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,252,"ong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,253,"ssertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,256,ublic void testSecondsofMinuteWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,257,"ong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,258,"ssertEquals(seconds, testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,261,ublic void testSecondsofMinuteWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,262,"ong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,263,"ssertEquals(seconds, testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,264,"ssertEquals(aCalendar.get(Calendar.SECOND), testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,267,/Calendar.HOUR_OF_DAY as useful fragment
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,269,ublic void testMillisecondsOfHourWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,270,"ong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,271,"ssertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,274,ublic void testMillisecondsOfHourWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,275,"ong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,276,"ssertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,279,ublic void testSecondsofHourWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,280,"ong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,281,ssertEquals(
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,282,econds
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,283, (minutes
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,284," DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,285,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,288,ublic void testSecondsofHourWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,289,"ong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,290,ssertEquals(
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,291,econds
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,292, (minutes
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,293," DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,294,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,297,ublic void testMinutesOfHourWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,298,"ong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,299,"ssertEquals(minutes, testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,302,ublic void testMinutesOfHourWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,303,"ong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,304,"ssertEquals(minutes, testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,307,/Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,308,ublic void testMillisecondsOfDayWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,309,"ong testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,310,ong expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,311,"ssertEquals(expectedValue, testresult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,312,"estresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,313,"ssertEquals(expectedValue, testresult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,316,ublic void testMillisecondsOfDayWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,317,"ong testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,318,ong expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,319,"ssertEquals(expectedValue, testresult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,320,"estresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,321,"ssertEquals(expectedValue, testresult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,324,ublic void testSecondsOfDayWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,325,"ong testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,326,ong expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,327,"ssertEquals(expectedValue, testresult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,328,"estresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,329,"ssertEquals(expectedValue, testresult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,332,ublic void testSecondsOfDayWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,333,"ong testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,334,ong expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,335,"ssertEquals(expectedValue, testresult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,336,"estresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,337,"ssertEquals(expectedValue, testresult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,340,ublic void testMinutesOfDayWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,341,"ong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,342,ong expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,343,"ssertEquals(expectedValue,testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,344,"estResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,345,"ssertEquals(expectedValue,testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,348,ublic void testMinutesOfDayWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,349,"ong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,350,ong expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,351,"ssertEquals(expectedValue, testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,352,"estResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,353,"ssertEquals(expectedValue, testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,356,ublic void testHoursOfDayWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,357,"ong testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,358,ong expectedValue = hours;
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,359,"ssertEquals(expectedValue,testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,360,"estResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,361,"ssertEquals(expectedValue,testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,364,ublic void testHoursOfDayWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,365,"ong testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,366,ong expectedValue = hours;
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,367,"ssertEquals(expectedValue, testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,368,"estResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,369,"ssertEquals(expectedValue, testResult);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,373,/Calendar.MONTH as useful fragment
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,374,ublic void testMillisecondsOfMonthWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,375,"ong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,376,ssertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,377," (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,378,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,381,ublic void testMillisecondsOfMonthWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,382,"ong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,383,ssertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,384," (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,49,aCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,50,"aCalendar.set(2005, months, days, hours, minutes, seconds);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,51,"aCalendar.set(Calendar.MILLISECOND, millis);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,52,aDate = aCalendar.getTime();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,55,public void testNullDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,56,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,57,"DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,58,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,59,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,61,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,62,"DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,63,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,64,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,66,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,67,"DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,68,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,69,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,71,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,72,"DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,73,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,74,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,76,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,77,"DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,78,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,79,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,82,public void testNullCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,83,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,84,"DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,85,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,86,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,88,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,89,"DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,90,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,91,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,93,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,94,"DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,95,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,96,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,98,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,99,"DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,100,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,101,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,103,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,104,"DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,105,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,106,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,109,public void testInvalidFragmentWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,110,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,111,"DateUtils.getFragmentInMilliseconds(aDate, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,112,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,113,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,115,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,116,"DateUtils.getFragmentInSeconds(aDate, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,117,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,118,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,120,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,121,"DateUtils.getFragmentInMinutes(aDate, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,122,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,123,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,125,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,126,"DateUtils.getFragmentInHours(aDate, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,127,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,128,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,130,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,131,"DateUtils.getFragmentInDays(aDate, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,132,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,133,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,136,public void testInvalidFragmentWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,137,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,138,"DateUtils.getFragmentInMilliseconds(aCalendar, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,139,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,140,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,142,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,143,"DateUtils.getFragmentInSeconds(aCalendar, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,144,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,145,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,147,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,148,"DateUtils.getFragmentInMinutes(aCalendar, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,149,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,150,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,152,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,153,"DateUtils.getFragmentInHours(aCalendar, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,154,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,155,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,157,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,158,"DateUtils.getFragmentInDays(aCalendar, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,159,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,160,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,163,public void testMillisecondFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,164,"assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,165,"assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,166,"assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,167,"assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,168,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,171,public void testMillisecondFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,172,"assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,173,"assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,174,"assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,175,"assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,176,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,179,public void testSecondFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,180,"assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,181,"assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,182,"assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,183,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,186,public void testSecondFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,187,"assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,188,"assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,189,"assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,190,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,193,public void testMinuteFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,194,"assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,195,"assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,196,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,199,public void testMinuteFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,200,"assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,201,"assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,202,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,205,public void testHourOfDayFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,206,"assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,207,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,210,public void testHourOfDayFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,211,"assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,212,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,215,public void testDayOfYearFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,216,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,219,public void testDayOfYearFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,220,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,223,public void testDateFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,224,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,227,public void testDateFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,228,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,231,//Calendar.SECOND as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,233,public void testMillisecondsOfSecondWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,234,"long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,235,"assertEquals(millis, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,238,public void testMillisecondsOfSecondWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,239,"long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,240,"assertEquals(millis, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,241,"assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,244,//Calendar.MINUTE as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,246,public void testMillisecondsOfMinuteWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,247,"long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,248,"assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,251,public void testMillisecondsOfMinuteWithCalender() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,252,"long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,253,"assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,256,public void testSecondsofMinuteWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,257,"long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,258,"assertEquals(seconds, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,261,public void testSecondsofMinuteWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,262,"long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,263,"assertEquals(seconds, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,264,"assertEquals(aCalendar.get(Calendar.SECOND), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,267,//Calendar.HOUR_OF_DAY as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,269,public void testMillisecondsOfHourWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,270,"long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,271,"assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,274,public void testMillisecondsOfHourWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,275,"long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,276,"assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,279,public void testSecondsofHourWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,280,"long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,281,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,282,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,283,+ (minutes
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,284,"* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,285,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,288,public void testSecondsofHourWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,289,"long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,290,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,291,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,292,+ (minutes
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,293,"* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,294,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,297,public void testMinutesOfHourWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,298,"long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,299,"assertEquals(minutes, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,302,public void testMinutesOfHourWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,303,"long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,304,"assertEquals(minutes, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,307,//Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,308,public void testMillisecondsOfDayWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,309,"long testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,310,long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,311,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,312,"testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,313,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,316,public void testMillisecondsOfDayWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,317,"long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,318,long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,319,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,320,"testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,321,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,324,public void testSecondsOfDayWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,325,"long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,326,long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,327,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,328,"testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,329,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,332,public void testSecondsOfDayWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,333,"long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,334,long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,335,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,336,"testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,337,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,340,public void testMinutesOfDayWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,341,"long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,342,long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,343,"assertEquals(expectedValue,testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,344,"testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,345,"assertEquals(expectedValue,testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,348,public void testMinutesOfDayWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,349,"long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,350,long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,351,"assertEquals(expectedValue, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,352,"testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,353,"assertEquals(expectedValue, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,356,public void testHoursOfDayWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,357,"long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,358,long expectedValue = hours;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,359,"assertEquals(expectedValue,testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,360,"testResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,361,"assertEquals(expectedValue,testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,364,public void testHoursOfDayWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,365,"long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,366,long expectedValue = hours;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,367,"assertEquals(expectedValue, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,368,"testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,369,"assertEquals(expectedValue, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,373,//Calendar.MONTH as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,374,public void testMillisecondsOfMonthWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,375,"long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,376,assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,377,"+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,378,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,381,public void testMillisecondsOfMonthWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,382,"long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,383,assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,384,"+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,388,ublic void testSecondsOfMonthWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,389,"ong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,390,ssertEquals(
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,391,econds
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,392, ((minutes * DateUtils.MILLIS_PER_MINUTE)
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,393, (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,394," DateUtils.MILLIS_PER_SECOND,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,395,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,398,ublic void testSecondsOfMonthWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,399,"ong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,400,ssertEquals(
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,401,econds
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,402, ((minutes * DateUtils.MILLIS_PER_MINUTE)
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,403, (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,404," DateUtils.MILLIS_PER_SECOND,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,405,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,408,ublic void testMinutesOfMonthWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,409,"ong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,410,ssertEquals(minutes
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,411, ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,412," DateUtils.MILLIS_PER_MINUTE,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,413,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,416,ublic void testMinutesOfMonthWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,417,"ong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,418,ssertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,419," DateUtils.MILLIS_PER_MINUTE,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,420,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,423,ublic void testHoursOfMonthWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,424,"ong testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,425,ssertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,426," DateUtils.MILLIS_PER_HOUR,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,427,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,430,ublic void testHoursOfMonthWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,431,"ong testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,432,ssertEquals( hours +((days * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,433," DateUtils.MILLIS_PER_HOUR,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,434,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,437,/Calendar.YEAR as useful fragment
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,438,ublic void testMillisecondsOfYearWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,439,"ong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,440,alendar cal = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,441,al.setTime(aDate);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,442,ssertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,443," (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,444,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,447,ublic void testMillisecondsOfYearWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,448,"ong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,449,ssertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,450," (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,388,public void testSecondsOfMonthWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,389,"long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,390,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,391,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,392,+ ((minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,393,+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,394,"/ DateUtils.MILLIS_PER_SECOND,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,395,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,398,public void testSecondsOfMonthWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,399,"long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,400,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,401,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,402,+ ((minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,403,+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,404,"/ DateUtils.MILLIS_PER_SECOND,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,405,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,408,public void testMinutesOfMonthWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,409,"long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,410,assertEquals(minutes
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,411,+ ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,412,"/ DateUtils.MILLIS_PER_MINUTE,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,413,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,416,public void testMinutesOfMonthWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,417,"long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,418,assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,419,"/ DateUtils.MILLIS_PER_MINUTE,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,420,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,423,public void testHoursOfMonthWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,424,"long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,425,assertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,426,"/ DateUtils.MILLIS_PER_HOUR,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,427,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,430,public void testHoursOfMonthWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,431,"long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,432,assertEquals( hours +((days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,433,"/ DateUtils.MILLIS_PER_HOUR,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,434,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,437,//Calendar.YEAR as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,438,public void testMillisecondsOfYearWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,439,"long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,440,Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,441,cal.setTime(aDate);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,442,assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,443,"+ (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,444,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,447,public void testMillisecondsOfYearWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,448,"long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,449,assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,450,"+ (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,454,ublic void testSecondsOfYearWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,455,"ong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,456,alendar cal = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,457,al.setTime(aDate);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,458,ssertEquals(
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,459,econds
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,460, ((minutes * DateUtils.MILLIS_PER_MINUTE)
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,461, (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,462," DateUtils.MILLIS_PER_SECOND,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,463,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,466,ublic void testSecondsOfYearWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,467,"ong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,468,ssertEquals(
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,469,econds
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,470, ((minutes * DateUtils.MILLIS_PER_MINUTE)
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,471, (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,472," DateUtils.MILLIS_PER_SECOND,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,473,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,476,ublic void testMinutesOfYearWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,477,"ong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,478,alendar cal = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,479,al.setTime(aDate);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,480,ssertEquals(minutes
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,481, ((hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,482," DateUtils.MILLIS_PER_MINUTE,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,483,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,486,ublic void testMinutesOfYearWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,487,"ong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,488,ssertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,489," DateUtils.MILLIS_PER_MINUTE,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,490,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,493,ublic void testHoursOfYearWithDate() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,494,"ong testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,495,alendar cal = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,496,al.setTime(aDate);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,497,ssertEquals(hours + ((cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,498," DateUtils.MILLIS_PER_HOUR,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,499,estResult);
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,502,ublic void testHoursOfYearWithCalendar() {
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,503,"ong testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,504,ssertEquals( hours +((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,505," DateUtils.MILLIS_PER_HOUR,"
False,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,506,estResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,454,public void testSecondsOfYearWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,455,"long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,456,Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,457,cal.setTime(aDate);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,458,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,459,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,460,+ ((minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,461,+ (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,462,"/ DateUtils.MILLIS_PER_SECOND,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,463,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,466,public void testSecondsOfYearWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,467,"long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,468,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,469,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,470,+ ((minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,471,+ (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,472,"/ DateUtils.MILLIS_PER_SECOND,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,473,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,476,public void testMinutesOfYearWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,477,"long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,478,Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,479,cal.setTime(aDate);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,480,assertEquals(minutes
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,481,+ ((hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,482,"/ DateUtils.MILLIS_PER_MINUTE,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,483,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,486,public void testMinutesOfYearWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,487,"long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,488,assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,489,"/ DateUtils.MILLIS_PER_MINUTE,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,490,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,493,public void testHoursOfYearWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,494,"long testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,495,Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,496,cal.setTime(aDate);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,497,assertEquals(hours + ((cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,498,"/ DateUtils.MILLIS_PER_HOUR,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,499,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,502,public void testHoursOfYearWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,503,"long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,504,assertEquals( hours +((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,505,"/ DateUtils.MILLIS_PER_HOUR,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,506,testResult);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,53,ateFormat dateTimeParser;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,55,ate januaryOneDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,56,ate targetYearDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,57,"/No targetMonths, these must be tested for every type of month(28-31 days)"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,58,"ate targetDateDate, targetDayOfMonthDate, targetAmDate, targetPmDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,59,"ate targetHourOfDayDate, targetHourDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,60,ate targetMinuteDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,61,ate targetSecondDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,62,ate targetMilliSecondDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,64,alendar januaryOneCalendar;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,65,astDateFormat fdf = DateFormatUtils.ISO_DATETIME_FORMAT;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,67,Override
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,53,DateFormat dateTimeParser;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,55,Date januaryOneDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,56,Date targetYearDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,57,"//No targetMonths, these must be tested for every type of month(28-31 days)"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,58,"Date targetDateDate, targetDayOfMonthDate, targetAmDate, targetPmDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,59,"Date targetHourOfDayDate, targetHourDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,60,Date targetMinuteDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,61,Date targetSecondDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,62,Date targetMilliSecondDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,64,Calendar januaryOneCalendar;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,65,FastDateFormat fdf = DateFormatUtils.ISO_DATETIME_FORMAT;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,67,@Override
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,69,uper.setUp();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,70,"ateTimeParser = new SimpleDateFormat(""MMM dd, yyyy H:mm:ss.SSS"", Locale.ENGLISH);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,72,"argetYearDate = dateTimeParser.parse(""January 1, 2007 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,73,"argetDateDate = targetDayOfMonthDate = dateTimeParser.parse(""June 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,74,"argetAmDate =  dateTimeParser.parse(""June 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,75,"argetPmDate = dateTimeParser.parse(""June 1, 2008 12:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,76,"argetHourDate = dateTimeParser.parse(""June 1, 2008 8:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,77,"argetHourOfDayDate = dateTimeParser.parse(""June 1, 2008 8:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,78,"argetMinuteDate =  dateTimeParser.parse(""June 1, 2008 8:15:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,79,"argetSecondDate =  dateTimeParser.parse(""June 1, 2008 8:15:14.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,80,"argetMilliSecondDate =  dateTimeParser.parse(""June 1, 2008 8:15:14.231"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,82,"anuaryOneDate = dateTimeParser.parse(""January 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,83,anuaryOneCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,84,anuaryOneCalendar.setTime(januaryOneDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,88, Tests DateUtils.round()-method with Calendar.Year
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,90, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,91, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,93,ublic void testRoundYear() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,94,inal int calendarField = Calendar.YEAR;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,95,"ate roundedUpDate = dateTimeParser.parse(""January 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,96,ate roundedDownDate = targetYearDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,97,"ate lastRoundedDownDate = dateTimeParser.parse(""June 30, 2007 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,98,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,102, Tests DateUtils.round()-method with Calendar.MONTH
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,103," Includes rounding months with 28, 29, 30 and 31 days"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,104, Includes rounding to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,106, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,107, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,109,ublic void testRoundMonth() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,110,inal int calendarField = Calendar.MONTH;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,111,"ate roundedUpDate, roundedDownDate, lastRoundedDownDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,112,"ate minDate, maxDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,114,/month with 28 days
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,115,"oundedUpDate = dateTimeParser.parse(""March 1, 2007 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,116,"oundedDownDate = dateTimeParser.parse(""February 1, 2007 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,117,"astRoundedDownDate = dateTimeParser.parse(""February 14, 2007 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,118,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,120,/month with 29 days
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,121,"oundedUpDate = dateTimeParser.parse(""March 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,122,"oundedDownDate = dateTimeParser.parse(""February 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,123,"astRoundedDownDate = dateTimeParser.parse(""February 15, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,124,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,126,/month with 30 days
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,127,"oundedUpDate = dateTimeParser.parse(""May 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,128,"oundedDownDate = dateTimeParser.parse(""April 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,129,"astRoundedDownDate = dateTimeParser.parse(""April 15, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,130,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,132,/month with 31 days
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,133,"oundedUpDate = dateTimeParser.parse(""June 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,134,"oundedDownDate = dateTimeParser.parse(""May 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,135,"astRoundedDownDate = dateTimeParser.parse(""May 16, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,136,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,138,/round to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,139,"inDate = dateTimeParser.parse(""December 17, 2007 00:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,140,"axDate = dateTimeParser.parse(""January 16, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,141,"oundToJanuaryFirst(minDate, maxDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,145, Tests DateUtils.round()-method with DateUtils.SEMI_MONTH
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,146," Includes rounding months with 28, 29, 30 and 31 days, each with first and second half"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,147, Includes rounding to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,149, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,150, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,152,ublic void testRoundSemiMonth() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,153,inal int calendarField = DateUtils.SEMI_MONTH;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,154,"ate roundedUpDate, roundedDownDate, lastRoundedDownDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,155,"ate minDate, maxDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,157,/month with 28 days (1)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,158,"oundedUpDate = dateTimeParser.parse(""February 16, 2007 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,159,"oundedDownDate = dateTimeParser.parse(""February 1, 2007 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,160,"astRoundedDownDate = dateTimeParser.parse(""February 8, 2007 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,161,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,163,/month with 28 days (2)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,164,"oundedUpDate = dateTimeParser.parse(""March 1, 2007 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,165,"oundedDownDate = dateTimeParser.parse(""February 16, 2007 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,166,"astRoundedDownDate = dateTimeParser.parse(""February 23, 2007 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,167,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,169,/month with 29 days (1)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,170,"oundedUpDate = dateTimeParser.parse(""February 16, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,171,"oundedDownDate = dateTimeParser.parse(""February 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,172,"astRoundedDownDate = dateTimeParser.parse(""February 8, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,173,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,175,/month with 29 days (2)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,176,"oundedUpDate = dateTimeParser.parse(""March 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,177,"oundedDownDate = dateTimeParser.parse(""February 16, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,178,"astRoundedDownDate = dateTimeParser.parse(""February 23, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,179,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,181,/month with 30 days (1)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,182,"oundedUpDate = dateTimeParser.parse(""April 16, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,183,"oundedDownDate = dateTimeParser.parse(""April 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,184,"astRoundedDownDate = dateTimeParser.parse(""April 8, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,185,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,187,/month with 30 days (2)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,188,"oundedUpDate = dateTimeParser.parse(""May 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,189,"oundedDownDate = dateTimeParser.parse(""April 16, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,190,"astRoundedDownDate = dateTimeParser.parse(""April 23, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,191,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,193,/month with 31 days (1)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,194,"oundedUpDate = dateTimeParser.parse(""May 16, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,195,"oundedDownDate = dateTimeParser.parse(""May 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,196,"astRoundedDownDate = dateTimeParser.parse(""May 8, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,197,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,199,/month with 31 days (2)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,200,"oundedUpDate = dateTimeParser.parse(""June 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,201,"oundedDownDate = dateTimeParser.parse(""May 16, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,202,"astRoundedDownDate = dateTimeParser.parse(""May 23, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,203,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,205,/round to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,206,"inDate = dateTimeParser.parse(""December 24, 2007 00:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,207,"axDate = dateTimeParser.parse(""January 8, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,208,"oundToJanuaryFirst(minDate, maxDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,212, Tests DateUtils.round()-method with Calendar.DATE
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,213, Includes rounding the extremes of one day
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,214, Includes rounding to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,216, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,217, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,219,ublic void testRoundDate() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,220,inal int calendarField = Calendar.DATE;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,221,"ate roundedUpDate, roundedDownDate, lastRoundedDownDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,222,"ate minDate, maxDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,224,"oundedUpDate = dateTimeParser.parse(""June 2, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,225,oundedDownDate = targetDateDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,226,"astRoundedDownDate = dateTimeParser.parse(""June 1, 2008 11:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,227,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,229,/round to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,230,"inDate = dateTimeParser.parse(""December 31, 2007 12:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,231,"axDate = dateTimeParser.parse(""January 1, 2008 11:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,232,"oundToJanuaryFirst(minDate, maxDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,236, Tests DateUtils.round()-method with Calendar.DAY_OF_MONTH
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,237, Includes rounding the extremes of one day
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,238, Includes rounding to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,240, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,241, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,243,ublic void testRoundDayOfMonth() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,244,inal int calendarField = Calendar.DAY_OF_MONTH;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,245,"ate roundedUpDate, roundedDownDate, lastRoundedDownDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,246,"ate minDate, maxDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,248,"oundedUpDate = dateTimeParser.parse(""June 2, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,249,oundedDownDate = targetDayOfMonthDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,250,"astRoundedDownDate = dateTimeParser.parse(""June 1, 2008 11:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,251,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,253,/round to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,254,"inDate = dateTimeParser.parse(""December 31, 2007 12:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,255,"axDate = dateTimeParser.parse(""January 1, 2008 11:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,256,"oundToJanuaryFirst(minDate, maxDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,260, Tests DateUtils.round()-method with Calendar.AM_PM
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,261, Includes rounding the extremes of both AM and PM of one day
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,262, Includes rounding to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,264, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,265, @3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,267,ublic void testRoundAmPm() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,268,inal int calendarField = Calendar.AM_PM;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,269,"ate roundedUpDate, roundedDownDate, lastRoundedDownDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,270,"ate minDate, maxDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,272,/AM
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,273,"oundedUpDate = dateTimeParser.parse(""June 1, 2008 12:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,274,oundedDownDate = targetAmDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,275,"astRoundedDownDate = dateTimeParser.parse(""June 1, 2008 5:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,276,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,278,/PM
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,279,"oundedUpDate = dateTimeParser.parse(""June 2, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,280,oundedDownDate = targetPmDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,281,"astRoundedDownDate = dateTimeParser.parse(""June 1, 2008 17:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,282,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,284,/round to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,285,"inDate = dateTimeParser.parse(""December 31, 2007 18:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,286,"axDate = dateTimeParser.parse(""January 1, 2008 5:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,287,"oundToJanuaryFirst(minDate, maxDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,291, Tests DateUtils.round()-method with Calendar.HOUR_OF_DAY
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,292, Includes rounding the extremes of one hour
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,293, Includes rounding to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,295, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,296, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,298,ublic void testRoundHourOfDay() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,299,inal int calendarField = Calendar.HOUR_OF_DAY;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,300,"ate roundedUpDate, roundedDownDate, lastRoundedDownDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,301,"ate minDate, maxDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,303,"oundedUpDate = dateTimeParser.parse(""June 1, 2008 9:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,304,oundedDownDate = targetHourOfDayDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,305,"astRoundedDownDate = dateTimeParser.parse(""June 1, 2008 8:29:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,306,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,308,/round to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,309,"inDate = dateTimeParser.parse(""December 31, 2007 23:30:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,310,"axDate = dateTimeParser.parse(""January 1, 2008 0:29:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,311,"oundToJanuaryFirst(minDate, maxDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,315, Tests DateUtils.round()-method with Calendar.HOUR
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,316, Includes rounding the extremes of one hour
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,317, Includes rounding to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,319, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,320, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,322,ublic void testRoundHour() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,323,inal int calendarField = Calendar.HOUR;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,324,"ate roundedUpDate, roundedDownDate, lastRoundedDownDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,325,"ate minDate, maxDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,327,"oundedUpDate = dateTimeParser.parse(""June 1, 2008 9:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,328,oundedDownDate = targetHourDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,329,"astRoundedDownDate = dateTimeParser.parse(""June 1, 2008 8:29:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,330,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,332,/round to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,333,"inDate = dateTimeParser.parse(""December 31, 2007 23:30:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,334,"axDate = dateTimeParser.parse(""January 1, 2008 0:29:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,335,"oundToJanuaryFirst(minDate, maxDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,339, Tests DateUtils.round()-method with Calendar.MINUTE
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,340, Includes rounding the extremes of one minute
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,341, Includes rounding to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,343, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,344, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,346,ublic void testRoundMinute() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,347,inal int calendarField = Calendar.MINUTE;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,348,"ate roundedUpDate, roundedDownDate, lastRoundedDownDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,349,"ate minDate, maxDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,351,"oundedUpDate = dateTimeParser.parse(""June 1, 2008 8:16:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,352,oundedDownDate = targetMinuteDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,353,"astRoundedDownDate = dateTimeParser.parse(""June 1, 2008 8:15:29.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,354,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,356,/round to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,357,"inDate = dateTimeParser.parse(""December 31, 2007 23:59:30.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,358,"axDate = dateTimeParser.parse(""January 1, 2008 0:00:29.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,359,"oundToJanuaryFirst(minDate, maxDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,363, Tests DateUtils.round()-method with Calendar.SECOND
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,364, Includes rounding the extremes of one second
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,365, Includes rounding to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,367, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,368, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,370,ublic void testRoundSecond() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,371,inal int calendarField = Calendar.SECOND;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,372,"ate roundedUpDate, roundedDownDate, lastRoundedDownDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,373,"ate minDate, maxDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,375,"oundedUpDate = dateTimeParser.parse(""June 1, 2008 8:15:15.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,376,oundedDownDate = targetSecondDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,377,"astRoundedDownDate = dateTimeParser.parse(""June 1, 2008 8:15:14.499"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,378,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,380,/round to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,381,"inDate = dateTimeParser.parse(""December 31, 2007 23:59:59.500"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,382,"axDate = dateTimeParser.parse(""January 1, 2008 0:00:00.499"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,383,"oundToJanuaryFirst(minDate, maxDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,387, Tests DateUtils.round()-method with Calendar.MILLISECOND
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,388, Includes rounding the extremes of one second
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,389, Includes rounding to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,391, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,392, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,394,ublic void testRoundMilliSecond() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,395,inal int calendarField = Calendar.MILLISECOND;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,396,"ate roundedUpDate, roundedDownDate, lastRoundedDownDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,397,"ate minDate, maxDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,399,oundedDownDate = lastRoundedDownDate = targetMilliSecondDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,400,"oundedUpDate = dateTimeParser.parse(""June 1, 2008 8:15:14.232"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,401,"aseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,403,/round to January 1
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,404,inDate = maxDate = januaryOneDate;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,405,"oundToJanuaryFirst(minDate, maxDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,409, Test DateUtils.truncate()-method with Calendar.YEAR
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,411, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,412, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,414,ublic void testTruncateYear() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,415,inal int calendarField = Calendar.YEAR;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,416,"ate lastTruncateDate = dateTimeParser.parse(""December 31, 2007 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,417,"aseTruncateTest(targetYearDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,421, Test DateUtils.truncate()-method with Calendar.MONTH
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,423, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,424, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,426,ublic void testTruncateMonth() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,427,inal int calendarField = Calendar.MONTH;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,428,"ate truncatedDate = dateTimeParser.parse(""March 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,429,"ate lastTruncateDate = dateTimeParser.parse(""March 31, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,430,"aseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,434, Test DateUtils.truncate()-method with DateUtils.SEMI_MONTH
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,435," Includes truncating months with 28, 29, 30 and 31 days, each with first and second half"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,437, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,438, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,440,ublic void testTruncateSemiMonth() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,441,inal int calendarField = DateUtils.SEMI_MONTH;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,442,"ate truncatedDate, lastTruncateDate;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,444,/month with 28 days (1)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,445,"runcatedDate = dateTimeParser.parse(""February 1, 2007 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,446,"astTruncateDate = dateTimeParser.parse(""February 15, 2007 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,447,"aseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,449,/month with 28 days (2)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,450,"runcatedDate = dateTimeParser.parse(""February 16, 2007 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,451,"astTruncateDate = dateTimeParser.parse(""February 28, 2007 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,452,"aseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,454,/month with 29 days (1)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,455,"runcatedDate = dateTimeParser.parse(""February 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,456,"astTruncateDate = dateTimeParser.parse(""February 15, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,457,"aseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,459,/month with 29 days (2)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,460,"runcatedDate = dateTimeParser.parse(""February 16, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,461,"astTruncateDate = dateTimeParser.parse(""February 29, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,462,"aseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,464,/month with 30 days (1)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,465,"runcatedDate = dateTimeParser.parse(""April 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,466,"astTruncateDate = dateTimeParser.parse(""April 15, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,467,"aseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,469,/month with 30 days (2)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,470,"runcatedDate = dateTimeParser.parse(""April 16, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,471,"astTruncateDate = dateTimeParser.parse(""April 30, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,472,"aseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,474,/month with 31 days (1)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,475,"runcatedDate = dateTimeParser.parse(""March 1, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,476,"astTruncateDate = dateTimeParser.parse(""March 15, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,477,"aseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,479,/month with 31 days (2)
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,480,"runcatedDate = dateTimeParser.parse(""March 16, 2008 0:00:00.000"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,481,"astTruncateDate = dateTimeParser.parse(""March 31, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,482,"aseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,487, Test DateUtils.truncate()-method with Calendar.DATE
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,489, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,490, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,492,ublic void testTruncateDate() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,493,inal int calendarField = Calendar.DATE;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,494,"ate lastTruncateDate = dateTimeParser.parse(""June 1, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,495,"aseTruncateTest(targetDateDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,499, Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,501, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,502, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,504,ublic void testTruncateDayOfMonth() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,505,inal int calendarField = Calendar.DAY_OF_MONTH;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,506,"ate lastTruncateDate = dateTimeParser.parse(""June 1, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,507,"aseTruncateTest(targetDayOfMonthDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,511, Test DateUtils.truncate()-method with Calendar.AM_PM
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,512, Includes truncating the extremes of both AM and PM of one day
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,514, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,515, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,517,ublic void testTruncateAmPm() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,518,inal int calendarField = Calendar.AM_PM;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,520,/AM
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,521,"ate lastTruncateDate = dateTimeParser.parse(""June 1, 2008 11:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,522,"aseTruncateTest(targetAmDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,524,/PM
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,525,"astTruncateDate = dateTimeParser.parse(""June 1, 2008 23:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,526,"aseTruncateTest(targetPmDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,530, Test DateUtils.truncate()-method with Calendar.HOUR
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,532, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,533, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,535,ublic void testTruncateHour() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,536,inal int calendarField = Calendar.HOUR;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,537,"ate lastTruncateDate = dateTimeParser.parse(""June 1, 2008 8:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,538,"aseTruncateTest(targetHourDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,542, Test DateUtils.truncate()-method with Calendar.HOUR_OF_DAY
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,544, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,545, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,547,ublic void testTruncateHourOfDay() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,548,inal int calendarField = Calendar.HOUR_OF_DAY;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,549,"ate lastTruncateDate = dateTimeParser.parse(""June 1, 2008 8:59:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,550,"aseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,554, Test DateUtils.truncate()-method with Calendar.MINUTE
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,556, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,557, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,559,ublic void testTruncateMinute() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,560,inal int calendarField = Calendar.MINUTE;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,561,"ate lastTruncateDate = dateTimeParser.parse(""June 1, 2008 8:15:59.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,562,"aseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,566, Test DateUtils.truncate()-method with Calendar.SECOND
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,568, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,569, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,571,ublic void testTruncateSecond() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,572,inal int calendarField = Calendar.SECOND;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,573,"ate lastTruncateDate = dateTimeParser.parse(""June 1, 2008 8:15:14.999"");"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,574,"aseTruncateTest(targetSecondDate, lastTruncateDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,578, Test DateUtils.truncate()-method with Calendar.SECOND
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,580, @throws Exception
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,581, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,583,ublic void testTruncateMilliSecond() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,584,inal int calendarField = Calendar.MILLISECOND;
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,585,"aseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,589, When using this basetest all extremes are tested.<br>
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,590," It will test the Date, Calendar and Object-implementation<br>"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,591, lastRoundDownDate should round down to roundedDownDate<br>
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,592, lastRoundDownDate + 1 millisecond should round up to roundedUpDate
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,594, @param roundedUpDate the next rounded date after <strong>roundedDownDate</strong> when using <strong>calendarField</strong>
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,595, @param roundedDownDate the result if <strong>lastRoundDownDate</strong> was rounded with <strong>calendarField</strong>
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,596, @param lastRoundDownDate rounding this value with <strong>calendarField</strong> will result in <strong>roundedDownDate</strong>
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,597, @param calendarField
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,598, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,600,"rotected void baseRoundTest(final Date roundedUpDate, final Date roundedDownDate, final Date lastRoundDownDate, final int calendarField) {"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,601,"ate firstRoundUpDate = DateUtils.addMilliseconds(lastRoundDownDate, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,603,/Date-comparison
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,604,"ssertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,605,"ssertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,606,"ssertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,607,"ssertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,609,/Calendar-initiations
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,610,"alendar roundedUpCalendar, roundedDownCalendar, lastRoundDownCalendar, firstRoundUpCalendar;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,611,oundedDownCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,612,oundedUpCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,613,astRoundDownCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,614,irstRoundUpCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,615,oundedDownCalendar.setTime(roundedDownDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,616,oundedUpCalendar.setTime(roundedUpDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,617,astRoundDownCalendar.setTime(lastRoundDownDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,618,irstRoundUpCalendar.setTime(firstRoundUpDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,620,/Calendar-comparison
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,621,"ssertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,622,"ssertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,623,"ssertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,624,"ssertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,626,/Object-comparison
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,627,"ssertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,628,"ssertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,629,"ssertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,630,"ssertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,631,"ssertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,632,"ssertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,633,"ssertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,634,"ssertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,638, When using this basetest all extremes are tested.<br>
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,639," It will test the Date, Calendar and Object-implementation<br>"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,640, lastTruncateDate should round down to truncatedDate<br>
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,641, lastTruncateDate + 1 millisecond should never round down to truncatedDate
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,643, @param truncatedDate expected Date when <strong>lastTruncateDate</strong> is truncated with <strong>calendarField</strong>
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,644, @param lastTruncateDate the last possible Date which will truncate to <strong>truncatedDate</strong> with <strong>calendarField</strong>
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,645, @param calendarField a Calendar.field value
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,646, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,648,"rotected void baseTruncateTest(final Date truncatedDate, final Date lastTruncateDate, final int calendarField) {"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,649,"ate nextTruncateDate = DateUtils.addMilliseconds(lastTruncateDate, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,651,/Date-comparison
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,652,"ssertEquals(""Truncating ""+ fdf.format(truncatedDate) +"" as Date with CalendarField-value ""+ calendarField +"" must return itself"", truncatedDate, DateUtils.truncate(truncatedDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,653,"ssertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,654,"ssertFalse(fdf.format(lastTruncateDate) +"" is not an extreme when truncating as Date with CalendarField-value ""+ calendarField, truncatedDate.equals(DateUtils.truncate(nextTruncateDate, calendarField)));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,656,/Calendar-initiations
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,657,"alendar truncatedCalendar, lastTruncateCalendar, nextTruncateCalendar;"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,658,runcatedCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,659,astTruncateCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,660,extTruncateCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,661,runcatedCalendar.setTime(truncatedDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,662,astTruncateCalendar.setTime(lastTruncateDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,663,extTruncateCalendar.setTime(nextTruncateDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,665,/Calendar-comparison
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,666,"ssertEquals(""Truncating ""+ fdf.format(truncatedCalendar) +"" as Calendar with CalendarField-value ""+ calendarField +"" must return itself"", truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,667,"ssertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,668,"ssertFalse(fdf.format(lastTruncateCalendar) +"" is not an extreme when truncating as Calendar with CalendarField-value ""+ calendarField, truncatedCalendar.equals(DateUtils.truncate(nextTruncateCalendar, calendarField)));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,670,/Object-comparison
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,671,"ssertEquals(""Truncating ""+ fdf.format(truncatedDate) +"" as Date cast to Object with CalendarField-value ""+ calendarField +"" must return itself as Date"", truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,672,"ssertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,673,"ssertFalse(fdf.format(lastTruncateDate) +"" is not an extreme when truncating as Date cast to Object with CalendarField-value ""+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateDate, calendarField)));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,674,"ssertEquals(""Truncating ""+ fdf.format(truncatedCalendar) +"" as Calendar cast to Object with CalendarField-value ""+ calendarField +"" must return itself as Date"", truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,675,"ssertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,676,"ssertFalse(fdf.format(lastTruncateCalendar) +"" is not an extreme when truncating as Calendar cast to Object with CalendarField-value ""+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateCalendar, calendarField)));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,681, Any January 1 could be considered as the ultimate extreme.
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,682, Instead of comparing the results if the input has a difference of 1 millisecond we check the output to be exactly January first.
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,684, @param minDate
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,685, @param maxDate
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,686, @param calendarField
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,687, @since 3.0
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,689,"rotected void roundToJanuaryFirst(Date minDate, Date maxDate, int calendarField) {"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,690,"ssertEquals(""Rounding ""+ fdf.format(januaryOneDate) +"" as Date with CalendarField-value ""+ calendarField +"" must return itself"", januaryOneDate, DateUtils.round(januaryOneDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,691,"ssertEquals(januaryOneDate, DateUtils.round(minDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,692,"ssertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,694,alendar minCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,695,inCalendar.setTime(minDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,696,alendar maxCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,697,axCalendar.setTime(maxDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,698,"ssertEquals(""Rounding ""+ fdf.format(januaryOneCalendar) +"" as Date with CalendarField-value ""+ calendarField +"" must return itself"", januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,699,"ssertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,700,"ssertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,702,"ate toPrevRoundDate = DateUtils.addMilliseconds(minDate, -1);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,703,"ate toNextRoundDate = DateUtils.addMilliseconds(maxDate, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,704,"ssertFalse(fdf.format(minDate) +"" is not an lower-extreme when rounding as Date with CalendarField-value ""+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,705,"ssertFalse(fdf.format(maxDate) +"" is not an upper-extreme when rounding as Date with CalendarField-value ""+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,707,alendar toPrevRoundCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,708,oPrevRoundCalendar.setTime(toPrevRoundDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,709,alendar toNextRoundCalendar = Calendar.getInstance();
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,710,oNextRoundCalendar.setTime(toNextRoundDate);
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,711,"ssertFalse(fdf.format(minCalendar) +"" is not an lower-extreme when rounding as Date with CalendarField-value ""+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));"
False,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,712,"ssertFalse(fdf.format(maxCalendar) +"" is not an upper-extreme when rounding as Date with CalendarField-value ""+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,69,super.setUp();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,70,"dateTimeParser = new SimpleDateFormat(""MMM dd, yyyy H:mm:ss.SSS"", Locale.ENGLISH);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,72,"targetYearDate = dateTimeParser.parse(""January 1, 2007 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,73,"targetDateDate = targetDayOfMonthDate = dateTimeParser.parse(""June 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,74,"targetAmDate =  dateTimeParser.parse(""June 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,75,"targetPmDate = dateTimeParser.parse(""June 1, 2008 12:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,76,"targetHourDate = dateTimeParser.parse(""June 1, 2008 8:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,77,"targetHourOfDayDate = dateTimeParser.parse(""June 1, 2008 8:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,78,"targetMinuteDate =  dateTimeParser.parse(""June 1, 2008 8:15:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,79,"targetSecondDate =  dateTimeParser.parse(""June 1, 2008 8:15:14.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,80,"targetMilliSecondDate =  dateTimeParser.parse(""June 1, 2008 8:15:14.231"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,82,"januaryOneDate = dateTimeParser.parse(""January 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,83,januaryOneCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,84,januaryOneCalendar.setTime(januaryOneDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,88,* Tests DateUtils.round()-method with Calendar.Year
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,90,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,91,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,93,public void testRoundYear() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,94,final int calendarField = Calendar.YEAR;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,95,"Date roundedUpDate = dateTimeParser.parse(""January 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,96,Date roundedDownDate = targetYearDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,97,"Date lastRoundedDownDate = dateTimeParser.parse(""June 30, 2007 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,98,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,102,* Tests DateUtils.round()-method with Calendar.MONTH
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,103,"* Includes rounding months with 28, 29, 30 and 31 days"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,104,* Includes rounding to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,106,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,107,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,109,public void testRoundMonth() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,110,final int calendarField = Calendar.MONTH;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,111,"Date roundedUpDate, roundedDownDate, lastRoundedDownDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,112,"Date minDate, maxDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,114,//month with 28 days
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,115,"roundedUpDate = dateTimeParser.parse(""March 1, 2007 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,116,"roundedDownDate = dateTimeParser.parse(""February 1, 2007 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,117,"lastRoundedDownDate = dateTimeParser.parse(""February 14, 2007 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,118,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,120,//month with 29 days
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,121,"roundedUpDate = dateTimeParser.parse(""March 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,122,"roundedDownDate = dateTimeParser.parse(""February 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,123,"lastRoundedDownDate = dateTimeParser.parse(""February 15, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,124,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,126,//month with 30 days
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,127,"roundedUpDate = dateTimeParser.parse(""May 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,128,"roundedDownDate = dateTimeParser.parse(""April 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,129,"lastRoundedDownDate = dateTimeParser.parse(""April 15, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,130,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,132,//month with 31 days
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,133,"roundedUpDate = dateTimeParser.parse(""June 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,134,"roundedDownDate = dateTimeParser.parse(""May 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,135,"lastRoundedDownDate = dateTimeParser.parse(""May 16, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,136,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,138,//round to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,139,"minDate = dateTimeParser.parse(""December 17, 2007 00:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,140,"maxDate = dateTimeParser.parse(""January 16, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,141,"roundToJanuaryFirst(minDate, maxDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,145,* Tests DateUtils.round()-method with DateUtils.SEMI_MONTH
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,146,"* Includes rounding months with 28, 29, 30 and 31 days, each with first and second half"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,147,* Includes rounding to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,149,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,150,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,152,public void testRoundSemiMonth() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,153,final int calendarField = DateUtils.SEMI_MONTH;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,154,"Date roundedUpDate, roundedDownDate, lastRoundedDownDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,155,"Date minDate, maxDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,157,//month with 28 days (1)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,158,"roundedUpDate = dateTimeParser.parse(""February 16, 2007 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,159,"roundedDownDate = dateTimeParser.parse(""February 1, 2007 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,160,"lastRoundedDownDate = dateTimeParser.parse(""February 8, 2007 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,161,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,163,//month with 28 days (2)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,164,"roundedUpDate = dateTimeParser.parse(""March 1, 2007 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,165,"roundedDownDate = dateTimeParser.parse(""February 16, 2007 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,166,"lastRoundedDownDate = dateTimeParser.parse(""February 23, 2007 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,167,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,169,//month with 29 days (1)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,170,"roundedUpDate = dateTimeParser.parse(""February 16, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,171,"roundedDownDate = dateTimeParser.parse(""February 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,172,"lastRoundedDownDate = dateTimeParser.parse(""February 8, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,173,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,175,//month with 29 days (2)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,176,"roundedUpDate = dateTimeParser.parse(""March 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,177,"roundedDownDate = dateTimeParser.parse(""February 16, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,178,"lastRoundedDownDate = dateTimeParser.parse(""February 23, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,179,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,181,//month with 30 days (1)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,182,"roundedUpDate = dateTimeParser.parse(""April 16, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,183,"roundedDownDate = dateTimeParser.parse(""April 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,184,"lastRoundedDownDate = dateTimeParser.parse(""April 8, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,185,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,187,//month with 30 days (2)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,188,"roundedUpDate = dateTimeParser.parse(""May 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,189,"roundedDownDate = dateTimeParser.parse(""April 16, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,190,"lastRoundedDownDate = dateTimeParser.parse(""April 23, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,191,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,193,//month with 31 days (1)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,194,"roundedUpDate = dateTimeParser.parse(""May 16, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,195,"roundedDownDate = dateTimeParser.parse(""May 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,196,"lastRoundedDownDate = dateTimeParser.parse(""May 8, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,197,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,199,//month with 31 days (2)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,200,"roundedUpDate = dateTimeParser.parse(""June 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,201,"roundedDownDate = dateTimeParser.parse(""May 16, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,202,"lastRoundedDownDate = dateTimeParser.parse(""May 23, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,203,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,205,//round to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,206,"minDate = dateTimeParser.parse(""December 24, 2007 00:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,207,"maxDate = dateTimeParser.parse(""January 8, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,208,"roundToJanuaryFirst(minDate, maxDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,212,* Tests DateUtils.round()-method with Calendar.DATE
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,213,* Includes rounding the extremes of one day
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,214,* Includes rounding to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,216,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,217,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,219,public void testRoundDate() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,220,final int calendarField = Calendar.DATE;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,221,"Date roundedUpDate, roundedDownDate, lastRoundedDownDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,222,"Date minDate, maxDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,224,"roundedUpDate = dateTimeParser.parse(""June 2, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,225,roundedDownDate = targetDateDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,226,"lastRoundedDownDate = dateTimeParser.parse(""June 1, 2008 11:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,227,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,229,//round to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,230,"minDate = dateTimeParser.parse(""December 31, 2007 12:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,231,"maxDate = dateTimeParser.parse(""January 1, 2008 11:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,232,"roundToJanuaryFirst(minDate, maxDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,236,* Tests DateUtils.round()-method with Calendar.DAY_OF_MONTH
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,237,* Includes rounding the extremes of one day
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,238,* Includes rounding to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,240,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,241,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,243,public void testRoundDayOfMonth() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,244,final int calendarField = Calendar.DAY_OF_MONTH;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,245,"Date roundedUpDate, roundedDownDate, lastRoundedDownDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,246,"Date minDate, maxDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,248,"roundedUpDate = dateTimeParser.parse(""June 2, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,249,roundedDownDate = targetDayOfMonthDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,250,"lastRoundedDownDate = dateTimeParser.parse(""June 1, 2008 11:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,251,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,253,//round to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,254,"minDate = dateTimeParser.parse(""December 31, 2007 12:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,255,"maxDate = dateTimeParser.parse(""January 1, 2008 11:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,256,"roundToJanuaryFirst(minDate, maxDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,260,* Tests DateUtils.round()-method with Calendar.AM_PM
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,261,* Includes rounding the extremes of both AM and PM of one day
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,262,* Includes rounding to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,264,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,265,* @3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,267,public void testRoundAmPm() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,268,final int calendarField = Calendar.AM_PM;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,269,"Date roundedUpDate, roundedDownDate, lastRoundedDownDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,270,"Date minDate, maxDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,272,//AM
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,273,"roundedUpDate = dateTimeParser.parse(""June 1, 2008 12:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,274,roundedDownDate = targetAmDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,275,"lastRoundedDownDate = dateTimeParser.parse(""June 1, 2008 5:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,276,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,278,//PM
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,279,"roundedUpDate = dateTimeParser.parse(""June 2, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,280,roundedDownDate = targetPmDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,281,"lastRoundedDownDate = dateTimeParser.parse(""June 1, 2008 17:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,282,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,284,//round to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,285,"minDate = dateTimeParser.parse(""December 31, 2007 18:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,286,"maxDate = dateTimeParser.parse(""January 1, 2008 5:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,287,"roundToJanuaryFirst(minDate, maxDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,291,* Tests DateUtils.round()-method with Calendar.HOUR_OF_DAY
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,292,* Includes rounding the extremes of one hour
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,293,* Includes rounding to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,295,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,296,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,298,public void testRoundHourOfDay() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,299,final int calendarField = Calendar.HOUR_OF_DAY;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,300,"Date roundedUpDate, roundedDownDate, lastRoundedDownDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,301,"Date minDate, maxDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,303,"roundedUpDate = dateTimeParser.parse(""June 1, 2008 9:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,304,roundedDownDate = targetHourOfDayDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,305,"lastRoundedDownDate = dateTimeParser.parse(""June 1, 2008 8:29:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,306,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,308,//round to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,309,"minDate = dateTimeParser.parse(""December 31, 2007 23:30:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,310,"maxDate = dateTimeParser.parse(""January 1, 2008 0:29:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,311,"roundToJanuaryFirst(minDate, maxDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,315,* Tests DateUtils.round()-method with Calendar.HOUR
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,316,* Includes rounding the extremes of one hour
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,317,* Includes rounding to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,319,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,320,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,322,public void testRoundHour() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,323,final int calendarField = Calendar.HOUR;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,324,"Date roundedUpDate, roundedDownDate, lastRoundedDownDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,325,"Date minDate, maxDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,327,"roundedUpDate = dateTimeParser.parse(""June 1, 2008 9:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,328,roundedDownDate = targetHourDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,329,"lastRoundedDownDate = dateTimeParser.parse(""June 1, 2008 8:29:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,330,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,332,//round to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,333,"minDate = dateTimeParser.parse(""December 31, 2007 23:30:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,334,"maxDate = dateTimeParser.parse(""January 1, 2008 0:29:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,335,"roundToJanuaryFirst(minDate, maxDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,339,* Tests DateUtils.round()-method with Calendar.MINUTE
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,340,* Includes rounding the extremes of one minute
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,341,* Includes rounding to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,343,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,344,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,346,public void testRoundMinute() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,347,final int calendarField = Calendar.MINUTE;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,348,"Date roundedUpDate, roundedDownDate, lastRoundedDownDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,349,"Date minDate, maxDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,351,"roundedUpDate = dateTimeParser.parse(""June 1, 2008 8:16:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,352,roundedDownDate = targetMinuteDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,353,"lastRoundedDownDate = dateTimeParser.parse(""June 1, 2008 8:15:29.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,354,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,356,//round to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,357,"minDate = dateTimeParser.parse(""December 31, 2007 23:59:30.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,358,"maxDate = dateTimeParser.parse(""January 1, 2008 0:00:29.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,359,"roundToJanuaryFirst(minDate, maxDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,363,* Tests DateUtils.round()-method with Calendar.SECOND
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,364,* Includes rounding the extremes of one second
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,365,* Includes rounding to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,367,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,368,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,370,public void testRoundSecond() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,371,final int calendarField = Calendar.SECOND;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,372,"Date roundedUpDate, roundedDownDate, lastRoundedDownDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,373,"Date minDate, maxDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,375,"roundedUpDate = dateTimeParser.parse(""June 1, 2008 8:15:15.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,376,roundedDownDate = targetSecondDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,377,"lastRoundedDownDate = dateTimeParser.parse(""June 1, 2008 8:15:14.499"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,378,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,380,//round to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,381,"minDate = dateTimeParser.parse(""December 31, 2007 23:59:59.500"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,382,"maxDate = dateTimeParser.parse(""January 1, 2008 0:00:00.499"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,383,"roundToJanuaryFirst(minDate, maxDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,387,* Tests DateUtils.round()-method with Calendar.MILLISECOND
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,388,* Includes rounding the extremes of one second
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,389,* Includes rounding to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,391,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,392,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,394,public void testRoundMilliSecond() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,395,final int calendarField = Calendar.MILLISECOND;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,396,"Date roundedUpDate, roundedDownDate, lastRoundedDownDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,397,"Date minDate, maxDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,399,roundedDownDate = lastRoundedDownDate = targetMilliSecondDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,400,"roundedUpDate = dateTimeParser.parse(""June 1, 2008 8:15:14.232"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,401,"baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,403,//round to January 1
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,404,minDate = maxDate = januaryOneDate;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,405,"roundToJanuaryFirst(minDate, maxDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,409,* Test DateUtils.truncate()-method with Calendar.YEAR
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,411,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,412,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,414,public void testTruncateYear() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,415,final int calendarField = Calendar.YEAR;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,416,"Date lastTruncateDate = dateTimeParser.parse(""December 31, 2007 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,417,"baseTruncateTest(targetYearDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,421,* Test DateUtils.truncate()-method with Calendar.MONTH
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,423,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,424,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,426,public void testTruncateMonth() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,427,final int calendarField = Calendar.MONTH;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,428,"Date truncatedDate = dateTimeParser.parse(""March 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,429,"Date lastTruncateDate = dateTimeParser.parse(""March 31, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,430,"baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,434,* Test DateUtils.truncate()-method with DateUtils.SEMI_MONTH
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,435,"* Includes truncating months with 28, 29, 30 and 31 days, each with first and second half"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,437,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,438,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,440,public void testTruncateSemiMonth() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,441,final int calendarField = DateUtils.SEMI_MONTH;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,442,"Date truncatedDate, lastTruncateDate;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,444,//month with 28 days (1)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,445,"truncatedDate = dateTimeParser.parse(""February 1, 2007 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,446,"lastTruncateDate = dateTimeParser.parse(""February 15, 2007 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,447,"baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,449,//month with 28 days (2)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,450,"truncatedDate = dateTimeParser.parse(""February 16, 2007 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,451,"lastTruncateDate = dateTimeParser.parse(""February 28, 2007 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,452,"baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,454,//month with 29 days (1)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,455,"truncatedDate = dateTimeParser.parse(""February 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,456,"lastTruncateDate = dateTimeParser.parse(""February 15, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,457,"baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,459,//month with 29 days (2)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,460,"truncatedDate = dateTimeParser.parse(""February 16, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,461,"lastTruncateDate = dateTimeParser.parse(""February 29, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,462,"baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,464,//month with 30 days (1)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,465,"truncatedDate = dateTimeParser.parse(""April 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,466,"lastTruncateDate = dateTimeParser.parse(""April 15, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,467,"baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,469,//month with 30 days (2)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,470,"truncatedDate = dateTimeParser.parse(""April 16, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,471,"lastTruncateDate = dateTimeParser.parse(""April 30, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,472,"baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,474,//month with 31 days (1)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,475,"truncatedDate = dateTimeParser.parse(""March 1, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,476,"lastTruncateDate = dateTimeParser.parse(""March 15, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,477,"baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,479,//month with 31 days (2)
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,480,"truncatedDate = dateTimeParser.parse(""March 16, 2008 0:00:00.000"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,481,"lastTruncateDate = dateTimeParser.parse(""March 31, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,482,"baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,487,* Test DateUtils.truncate()-method with Calendar.DATE
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,489,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,490,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,492,public void testTruncateDate() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,493,final int calendarField = Calendar.DATE;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,494,"Date lastTruncateDate = dateTimeParser.parse(""June 1, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,495,"baseTruncateTest(targetDateDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,499,* Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,501,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,502,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,504,public void testTruncateDayOfMonth() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,505,final int calendarField = Calendar.DAY_OF_MONTH;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,506,"Date lastTruncateDate = dateTimeParser.parse(""June 1, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,507,"baseTruncateTest(targetDayOfMonthDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,511,* Test DateUtils.truncate()-method with Calendar.AM_PM
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,512,* Includes truncating the extremes of both AM and PM of one day
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,514,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,515,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,517,public void testTruncateAmPm() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,518,final int calendarField = Calendar.AM_PM;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,520,//AM
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,521,"Date lastTruncateDate = dateTimeParser.parse(""June 1, 2008 11:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,522,"baseTruncateTest(targetAmDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,524,//PM
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,525,"lastTruncateDate = dateTimeParser.parse(""June 1, 2008 23:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,526,"baseTruncateTest(targetPmDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,530,* Test DateUtils.truncate()-method with Calendar.HOUR
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,532,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,533,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,535,public void testTruncateHour() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,536,final int calendarField = Calendar.HOUR;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,537,"Date lastTruncateDate = dateTimeParser.parse(""June 1, 2008 8:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,538,"baseTruncateTest(targetHourDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,542,* Test DateUtils.truncate()-method with Calendar.HOUR_OF_DAY
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,544,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,545,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,547,public void testTruncateHourOfDay() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,548,final int calendarField = Calendar.HOUR_OF_DAY;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,549,"Date lastTruncateDate = dateTimeParser.parse(""June 1, 2008 8:59:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,550,"baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,554,* Test DateUtils.truncate()-method with Calendar.MINUTE
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,556,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,557,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,559,public void testTruncateMinute() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,560,final int calendarField = Calendar.MINUTE;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,561,"Date lastTruncateDate = dateTimeParser.parse(""June 1, 2008 8:15:59.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,562,"baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,566,* Test DateUtils.truncate()-method with Calendar.SECOND
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,568,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,569,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,571,public void testTruncateSecond() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,572,final int calendarField = Calendar.SECOND;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,573,"Date lastTruncateDate = dateTimeParser.parse(""June 1, 2008 8:15:14.999"");"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,574,"baseTruncateTest(targetSecondDate, lastTruncateDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,578,* Test DateUtils.truncate()-method with Calendar.SECOND
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,580,* @throws Exception
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,581,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,583,public void testTruncateMilliSecond() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,584,final int calendarField = Calendar.MILLISECOND;
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,585,"baseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,589,* When using this basetest all extremes are tested.<br>
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,590,"* It will test the Date, Calendar and Object-implementation<br>"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,591,* lastRoundDownDate should round down to roundedDownDate<br>
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,592,* lastRoundDownDate + 1 millisecond should round up to roundedUpDate
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,594,* @param roundedUpDate the next rounded date after <strong>roundedDownDate</strong> when using <strong>calendarField</strong>
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,595,* @param roundedDownDate the result if <strong>lastRoundDownDate</strong> was rounded with <strong>calendarField</strong>
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,596,* @param lastRoundDownDate rounding this value with <strong>calendarField</strong> will result in <strong>roundedDownDate</strong>
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,597,* @param calendarField
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,598,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,600,"protected void baseRoundTest(final Date roundedUpDate, final Date roundedDownDate, final Date lastRoundDownDate, final int calendarField) {"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,601,"Date firstRoundUpDate = DateUtils.addMilliseconds(lastRoundDownDate, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,603,//Date-comparison
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,604,"assertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,605,"assertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,606,"assertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,607,"assertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,609,//Calendar-initiations
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,610,"Calendar roundedUpCalendar, roundedDownCalendar, lastRoundDownCalendar, firstRoundUpCalendar;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,611,roundedDownCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,612,roundedUpCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,613,lastRoundDownCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,614,firstRoundUpCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,615,roundedDownCalendar.setTime(roundedDownDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,616,roundedUpCalendar.setTime(roundedUpDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,617,lastRoundDownCalendar.setTime(lastRoundDownDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,618,firstRoundUpCalendar.setTime(firstRoundUpDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,620,//Calendar-comparison
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,621,"assertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,622,"assertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,623,"assertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,624,"assertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,626,//Object-comparison
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,627,"assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,628,"assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,629,"assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,630,"assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,631,"assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,632,"assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,633,"assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,634,"assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,638,* When using this basetest all extremes are tested.<br>
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,639,"* It will test the Date, Calendar and Object-implementation<br>"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,640,* lastTruncateDate should round down to truncatedDate<br>
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,641,* lastTruncateDate + 1 millisecond should never round down to truncatedDate
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,643,* @param truncatedDate expected Date when <strong>lastTruncateDate</strong> is truncated with <strong>calendarField</strong>
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,644,* @param lastTruncateDate the last possible Date which will truncate to <strong>truncatedDate</strong> with <strong>calendarField</strong>
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,645,* @param calendarField a Calendar.field value
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,646,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,648,"protected void baseTruncateTest(final Date truncatedDate, final Date lastTruncateDate, final int calendarField) {"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,649,"Date nextTruncateDate = DateUtils.addMilliseconds(lastTruncateDate, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,651,//Date-comparison
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,652,"assertEquals(""Truncating ""+ fdf.format(truncatedDate) +"" as Date with CalendarField-value ""+ calendarField +"" must return itself"", truncatedDate, DateUtils.truncate(truncatedDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,653,"assertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,654,"assertFalse(fdf.format(lastTruncateDate) +"" is not an extreme when truncating as Date with CalendarField-value ""+ calendarField, truncatedDate.equals(DateUtils.truncate(nextTruncateDate, calendarField)));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,656,//Calendar-initiations
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,657,"Calendar truncatedCalendar, lastTruncateCalendar, nextTruncateCalendar;"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,658,truncatedCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,659,lastTruncateCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,660,nextTruncateCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,661,truncatedCalendar.setTime(truncatedDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,662,lastTruncateCalendar.setTime(lastTruncateDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,663,nextTruncateCalendar.setTime(nextTruncateDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,665,//Calendar-comparison
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,666,"assertEquals(""Truncating ""+ fdf.format(truncatedCalendar) +"" as Calendar with CalendarField-value ""+ calendarField +"" must return itself"", truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,667,"assertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,668,"assertFalse(fdf.format(lastTruncateCalendar) +"" is not an extreme when truncating as Calendar with CalendarField-value ""+ calendarField, truncatedCalendar.equals(DateUtils.truncate(nextTruncateCalendar, calendarField)));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,670,//Object-comparison
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,671,"assertEquals(""Truncating ""+ fdf.format(truncatedDate) +"" as Date cast to Object with CalendarField-value ""+ calendarField +"" must return itself as Date"", truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,672,"assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,673,"assertFalse(fdf.format(lastTruncateDate) +"" is not an extreme when truncating as Date cast to Object with CalendarField-value ""+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateDate, calendarField)));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,674,"assertEquals(""Truncating ""+ fdf.format(truncatedCalendar) +"" as Calendar cast to Object with CalendarField-value ""+ calendarField +"" must return itself as Date"", truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,675,"assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,676,"assertFalse(fdf.format(lastTruncateCalendar) +"" is not an extreme when truncating as Calendar cast to Object with CalendarField-value ""+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateCalendar, calendarField)));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,681,* Any January 1 could be considered as the ultimate extreme.
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,682,* Instead of comparing the results if the input has a difference of 1 millisecond we check the output to be exactly January first.
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,684,* @param minDate
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,685,* @param maxDate
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,686,* @param calendarField
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,687,* @since 3.0
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,689,"protected void roundToJanuaryFirst(Date minDate, Date maxDate, int calendarField) {"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,690,"assertEquals(""Rounding ""+ fdf.format(januaryOneDate) +"" as Date with CalendarField-value ""+ calendarField +"" must return itself"", januaryOneDate, DateUtils.round(januaryOneDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,691,"assertEquals(januaryOneDate, DateUtils.round(minDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,692,"assertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,694,Calendar minCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,695,minCalendar.setTime(minDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,696,Calendar maxCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,697,maxCalendar.setTime(maxDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,698,"assertEquals(""Rounding ""+ fdf.format(januaryOneCalendar) +"" as Date with CalendarField-value ""+ calendarField +"" must return itself"", januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,699,"assertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,700,"assertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,702,"Date toPrevRoundDate = DateUtils.addMilliseconds(minDate, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,703,"Date toNextRoundDate = DateUtils.addMilliseconds(maxDate, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,704,"assertFalse(fdf.format(minDate) +"" is not an lower-extreme when rounding as Date with CalendarField-value ""+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,705,"assertFalse(fdf.format(maxDate) +"" is not an upper-extreme when rounding as Date with CalendarField-value ""+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,707,Calendar toPrevRoundCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,708,toPrevRoundCalendar.setTime(toPrevRoundDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,709,Calendar toNextRoundCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,710,toNextRoundCalendar.setTime(toNextRoundDate);
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,711,"assertFalse(fdf.format(minCalendar) +"" is not an lower-extreme when rounding as Date with CalendarField-value ""+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));"
True,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java,712,"assertFalse(fdf.format(maxCalendar) +"" is not an upper-extreme when rounding as Date with CalendarField-value ""+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,443,ublic void testSetYears() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,444,ate base = new Date(MILLIS_TEST);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,445,"ate result = DateUtils.setYears(base, 2000);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,446,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,447,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,448,"ssertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,450,"esult = DateUtils.setYears(base, 2008);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,451,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,452,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,453,"ssertDate(result, 2008, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,455,"esult = DateUtils.setYears(base, 2005);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,456,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,457,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,458,"ssertDate(result, 2005, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,462,ublic void testSetMonths() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,463,ate base = new Date(MILLIS_TEST);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,464,"ate result = DateUtils.setMonths(base, 5);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,465,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,466,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,467,"ssertDate(result, 2000, 5, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,469,"esult = DateUtils.setMonths(base, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,470,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,471,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,472,"ssertDate(result, 2000, 1, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,474,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,475,"esult = DateUtils.setMonths(base, 12);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,476,"ail(""DateUtils.setMonths did not throw an expected IllegalArguementException."");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,477, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,483,ublic void testSetDays() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,484,ate base = new Date(MILLIS_TEST);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,485,"ate result = DateUtils.setDays(base, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,486,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,487,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,488,"ssertDate(result, 2000, 6, 1, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,490,"esult = DateUtils.setDays(base, 29);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,491,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,492,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,493,"ssertDate(result, 2000, 6, 29, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,495,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,496,"esult = DateUtils.setDays(base, 32);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,497,"ail(""DateUtils.setDays did not throw an expected IllegalArguementException."");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,498, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,504,ublic void testSetHours() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,505,ate base = new Date(MILLIS_TEST);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,506,"ate result = DateUtils.setHours(base, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,507,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,508,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,509,"ssertDate(result, 2000, 6, 5, 0, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,511,"esult = DateUtils.setHours(base, 23);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,512,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,513,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,514,"ssertDate(result, 2000, 6, 5, 23, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,516,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,517,"esult = DateUtils.setHours(base, 24);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,518,"ail(""DateUtils.setHours did not throw an expected IllegalArguementException."");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,519, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,525,ublic void testSetMinutes() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,526,ate base = new Date(MILLIS_TEST);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,527,"ate result = DateUtils.setMinutes(base, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,528,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,529,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,530,"ssertDate(result, 2000, 6, 5, 4, 0, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,532,"esult = DateUtils.setMinutes(base, 59);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,533,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,534,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,535,"ssertDate(result, 2000, 6, 5, 4, 59, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,537,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,538,"esult = DateUtils.setMinutes(base, 60);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,539,"ail(""DateUtils.setMinutes did not throw an expected IllegalArguementException."");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,540, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,546,ublic void testSetSeconds() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,547,ate base = new Date(MILLIS_TEST);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,548,"ate result = DateUtils.setSeconds(base, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,549,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,550,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,551,"ssertDate(result, 2000, 6, 5, 4, 3, 0, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,553,"esult = DateUtils.setSeconds(base, 59);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,554,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,555,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,556,"ssertDate(result, 2000, 6, 5, 4, 3, 59, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,558,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,559,"esult = DateUtils.setSeconds(base, 60);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,560,"ail(""DateUtils.setSeconds did not throw an expected IllegalArguementException."");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,561, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,567,ublic void testSetMilliseconds() throws Exception {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,568,ate base = new Date(MILLIS_TEST);
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,569,"ate result = DateUtils.setMilliseconds(base, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,570,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,571,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,572,"ssertDate(result, 2000, 6, 5, 4, 3, 2, 0);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,574,"esult = DateUtils.setMilliseconds(base, 999);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,575,"ssertNotSame(base, result);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,576,"ssertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,577,"ssertDate(result, 2000, 6, 5, 4, 3, 2, 999);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,579,ry {
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,580,"esult = DateUtils.setMilliseconds(base, 1000);"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,581,"ail(""DateUtils.setMilliseconds did not throw an expected IllegalArguementException."");"
False,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,582, catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,443,public void testSetYears() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,444,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,445,"Date result = DateUtils.setYears(base, 2000);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,446,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,447,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,448,"assertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,450,"result = DateUtils.setYears(base, 2008);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,451,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,452,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,453,"assertDate(result, 2008, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,455,"result = DateUtils.setYears(base, 2005);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,456,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,457,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,458,"assertDate(result, 2005, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,462,public void testSetMonths() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,463,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,464,"Date result = DateUtils.setMonths(base, 5);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,465,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,466,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,467,"assertDate(result, 2000, 5, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,469,"result = DateUtils.setMonths(base, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,470,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,471,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,472,"assertDate(result, 2000, 1, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,474,try {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,475,"result = DateUtils.setMonths(base, 12);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,476,"fail(""DateUtils.setMonths did not throw an expected IllegalArguementException."");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,477,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,483,public void testSetDays() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,484,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,485,"Date result = DateUtils.setDays(base, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,486,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,487,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,488,"assertDate(result, 2000, 6, 1, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,490,"result = DateUtils.setDays(base, 29);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,491,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,492,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,493,"assertDate(result, 2000, 6, 29, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,495,try {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,496,"result = DateUtils.setDays(base, 32);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,497,"fail(""DateUtils.setDays did not throw an expected IllegalArguementException."");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,498,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,504,public void testSetHours() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,505,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,506,"Date result = DateUtils.setHours(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,507,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,508,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,509,"assertDate(result, 2000, 6, 5, 0, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,511,"result = DateUtils.setHours(base, 23);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,512,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,513,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,514,"assertDate(result, 2000, 6, 5, 23, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,516,try {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,517,"result = DateUtils.setHours(base, 24);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,518,"fail(""DateUtils.setHours did not throw an expected IllegalArguementException."");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,519,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,525,public void testSetMinutes() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,526,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,527,"Date result = DateUtils.setMinutes(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,528,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,529,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,530,"assertDate(result, 2000, 6, 5, 4, 0, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,532,"result = DateUtils.setMinutes(base, 59);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,533,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,534,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,535,"assertDate(result, 2000, 6, 5, 4, 59, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,537,try {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,538,"result = DateUtils.setMinutes(base, 60);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,539,"fail(""DateUtils.setMinutes did not throw an expected IllegalArguementException."");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,540,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,546,public void testSetSeconds() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,547,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,548,"Date result = DateUtils.setSeconds(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,549,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,550,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,551,"assertDate(result, 2000, 6, 5, 4, 3, 0, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,553,"result = DateUtils.setSeconds(base, 59);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,554,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,555,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,556,"assertDate(result, 2000, 6, 5, 4, 3, 59, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,558,try {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,559,"result = DateUtils.setSeconds(base, 60);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,560,"fail(""DateUtils.setSeconds did not throw an expected IllegalArguementException."");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,561,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,567,public void testSetMilliseconds() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,568,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,569,"Date result = DateUtils.setMilliseconds(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,570,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,571,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,572,"assertDate(result, 2000, 6, 5, 4, 3, 2, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,574,"result = DateUtils.setMilliseconds(base, 999);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,575,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,576,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,577,"assertDate(result, 2000, 6, 5, 4, 3, 2, 999);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,579,try {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,580,"result = DateUtils.setMilliseconds(base, 1000);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,581,"fail(""DateUtils.setMilliseconds did not throw an expected IllegalArguementException."");"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,582,} catch (IllegalArgumentException e) {

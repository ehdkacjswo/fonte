is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,1412,/ not allowing L with an exponent
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,1413,eturn foundDigit && !hasExp;
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,1412,// not allowing L with an exponent or decimal point
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,1413,return foundDigit && !hasExp && !hasDecPoint;
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,1143,// LANG-664
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,1144,"val = ""1.1L"";"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,1145,"assertFalse(""isNumber(String) LANG-664 failed"", NumberUtils.isNumber(val));"

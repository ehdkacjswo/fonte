is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/lang3/ArrayUtils.java,src/main/java/org/apache/commons/lang3/ArrayUtils.java,291," <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(Integer.valueOf(42), new Double(Math.PI))</code>,"
True,src/main/java/org/apache/commons/lang3/ArrayUtils.java,src/main/java/org/apache/commons/lang3/ArrayUtils.java,291,"* <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(Integer.valueOf(42), Double.valueOf(Math.PI))</code>,"
False,src/main/java/org/apache/commons/lang3/ArrayUtils.java,src/main/java/org/apache/commons/lang3/ArrayUtils.java,293," <code>new Number[] {Integer.valueOf(42), new Double(Math.PI)}</code>.</p>"
True,src/main/java/org/apache/commons/lang3/ArrayUtils.java,src/main/java/org/apache/commons/lang3/ArrayUtils.java,293,"* <code>new Number[] {Integer.valueOf(42), Double.valueOf(Math.PI)}</code>.</p>"
False,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,132,"hrow new IllegalArgumentException(String.format(message, new Double(value)));"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,132,"throw new IllegalArgumentException(String.format(message, Double.valueOf(value)));"
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,57,ublic static final Double DOUBLE_ZERO = new Double(0.0d);
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,57,public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,59,ublic static final Double DOUBLE_ONE = new Double(1.0d);
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,59,public static final Double DOUBLE_ONE = Double.valueOf(1.0d);
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,61,ublic static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,61,public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,63,ublic static final Float FLOAT_ZERO = new Float(0.0f);
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,63,public static final Float FLOAT_ZERO = Float.valueOf(0.0f);
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,65,ublic static final Float FLOAT_ONE = new Float(1.0f);
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,65,public static final Float FLOAT_ONE = Float.valueOf(1.0f);
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,67,ublic static final Float FLOAT_MINUS_ONE = new Float(-1.0f);
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,67,public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,391,/ new Float(String)
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,391,// Float.valueOf(String)
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,399,/ new Double(String)
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,399,// Double.valueOf(String)
False,src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java,src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java,85,eturn new Double(this.value);
True,src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java,src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java,85,return Double.valueOf(this.value);
False,src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java,src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java,85,eturn new Float(this.value);
True,src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java,src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java,85,return Float.valueOf(this.value);
False,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,202,"umber[] numberArray1 = new Number[]{Integer.valueOf(1), new Double(2)};"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,203,"ewArray = ArrayUtils.add(numberArray1, new Float(3));"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,204,"ssertTrue(Arrays.equals((new Number[]{Integer.valueOf(1), new Double(2), new Float(3)}), newArray));"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,202,"Number[] numberArray1 = new Number[]{Integer.valueOf(1), Double.valueOf(2)};"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,203,"newArray = ArrayUtils.add(numberArray1, Float.valueOf(3));"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,204,"assertTrue(Arrays.equals((new Number[]{Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3)}), newArray));"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,208,"ewArray = ArrayUtils.add(numberArray1, new Float(3));"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,209,"ssertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,208,"newArray = ArrayUtils.add(numberArray1, Float.valueOf(3));"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,209,"assertTrue(Arrays.equals((new Float[]{Float.valueOf(3)}), newArray));"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2612,"rrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE),"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2613,"ew Float(Float.MAX_VALUE), new Float(9999999)}))"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2612,"ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2613,"Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)}))"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2617,"rrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2617,"ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null});"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2631,"rrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE),"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2632,"ew Float(Float.MAX_VALUE), new Float(9999999)},1)));"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2631,"ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2632,"Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1)));"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2636,"rrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE),"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2637,"ull, new Float(9999999)}, Float.MAX_VALUE))"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2636,"ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2637,"null, Float.valueOf(9999999)}, Float.MAX_VALUE))"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2652,"ew Float(Float.MIN_VALUE),"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2653,"ew Float(Float.MAX_VALUE),"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2654,"ew Float(9999999)},"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2652,"Float.valueOf(Float.MIN_VALUE),"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2653,"Float.valueOf(Float.MAX_VALUE),"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2654,"Float.valueOf(9999999)},"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2670,"rrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE),"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2671,"ew Double(Double.MAX_VALUE), new Double(9999999)}))"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2670,"ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE),"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2671,"Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)}))"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2675,"rrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2675,"ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null});"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2689,"rrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE),"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2690,"ew Double(Double.MAX_VALUE), new Double(9999999)},1)));"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2689,"ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE),"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2690,"Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)},1)));"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2694,"rrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE),"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2695,"ull, new Double(9999999)}, Double.MAX_VALUE))"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2694,"ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE),"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2695,"null, Double.valueOf(9999999)}, Double.MAX_VALUE))"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2710,"ew Double(Double.MIN_VALUE),"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2711,"ew Double(Double.MAX_VALUE),"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2712,"ew Double(9999999)},"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2710,"Double.valueOf(Double.MIN_VALUE),"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2711,"Double.valueOf(Double.MAX_VALUE),"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,2712,"Double.valueOf(9999999)},"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,184,"ssertEquals(""createNumber(String) 1 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,184,"assertEquals(""createNumber(String) 1 failed"", Float.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,186,"ssertEquals(""createNumber(String) 3 failed"", new Double(""1234.5""), NumberUtils.createNumber(""1234.5D""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,187,"ssertEquals(""createNumber(String) 3 failed"", new Double(""1234.5""), NumberUtils.createNumber(""1234.5d""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,188,"ssertEquals(""createNumber(String) 4 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5F""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,189,"ssertEquals(""createNumber(String) 4 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5f""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,186,"assertEquals(""createNumber(String) 3 failed"", Double.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5D""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,187,"assertEquals(""createNumber(String) 3 failed"", Double.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5d""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,188,"assertEquals(""createNumber(String) 4 failed"", Float.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5F""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,189,"assertEquals(""createNumber(String) 4 failed"", Float.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5f""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,194,"ssertEquals(""createNumber(String) 7 failed"", new Float(""-1234.5""), NumberUtils.createNumber(""-1234.5""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,194,"assertEquals(""createNumber(String) 7 failed"", Float.valueOf(""-1234.5""), NumberUtils.createNumber(""-1234.5""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,198,"ssertEquals(""createNumber(String) 11 failed"", new Double(""1.1E200""), NumberUtils.createNumber(""1.1E200""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,199,"ssertEquals(""createNumber(String) 12 failed"", new Float(""1.1E20""), NumberUtils.createNumber(""1.1E20""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,200,"ssertEquals(""createNumber(String) 13 failed"", new Double(""-1.1E200""), NumberUtils.createNumber(""-1.1E200""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,201,"ssertEquals(""createNumber(String) 14 failed"", new Double(""1.1E-200""), NumberUtils.createNumber(""1.1E-200""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,198,"assertEquals(""createNumber(String) 11 failed"", Double.valueOf(""1.1E200""), NumberUtils.createNumber(""1.1E200""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,199,"assertEquals(""createNumber(String) 12 failed"", Float.valueOf(""1.1E20""), NumberUtils.createNumber(""1.1E20""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,200,"assertEquals(""createNumber(String) 13 failed"", Double.valueOf(""-1.1E200""), NumberUtils.createNumber(""-1.1E200""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,201,"assertEquals(""createNumber(String) 14 failed"", Double.valueOf(""1.1E-200""), NumberUtils.createNumber(""1.1E-200""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,219,"ssertEquals(""createNumber(String) LANG-521 failed"", new Float(""2.""), NumberUtils.createNumber(""2.""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,219,"assertEquals(""createNumber(String) LANG-521 failed"", Float.valueOf(""2.""), NumberUtils.createNumber(""2.""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,231,"ssertEquals(""createFloat(String) failed"", new Float(""1234.5""), NumberUtils.createFloat(""1234.5""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,231,"assertEquals(""createFloat(String) failed"", Float.valueOf(""1234.5""), NumberUtils.createFloat(""1234.5""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,251,"ssertEquals(""createDouble(String) failed"", new Double(""1234.5""), NumberUtils.createDouble(""1234.5""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,251,"assertEquals(""createDouble(String) failed"", Double.valueOf(""1234.5""), NumberUtils.createDouble(""1234.5""));"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,39,"ssertEquals(2d, new MutableDouble(new Double(2d)).doubleValue(), 0.0001d);"
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,39,"assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d);"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,53,"ssertEquals(new Double(0), new MutableDouble().getValue());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,53,"assertEquals(Double.valueOf(0), new MutableDouble().getValue());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,57,"ssertEquals(new Double(1d), mutNum.getValue());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,57,"assertEquals(Double.valueOf(1d), mutNum.getValue());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,59,utNum.setValue(new Double(2d));
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,59,mutNum.setValue(Double.valueOf(2d));
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,61,"ssertEquals(new Double(2d), mutNum.getValue());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,61,"assertEquals(Double.valueOf(2d), mutNum.getValue());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,65,"ssertEquals(new Double(3d), mutNum.getValue());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,65,"assertEquals(Double.valueOf(3d), mutNum.getValue());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,96,"ssertEquals(false, mutNumA.equals(new Double(0d)));"
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,96,"assertEquals(false, mutNumA.equals(Double.valueOf(0d)));"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,108,"ssertEquals(true, mutNumA.hashCode() == new Double(0d).hashCode());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,108,"assertEquals(true, mutNumA.hashCode() == Double.valueOf(0d).hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,135,"ssertEquals(new Double(0d), new MutableDouble(0d).toDouble());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,136,"ssertEquals(new Double(12.3d), new MutableDouble(12.3d).toDouble());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,135,"assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,136,"assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,164,utNum.add(new Double(1.1d));
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,164,mutNum.add(Double.valueOf(1.1d));
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,178,utNum.subtract(new Double(0.9d));
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,178,mutNum.subtract(Double.valueOf(0.9d));
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,39,"ssertEquals(2f, new MutableFloat(new Float(2f)).floatValue(), 0.0001f);"
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,39,"assertEquals(2f, new MutableFloat(Float.valueOf(2f)).floatValue(), 0.0001f);"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,53,"ssertEquals(new Float(0), new MutableFloat().getValue());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,53,"assertEquals(Float.valueOf(0), new MutableFloat().getValue());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,57,"ssertEquals(new Float(1f), mutNum.getValue());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,57,"assertEquals(Float.valueOf(1f), mutNum.getValue());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,59,utNum.setValue(new Float(2f));
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,59,mutNum.setValue(Float.valueOf(2f));
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,61,"ssertEquals(new Float(2f), mutNum.getValue());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,61,"assertEquals(Float.valueOf(2f), mutNum.getValue());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,65,"ssertEquals(new Float(3f), mutNum.getValue());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,65,"assertEquals(Float.valueOf(3f), mutNum.getValue());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,96,"ssertEquals(false, mutNumA.equals(new Float(0f)));"
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,96,"assertEquals(false, mutNumA.equals(Float.valueOf(0f)));"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,108,"ssertEquals(true, mutNumA.hashCode() == new Float(0f).hashCode());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,108,"assertEquals(true, mutNumA.hashCode() == Float.valueOf(0f).hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,135,"ssertEquals(new Float(0f), new MutableFloat(0f).toFloat());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,136,"ssertEquals(new Float(12.3f), new MutableFloat(12.3f).toFloat());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,135,"assertEquals(Float.valueOf(0f), new MutableFloat(0f).toFloat());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,136,"assertEquals(Float.valueOf(12.3f), new MutableFloat(12.3f).toFloat());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,164,utNum.add(new Float(1.1f));
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,164,mutNum.add(Float.valueOf(1.1f));
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,178,utNum.subtract(new Float(0.9f));
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,178,mutNum.subtract(Float.valueOf(0.9f));
False,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,91,"ssertEquals(""10.0"", new MutableObject<Double>(new Double(10)).toString());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,91,"assertEquals(""10.0"", new MutableObject<Double>(Double.valueOf(10)).toString());"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,49,tatic final Double D0 = new Double(0.0);
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,50,tatic final Double D1 = new Double(1.0);
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,49,static final Double D0 = Double.valueOf(0.0);
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,50,static final Double D1 = Double.valueOf(1.0);
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,922,"ieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,922,"FieldUtils.writeField(field, publicChild, Double.valueOf(Double.MAX_VALUE));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,940,"ieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE), true);"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,941,"ssertEquals(new Double(Double.MAX_VALUE), field.get(publicChild));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,940,"FieldUtils.writeField(field, publicChild, Double.valueOf(Double.MAX_VALUE), true);"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,941,"assertEquals(Double.valueOf(Double.MAX_VALUE), field.get(publicChild));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,961,"ieldUtils.writeField(publicChild, ""d"", new Double(1.0));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,961,"FieldUtils.writeField(publicChild, ""d"", Double.valueOf(1.0));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,973,"ieldUtils.writeField(publiclyShadowedChild, ""d"", new Double(0.0));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,974,"ssertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, ""d""));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,973,"FieldUtils.writeField(publiclyShadowedChild, ""d"", Double.valueOf(0.0));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,974,"assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, ""d""));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,991,"ieldUtils.writeField(privatelyShadowedChild, ""d"", new Double(1.0));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,991,"FieldUtils.writeField(privatelyShadowedChild, ""d"", Double.valueOf(1.0));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1006,"ieldUtils.writeField(publicChild, ""d"", new Double(1.0), true);"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1007,"ssertEquals(new Double(1.0), FieldUtils.readField(publicChild, ""d"", true));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1006,"FieldUtils.writeField(publicChild, ""d"", Double.valueOf(1.0), true);"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1007,"assertEquals(Double.valueOf(1.0), FieldUtils.readField(publicChild, ""d"", true));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1015,"ieldUtils.writeField(publiclyShadowedChild, ""d"", new Double(0.0), true);"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1016,"ssertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, ""d"", true));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1015,"FieldUtils.writeField(publiclyShadowedChild, ""d"", Double.valueOf(0.0), true);"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1016,"assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, ""d"", true));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1024,"ieldUtils.writeField(privatelyShadowedChild, ""d"", new Double(0.0), true);"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1025,"ssertEquals(new Double(0.0), FieldUtils.readField(privatelyShadowedChild, ""d"", true));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1024,"FieldUtils.writeField(privatelyShadowedChild, ""d"", Double.valueOf(0.0), true);"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1025,"assertEquals(Double.valueOf(0.0), FieldUtils.readField(privatelyShadowedChild, ""d"", true));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1049,"ieldUtils.writeDeclaredField(publicChild, ""d"", new Double(1.0));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1049,"FieldUtils.writeDeclaredField(publicChild, ""d"", Double.valueOf(1.0));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1061,"ieldUtils.writeDeclaredField(publiclyShadowedChild, ""d"", new Double(0.0));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1062,"ssertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, ""d""));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1061,"FieldUtils.writeDeclaredField(publiclyShadowedChild, ""d"", Double.valueOf(0.0));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1062,"assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, ""d""));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1083,"ieldUtils.writeDeclaredField(privatelyShadowedChild, ""d"", new Double(1.0));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1083,"FieldUtils.writeDeclaredField(privatelyShadowedChild, ""d"", Double.valueOf(1.0));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1111,"ieldUtils.writeDeclaredField(publicChild, ""d"", new Double(1.0), true);"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1111,"FieldUtils.writeDeclaredField(publicChild, ""d"", Double.valueOf(1.0), true);"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1123,"ieldUtils.writeDeclaredField(publiclyShadowedChild, ""d"", new Double(0.0), true);"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1124,"ssertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, ""d"", true));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1123,"FieldUtils.writeDeclaredField(publiclyShadowedChild, ""d"", Double.valueOf(0.0), true);"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1124,"assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, ""d"", true));"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1132,"ieldUtils.writeDeclaredField(privatelyShadowedChild, ""d"", new Double(0.0), true);"
False,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1133,"ssertEquals(new Double(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, ""d"", true));"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1132,"FieldUtils.writeDeclaredField(privatelyShadowedChild, ""d"", Double.valueOf(0.0), true);"
True,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java,1133,"assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, ""d"", true));"
False,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,95,"bject[] args = new Object[] {""John Doe"", cal.getTime(), new Double(""12345.67"")};"
True,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,95,"Object[] args = new Object[] {""John Doe"", cal.getTime(), Double.valueOf(""12345.67"")};"
False,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,156,"/        Object[] lowArgs  = new Object[] {Integer.valueOf(1), ""Low"",  new Double(""1234.56"")};"
False,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,157,"/        Object[] highArgs = new Object[] {Integer.valueOf(2), ""High"", new Double(""9876.54"")};"
True,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,156,"//        Object[] lowArgs  = new Object[] {Integer.valueOf(1), ""Low"",  Double.valueOf(""1234.56"")};"
True,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,157,"//        Object[] highArgs = new Object[] {Integer.valueOf(2), ""High"", Double.valueOf(""9876.54"")};"
False,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,191,"bject[] values = new Number[] {Integer.valueOf(1), new Double(""2.2""), new Double(""1234.5"")};"
True,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,191,"Object[] values = new Number[] {Integer.valueOf(1), Double.valueOf(""2.2""), Double.valueOf(""1234.5"")};"
False,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,258,"bject[] args = new Object[] {new Double(""6543.21"")};"
True,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,258,"Object[] args = new Object[] {Double.valueOf(""6543.21"")};"

is_addition,old_file_path,new_file_path,line_num,content
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,3, or more contributor license agreements.  See the NOTICE file
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,4, distributed with this work for additional information
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,6," to you under the Apache License, Version 2.0 (the"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,7," ""License""); you may not use this file except in compliance"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,8, with the License.  You may obtain a copy of the License at
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,12," Unless required by applicable law or agreed to in writing,"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,13, software distributed under the License is distributed on an
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,15," KIND, either express or implied.  See the License for the"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,16, specific language governing permissions and limitations
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,17, under the License.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,19,/ package org.apache.commons.lang;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,21,mport java.text.*;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,22,mport java.util.*;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,25, A suite of utilities surrounding the use of the Calendar and Date object.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,27," @author <a href=""mailto:sergek@lokitech.com"">Serge Knystautas</a>"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,29,ublic class CalendarUtils {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,32," This is half a month, so this represents whether a date is in the top"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,33, or bottom half of the month.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,35,ublic final static int SEMI_MONTH = 1001;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,37,rivate static final int[][] fields = {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,38,"Calendar.MILLISECOND},"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,39,"Calendar.SECOND},"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,40,"Calendar.MINUTE},"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,41,"Calendar.HOUR_OF_DAY, Calendar.HOUR},"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,42,"Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */},"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,43,"Calendar.MONTH, CalendarUtils.SEMI_MONTH},"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,44,"Calendar.YEAR},"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,45,Calendar.ERA}};
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,47,rivate static DateFormat[] dateFormats = {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,48,/3/31/92 10:00:07 PST
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,49,"ew SimpleDateFormat(""M/dd/yy h:mm:ss z""),"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,50,"/January 23, 1987 10:05pm"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,51,"ew SimpleDateFormat(""MMM d, yyyy h:mm a""),"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,52,/22:00 GMT
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,53,"ew SimpleDateFormat(""h:mm z"")};"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,56," A week range, starting on Sunday."
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,58,ublic final static int RANGE_WEEK_SUNDAY = 1;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,61," A week range, starting on Monday."
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,63,ublic final static int RANGE_WEEK_MONDAY = 2;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,66," A week range, starting on the day focused."
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,68,ublic final static int RANGE_WEEK_RELATIVE = 3;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,71," A week range, centered around the day focused."
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,73,ublic final static int RANGE_WEEK_CENTER = 4;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,76," A month range, the week starting on Sunday."
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,78,ublic final static int RANGE_MONTH_SUNDAY = 5;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,81," A month range, the week starting on Monday."
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,83,ublic final static int RANGE_MONTH_MONDAY = 6;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,86, See the other round method.  Works with a Date object.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,88,"ublic static Date round(Date val, int field) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,89,regorianCalendar gval = new GregorianCalendar();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,90,val.setTime(val);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,91,"odify(gval, field, true);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,92,eturn gval.getTime();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,96," Round this date, leaving the field specified as the most significant"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,97," field.  For example, if you had the datetime of 28 Mar 2002"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,98," 13:45:01.231, if this was passed with HOUR, it would return 28 Mar"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,99," 2002 14:00:00.000.  If this was passed with MONTH, it would return"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,100, 1 April 2002 0:00:00.000.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,102,"ublic static Calendar round(Calendar val, int field) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,103,alendar rounded = (Calendar) val.clone();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,104,"odify(rounded, field, true);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,105,eturn rounded;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,109," See the other round method.  Works with an Object, trying to"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,110, use it as either a Date or Calendar.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,112,"ublic static Date round(Object val, int field) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,113,f (val instanceof Date) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,114,"eturn round((Date) val, field);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,115, else if (val instanceof Calendar) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,116,"eturn round((Calendar) val, field).getTime();"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,117, else {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,118,"hrow new ClassCastException(""Could not round "" + val);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,123, See the other trunc method.  Works with a Date.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,125,"ublic static Date trunc(Date val, int field) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,126,regorianCalendar gval = new GregorianCalendar();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,127,val.setTime(val);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,128,"odify(gval, field, false);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,129,eturn gval.getTime();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,133," Truncate this date, leaving the field specified as the most significant"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,134," field.  For example, if you had the datetime of 28 Mar 2002"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,135," 13:45:01.231, if you passed with HOUR, it would return 28 Mar"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,136," 2002 13:00:00.000.  If this was passed with MONTH, it would return"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,137, 1 Mar 2002 0:00:00.000.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,139,"ublic static Calendar trunc(Calendar val, int field) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,140,alendar truncated = (Calendar) val.clone();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,141,"odify(truncated, field, false);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,142,eturn truncated;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,146," See the other trunc method.  Works with an Object, trying to"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,147, use it as either a Date or Calendar.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,149,"ublic static Date trunc(Object val, int field) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,150,f (val instanceof Date) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,151,"eturn trunc((Date) val, field);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,152, else if (val instanceof Calendar) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,153,"eturn trunc((Calendar) val, field).getTime();"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,154, else {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,155,"hrow new ClassCastException(""Could not trunc "" + val);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,159,"rivate static void modify(Calendar val, int field, boolean round) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,160,oolean roundUp = false;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,161,or (int i = 0; i < fields.length; i++) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,162,or (int j = 0; j < fields[i].length; j++) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,163,f (fields[i][j] == field) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,164,/This is our field... we stop looping
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,165,f (round && roundUp) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,166,f (field == CalendarUtils.SEMI_MONTH) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,167,/This is a special case that's hard to generalize
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,168,"/If the date is 1, we round up to 16, otherwise"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,169,/  we subtract 15 days and add 1 month
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,170,f (val.get(Calendar.DATE) == 1) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,171,"al.add(Calendar.DATE, 15);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,172, else {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,173,"al.add(Calendar.DATE, -15);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,174,"al.add(Calendar.MONTH, 1);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,176, else {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,177,/We need at add one to this field since the
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,178,/  last number causes us to round up
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,179,"al.add(fields[i][0], 1);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,182,eturn;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,185,/We have various fields that are not easy roundings
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,186,nt offset = 0;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,187,oolean offsetSet = false;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,188,/These are special types of fields that require different rounding rules
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,189,witch (field) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,190,ase CalendarUtils.SEMI_MONTH:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,191,f (fields[i][0] == Calendar.DATE) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,192,"/If we're going to drop the DATE field's value,"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,193,/  we want to do this our own way.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,194,/We need to subtrace 1 since the date has a minimum of 1
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,195,ffset = val.get(Calendar.DATE) - 1;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,196,"/If we're above 15 days adjustment, that means we're in the"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,197,/  bottom half of the month and should stay accordingly.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,198,f (offset >= 15) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,199,ffset -= 15;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,201,/Record whether we're in the top or bottom half of that range
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,202,oundUp = offset > 7;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,203,ffsetSet = true;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,205,reak;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,206,ase Calendar.AM_PM:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,207,f (fields[i][0] == Calendar.HOUR) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,208,"/If we're going to drop the HOUR field's value,"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,209,/  we want to do this our own way.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,210,ffset = val.get(Calendar.HOUR);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,211,f (offset >= 12) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,212,ffset -= 12;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,214,oundUp = offset > 6;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,215,ffsetSet = true;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,217,reak;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,219,f (!offsetSet) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,220,nt min = val.getActualMinimum(fields[i][0]);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,221,nt max = val.getActualMaximum(fields[i][0]);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,222,/Calculate the offset from the minimum allowed value
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,223,ffset = val.get(fields[i][0]) - min;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,224,/Set roundUp if this is more than half way between the minimum and maximum
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,225,oundUp = offset > ((max - min) / 2);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,227,/We need to remove this field
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,228,"al.add(fields[i][0], -offset);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,230,"hrow new RuntimeException(""We do not support that field."");"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,235, Parses strings the way that CVS supports it... very human readable
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,237,ublic static Calendar parse(String original) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,238,"eturn parse(original, Locale.getDefault());"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,242, Parses strings the way that CVS supports it... very human readable
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,244,"ublic static Calendar parse(String original, Locale locale) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,245,/Get the symbol names
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,246,ateFormatSymbols symbols = new DateFormatSymbols(locale);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,248,/Prep the string to parse
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,249,tring value = original.toLowerCase().trim();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,251,/Get the current date/time
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,252,alendar now = Calendar.getInstance();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,253,"f (value.endsWith("" ago"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,254,"/If this was a date that was ""ago"" the current time..."
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,255,/Strip out the ' ago' part
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,256,"alue = value.substring(0, value.length() - 4);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,258,/Split the value and unit
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,259,"nt start = value.indexOf("" "");"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,260,f (start < 0) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,261,"hrow new RuntimeException(""Could not find space in between value and unit"");"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,263,tring unit = value.substring(start + 1);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,264,"alue = value.substring(0, start);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,265,"/We support ""a week"", so we need to parse the value as ""a"""
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,266,nt val = 0;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,267,"f (value.equals(""a"") || value.equals(""an"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,268,al = 1;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,269, else {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,270,al = Integer.parseInt(value);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,273,/Determine the unit
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,274,"f (unit.equals(""milliseconds"") || unit.equals(""millisecond"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,275,"ow.add(Calendar.MILLISECOND, -val);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,276," else if (unit.equals(""seconds"") || unit.equals(""second"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,277,"ow.add(Calendar.SECOND, -val);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,278," else if (unit.equals(""minutes"") || unit.equals(""minute"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,279,"ow.add(Calendar.MINUTE, -val);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,280," else if (unit.equals(""hours"") || unit.equals(""hour"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,281,"ow.add(Calendar.HOUR, -val);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,282," else if (unit.equals(""days"") || unit.equals(""day"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,283,"ow.add(Calendar.DATE, -val);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,284," else if (unit.equals(""weeks"") || unit.equals(""week"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,285,"ow.add(Calendar.DATE, -val * 7);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,286," else if (unit.equals(""fortnights"") || unit.equals(""fortnight"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,287,"ow.add(Calendar.DATE, -val * 14);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,288," else if (unit.equals(""months"") || unit.equals(""month"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,289,"ow.add(Calendar.MONTH, -val);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,290," else if (unit.equals(""years"") || unit.equals(""year"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,291,"ow.add(Calendar.YEAR, -val);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,292, else {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,293,"hrow new RuntimeException(""We do not understand that many units ago"");"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,295,eturn now;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,296," else if (value.startsWith(""last "")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,297,/If this was the last time a certain field was met
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,298,/Strip out the 'last ' part
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,299,alue = value.substring(5);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,300,/Get the current date/time
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,301,tring[] strings = symbols.getWeekdays();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,302,or (int i = 0; i < strings.length; i++) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,303,f (value.equalsIgnoreCase(strings[i])) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,304,/How many days after Sunday
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,305,nt daysAgo = now.get(Calendar.DAY_OF_WEEK) - i;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,306,f (daysAgo <= 0) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,307,aysAgo += 7;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,309,"ow.add(Calendar.DATE, -daysAgo);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,310,eturn now;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,313,trings = symbols.getMonths();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,314,or (int i = 0; i < strings.length; i++) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,315,f (value.equalsIgnoreCase(strings[i])) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,316,/How many days after January
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,317,nt monthsAgo = now.get(Calendar.MONTH) - i;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,318,f (monthsAgo <= 0) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,319,onthsAgo += 12;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,321,"ow.add(Calendar.MONTH, -monthsAgo);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,322,eturn now;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,325,"f (value.equals(""week"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,326,"ow.add(Calendar.DATE, -7);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,327,eturn now;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,329," else if (value.equals(""yesterday"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,330,"ow.add(Calendar.DATE, -1);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,331,eturn now;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,332," else if (value.equals(""tomorrow"")) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,333,"ow.add(Calendar.DATE, 1);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,334,eturn now;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,336,/Try to parse the date a number of different ways
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,337,or (int i = 0; i < dateFormats.length; i++) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,338,ry {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,339,ate datetime = dateFormats[i].parse(original);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,340,alendar cal = Calendar.getInstance();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,341,al.setTime(datetime);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,342,eturn cal;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,343, catch (ParseException pe) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,344,/we ignore this and just keep trying
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,348,"hrow new RuntimeException(""Unable to parse '"" + original + ""'."");"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,352, This constructs an Iterator that will start and stop over a date
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,353," range based on the focused date and the range style.  For instance,"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,354," passing Thursday, July 4, 2002 and a RANGE_MONTH_SUNDAY will return"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,355," an Iterator that starts with Sunday, June 30, 2002 and ends with"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,356," Saturday, August 3, 2002."
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,358,"ublic static Iterator getCalendarIterator(Calendar focus, int rangeStyle) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,359,alendar start = null;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,360,alendar end = null;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,361,nt startCutoff = Calendar.SUNDAY;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,362,nt endCutoff = Calendar.SATURDAY;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,363,witch (rangeStyle) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,364,ase RANGE_MONTH_SUNDAY:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,365,ase RANGE_MONTH_MONDAY:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,366,/Set start to the first of the month
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,367,"tart = trunc(focus, Calendar.MONTH);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,368,/Set end to the last of the month
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,369,nd = (Calendar) start.clone();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,370,"nd.add(Calendar.MONTH, 1);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,371,"nd.add(Calendar.DATE, -1);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,372,/Loop start back to the previous sunday or monday
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,373,f (rangeStyle == RANGE_MONTH_MONDAY) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,374,tartCutoff = Calendar.MONDAY;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,375,ndCutoff = Calendar.SUNDAY;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,377,reak;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,378,ase RANGE_WEEK_SUNDAY:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,379,ase RANGE_WEEK_MONDAY:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,380,ase RANGE_WEEK_RELATIVE:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,381,ase RANGE_WEEK_CENTER:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,382,/Set start and end to the current date
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,383,"tart = trunc(focus, Calendar.DATE);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,384,"nd = trunc(focus, Calendar.DATE);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,385,witch (rangeStyle) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,386,ase RANGE_WEEK_SUNDAY:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,387,/already set by default
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,388,reak;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,389,ase RANGE_WEEK_MONDAY:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,390,tartCutoff = Calendar.MONDAY;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,391,ndCutoff = Calendar.SUNDAY;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,392,reak;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,393,ase RANGE_WEEK_RELATIVE:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,394,tartCutoff = focus.get(Calendar.DAY_OF_WEEK);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,395,ndCutoff = startCutoff - 1;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,396,reak;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,397,ase RANGE_WEEK_CENTER:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,398,tartCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,399,ndCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,400,reak;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,402,reak;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,403,efault:
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,404,"hrow new RuntimeException(""The range style "" + rangeStyle + "" is not valid."");"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,406,f (startCutoff < Calendar.SUNDAY) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,407,tartCutoff += 7;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,409,f (endCutoff > Calendar.SATURDAY) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,410,ndCutoff -= 7;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,412,hile (start.get(Calendar.DAY_OF_WEEK) != startCutoff) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,413,"tart.add(Calendar.DATE, -1);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,415,hile (end.get(Calendar.DAY_OF_WEEK) != endCutoff) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,416,"nd.add(Calendar.DATE, 1);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,418,inal Calendar startFinal = start;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,419,inal Calendar endFinal = end;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,420,terator it = new Iterator() {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,421,alendar spot = null;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,423,pot = startFinal;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,424,"pot.add(Calendar.DATE, -1);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,427,ublic boolean hasNext() {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,428,eturn spot.before(endFinal);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,431,ublic Object next() {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,432,f (spot.equals(endFinal)) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,433,hrow new NoSuchElementException();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,435,"pot.add(Calendar.DATE, 1);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,436,eturn spot.clone();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,439,ublic void remove() {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,440,hrow new UnsupportedOperationException();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,443,eturn it;
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,447, See the other getCalendarIterator.  Works with a Date.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,449,"ublic static Iterator getCalendarIterator(Date focus, int rangeStyle) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,450,regorianCalendar gval = new GregorianCalendar();
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,451,val.setTime(focus);
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,452,"eturn getCalendarIterator(gval, rangeStyle);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,456," See the other getCalendarIterator.  Works with an Object, trying"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,457, to use it as a Date or Calendar.
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,459,"ublic static Iterator getCalendarIterator(Object focus, int rangeStyle) {"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,460,f (focus instanceof Date) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,461,"eturn getCalendarIterator((Date) focus, rangeStyle);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,462, else if (focus instanceof Calendar) {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,463,"eturn getCalendarIterator((Calendar) focus, rangeStyle);"
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,464, else {
False,src/pending/CalendarUtils.java,src/pending/CalendarUtils.java,465,"hrow new ClassCastException(""Could not iterate based on "" + focus);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,4, distributed with this work for additional information
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,7," ""License""); you may not use this file except in compliance"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,8, with the License.  You may obtain a copy of the License at
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,13, software distributed under the License is distributed on an
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,15," KIND, either express or implied.  See the License for the"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,16, specific language governing permissions and limitations
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,17, under the License.
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,19,/ package org.apache.commons.lang;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,21,mport java.text.DateFormat;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,22,mport java.util.*;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,24,mport junit.framework.AssertionFailedError;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,25,mport junit.framework.Test;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,26,mport junit.framework.TestCase;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,27,mport junit.framework.TestSuite;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,28,mport junit.textui.TestRunner;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,31, Unit tests {@link org.apache.commons.lang3.CalendarUtils}.
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,33," @author <a href=""mailto:sergek@lokitech.com"">Serge Knystautas</a>"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,35,ublic class CalendarUtilsTest extends TestCase {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,36,ateFormat parser = null;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,37,ate date1 = null;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,38,ate date2 = null;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,40,ublic CalendarUtilsTest(String name) {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,41,uper(name);
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,44,ublic static void main(String[] args) {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,45,estRunner.run(suite());
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,48,ublic static Test suite() {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,49,estSuite suite = new TestSuite(CalendarUtilsTest.class);
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,50,"uite.setName(""CalendarUtilsTest Tests"");"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,51,eturn suite;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,54,rotected void setUp() throws Exception {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,55,uper.setUp();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,57,"arser = new java.text.SimpleDateFormat(""MMM dd, yyyy H:mm:ss.SSS"");"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,59,"ate1 = parser.parse(""February 12, 2002 12:34:56.789"");"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,60,"ate2 = parser.parse(""November 18, 2001 1:23:11.321"");"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,63,rotected void tearDown() throws Exception {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,64,uper.tearDown();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,71, Tests various values with the round method
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,73,ublic void testRound() throws Exception {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,74,"ssertEquals(""round year-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,75,"ew Date(""2002 January 1""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,76,"alendarUtils.round(date1, Calendar.YEAR));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,77,"ssertEquals(""round year-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,78,"ew Date(""2002 January 1""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,79,"alendarUtils.round(date2, Calendar.YEAR));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,80,"ssertEquals(""round month-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,81,"ew Date(""2002 February 1""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,82,"alendarUtils.round(date1, Calendar.MONTH));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,83,"ssertEquals(""round month-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,84,"ew Date(""2001 December 1""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,85,"alendarUtils.round(date2, Calendar.MONTH));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,86,"ssertEquals(""round semimonth-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,87,"ew Date(""2002 February 16""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,88,"alendarUtils.round(date1, CalendarUtils.SEMI_MONTH));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,89,"ssertEquals(""round semimonth-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,90,"ew Date(""2001 November 16""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,91,"alendarUtils.round(date2, CalendarUtils.SEMI_MONTH));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,92,"ssertEquals(""round date-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,93,"ew Date(""2002 February 13""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,94,"alendarUtils.round(date1, Calendar.DATE));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,95,"ssertEquals(""round date-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,96,"ew Date(""2001 November 18""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,97,"alendarUtils.round(date2, Calendar.DATE));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,98,"ssertEquals(""round hour-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,99,"arser.parse(""February 12, 2002 13:00:00.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,100,"alendarUtils.round(date1, Calendar.HOUR));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,101,"ssertEquals(""round hour-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,102,"arser.parse(""November 18, 2001 1:00:00.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,103,"alendarUtils.round(date2, Calendar.HOUR));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,104,"ssertEquals(""round minute-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,105,"arser.parse(""February 12, 2002 12:35:00.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,106,"alendarUtils.round(date1, Calendar.MINUTE));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,107,"ssertEquals(""round minute-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,108,"arser.parse(""November 18, 2001 1:23:00.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,109,"alendarUtils.round(date2, Calendar.MINUTE));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,110,"ssertEquals(""round second-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,111,"arser.parse(""February 12, 2002 12:34:57.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,112,"alendarUtils.round(date1, Calendar.SECOND));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,113,"ssertEquals(""round second-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,114,"arser.parse(""November 18, 2001 1:23:11.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,115,"alendarUtils.round(date2, Calendar.SECOND));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,119, Tests various values with the trunc method
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,121,ublic void testTrunc() throws Exception {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,122,"ssertEquals(""trunc year-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,123,"ew Date(""2002 January 1""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,124,"alendarUtils.trunc(date1, Calendar.YEAR));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,125,"ssertEquals(""trunc year-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,126,"ew Date(""2001 January 1""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,127,"alendarUtils.trunc(date2, Calendar.YEAR));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,128,"ssertEquals(""trunc month-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,129,"ew Date(""2002 February 1""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,130,"alendarUtils.trunc(date1, Calendar.MONTH));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,131,"ssertEquals(""trunc month-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,132,"ew Date(""2001 November 1""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,133,"alendarUtils.trunc(date2, Calendar.MONTH));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,134,"ssertEquals(""trunc semimonth-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,135,"ew Date(""2002 February 1""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,136,"alendarUtils.trunc(date1, CalendarUtils.SEMI_MONTH));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,137,"ssertEquals(""trunc semimonth-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,138,"ew Date(""2001 November 16""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,139,"alendarUtils.trunc(date2, CalendarUtils.SEMI_MONTH));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,140,"ssertEquals(""trunc date-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,141,"ew Date(""2002 February 12""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,142,"alendarUtils.trunc(date1, Calendar.DATE));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,143,"ssertEquals(""trunc date-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,144,"ew Date(""2001 November 18""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,145,"alendarUtils.trunc(date2, Calendar.DATE));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,146,"ssertEquals(""trunc hour-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,147,"arser.parse(""February 12, 2002 12:00:00.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,148,"alendarUtils.trunc(date1, Calendar.HOUR));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,149,"ssertEquals(""trunc hour-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,150,"arser.parse(""November 18, 2001 1:00:00.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,151,"alendarUtils.trunc(date2, Calendar.HOUR));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,152,"ssertEquals(""trunc minute-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,153,"arser.parse(""February 12, 2002 12:34:00.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,154,"alendarUtils.trunc(date1, Calendar.MINUTE));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,155,"ssertEquals(""trunc minute-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,156,"arser.parse(""November 18, 2001 1:23:00.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,157,"alendarUtils.trunc(date2, Calendar.MINUTE));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,158,"ssertEquals(""trunc second-1 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,159,"arser.parse(""February 12, 2002 12:34:56.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,160,"alendarUtils.trunc(date1, Calendar.SECOND));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,161,"ssertEquals(""trunc second-2 failed"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,162,"arser.parse(""November 18, 2001 1:23:11.000""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,163,"alendarUtils.trunc(date2, Calendar.SECOND));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,168," Tests the parse method, which is supposed to handle various strings"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,169, as flexibly as CVS supports.
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,171,ublic void testParse() throws Exception {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,172,"/This is difficult to test since the ""now"" used in the"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,173,/  parse function cannot be controlled.  We could possibly control
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,174,/  it by trying before and after and making sure the value we expect
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,175,/  is between the two values calculated.
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,176,/For now we're just using the custom assertEquals that takes a delta
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,178,alendar now = null;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,180,ow = Calendar.getInstance();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,181,"ow.add(Calendar.MINUTE, -1);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,182,"ssertEquals(""parse 1 minute ago"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,183,"ow, CalendarUtils.parse(""1 minute ago""), 50);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,184,ow = Calendar.getInstance();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,185,"ow.add(Calendar.MINUTE, -8);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,186,"ssertEquals(""parse 8 minutes ago"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,187,"ow, CalendarUtils.parse(""8 minutes ago""), 50);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,189,ow = Calendar.getInstance();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,190,"ow.add(Calendar.DATE, -1);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,191,"ssertEquals(""parse yesterday"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,192,"ow, CalendarUtils.parse(""yesterday""), 50);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,194,ow = Calendar.getInstance();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,195,"ow.add(Calendar.DATE, 1);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,196,"ssertEquals(""parse tomorrow"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,197,"ow, CalendarUtils.parse(""tomorrow""), 50);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,199,ow = Calendar.getInstance();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,200,"/Sunday would be 1, Saturday would be 7, so we walk back up to 6 days."
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,201,f (now.get(Calendar.DATE) == 1) {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,202,"/If Sunday already, we go back a full week"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,203,"ow.add(Calendar.DATE, -7);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,204, else {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,205,"ow.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,207,"ssertEquals(""parse last Sunday"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,208,"ow, CalendarUtils.parse(""last Sunday""), 50);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,210,ow = Calendar.getInstance();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,211,"ow.add(Calendar.DATE, -7);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,212,"ssertEquals(""parse last week"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,213,"ow, CalendarUtils.parse(""last week""), 50);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,215,ow = Calendar.getInstance();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,216,"/January would be 0, December would be 11, so we walk back up to 11 months"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,217,f (now.get(Calendar.MONTH) == 0) {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,218,"/If January already, we go back a full year"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,219,"ow.add(Calendar.MONTH, -12);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,220, else {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,221,"ow.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,223,"ssertEquals(""parse last January"","
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,224,"ow, CalendarUtils.parse(""last January""), 50);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,228, Tests the calendar iterator for week ranges
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,230,ublic void testWeekIterator() throws Exception {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,231,alendar now = Calendar.getInstance();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,232,"alendar today = CalendarUtils.trunc(now, Calendar.DATE);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,233,"alendar sunday = CalendarUtils.trunc(now, Calendar.DATE);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,234,"unday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,235,"alendar monday = CalendarUtils.trunc(now, Calendar.DATE);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,236,f (monday.get(Calendar.DATE) == 1) {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,237,/This is sunday... roll back 6 days
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,238,"onday.add(Calendar.DATE, -6);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,239, else {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,240,"onday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,242,"alendar centered = CalendarUtils.trunc(now, Calendar.DATE);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,243,"entered.add(Calendar.DATE, -3);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,245,"terator it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_SUNDAY);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,246,"ssertWeekIterator(it, sunday);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,247,"t = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_MONDAY);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,248,"ssertWeekIterator(it, monday);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,249,"t = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_RELATIVE);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,250,"ssertWeekIterator(it, today);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,251,"t = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_CENTER);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,252,"ssertWeekIterator(it, centered);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,256, Tests the calendar iterator for month-based ranges
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,258,ublic void testMonthIterator() throws Exception {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,259,"terator it = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_SUNDAY);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,260,"ssertWeekIterator(it,"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,261,"ew Date(""January 27, 2002""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,262,"ew Date(""March 2, 2002""));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,264,"t = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_MONDAY);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,265,"ssertWeekIterator(it,"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,266,"ew Date(""January 28, 2002""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,267,"ew Date(""March 3, 2002""));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,269,"t = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_SUNDAY);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,270,"ssertWeekIterator(it,"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,271,"ew Date(""October 28, 2001""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,272,"ew Date(""December 1, 2001""));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,274,"t = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_MONDAY);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,275,"ssertWeekIterator(it,"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,276,"ew Date(""October 29, 2001""),"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,277,"ew Date(""December 2, 2001""));"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,281, This checks that this is a 7 element iterator of Calendar objects
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,282," that are dates (no time), and exactly 1 day spaced after each other."
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,284,"rivate static void assertWeekIterator(Iterator it, Calendar start) {"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,285,alendar end = (Calendar) start.clone();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,286,"nd.add(Calendar.DATE, 6);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,288,"ssertWeekIterator(it, start, end);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,292, Convenience method for when working with Date objects
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,294,"rivate static void assertWeekIterator(Iterator it, Date start, Date end) {"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,295,alendar calStart = Calendar.getInstance();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,296,alStart.setTime(start);
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,297,alendar calEnd = Calendar.getInstance();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,298,alEnd.setTime(end);
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,300,"ssertWeekIterator(it, calStart, calEnd);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,304, This checks that this is a 7 divisble iterator of Calendar objects
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,305," that are dates (no time), and exactly 1 day spaced after each other"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,306, (in addition to the proper start and stop dates)
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,308,"rivate static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,309,alendar cal = (Calendar) it.next();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,310,"ssertEquals("""", start, cal, 0);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,311,alendar last = null;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,312,nt count = 1;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,313,hile (it.hasNext()) {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,314,/Check this is just a date (no time component)
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,315,"ssertEquals("""", cal, CalendarUtils.trunc(cal, Calendar.DATE), 0);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,317,ast = cal;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,318,al = (Calendar) it.next();
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,319,ount++;
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,321,/Check that this is one day more than the last date
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,322,"ast.add(Calendar.DATE, 1);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,323,"ssertEquals("""", last, cal, 0);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,325,f (count % 7 != 0) {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,326,"hrow new AssertionFailedError(""There were "" + count + "" days in this iterator"");"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,328,"ssertEquals("""", end, cal, 0);"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,332, Used to check that Calendar objects are close enough
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,333, delta is in milliseconds
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,335,"ublic static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {"
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,336,f (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,337,hrow new AssertionFailedError(
False,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,338,"essage + "" expected "" + cal1.getTime() + "" but got "" + cal2.getTime());"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,3, or more contributor license agreements.  See the NOTICE file
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,4, distributed with this work for additional information
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,6," to you under the Apache License, Version 2.0 (the"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,7," ""License""); you may not use this file except in compliance"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,8, with the License.  You may obtain a copy of the License at
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,12," Unless required by applicable law or agreed to in writing,"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,13, software distributed under the License is distributed on an
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,15," KIND, either express or implied.  See the License for the"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,16, specific language governing permissions and limitations
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,17, under the License.
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,19,ackage org.apache.commons.lang3;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,21,mport java.text.DateFormat;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,22,mport java.text.DateFormatSymbols;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,23,mport java.text.ParseException;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,24,mport java.util.Calendar;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,25,mport java.util.Date;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,26,mport java.util.Locale;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,29, This class was created to hold the parseCVS method extracted from DateUtils in commons-lang.
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,30, The code was originally submitted by Serge Knystautas sergek@lokitech.com. It was never
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,31," fully implemented, and has been moved to the sandbox for further development. Recent discussion"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,32, from the commons-dev mailing list:
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,33, http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=108904098032038&w=2
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,34, Moving the code to the sandbox satisfies bug is a temporary solution to
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,35, http://issues.apache.org/bugzilla/show_bug.cgi?id=22172 but this issue needs to be considered
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,36, when the class/method is further developed.
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,38,ublic class DateFormatter {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,41, <p>Parses a date string formatted in CVS format.</p>
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,43, @param dateStr  the date to parse
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,44, @return the parsed date
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,45, @throws IllegalArgumentException if the date cannot be parsed
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,47,ublic static Calendar parseCVS(String dateStr) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,48,f (dateStr == null) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,49,"hrow new IllegalArgumentException(""The date must not be null"");"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,51,/Get the symbol names
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,52,ateFormatSymbols symbols = new DateFormatSymbols(Locale.ENGLISH);
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,54,ateFormat[] dateFormats = new DateFormat[0];
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,56,/Prep the string to parse
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,57,tring value = dateStr.toLowerCase().trim();
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,59,/Get the current date/time
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,60,alendar now = Calendar.getInstance();
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,61,"f (value.endsWith("" ago"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,62,"/If this was a date that was ""ago"" the current time..."
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,63,/Strip out the ' ago' part
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,64,"alue = value.substring(0, value.length() - 4);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,66,/Split the value and unit
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,67,"nt start = value.indexOf("" "");"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,68,f (start < 0) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,69,"hrow new IllegalArgumentException(""Could not find space in between value and unit"");"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,71,tring unit = value.substring(start + 1);
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,72,"alue = value.substring(0, start);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,73,"/We support ""a week"", so we need to parse the value as ""a"""
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,74,nt val = 0;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,75,"f (value.equals(""a"") || value.equals(""an"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,76,al = 1;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,77, else {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,78,al = Integer.parseInt(value);
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,81,/Determine the unit
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,82,"f (unit.equals(""milliseconds"") || unit.equals(""millisecond"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,83,"ow.add(Calendar.MILLISECOND, -val);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,84," else if (unit.equals(""seconds"") || unit.equals(""second"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,85,"ow.add(Calendar.SECOND, -val);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,86," else if (unit.equals(""minutes"") || unit.equals(""minute"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,87,"ow.add(Calendar.MINUTE, -val);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,88," else if (unit.equals(""hours"") || unit.equals(""hour"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,89,"ow.add(Calendar.HOUR, -val);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,90," else if (unit.equals(""days"") || unit.equals(""day"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,91,"ow.add(Calendar.DATE, -val);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,92," else if (unit.equals(""weeks"") || unit.equals(""week"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,93,"ow.add(Calendar.DATE, -val * 7);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,94," else if (unit.equals(""fortnights"") || unit.equals(""fortnight"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,95,"ow.add(Calendar.DATE, -val * 14);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,96," else if (unit.equals(""months"") || unit.equals(""month"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,97,"ow.add(Calendar.MONTH, -val);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,98," else if (unit.equals(""years"") || unit.equals(""year"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,99,"ow.add(Calendar.YEAR, -val);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,100, else {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,101,"hrow new IllegalArgumentException(""We do not understand that many units ago"");"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,103,eturn now;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,104," else if (value.startsWith(""last "")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,105,/If this was the last time a certain field was met
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,106,/Strip out the 'last ' part
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,107,alue = value.substring(5);
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,108,/Get the current date/time
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,109,tring[] strings = symbols.getWeekdays();
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,110,or (int i = 0; i < strings.length; i++) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,111,f (value.equalsIgnoreCase(strings[i])) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,112,/How many days after Sunday
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,113,nt daysAgo = now.get(Calendar.DAY_OF_WEEK) - i;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,114,f (daysAgo <= 0) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,115,aysAgo += 7;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,117,"ow.add(Calendar.DATE, -daysAgo);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,118,eturn now;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,121,trings = symbols.getMonths();
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,122,or (int i = 0; i < strings.length; i++) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,123,f (value.equalsIgnoreCase(strings[i])) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,124,/How many days after January
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,125,nt monthsAgo = now.get(Calendar.MONTH) - i;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,126,f (monthsAgo <= 0) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,127,onthsAgo += 12;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,129,"ow.add(Calendar.MONTH, -monthsAgo);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,130,eturn now;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,133,"f (value.equals(""week"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,134,"ow.add(Calendar.DATE, -7);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,135,eturn now;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,137,"hrow new IllegalArgumentException(""We do not understand that last units"");"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,138," else if (value.equals(""yesterday"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,139,"ow.add(Calendar.DATE, -1);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,140,eturn now;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,141," else if (value.equals(""tomorrow"")) {"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,142,"ow.add(Calendar.DATE, 1);"
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,143,eturn now;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,145,/Try to parse the date a number of different ways
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,146,or (int i = 0; i < dateFormats.length; i++) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,147,ry {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,148,ate datetime = dateFormats[i].parse(dateStr);
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,149,alendar cal = Calendar.getInstance();
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,150,al.setTime(datetime);
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,151,eturn cal;
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,152, catch (ParseException pe) {
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,153,/we ignore this and just keep trying
False,src/pending/DateFormatter.java,src/pending/DateFormatter.java,157,"hrow new IllegalArgumentException(""Unable to parse '"" + dateStr + ""'."");"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,4, distributed with this work for additional information
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,7," ""License""); you may not use this file except in compliance"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,8, with the License.  You may obtain a copy of the License at
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,13, software distributed under the License is distributed on an
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,15," KIND, either express or implied.  See the License for the"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,16, specific language governing permissions and limitations
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,17, under the License.
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,19,ackage org.apache.commons.lang3;
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,21,mport java.text.SimpleDateFormat;
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,22,mport java.util.Calendar;
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,23,mport java.util.Date;
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,24,mport junit.framework.AssertionFailedError;
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,25,mport junit.framework.TestCase;
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,28, This class was created to hold test cases for the parseCVS method extracted from DateUtilsTest in commons-lang.
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,29, The code was originally submitted by Serge Knystautas sergek@lokitech.com. It was never
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,30," fully implemented, and has been moved to the sandbox for further development. Recent discussion"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,31, from the commons-dev mailing list:
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,32, http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=108904098032038&w=2
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,33, Moving the code to the sandbox satisfies bug is a temporary solution to
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,34, http://issues.apache.org/bugzilla/show_bug.cgi?id=22172 but this issue needs to be considered
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,35, when the class/method is further developed.
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,37,ublic class DateFormatterTest extends TestCase {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,40," Tests the parse method, which is supposed to handle various strings"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,41, as flexibly as CVS supports.
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,43,ublic void testParseCVS() throws Exception {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,44,ry {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,45,ateFormatter.parseCVS(null);
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,46,ail();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,47, catch (IllegalArgumentException ex) {}
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,48,ry {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,49,"ateFormatter.parseCVS(""gobbledegook"");"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,50,ail();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,51, catch (IllegalArgumentException ex) {}
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,52,ry {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,53,"ateFormatter.parseCVS(""ago"");"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,54,ail();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,55, catch (IllegalArgumentException ex) {}
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,56,ry {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,57,"ateFormatter.parseCVS(""1 junk ago"");"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,58,ail();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,59, catch (IllegalArgumentException ex) {}
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,60,ry {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,61,"ateFormatter.parseCVS(""1month ago"");"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,62,ail();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,63, catch (IllegalArgumentException ex) {}
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,64,ry {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,65,"ateFormatter.parseCVS(""last month"");"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,66,ail();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,67, catch (IllegalArgumentException ex) {}
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,70,"/This is difficult to test since the ""now"" used in the"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,71,/  parse function cannot be controlled.  We could possibly control
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,72,/  it by trying before and after and making sure the value we expect
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,73,/  is between the two values calculated.
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,74,/For now we're just using the custom assertEquals that takes a delta
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,76,alendar now = null;
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,78,/ M/dd/yy H:mm:ss z
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,79,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,80,"ow.set(Calendar.MILLISECOND, 0);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,81,"ssertEquals(""parseCVS format M/dd/yy H:mm:ss z"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,82,"ow, DateFormatter.parseCVS(new SimpleDateFormat(""M/dd/yy H:mm:ss z"").format(now.getTime())), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,83,"/ MMM d, yyyy h:mm a"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,84,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,85,"ow.set(Calendar.MILLISECOND, 0);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,86,"ow.set(Calendar.SECOND, 0);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,87,"ssertEquals(""parseCVS format MMM d, yyyy h:mm a"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,88,"ow, DateFormatter.parseCVS(new SimpleDateFormat(""MMM d, yyyy h:mm a"").format(now.getTime())), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,89,/ h:mm z
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,91,/ This format is difficult to test using the current time because the
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,92,"/ parseCVS method applies the default date of January 1, 1970 to the"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,93,/ parsed time. The most straightforward way to test the parse is to
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,94,"/ pass in a known value, and test the output against this know value."
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,96,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,97,"ow.setTime(new SimpleDateFormat(""h:mm z"").parse(""16:30 GMT""));"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,98,"ssertEquals(""parseCVS format h:mm z 16:30 GMT"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,99,"ow, DateFormatter.parseCVS(""16:30 GMT""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,100,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,101,"ow.setTime(new SimpleDateFormat(""h:mm z"").parse(""16:30 EST""));"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,102,"ssertEquals(""parseCVS format h:mm z 16:30 EST"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,103,"ow, DateFormatter.parseCVS(""16:30 EST""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,104,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,105,"ow.setTime(new SimpleDateFormat(""h:mm z"").parse(""16:30 GMT-05:00""));"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,106,"ssertEquals(""parseCVS format h:mm z 16:30 GMT-05:00"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,107,"ow, DateFormatter.parseCVS(""16:30 GMT-05:00""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,108,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,109,"ow.setTime(new SimpleDateFormat(""h:mm z"").parse(""16:30 GMT+01:00""));"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,110,"ssertEquals(""parseCVS format h:mm z 16:30 GMT+01:00"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,111,"ow, DateFormatter.parseCVS(""16:30 GMT+01:00""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,113,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,114,"ow.setTime(new SimpleDateFormat(""h:mm z"").parse(""06:30 GMT""));"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,115,"ssertEquals(""parseCVS format h:mm z 06:30 GMT"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,116,"ow, DateFormatter.parseCVS(""06:30 GMT""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,117,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,118,"ow.setTime(new SimpleDateFormat(""h:mm z"").parse(""06:30 EST""));"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,119,"ssertEquals(""parseCVS format h:mm z 06:30 EST"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,120,"ow, DateFormatter.parseCVS(""06:30 EST""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,121,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,122,"ow.setTime(new SimpleDateFormat(""h:mm z"").parse(""06:30 GMT-05:00""));"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,123,"ssertEquals(""parseCVS format h:mm z 06:30 GMT-05:00"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,124,"ow, DateFormatter.parseCVS(""06:30 GMT-05:00""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,125,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,126,"ow.setTime(new SimpleDateFormat(""h:mm z"").parse(""06:30 GMT+01:00""));"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,127,"ssertEquals(""parseCVS format h:mm z 06:30 GMT+01:00"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,128,"ow, DateFormatter.parseCVS(""06:30 GMT+01:00""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,130,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,131,"ow.add(Calendar.WEEK_OF_MONTH, -1);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,132,"ssertEquals(""parseCVS a week ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,133,"ow, DateFormatter.parseCVS(""a week ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,134,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,135,"ow.add(Calendar.WEEK_OF_MONTH, -1);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,136,"ssertEquals(""parseCVS an week ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,137,"ow, DateFormatter.parseCVS(""an week ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,139,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,140,"ow.add(Calendar.DAY_OF_MONTH, -14);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,141,"ssertEquals(""parseCVS 1 fortnight ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,142,"ow, DateFormatter.parseCVS(""1 fortnight ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,143,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,144,"ow.add(Calendar.DAY_OF_MONTH, -14);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,145,"ssertEquals(""parseCVS 1 fortnights ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,146,"ow, DateFormatter.parseCVS(""1 fortnights ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,148,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,149,"ow.add(Calendar.MINUTE, -1);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,150,"ssertEquals(""parseCVS 1 minute ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,151,"ow, DateFormatter.parseCVS(""1 minute ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,152,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,153,"ow.add(Calendar.MINUTE, -8);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,154,"ssertEquals(""parseCVS 8 minutes ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,155,"ow, DateFormatter.parseCVS(""8 minutes ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,157,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,158,"ow.add(Calendar.MILLISECOND, -1);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,159,"ssertEquals(""parseCVS 1 millisecond ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,160,"ow, DateFormatter.parseCVS(""1 millisecond ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,161,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,162,"ow.add(Calendar.MILLISECOND, -100);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,163,"ssertEquals(""parseCVS 1 milliseconds ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,164,"ow, DateFormatter.parseCVS(""100 milliseconds ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,165,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,166,"ow.add(Calendar.SECOND, -30);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,167,"ssertEquals(""parseCVS 30 second ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,168,"ow, DateFormatter.parseCVS(""30 second ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,169,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,170,"ow.add(Calendar.SECOND, -30);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,171,"ssertEquals(""parseCVS 30 seconds ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,172,"ow, DateFormatter.parseCVS(""30 seconds ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,173,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,174,"ow.add(Calendar.HOUR, -2);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,175,"ssertEquals(""parseCVS 2 hour ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,176,"ow, DateFormatter.parseCVS(""2 hour ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,177,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,178,"ow.add(Calendar.HOUR, -2);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,179,"ssertEquals(""parseCVS 2 hours ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,180,"ow, DateFormatter.parseCVS(""2 hours ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,181,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,182,"ow.add(Calendar.DAY_OF_MONTH, -2);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,183,"ssertEquals(""parseCVS 2 day ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,184,"ow, DateFormatter.parseCVS(""2 day ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,185,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,186,"ow.add(Calendar.DAY_OF_MONTH, -2);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,187,"ssertEquals(""parseCVS 2 days ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,188,"ow, DateFormatter.parseCVS(""2 days ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,189,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,190,"ow.add(Calendar.MONTH, -2);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,191,"ssertEquals(""parseCVS 2 month ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,192,"ow, DateFormatter.parseCVS(""2 month ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,193,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,194,"ow.add(Calendar.MONTH, -2);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,195,"ssertEquals(""parseCVS 2 months ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,196,"ow, DateFormatter.parseCVS(""2 months ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,197,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,198,"ow.add(Calendar.YEAR, -2);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,199,"ssertEquals(""parseCVS 2 year ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,200,"ow, DateFormatter.parseCVS(""2 year ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,201,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,202,"ow.add(Calendar.YEAR, -2);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,203,"ssertEquals(""parseCVS 2 years ago"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,204,"ow, DateFormatter.parseCVS(""2 years ago""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,206,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,207,"ow.add(Calendar.DATE, -1);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,208,"ssertEquals(""parseCVS yesterday"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,209,"ow, DateFormatter.parseCVS(""yesterday""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,211,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,212,"ow.add(Calendar.DATE, 1);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,213,"ssertEquals(""parseCVS tomorrow"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,214,"ow, DateFormatter.parseCVS(""tomorrow""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,216,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,217,"/Sunday would be 1, Saturday would be 7, so we walk back up to 6 days."
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,218,f (now.get(Calendar.DAY_OF_WEEK) == 1) {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,219,"/If Sunday already, we go back a full week"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,220,"ow.add(Calendar.DATE, -7);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,221, else {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,222,"ow.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,224,"ssertEquals(""parseCVS last Sunday"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,225,"ow, DateFormatter.parseCVS(""last Sunday""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,227,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,228,"ow.add(Calendar.DATE, -7);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,229,"ssertEquals(""parseCVS last week"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,230,"ow, DateFormatter.parseCVS(""last week""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,232,ow = Calendar.getInstance();
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,233,"/January would be 0, December would be 11, so we walk back up to 11 months"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,234,f (now.get(Calendar.MONTH) == 0) {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,235,"/If January already, we go back a full year"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,236,"ow.add(Calendar.MONTH, -12);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,237, else {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,238,"ow.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,240,"ssertEquals(""parseCVS last January"","
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,241,"ow, DateFormatter.parseCVS(""last January""), 50);"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,245, Used to check that Calendar objects are close enough
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,246, delta is in milliseconds
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,248,"ublic static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {"
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,249,f (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,250,hrow new AssertionFailedError(
False,src/pending/DateFormatterTest.java,src/pending/DateFormatterTest.java,251,"essage + "" expected "" + cal1.getTime() + "" but got "" + cal2.getTime());"

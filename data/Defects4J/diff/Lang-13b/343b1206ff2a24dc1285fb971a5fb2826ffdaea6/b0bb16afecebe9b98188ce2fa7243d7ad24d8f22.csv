is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,22,import java.util.Arrays;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6142,* <p>Find the Levenshtein distance between two Strings if it's less than or equal to a given
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6143,* threshold.</p>
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6145,* <p>This is the number of changes needed to change one String into
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6146,"* another, where each change is a single character modification (deletion,"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6147,* insertion or substitution).</p>
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6149,"* <p>This implementation follows from Algorithms on Strings, Trees and Sequences by Dan Gusfield"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6150,* and Chas Emerick's implementation of the Levenshtein distance algorithm from
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6151,"* <a href=""http://www.merriampark.com/ld.htm"">http://www.merriampark.com/ld.htm</a></p>"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6153,* <pre>
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6154,"* StringUtils.getLevenshteinDistance(null, *, *)             = IllegalArgumentException"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6155,"* StringUtils.getLevenshteinDistance(*, null, *)             = IllegalArgumentException"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6156,"* StringUtils.getLevenshteinDistance(*, *, -1)               = IllegalArgumentException"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6157,"* StringUtils.getLevenshteinDistance("""","""", 0)               = 0"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6158,"* StringUtils.getLevenshteinDistance(""aaapppp"", """", 8)       = 7"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6159,"* StringUtils.getLevenshteinDistance(""aaapppp"", """", 7)       = 7"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6160,"* StringUtils.getLevenshteinDistance(""aaapppp"", """", 6))      = -1"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6161,"* StringUtils.getLevenshteinDistance(""elephant"", ""hippo"", 7) = 7"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6162,"* StringUtils.getLevenshteinDistance(""elephant"", ""hippo"", 6) = -1"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6163,"* StringUtils.getLevenshteinDistance(""hippo"", ""elephant"", 7) = 7"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6164,"* StringUtils.getLevenshteinDistance(""hippo"", ""elephant"", 6) = -1"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6165,* </pre>
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6167,"* @param s  the first String, must not be null"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6168,"* @param t  the second String, must not be null"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6169,"* @param threshold the target threshold, must not be negative"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6170,"* @return result distance, or -1 if the distance would be greater than the threshold"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6171,* @throws IllegalArgumentException if either String input {@code null} or negative threshold
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6173,"public static int getLevenshteinDistance(CharSequence s, CharSequence t, int threshold) {"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6174,if(s == null || t == null) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6175,"throw new IllegalArgumentException(""String must not be null"");"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6177,if(threshold < 0) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6178,"throw new IllegalArgumentException(""Threshold must not be negative"");"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6182,This implementation only computes the distance if it's less than or equal to the
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6183,"threshold value, returning -1 if it's greater.  The advantage is performance: unbounded"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6184,"distance is O(nm), but a bound of k allows us to reduce it to O(km) time by only"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6185,computing a diagonal stripe of width 2k+1 of the cost table.
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6186,It is also possible to use this to compute the unbounded Levenshtein distance by starting
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6187,"the threshold at 1 and doubling each time until the distance is found; this is O(dm), where"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6188,d is the distance.
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6190,One subtlety comes from needing to ignore entries on the border of our stripe
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6191,eg.
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6192,p[] = |#|#|#|*
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6193,d[] =  *|#|#|#|
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6194,We must ignore the entry to the left of the leftmost member
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6195,We must ignore the entry above the rightmost member
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6197,Another subtlety comes from our stripe running off the matrix if the strings aren't
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6198,"of the same size.  Since string s is always swapped to be the shorter of the two,"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6199,the stripe will always run off to the upper right instead of the lower left of the matrix.
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6201,"As a concrete example, suppose s is of length 5, t is of length 7, and our threshold is 1."
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6202,In this case we're going to walk a stripe of length 3.  The matrix would look like so:
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6204,1 2 3 4 5
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6205,1 |#|#| | | |
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6206,2 |#|#|#| | |
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6207,3 | |#|#|#| |
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6208,4 | | |#|#|#|
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6209,5 | | | |#|#|
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6210,6 | | | | |#|
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6211,7 | | | | | |
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6213,Note how the stripe leads off the table as there is no possible way to turn a string of length 5
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6214,into one of length 7 in edit distance of 1.
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6216,"Additionally, this implementation decreases memory usage by using two"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6217,single-dimensional arrays and swapping them back and forth instead of allocating
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6218,"an entire n by m matrix.  This requires a few minor changes, such as immediately returning"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6219,when it's detected that the stripe has run off the matrix and initially filling the arrays with
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6220,large values so that entries we don't compute are ignored.
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6222,"See Algorithms on Strings, Trees and Sequences by Dan Gusfield for some discussion."
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6225,int n = s.length(); // length of s
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6226,int m = t.length(); // length of t
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6228,"// if one string is empty, the edit distance is necessarily the length of the other"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6229,if(n == 0) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6230,return m <= threshold? m : -1;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6231,} else if(m == 0) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6232,return n <= threshold? n : -1;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6235,if(n > m) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6236,// swap the two strings to consume less memory
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6237,CharSequence tmp = s;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6238,s = t;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6239,t = tmp;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6240,n = m;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6241,m = t.length();
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6244,"int p[] = new int[n+1]; // 'previous' cost array, horizontally"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6245,"int d[] = new int[n+1]; // cost array, horizontally"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6246,int _d[]; // placeholder to assist in swapping p and d
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6248,// fill in starting table values
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6249,"int boundary = Math.min(n, threshold) + 1;"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6250,for(int i = 0; i < boundary; i++) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6251,p[i] = i;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6253,// these fills ensure that the value above the rightmost entry of our
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6254,// stripe will be ignored in following loop iterations
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6255,"Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6256,"Arrays.fill(d, Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6258,// iterates through t
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6259,for(int j = 1; j <= m; j++) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6260,char t_j = t.charAt(j-1); // jth character of t
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6261,d[0] = j;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6263,"// compute stripe indices, constrain to array size"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6264,"int min = Math.max(1, j - threshold);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6265,"int max = Math.min(n, j + threshold);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6267,// the stripe may lead off of the table if s and t are of different sizes
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6268,if(min > max) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6269,return -1;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6272,// ignore entry left of leftmost
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6273,if(min > 1) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6274,d[min-1] = Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6277,"// iterates through [min, max] in s"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6278,for(int i = min; i <= max; i++) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6279,if(s.charAt(i-1) == t_j) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6280,// diagonally left and up
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6281,d[i] = p[i-1];
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6282,} else {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6283,"// 1 + minimum of cell to the left, to the top, diagonally left and up"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6284,"d[i] = 1 + Math.min(Math.min(d[i-1], p[i]), p[i-1]);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6288,// copy current distance counts to 'previous row' distance counts
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6289,_d = p;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6290,p = d;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6291,d = _d;
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6294,"// if p[n] is greater than the threshold, there's no guarantee on it being the correct"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6295,// distance
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6296,if(p[n] <= threshold) {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6297,return p[n];
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6298,} else {
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6299,return -1;
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1674,public void testGetLevenshteinDistance_StringStringInt() {
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1675,// empty strings
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1676,"assertEquals(0, StringUtils.getLevenshteinDistance("""", """", 0));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1677,"assertEquals(7, StringUtils.getLevenshteinDistance(""aaapppp"", """", 8));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1678,"assertEquals(7, StringUtils.getLevenshteinDistance(""aaapppp"", """", 7));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1679,"assertEquals(-1, StringUtils.getLevenshteinDistance(""aaapppp"", """", 6));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1681,"// unequal strings, zero threshold"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1682,"assertEquals(-1, StringUtils.getLevenshteinDistance(""b"", ""a"", 0));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1683,"assertEquals(-1, StringUtils.getLevenshteinDistance(""a"", ""b"", 0));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1685,// equal strings
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1686,"assertEquals(0, StringUtils.getLevenshteinDistance(""aa"", ""aa"", 0));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1687,"assertEquals(0, StringUtils.getLevenshteinDistance(""aa"", ""aa"", 2));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1689,// same length
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1690,"assertEquals(-1, StringUtils.getLevenshteinDistance(""aaa"", ""bbb"", 2));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1691,"assertEquals(3, StringUtils.getLevenshteinDistance(""aaa"", ""bbb"", 3));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1693,// big stripe
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1694,"assertEquals(6, StringUtils.getLevenshteinDistance(""aaaaaa"", ""b"", 10));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1696,// distance less than threshold
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1697,"assertEquals(7, StringUtils.getLevenshteinDistance(""aaapppp"", ""b"", 8));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1698,"assertEquals(3, StringUtils.getLevenshteinDistance(""a"", ""bbb"", 4));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1700,// distance equal to threshold
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1701,"assertEquals(7, StringUtils.getLevenshteinDistance(""aaapppp"", ""b"", 7));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1702,"assertEquals(3, StringUtils.getLevenshteinDistance(""a"", ""bbb"", 3));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1704,// distance greater than threshold
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1705,"assertEquals(-1, StringUtils.getLevenshteinDistance(""a"", ""bbb"", 2));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1706,"assertEquals(-1, StringUtils.getLevenshteinDistance(""bbb"", ""a"", 2));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1707,"assertEquals(-1, StringUtils.getLevenshteinDistance(""aaapppp"", ""b"", 6));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1709,"// stripe runs off array, strings not similar"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1710,"assertEquals(-1, StringUtils.getLevenshteinDistance(""a"", ""bbb"", 1));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1711,"assertEquals(-1, StringUtils.getLevenshteinDistance(""bbb"", ""a"", 1));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1713,"// stripe runs off array, strings are similar"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1714,"assertEquals(-1, StringUtils.getLevenshteinDistance(""12345"", ""1234567"", 1));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1715,"assertEquals(-1, StringUtils.getLevenshteinDistance(""1234567"", ""12345"", 1));"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1717,// old getLevenshteinDistance test cases
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1718,"assertEquals(1, StringUtils.getLevenshteinDistance(""frog"", ""fog"",1) );"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1719,"assertEquals(3, StringUtils.getLevenshteinDistance(""fly"", ""ant"",3) );"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1720,"assertEquals(7, StringUtils.getLevenshteinDistance(""elephant"", ""hippo"",7) );"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1721,"assertEquals(-1, StringUtils.getLevenshteinDistance(""elephant"", ""hippo"",6) );"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1722,"assertEquals(7, StringUtils.getLevenshteinDistance(""hippo"", ""elephant"",7) );"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1723,"assertEquals(-1, StringUtils.getLevenshteinDistance(""hippo"", ""elephant"",6) );"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1724,"assertEquals(8, StringUtils.getLevenshteinDistance(""hippo"", ""zzzzzzzz"",8) );"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1725,"assertEquals(8, StringUtils.getLevenshteinDistance(""zzzzzzzz"", ""hippo"",8) );"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1726,"assertEquals(1, StringUtils.getLevenshteinDistance(""hello"", ""hallo"",1) );"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1728,// exceptions
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1729,try {
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1730,"@SuppressWarnings(""unused"")"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1731,"int d = StringUtils.getLevenshteinDistance(""a"", null, 0);"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1732,"fail(""expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1733,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1734,// empty
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1736,try {
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1737,"@SuppressWarnings(""unused"")"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1738,"int d = StringUtils.getLevenshteinDistance(null, ""a"", 0);"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1739,"fail(""expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1740,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1741,// empty
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1744,try {
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1745,"@SuppressWarnings(""unused"")"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1746,"int d = StringUtils.getLevenshteinDistance(""a"", ""a"", -1);"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1747,"fail(""expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1748,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,src/test/java/org/apache/commons/lang3/StringUtilsTest.java,1749,// empty

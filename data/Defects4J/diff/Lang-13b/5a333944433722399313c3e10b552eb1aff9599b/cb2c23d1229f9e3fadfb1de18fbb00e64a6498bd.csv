is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,17,package org.apache.commons.lang3.concurrent;
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,19,import java.util.concurrent.atomic.AtomicReference;
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,22,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,23,* A specialized {@code ConcurrentInitializer} implementation which is similar
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,24,"* to {@link AtomicInitializer}, but ensures that the {@link #initialize()}"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,25,* method is called only once.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,26,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,27,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,28,"* As {@link AtomicInitializer} this class is based on atomic variables, so it"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,29,* can create an object under concurrent access without synchronization.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,30,"* However, it implements an additional check to guarantee that the"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,31,* {@link #initialize()} method which actually creates the object cannot be
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,32,* called multiple times.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,33,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,34,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,35,* Because of this additional check this implementation is slightly less
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,36,"* efficient than {@link AtomicInitializer}, but if the object creation in the"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,37,* {@code initialize()} method is expensive or if multiple invocations of
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,38,"* {@code initialize()} are problematic, it is the better alternative."
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,39,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,40,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,41,* From its semantics this class has the same properties as
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,42,* {@link LazyInitializer}. It is a &quot;save&quot; implementation of the lazy
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,43,* initializer pattern. Comparing both classes in terms of efficiency is
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,44,* difficult because which one is faster depends on multiple factors. Because
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,45,* {@code AtomicSafeInitializer} does not use synchronization at all it probably
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,46,"* outruns {@link LazyInitializer}, at least under low or moderate concurrent"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,47,* access. Developers should run their own benchmarks on the expected target
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,48,* platform to decide which implementation is suitable for their specific use
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,49,* case.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,50,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,52,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,53,* @version $Id$
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,54,* @param <T> the type of the object managed by this initializer class
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,56,public abstract class AtomicSafeInitializer<T> implements
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,57,ConcurrentInitializer<T> {
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,58,/** A guard which ensures that initialize() is called only once. */
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,59,private final AtomicReference<AtomicSafeInitializer<T>> factory =
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,60,new AtomicReference<AtomicSafeInitializer<T>>();
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,62,/** Holds the reference to the managed object. */
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,63,private final AtomicReference<T> reference = new AtomicReference<T>();
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,66,"* Get (and initialize, if not initialized yet) the required object"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,68,* @return lazily initialized object
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,70,public final T get() throws ConcurrentException {
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,71,T result;
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,73,while ((result = reference.get()) == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,74,"if (factory.compareAndSet(null, this)) {"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,75,reference.set(initialize());
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,79,return result;
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,83,* Creates and initializes the object managed by this
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,84,* {@code AtomicInitializer}. This method is called by {@link #get()} when
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,85,* the managed object is not available yet. An implementation can focus on
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,86,"* the creation of the object. No synchronization is needed, as this is"
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,87,* already handled by {@code get()}. This method is guaranteed to be called
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,88,* only once.
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,90,* @return the managed data object
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,91,* @throws ConcurrentException if an error occurs during object creation
True,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java,93,protected abstract T initialize() throws ConcurrentException;
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,17,package org.apache.commons.lang3.concurrent;
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,21,import java.util.concurrent.atomic.AtomicInteger;
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,23,import org.junit.Before;
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,27,* Test class for {@code AtomicSafeInitializer}.
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,29,* @author Apache Software Foundation
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,30,* @version $Id$
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,32,public class AtomicSafeInitializerTest extends
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,33,AbstractConcurrentInitializerTest {
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,34,/** The instance to be tested. */
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,35,private AtomicSafeInitializerTestImpl initializer;
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,37,@Before
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,38,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,39,initializer = new AtomicSafeInitializerTestImpl();
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,43,* Returns the initializer to be tested.
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,45,* @return the {@code AtomicSafeInitializer} under test
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,47,@Override
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,48,protected ConcurrentInitializer<Object> createInitializer() {
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,49,return initializer;
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,53,* Tests that initialize() is called only once.
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,55,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,56,"public void testNumberOfInitializeInvocations() throws ConcurrentException,"
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,57,InterruptedException {
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,58,testGetConcurrent();
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,59,"assertEquals(""Wrong number of invocations"", 1,"
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,60,initializer.initCounter.get());
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,64,* A concrete test implementation of {@code AtomicSafeInitializer}. This
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,65,* implementation also counts the number of invocations of the initialize()
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,66,* method.
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,68,private static class AtomicSafeInitializerTestImpl extends
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,69,AtomicSafeInitializer<Object> {
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,70,/** A counter for initialize() invocations. */
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,71,final AtomicInteger initCounter = new AtomicInteger();
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,73,@Override
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,74,protected Object initialize() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,75,initCounter.incrementAndGet();
True,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java,76,return new Object();

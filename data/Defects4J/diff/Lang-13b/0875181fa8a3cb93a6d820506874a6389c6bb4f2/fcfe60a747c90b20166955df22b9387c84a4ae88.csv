is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,17,package org.apache.commons.lang.concurrent;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,19,import java.util.concurrent.Callable;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,20,import java.util.concurrent.ExecutionException;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,21,import java.util.concurrent.ExecutorService;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,22,import java.util.concurrent.Executors;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,23,import java.util.concurrent.Future;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,26,* <p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,27,* A class that allows complex initialization operations in a background task.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,28,* </p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,29,* <p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,30,* Applications often have to do some expensive initialization steps when they
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,31,"* are started, e.g. constructing a connection to a database, reading a"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,32,"* configuration file, etc. Doing these things in parallel can enhance"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,33,"* performance as the CPU load can be improved. However, when access to the"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,34,"* resources initialized in a background thread is actually required,"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,35,* synchronization has to be performed to ensure that their initialization is
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,36,* complete.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,37,* </p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,38,* <p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,39,* This abstract base class provides support for this use case. A concrete
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,40,* subclass must implement the {@link #initialize()} method. Here an arbitrary
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,41,"* initialization can be implemented, and a result object can be returned. With"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,42,* this method in place the basic usage of this class is as follows (where
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,43,* {@code MyBackgroundInitializer} is a concrete subclass):
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,45,* <pre>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,46,* MyBackgroundInitializer initializer = new MyBackgroundInitializer();
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,47,* initializer.start();
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,48,* // Now do some other things. Initialization runs in a parallel thread
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,50,* // Wait for the end of initialization and access the result object
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,51,* Object result = initializer.get();
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,52,* </pre>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,54,* </p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,55,* <p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,56,* After the construction of a {@code BackgroundInitializer} object its
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,57,* {@link #start()} method has to be called. This starts the background
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,58,* processing. The application can now continue to do other things. When it
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,59,* needs access to the object produced by the {@code BackgroundInitializer} it
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,60,"* calls its {@link #get()} method. If initialization is already complete,"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,61,* {@link #get()} returns the result object immediately. Otherwise it blocks
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,62,* until the result object is fully constructed.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,63,* </p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,64,* <p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,65,* {@code BackgroundInitializer} is a thin wrapper around a {@code Future}
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,66,* object and uses an {@code ExecutorService} for running the background
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,67,* initialization task. It is possible to pass in an {@code ExecutorService} at
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,68,* construction time or set one using {@code setExternalExecutor()} before
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,69,* {@code start()} was called. Then this object is used to spawn the background
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,70,"* task. If no {@code ExecutorService} has been provided, {@code"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,71,* BackgroundInitializer} creates a temporary {@code ExecutorService} and
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,72,* destroys it when initialization is complete.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,73,* </p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,74,* <p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,75,* The methods provided by {@code BackgroundInitializer} provide for minimal
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,76,* interaction with the wrapped {@code Future} object. It is also possible to
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,77,* obtain the {@code Future} object directly. Then the enhanced functionality
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,78,"* offered by {@code Future} can be used, e.g. to check whether the background"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,79,* operation is complete or to cancel the operation.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,80,* </p>
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,82,* @version $Id$
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,83,* @param <T> the type of the object managed by this initializer class
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,85,public abstract class BackgroundInitializer<T> {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,86,/** The external executor service for executing tasks. */
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,87,private ExecutorService externalExecutor;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,89,/** A reference to the executor service that is actually used. */
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,90,private ExecutorService executor;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,92,/** Stores the handle to the background task. */
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,93,private Future<T> future;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,96,* Creates a new instance of {@code BackgroundInitializer}. No external
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,97,* {@code ExecutorService} is used.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,99,protected BackgroundInitializer() {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,100,this(null);
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,104,* Creates a new instance of {@code BackgroundInitializer} and initializes
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,105,* it with the given {@code ExecutorService}. If the {@code ExecutorService}
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,106,"* is not null, the background task for initializing this object will be"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,107,* scheduled at this service. Otherwise a new temporary {@code
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,108,* ExecutorService} is created.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,110,* @param exec an external {@code ExecutorService} to be used for task
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,111,* execution
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,113,protected BackgroundInitializer(ExecutorService exec) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,114,setExternalExecutor(exec);
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,118,* Returns the external {@code ExecutorService} to be used by this class.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,120,* @return the {@code ExecutorService}
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,122,public final synchronized ExecutorService getExternalExecutor() {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,123,return externalExecutor;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,127,* Returns a flag whether this {@code BackgroundInitializer} has already
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,128,* been started.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,130,* @return a flag whether the {@link #start()} method has already been
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,131,* called
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,133,public synchronized boolean isStarted() {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,134,return future != null;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,138,* Sets an {@code ExecutorService} to be used by this class. The {@code
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,139,* ExecutorService} passed to this method is used for executing the
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,140,* background task. Thus it is possible to re-use an already existing
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,141,* {@code ExecutorService} or to use a specially configured one. If no
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,142,"* {@code ExecutorService} is set, this instance creates a temporary one and"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,143,* destroys it after background initialization is complete. Note that this
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,144,* method must be called before {@link #start()}; otherwise an exception is
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,145,* thrown.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,147,* @param externalExecutor the {@code ExecutorService} to be used
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,148,* @throws IllegalStateException if this initializer has already been
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,149,* started
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,151,public final synchronized void setExternalExecutor(
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,152,ExecutorService externalExecutor) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,153,if (isStarted()) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,154,throw new IllegalStateException(
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,155,"""Cannot set ExecutorService after start()!"");"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,158,this.externalExecutor = externalExecutor;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,162,* Starts the background initialization. With this method the initializer
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,163,* becomes active and invokes the {@link #initialize()} method in a
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,164,* background task. A {@code BackgroundInitializer} can be started exactly
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,165,* once. The return value of this method determines whether the start was
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,166,"* successful: only the first invocation of this method returns <b>true</b>,"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,167,* following invocations will return <b>false</b>.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,169,* @return a flag whether the initializer could be started successfully
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,171,public synchronized boolean start() {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,172,// Not yet started?
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,173,if (!isStarted()) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,175,// Determine the executor to use and whether a temporary one has to
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,176,// be created
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,177,ExecutorService tempExec;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,178,executor = getExternalExecutor();
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,179,if (executor == null) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,180,executor = tempExec = createExecutor();
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,181,} else {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,182,tempExec = null;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,185,future = executor.submit(createTask(tempExec));
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,187,return true;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,190,return false;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,194,* Returns the result of the background initialization. This method blocks
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,195,* until initialization is complete. If the background processing caused a
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,196,"* runtime exception, it is directly thrown by this method. Checked"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,197,"* exceptions, including {@code InterruptedException} are wrapped in a"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,198,* {@link ConcurrentException}. Calling this method before {@link #start()}
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,199,* was called causes an {@code IllegalStateException} exception to be
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,200,* thrown.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,202,* @return the object produced by this initializer
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,203,* @throws ConcurrentException if a checked exception occurred during
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,204,* background processing
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,205,* @throws IllegalStateException if {@link #start()} has not been called
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,207,public T get() throws ConcurrentException {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,208,try {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,209,return getFuture().get();
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,210,} catch (ExecutionException execex) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,211,ConcurrentUtils.handleCause(execex);
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,212,return null; // should not be reached
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,213,} catch (InterruptedException iex) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,214,// reset interrupted state
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,215,Thread.currentThread().interrupt();
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,216,throw new ConcurrentException(iex);
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,221,* Returns the {@code Future} object that was created when {@link #start()}
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,222,* was called. Therefore this method can only be called after {@code
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,223,* start()}.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,225,* @return the {@code Future} object wrapped by this initializer
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,226,* @throws IllegalStateException if {@link #start()} has not been called
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,228,public synchronized Future<T> getFuture() {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,229,if (future == null) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,230,"throw new IllegalStateException(""start() must be called first!"");"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,233,return future;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,237,* Returns the {@code ExecutorService} that is actually used for executing
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,238,* the background task. This method can be called after {@link #start()}
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,239,* (before {@code start()} it returns <b>null</b>). If an external executor
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,240,"* was set, this is also the active executor. Otherwise this method returns"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,241,* the temporary executor that was created by this object.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,243,* @return the {@code ExecutorService} for executing the background task
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,245,protected synchronized final ExecutorService getActiveExecutor() {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,246,return executor;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,250,* Returns the number of background tasks to be created for this
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,251,* initializer. This information is evaluated when a temporary {@code
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,252,* ExecutorService} is created. This base implementation returns 1. Derived
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,253,* classes that do more complex background processing can override it. This
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,254,* method is called from a synchronized block by the {@link #start()}
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,255,* method. Therefore overriding methods should be careful with obtaining
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,256,* other locks and return as fast as possible.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,258,* @return the number of background tasks required by this initializer
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,260,protected int getTaskCount() {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,261,return 1;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,265,* Performs the initialization. This method is called in a background task
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,266,* when this {@code BackgroundInitializer} is started. It must be
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,267,* implemented by a concrete subclass. An implementation is free to perform
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,268,* arbitrary initialization. The object returned by this method can be
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,269,* queried using the {@link #get()} method.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,271,* @return a result object
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,272,* @throws Exception if an error occurs
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,274,protected abstract T initialize() throws Exception;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,277,* Creates a task for the background initialization. The {@code Callable}
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,278,* object returned by this method is passed to the {@code ExecutorService}.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,279,* This implementation returns a task that invokes the {@link #initialize()}
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,280,"* method. If a temporary {@code ExecutorService} is used, it is destroyed"
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,281,* at the end of the task.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,283,* @param execDestory the {@code ExecutorService} to be destroyed by the
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,284,* task
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,285,* @return a task for the background initialization
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,287,private Callable<T> createTask(ExecutorService execDestroy) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,288,return new InitializationTask(execDestroy);
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,292,* Creates the {@code ExecutorService} to be used. This method is called if
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,293,* no {@code ExecutorService} was provided at construction time.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,295,* @return the {@code ExecutorService} to be used
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,297,private ExecutorService createExecutor() {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,298,return Executors.newFixedThreadPool(getTaskCount());
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,301,private class InitializationTask implements Callable<T> {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,302,/** Stores the executor service to be destroyed at the end. */
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,303,private final ExecutorService executor;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,306,* Creates a new instance of {@code InitializationTask} and initializes
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,307,* it with the {@code ExecutorService} to be destroyed at the end.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,309,* @param exec the {@code ExecutorService}
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,311,public InitializationTask(ExecutorService exec) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,312,executor = exec;
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,316,* Initiates initialization and returns the result.
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,318,* @return the result object
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,319,* @throws Exception if an error occurs
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,321,public T call() throws Exception {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,322,try {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,323,return initialize();
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,324,} finally {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,325,if (executor != null) {
True,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/BackgroundInitializer.java,326,executor.shutdown();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,17,package org.apache.commons.lang.concurrent;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,19,import java.util.concurrent.CountDownLatch;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,20,import java.util.concurrent.ExecutorService;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,21,import java.util.concurrent.Executors;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,22,import java.util.concurrent.TimeUnit;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,23,import java.util.concurrent.atomic.AtomicReference;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,27,public class BackgroundInitializerTest extends TestCase {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,29,* Helper method for checking whether the initialize() method was correctly
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,30,* called. start() must already have been invoked.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,32,* @param init the initializer to test
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,34,private void checkInitialize(BackgroundInitializerTestImpl init) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,35,try {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,36,Integer result = init.get();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,37,"assertEquals(""Wrong result"", 1, result.intValue());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,38,"assertEquals(""Wrong number of invocations"", 1, init.initializeCalls);"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,39,"assertNotNull(""No future"", init.getFuture());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,40,} catch (ConcurrentException cex) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,41,"fail(""Unexpected exception: "" + cex);"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,46,* Tests whether initialize() is invoked.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,48,public void testInitialize() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,49,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,50,init.start();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,51,checkInitialize(init);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,55,* Tries to obtain the executor before start(). It should not have been
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,56,* initialized yet.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,58,public void testGetActiveExecutorBeforeStart() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,59,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,60,"assertNull(""Got an executor"", init.getActiveExecutor());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,64,* Tests whether an external executor is correctly detected.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,66,public void testGetActiveExecutorExternal() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,67,ExecutorService exec = Executors.newSingleThreadExecutor();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,68,try {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,69,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,70,exec);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,71,init.start();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,72,"assertSame(""Wrong executor"", exec, init.getActiveExecutor());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,73,checkInitialize(init);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,74,} finally {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,75,exec.shutdown();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,80,* Tests getActiveExecutor() for a temporary executor.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,82,public void testGetActiveExecutorTemp() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,83,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,84,init.start();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,85,"assertNotNull(""No active executor"", init.getActiveExecutor());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,86,checkInitialize(init);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,90,* Tests the execution of the background task if a temporary executor has to
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,91,* be created.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,93,public void testInitializeTempExecutor() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,94,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,95,"assertTrue(""Wrong result of start()"", init.start());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,96,checkInitialize(init);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,97,"assertTrue(""Executor not shutdown"", init.getActiveExecutor()"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,98,.isShutdown());
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,102,* Tests whether an external executor can be set using the
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,103,* setExternalExecutor() method.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,105,public void testSetExternalExecutor() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,106,ExecutorService exec = Executors.newCachedThreadPool();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,107,try {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,108,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,109,init.setExternalExecutor(exec);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,110,"assertEquals(""Wrong executor service"", exec, init"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,111,.getExternalExecutor());
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,112,"assertTrue(""Wrong result of start()"", init.start());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,113,"assertSame(""Wrong active executor"", exec, init.getActiveExecutor());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,114,checkInitialize(init);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,115,"assertFalse(""Executor was shutdown"", exec.isShutdown());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,116,} finally {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,117,exec.shutdown();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,122,* Tests that setting an executor after start() causes an exception.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,124,public void testSetExternalExecutorAfterStart() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,125,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,126,init.start();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,127,try {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,128,init.setExternalExecutor(Executors.newSingleThreadExecutor());
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,129,"fail(""Could set executor after start()!"");"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,130,} catch (IllegalStateException istex) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,131,init.get();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,136,* Tests invoking start() multiple times. Only the first invocation should
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,137,* have an effect.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,139,public void testStartMultipleTimes() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,140,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,141,"assertTrue(""Wrong result for start()"", init.start());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,142,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,143,"assertFalse(""Could start again"", init.start());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,145,checkInitialize(init);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,149,* Tests calling get() before start(). This should cause an exception.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,151,public void testGetBeforeStart() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,152,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,153,try {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,154,init.get();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,155,"fail(""Could call get() before start()!"");"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,156,} catch (IllegalStateException istex) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,157,// ok
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,162,* Tests the get() method if background processing causes a runtime
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,163,* exception.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,165,public void testGetRuntimeException() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,166,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,167,RuntimeException rex = new RuntimeException();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,168,init.ex = rex;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,169,init.start();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,170,try {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,171,init.get();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,172,"fail(""Exception not thrown!"");"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,173,} catch (Exception ex) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,174,"assertEquals(""Runtime exception not thrown"", rex, ex);"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,179,* Tests the get() method if background processing causes a checked
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,180,* exception.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,182,public void testGetCheckedException() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,183,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,184,Exception ex = new Exception();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,185,init.ex = ex;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,186,init.start();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,187,try {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,188,init.get();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,189,"fail(""Exception not thrown!"");"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,190,} catch (ConcurrentException cex) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,191,"assertEquals(""Exception not thrown"", ex, cex.getCause());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,196,* Tests the get() method if waiting for the initialization is interrupted.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,198,public void testGetInterruptedException() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,199,ExecutorService exec = Executors.newSingleThreadExecutor();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,200,final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,201,exec);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,202,final CountDownLatch latch1 = new CountDownLatch(1);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,203,init.shouldSleep = true;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,204,init.start();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,205,final AtomicReference<InterruptedException> iex = new AtomicReference<InterruptedException>();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,206,Thread getThread = new Thread() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,207,@Override
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,208,public void run() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,209,try {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,210,init.get();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,211,} catch (ConcurrentException cex) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,212,if (cex.getCause() instanceof InterruptedException) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,213,iex.set((InterruptedException) cex.getCause());
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,215,} finally {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,216,"assertTrue(""Thread not interrupted"", isInterrupted());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,217,latch1.countDown();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,221,getThread.start();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,222,getThread.interrupt();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,223,latch1.await();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,224,exec.shutdownNow();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,225,"exec.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,226,"assertNotNull(""No interrupted exception"", iex.get());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,230,* Tests isStarted() before start() was called.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,232,public void testIsStartedFalse() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,233,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,234,"assertFalse(""Already started"", init.isStarted());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,238,* Tests isStarted() after start().
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,240,public void testIsStartedTrue() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,241,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,242,init.start();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,243,"assertTrue(""Not started"", init.isStarted());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,247,* Tests isStarted() after the background task has finished.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,249,public void testIsStartedAfterGet() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,250,BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,251,init.start();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,252,checkInitialize(init);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,253,"assertTrue(""Not started"", init.isStarted());"
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,257,* A concrete implementation of BackgroundInitializer. It also overloads
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,258,* some methods that simplify testing.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,260,private static class BackgroundInitializerTestImpl extends
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,261,BackgroundInitializer<Integer> {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,262,/** An exception to be thrown by initialize(). */
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,263,Exception ex;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,265,/** A flag whether the background task should sleep a while. */
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,266,boolean shouldSleep;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,268,/** The number of invocations of initialize(). */
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,269,volatile int initializeCalls;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,271,public BackgroundInitializerTestImpl() {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,272,super();
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,275,public BackgroundInitializerTestImpl(ExecutorService exec) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,276,super(exec);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,280,* Records this invocation. Optionally throws an exception or sleeps a
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,281,* while.
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,283,@Override
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,284,protected Integer initialize() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,285,if (ex != null) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,286,throw ex;
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,288,if (shouldSleep) {
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,289,Thread.sleep(60000L);
True,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/BackgroundInitializerTest.java,291,return ++initializeCalls;

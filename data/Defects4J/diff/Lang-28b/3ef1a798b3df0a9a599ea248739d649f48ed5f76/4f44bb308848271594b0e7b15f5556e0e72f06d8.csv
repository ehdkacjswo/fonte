is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,17,package org.apache.commons.lang.concurrent;
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,19,import java.util.concurrent.ExecutionException;
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,24,* Test class for {@link ConcurrentUtils}.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,26,* @version $Id$
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,28,public class ConcurrentUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,30,* Tests creating a ConcurrentException with a runtime exception as cause.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,32,public void testConcurrentExceptionCauseUnchecked() {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,33,try {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,34,new ConcurrentException(new RuntimeException());
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,35,"fail(""Could create ConcurrentException with unchecked cause!"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,36,} catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,37,// ok
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,42,* Tests creating a ConcurrentException with an error as cause.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,44,public void testConcurrentExceptionCauseError() {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,45,try {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,46,"new ConcurrentException(""An error"", new Error());"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,47,"fail(""Could create ConcurrentException with an error cause!"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,48,} catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,49,// ok
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,54,* Tests creating a ConcurrentException with null as cause.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,56,public void testConcurrentExceptionCauseNull() {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,57,try {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,58,new ConcurrentException(null);
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,59,"fail(""Could create ConcurrentException with null cause!"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,60,} catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,61,// ok
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,66,* Tests extractCause() for a null exception.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,68,public void testExtractCauseNull() {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,69,"assertNull(""Non null result"", ConcurrentUtils.extractCause(null));"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,73,* Tests extractCause() if the cause of the passed in exception is null.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,75,public void testExtractCauseNullCause() {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,76,"assertNull(""Non null result"", ConcurrentUtils"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,77,".extractCause(new ExecutionException(""Test"", null)));"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,81,* Tests extractCause() if the cause is an error.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,83,public void testExtractCauseError() {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,84,"Error err = new AssertionError(""Test"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,85,try {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,86,ConcurrentUtils.extractCause(new ExecutionException(err));
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,87,"fail(""Error not thrown!"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,88,} catch (Error e) {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,89,"assertEquals(""Wrong error"", err, e);"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,94,* Tests extractCause() if the cause is an unchecked exception.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,96,public void testExtractCauseUnchecked() {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,97,"RuntimeException rex = new RuntimeException(""Test"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,98,try {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,99,ConcurrentUtils.extractCause(new ExecutionException(rex));
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,100,"fail(""Runtime exception not thrown!"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,101,} catch (RuntimeException r) {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,102,"assertEquals(""Wrong exception"", rex, r);"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,107,* Tests extractCause() if the cause is a checked exception.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,109,public void testExtractCauseChecked() {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,110,"Exception ex = new Exception(""Test"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,111,ConcurrentException cex = ConcurrentUtils
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,112,.extractCause(new ExecutionException(ex));
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,113,"assertSame(""Wrong cause"", ex, cex.getCause());"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,117,* Tests handleCause() if the cause is an error.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,119,public void testHandleCauseError() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,120,"Error err = new AssertionError(""Test"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,121,try {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,122,ConcurrentUtils.handleCause(new ExecutionException(err));
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,123,"fail(""Error not thrown!"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,124,} catch (Error e) {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,125,"assertEquals(""Wrong error"", err, e);"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,130,* Tests handleCause() if the cause is an unchecked exception.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,132,public void testHandleCauseUnchecked() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,133,"RuntimeException rex = new RuntimeException(""Test"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,134,try {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,135,ConcurrentUtils.handleCause(new ExecutionException(rex));
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,136,"fail(""Runtime exception not thrown!"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,137,} catch (RuntimeException r) {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,138,"assertEquals(""Wrong exception"", rex, r);"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,143,* Tests handleCause() if the cause is a checked exception.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,145,public void testHandleCauseChecked() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,146,"Exception ex = new Exception(""Test"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,147,try {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,148,ConcurrentUtils.handleCause(new ExecutionException(ex));
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,149,"fail(""ConcurrentException not thrown!"");"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,150,} catch (ConcurrentException cex) {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,151,"assertEquals(""Wrong cause"", ex, cex.getCause());"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,156,* Tests handleCause() for a null parameter or a null cause. In this case
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,157,* the method should do nothing. We can only test that no exception is
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,158,* thrown.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,160,public void testHandleCauseNull() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,161,ConcurrentUtils.handleCause(null);
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,162,"ConcurrentUtils.handleCause(new ExecutionException(""Test"", null));"

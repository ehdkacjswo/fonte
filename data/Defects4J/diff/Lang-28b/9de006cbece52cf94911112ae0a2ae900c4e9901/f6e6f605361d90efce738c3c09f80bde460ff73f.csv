is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,609, Creates a parser object for tokenizing the input data.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,610,* Replaces the occurrences of all variables in the given source array by
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,611,* their current values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,612,            the input data
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,614,*            a character array with the source data
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,615,* @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,617,public String replace(char[] data) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,618,"return replace(data, 0, data == null ? 0 : data.length);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,622,* Replaces the occurrences of all variables in the given source array by their
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,623,* current values. Only the specified portion of the array will be processed.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,625,* @param data
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,626,*            a character array with the source data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,614,            the offset in the source array
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,628,*            the start offset; processing will start at this position
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,616,            the length of the data to be processed
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,617, @return the parser
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,630,*            the length of the portion to be processed
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,631,* @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,619,"rotected VariableParser createParser(char[] data, int offset, int length) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,620,eturn new VariableParser(
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,621,"trMatcher.stringMatcher(getVariablePrefix()),"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,622,"trMatcher.stringMatcher(getVariableSuffix()),"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,623,"trMatcher.stringMatcher(String.valueOf(getEscapeCharacter()) + getVariablePrefix()), offset, length);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,633,"public String replace(char[] data, int offset, int length) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,634,"Object result = doReplace(data, offset, length, null, null);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,635,return result == null ? null : result.toString();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,627," Recursive handler for multiple levels of interpolation. This is the main interpolation method, which resolves the"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,628, values of all variable references contained in the passed in text.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,639,* Replaces the occurrences of all variables in the given source data by
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,640,* their current values.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,642,* @param source
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,643,*            the text to be interpolated; this can be an arbitrary object
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,644,*            whose <code>toString()</code> method will be called
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,645,* @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,647,public String replace(Object source) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,648,Object result = replaceObject(source);
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,649,return result == null ? null : result.toString();
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,653,* Replaces the occurrences of all variables in the given source data by
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,654,* their current values. If the source consists only of a single variable
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,655,"* reference, this method directly returns the value of this variable"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,656,* (which can be an arbitrary object). If the source contains multiple
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,657,"* variable references or static text, the return value will always be a"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,658,* String with the concatenation of all these elements.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,660,* @param source
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,661,*            the text to be interpolated; this can be an arbitrary object
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,662,*            whose <code>toString()</code> method will be called
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,663,* @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,665,public Object replaceObject(Object source) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,666,"return doReplace(source, null);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,671,* Recursive handler for multiple levels of interpolation. This is the main
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,672,* interpolation method for interpolating objects. It is called for recursively
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,673,* processing the values of resolved variables.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,675,* @param obj
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,676,*            the data to be interpolated (as object)
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,677,* @param priorVariables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,678,*            keeps track of the replaced variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,679,* @return the result of the interpolation process
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,681,"private Object doReplace(Object obj, List priorVariables) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,682,if (obj == null) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,683,return null;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,685,char[] data = obj.toString().toCharArray();
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,686,"return doReplace(data, 0, data.length, obj, priorVariables);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,690,* Recursive handler for multiple levels of interpolation. This is the main
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,691,"* interpolation method, which resolves the values of all variable references"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,692,* contained in the passed in text.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,723, Recursive handler for multiple levels of interpolation. This is the main interpolation method for interpolating
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,724, objects. It is called for recursively processing the values of resolved variables.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,787,* Gets the length from the parsed token.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,726, @param obj
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,727,            the data to be interpolated (as object)
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,728, @param priorVariables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,729,            keeps track of the replaced variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,730, @return the result of the interpolation process
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,789,* @param tok  the token
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,790,* @return the length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,732,"rivate Object doReplace(Object obj, List priorVariables) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,733,f (obj == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,734,eturn null;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,736,har[] data = obj.toString().toCharArray();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,737,"eturn doReplace(data, 0, data.length, obj, priorVariables);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,745, Replaces the occurrences of all variables in the given source array by their current values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,747, @param data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,748,            a character array with the source data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,749, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,751,ublic String replace(char[] data) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,752,"eturn replace(data, 0, data == null ? 0 : data.length);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,756, Replaces the occurrences of all variables in the given source array by their current values. Only the specified
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,757, portion of the array will be processed.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,797,* Creates a parser object for tokenizing the input data.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,760,            a character array with the source data
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,800,*            the input data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,762,            the start offset; processing will start at this position
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,802,*            the offset in the source array
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,764,            the length of the portion to be processed
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,765, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,767,"ublic String replace(char[] data, int offset, int length) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,768,"bject result = doReplace(data, offset, length, null, null);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,769,eturn result == null ? null : result.toString();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,773, Replaces the occurrences of all variables in the given source data by their current values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,775, @param source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,776,            the text to be interpolated; this can be an arbitrary object whose <code>toString()</code> method
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,777,            will be called
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,778, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,780,ublic String replace(Object source) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,781,bject result = replaceObject(source);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,782,eturn result == null ? null : result.toString();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,786, Replaces the occurrences of all variables in the given source data by their current values. If the source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,787," consists only of a single variable reference, this method directly returns the value of this variable (which can"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,788," be an arbitrary object). If the source contains multiple variable references or static text, the return value"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,789, will always be a String with the concatenation of all these elements.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,791, @param source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,792,            the text to be interpolated; this can be an arbitrary object whose <code>toString()</code> method
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,793,            will be called
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,794, @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,804,*            the length of the data to be processed
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,805,* @return the parser
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,796,ublic Object replaceObject(Object source) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,797,"eturn doReplace(source, null);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,807,"protected VariableParser createParser(char[] data, int offset, int length) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,808,return new VariableParser(
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,809,"StrMatcher.stringMatcher(getVariablePrefix()),"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,810,"StrMatcher.stringMatcher(getVariableSuffix()),"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,811,"StrMatcher.stringMatcher(String.valueOf(getEscapeCharacter()) + getVariablePrefix()), offset, length);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,801, Resolves the specified variable. This method is called whenever a variable reference is detected in the source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,802, text. It is passed the variable's name and must return the corresponding value. This implementation accesses the
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,803, value map using the variable's name as key. Derived classes may override this method to implement a different
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,804, strategy for resolving variables.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,815,* Resolves the specified variable. This method is called whenever a variable
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,816,* reference is detected in the source text. It is passed the variable's name
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,817,* and must return the corresponding value. This implementation accesses the
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,818,* value map using the variable's name as key. Derived classes may override
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,819,* this method to implement a different strategy for resolving variables.

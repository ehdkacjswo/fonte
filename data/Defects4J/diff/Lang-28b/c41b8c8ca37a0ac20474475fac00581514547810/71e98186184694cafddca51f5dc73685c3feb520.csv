is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,259,rivate static final Map cEnumClasses = new WeakHashMap();
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,259,private static Map cEnumClasses
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,260,"// LANG-334: To avoid exposing a mutating map,"
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,261,// we copy it each time we add to it. This is cheaper than
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,262,// using a synchronized map since we are almost entirely reads
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,263,= new WeakHashMap();
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,353,/ create entry
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,354,ntry entry = (Entry) cEnumClasses.get(enumClass);
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,355,f (entry == null) {
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,356,ntry = createEntry(enumClass);
False,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,357,"EnumClasses.put(enumClass, entry);"
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,357,Entry entry;
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,358,synchronized( Enum.class ) { // LANG-334
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,359,// create entry
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,360,entry = (Entry) cEnumClasses.get(enumClass);
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,361,if (entry == null) {
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,362,entry = createEntry(enumClass);
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,363,Map myMap = new WeakHashMap( cEnumClasses );
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,364,"myMap.put(enumClass, entry);"
True,src/java/org/apache/commons/lang/enum/Enum.java,src/java/org/apache/commons/lang/enum/Enum.java,365,cEnumClasses = myMap;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,305,rivate static final Map cEnumClasses = new WeakHashMap();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,305,private static Map cEnumClasses
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,306,"// LANG-334: To avoid exposing a mutating map,"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,307,// we copy it each time we add to it. This is cheaper than
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,308,// using a synchronized map since we are almost entirely reads
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,309,= new WeakHashMap();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,348,uper();
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,352,super();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,399,/ create entry
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,400,ntry entry = (Entry) cEnumClasses.get(enumClass);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,401,f (entry == null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,402,ntry = createEntry(enumClass);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,403,"EnumClasses.put(enumClass, entry);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,403,Entry entry;
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,404,synchronized( Enum.class ) { // LANG-334
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,405,// create entry
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,406,entry = (Entry) cEnumClasses.get(enumClass);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,407,if (entry == null) {
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,408,entry = createEntry(enumClass);
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,409,Map myMap = new WeakHashMap( cEnumClasses );
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,410,"myMap.put(enumClass, entry);"
True,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,411,cEnumClasses = myMap;

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,5, reserved.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,9, are met:
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,17,    distribution.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,20,"    any, must include the following acknowlegement:"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,54,ackage org.apache.commons.lang.time;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,56,mport java.util.Date;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,57,mport java.util.Calendar;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,58,mport java.util.GregorianCalendar;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,59,mport java.util.Locale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,60,mport java.util.TimeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,61,mport java.util.List;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,62,mport java.util.ArrayList;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,63,mport java.util.Map;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,64,mport java.util.HashMap;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,65,mport java.text.DateFormatSymbols;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,66,mport java.text.DateFormat;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,67,mport java.text.SimpleDateFormat;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,70," Similar to {@link java.text.SimpleDateFormat}, but faster and thread-safe."
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,71," Only formatting is supported, but all patterns are compatible with"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,72, SimpleDateFormat. [Code originally taken from the open source TreeTrove
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,73, project.]
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,75, @author Brian S O'Neill
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,76, @author Sean Schofield
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,77, @since 2.0
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,78," @version $Id: FastDateFormat.java,v 1.1 2003/01/07 19:55:55 bayard Exp $"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,80,ublic class FastDateFormat {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,81,** Style pattern */
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,82,ublic static final Object
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,83,"ULL = new Integer(SimpleDateFormat.FULL),"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,84,"ONG = new Integer(SimpleDateFormat.LONG),"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,85,"EDIUM = new Integer(SimpleDateFormat.MEDIUM),"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,86,HORT = new Integer(SimpleDateFormat.SHORT);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,88,rivate static final double LOG_10 = Math.log(10);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,90,rivate static String cDefaultPattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,91,rivate static TimeZone cDefaultTimeZone = TimeZone.getDefault();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,93,rivate static Map cTimeZoneDisplayCache = new HashMap();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,95,rivate static Map cInstanceCache = new HashMap(7);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,96,rivate static Map cDateInstanceCache = new HashMap(7);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,97,rivate static Map cTimeInstanceCache = new HashMap(7);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,98,rivate static Map cDateTimeInstanceCache = new HashMap(7);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,100,ublic static FastDateFormat getInstance() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,101,"/return getInstance(getDefaultPattern(), null, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,102,"eturn getInstance(getDefaultPattern(), null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,106, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,108,ublic static FastDateFormat getInstance(String pattern) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,109,"/return getInstance(pattern, null, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,110,"eturn getInstance(pattern, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,114, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,115," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,116, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,118,"ublic static FastDateFormat getInstance(String pattern, TimeZone timeZone) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,119,"/return getInstance(pattern, timeZone, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,120,"eturn getInstance(pattern, timeZone, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,124, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,125," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,127,"ublic static FastDateFormat getInstance(String pattern, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,128,"/return getInstance(pattern, null, locale, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,129,"eturn getInstance(pattern, null, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,133, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,134," @param symbols optional date format symbols, overrides symbols for"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,135, system locale
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,138,ublic static FastDateFormat getInstance
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,139,"String pattern, DateFormatSymbols symbols)"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,140,hrows IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,142,"eturn getInstance(pattern, null, null, symbols);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,147, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,148," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,149, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,150," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,152,"ublic static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,153,"/return getInstance(pattern, timeZone, locale, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,154,bject key = pattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,156,f (timeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,157,"ey = new Pair(key, timeZone);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,159,f (locale != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,160,"ey = new Pair(key, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,163,astDateFormat format = (FastDateFormat)cInstanceCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,164,f (format == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,165,f (locale == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,166,ocale = Locale.getDefault();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,169,"ormat = new FastDateFormat(pattern, timeZone, locale, new DateFormatSymbols(locale));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,170,"InstanceCache.put(key, format);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,172,eturn format;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,176, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,177," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,178, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,179," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,180," @param symbols optional date format symbols, overrides symbols for"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,181, provided locale
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,184,ublic static synchronized FastDateFormat getInstance
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,185,"String pattern, TimeZone timeZone, Locale locale,"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,186,ateFormatSymbols symbols)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,187,hrows IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,189,bject key = pattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,191,f (timeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,192,"ey = new Pair(key, timeZone);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,194,f (locale != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,195,"ey = new Pair(key, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,197,f (symbols != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,198,"ey = new Pair(key, symbols);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,201,astDateFormat format = (FastDateFormat)cInstanceCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,202,f (format == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,203,f (locale == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,204,ocale = Locale.getDefault();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,206,f (symbols == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,207,ymbols = new DateFormatSymbols(locale);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,209,"ormat = new FastDateFormat(pattern, timeZone, locale, symbols);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,210,"InstanceCache.put(key, format);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,212,eturn format;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,217," @param style date style: FULL, LONG, MEDIUM, or SHORT (corresponds to those in java.text.DateFormat)"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,218," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,219, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,220," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,222,"ublic static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,223,bject key = new Integer(style);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,225,f (timeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,226,"ey = new Pair(key, timeZone);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,228,f (locale == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,229,"ey = new Pair(key, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,232,astDateFormat format = (FastDateFormat)cDateInstanceCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,234,f (format == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,235,f (locale == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,236,ocale = Locale.getDefault();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,239,ry {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,240,"tring pattern = ((SimpleDateFormat)DateFormat.getDateInstance(style, locale)).toPattern();"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,241,"ormat = getInstance(pattern, timeZone, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,242,"DateInstanceCache.put(key, format);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,244,atch (ClassCastException e) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,245,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,246,"""No date pattern for locale: "" + locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,250,eturn format;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,254," @param style time style: FULL, LONG, MEDIUM, or SHORT"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,255," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,256, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,257," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,259,"ublic static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,260,bject key = new Integer(style);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,262,f (timeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,263,"ey = new Pair(key, timeZone);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,265,f (locale != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,266,"ey = new Pair(key, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,269,astDateFormat format = (FastDateFormat)cTimeInstanceCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,271,f (format == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,273,f (locale == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,274,ocale = Locale.getDefault();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,277,ry {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,278,"tring pattern = ((SimpleDateFormat)DateFormat.getTimeInstance(style, locale)).toPattern();"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,279,"ormat = getInstance(pattern, timeZone, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,280,"TimeInstanceCache.put(key, format);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,282,atch (ClassCastException e) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,283,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,284,"""No date pattern for locale: "" + locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,288,eturn format;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,292," @param dateStyle date style: FULL, LONG, MEDIUM, or SHORT"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,293," @param timeStyle time style: FULL, LONG, MEDIUM, or SHORT"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,294," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,295, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,296," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,298,"ublic static synchronized FastDateFormat getDateTimeInstance(Object dateStyle, Object timeStyle,"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,299,"imeZone timeZone, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,301,"bject key = new Pair(dateStyle, timeStyle);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,303,f (timeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,304,"ey = new Pair(key, timeZone);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,306,f (locale != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,307,"ey = new Pair(key, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,310,astDateFormat format =
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,311,FastDateFormat)cDateTimeInstanceCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,313,f (format == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,314,nt ds;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,315,ry {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,316,s = ((Integer)dateStyle).intValue();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,318,atch (ClassCastException e) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,319,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,320,"""Illegal date style: "" + dateStyle);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,323,nt ts;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,324,ry {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,325,s = ((Integer)timeStyle).intValue();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,327,atch (ClassCastException e) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,328,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,329,"""Illegal time style: "" + timeStyle);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,332,f (locale == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,333,ocale = Locale.getDefault();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,336,ry {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,337,"tring pattern = ((SimpleDateFormat)DateFormat.getDateTimeInstance(ds, ts, locale)).toPattern();"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,338,"ormat = getInstance(pattern, timeZone, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,339,"DateTimeInstanceCache.put(key, format);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,341,atch (ClassCastException e) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,342,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,343,"""No date time pattern for locale: "" + locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,347,eturn format;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,350,"tatic synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,351,"bject key = new TimeZoneDisplayKey(tz, daylight, style, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,352,tring value = (String)cTimeZoneDisplayCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,353,f (value == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,354,"/ This is a very slow call, so cache the results."
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,355,"alue = tz.getDisplayName(daylight, style, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,356,"TimeZoneDisplayCache.put(key, value);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,358,eturn value;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,361,rivate static synchronized String getDefaultPattern() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,362,f (cDefaultPattern == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,363,DefaultPattern = new SimpleDateFormat().toPattern();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,365,eturn cDefaultPattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,369, Returns a list of Rules.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,371,"rivate static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,372,ist rules = new ArrayList();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,374,tring[] ERAs = symbols.getEras();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,375,tring[] months = symbols.getMonths();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,376,tring[] shortMonths = symbols.getShortMonths();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,377,tring[] weekdays = symbols.getWeekdays();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,378,tring[] shortWeekdays = symbols.getShortWeekdays();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,379,tring[] AmPmStrings = symbols.getAmPmStrings();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,381,nt length = pattern.length();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,382,nt[] indexRef = new int[1];
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,384,or (int i=0; i<length; i++) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,385,ndexRef[0] = i;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,386,"tring token = parseToken(pattern, indexRef);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,387, = indexRef[0];
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,389,nt tokenLen = token.length();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,390,f (tokenLen == 0) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,391,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,394,ule rule;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,395,har c = token.charAt(0);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,397,witch (c) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,398,ase 'G': // era designator (text)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,399,"ule = new TextField(Calendar.ERA, ERAs);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,400,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,401,ase 'y': // year (number)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,402,f (tokenLen >= 4) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,403,ule = new UnpaddedNumberField(Calendar.YEAR);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,405,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,406,ule = new TwoDigitYearField();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,408,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,409,ase 'M': // month in year (text and number)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,410,f (tokenLen >= 4) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,411,"ule = new TextField(Calendar.MONTH, months);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,413,lse if (tokenLen == 3) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,414,"ule = new TextField(Calendar.MONTH, shortMonths);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,416,lse if (tokenLen == 2) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,417,ule = new TwoDigitMonthField();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,419,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,420,ule = new UnpaddedMonthField();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,422,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,423,ase 'd': // day in month (number)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,424,"ule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,425,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,426,"ase 'h': // hour in am/pm (number, 1..12)"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,427,ule = new TwelveHourField
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,428,"selectNumberRule(Calendar.HOUR, tokenLen));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,429,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,430,"ase 'H': // hour in day (number, 0..23)"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,431,"ule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,432,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,433,ase 'm': // minute in hour (number)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,434,"ule = selectNumberRule(Calendar.MINUTE, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,435,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,436,ase 's': // second in minute (number)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,437,"ule = selectNumberRule(Calendar.SECOND, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,438,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,439,ase 'S': // millisecond (number)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,440,"ule = selectNumberRule(Calendar.MILLISECOND, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,441,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,442,ase 'E': // day in week (text)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,443,ule = new TextField
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,444,"Calendar.DAY_OF_WEEK,"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,445,okenLen < 4 ? shortWeekdays : weekdays);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,446,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,447,ase 'D': // day in year (number)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,448,"ule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,449,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,450,ase 'F': // day of week in month (number)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,451,ule = selectNumberRule
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,452,"Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,453,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,454,ase 'w': // week in year (number)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,455,"ule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,456,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,457,ase 'W': // week in month (number)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,458,"ule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,459,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,460,ase 'a': // am/pm marker (text)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,461,"ule = new TextField(Calendar.AM_PM, AmPmStrings);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,462,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,463,ase 'k': // hour in day (1..24)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,464,ule = new TwentyFourHourField
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,465,"selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,466,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,467,ase 'K': // hour in am/pm (0..11)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,468,"ule = selectNumberRule(Calendar.HOUR, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,469,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,470,ase 'z': // time zone (text)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,471,f (tokenLen >= 4) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,472,"ule = new TimeZoneRule(timeZone, locale, TimeZone.LONG);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,474,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,475,"ule = new TimeZoneRule(timeZone, locale, TimeZone.SHORT);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,477,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,478,ase '\'': // literal text
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,479,tring sub = token.substring(1);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,480,f (sub.length() == 1) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,481,ule = new CharacterLiteral(sub.charAt(0));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,483,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,484,ule = new StringLiteral(new String(sub));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,486,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,487,efault:
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,488,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,489,"""Illegal pattern component: "" + token);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,492,ules.add(rule);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,495,eturn rules;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,498,"rivate static String parseToken(String pattern, int[] indexRef) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,499,tringBuffer buf = new StringBuffer();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,501,nt i = indexRef[0];
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,502,nt length = pattern.length();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,504,har c = pattern.charAt(i);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,505,f (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,506,"/ Scan a run of the same character, which indicates a time"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,507,/ pattern.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,508,uf.append(c);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,510,hile (i + 1 < length) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,511,har peek = pattern.charAt(i + 1);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,512,f (peek == c) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,513,uf.append(c);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,514,++;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,516,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,517,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,521,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,522,/ This will identify token as text.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,523,uf.append('\'');
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,525,oolean inLiteral = false;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,527,or (; i < length; i++) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,528, = pattern.charAt(i);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,530,f (c == '\'') {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,531,f (i + 1 < length && pattern.charAt(i + 1) == '\'') {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,532,/ '' is treated as escaped '
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,533,++;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,534,uf.append(c);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,536,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,537,nLiteral = !inLiteral;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,540,lse if (!inLiteral &&
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,541,c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,542,--;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,543,reak;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,545,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,546,uf.append(c);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,551,ndexRef[0] = i;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,552,eturn buf.toString();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,555,"rivate static NumberRule selectNumberRule(int field, int padding) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,556,witch (padding) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,557,ase 1:
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,558,eturn new UnpaddedNumberField(field);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,559,ase 2:
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,560,eturn new TwoDigitNumberField(field);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,561,efault:
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,562,"eturn new PaddedNumberField(field, padding);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,566,rivate final String mPattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,567,rivate final TimeZone mTimeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,568,rivate final Locale mLocale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,569,rivate final Rule[] mRules;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,570,rivate final int mMaxLengthEstimate;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,572,rivate FastDateFormat() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,573,"his(getDefaultPattern(), null, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,577, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,579,rivate FastDateFormat(String pattern) throws IllegalArgumentException {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,580,"his(pattern, null, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,584, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,585," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,586, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,588,"rivate FastDateFormat(String pattern, TimeZone timeZone) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,589,"his(pattern, timeZone, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,593, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,594," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,596,"rivate FastDateFormat(String pattern, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,597,"his(pattern, null, locale, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,601, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,602," @param symbols optional date format symbols, overrides symbols for"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,603, system locale
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,605,"rivate FastDateFormat(String pattern, DateFormatSymbols symbols) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,606,"his(pattern, null, null, symbols);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,610, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,611," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,612, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,613," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,615,"rivate FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,616,"his(pattern, timeZone, locale, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,620, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,621," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,622, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,623," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,624," @param symbols optional date format symbols, overrides symbols for"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,625, provided locale
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,627,"rivate FastDateFormat(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,628,f (locale == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,629,ocale = Locale.getDefault();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,632,Pattern = pattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,633,TimeZone = timeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,634,Locale = locale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,636,f (symbols == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,637,ymbols = new DateFormatSymbols(locale);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,640,"ist rulesList = parse(pattern, timeZone, locale, symbols);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,641,Rules = (Rule[])rulesList.toArray(new Rule[rulesList.size()]);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,643,nt len = 0;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,644,or (int i=mRules.length; --i >= 0; ) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,645,en += mRules[i].estimateLength();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,648,MaxLengthEstimate = len;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,651,ublic String format(Date date) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,652,alendar c = new GregorianCalendar(cDefaultTimeZone);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,653,.setTime(date);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,654,f (mTimeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,655,.setTimeZone(mTimeZone);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,657,"eturn applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,660,ublic String format(Calendar calendar) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,661,"eturn format(calendar, new StringBuffer(mMaxLengthEstimate))"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,662,toString();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,665,"ublic StringBuffer format(Date date, StringBuffer buf) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,666,alendar c = new GregorianCalendar(cDefaultTimeZone);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,667,.setTime(date);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,668,f (mTimeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,669,.setTimeZone(mTimeZone);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,671,"eturn applyRules(c, buf);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,674,"ublic StringBuffer format(Calendar calendar, StringBuffer buf) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,675,f (mTimeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,676,alendar = (Calendar)calendar.clone();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,677,alendar.setTimeZone(mTimeZone);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,679,"eturn applyRules(calendar, buf);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,682,"rivate StringBuffer applyRules(Calendar calendar, StringBuffer buf) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,683,ule[] rules = mRules;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,684,nt len = mRules.length;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,685,or (int i=0; i<len; i++) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,686,"ules[i].appendTo(buf, calendar);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,688,eturn buf;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,691,ublic String getPattern() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,692,eturn mPattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,696," Returns the time zone used by this formatter, or null if time zone of"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,697, formatted dates is used instead.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,699,ublic TimeZone getTimeZone() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,700,eturn mTimeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,703,ublic Locale getLocale() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,704,eturn mLocale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,708, Returns an estimate for the maximum length date that this date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,709, formatter will produce. The actual formatted length will almost always
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,710, be less than or equal to this amount.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,712,ublic int getMaxLengthEstimate() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,713,eturn mMaxLengthEstimate;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,716,rivate interface Rule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,717,nt estimateLength();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,719,"oid appendTo(StringBuffer buffer, Calendar calendar);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,722,rivate interface NumberRule extends Rule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,723,"oid appendTo(StringBuffer buffer, int value);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,726,rivate static class CharacterLiteral implements Rule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,727,rivate final char mValue;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,729,haracterLiteral(char value) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,730,Value = value;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,733,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,734,eturn 1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,737,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,738,uffer.append(mValue);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,742,rivate static class StringLiteral implements Rule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,743,rivate final String mValue;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,745,tringLiteral(String value) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,746,Value = value;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,749,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,750,eturn mValue.length();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,753,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,754,uffer.append(mValue);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,758,rivate static class TextField implements Rule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,759,rivate final int mField;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,760,rivate final String[] mValues;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,762,"extField(int field, String[] values) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,763,Field = field;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,764,Values = values;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,767,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,768,nt max = 0;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,769,or (int i=mValues.length; --i >= 0; ) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,770,nt len = mValues[i].length();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,771,f (len > max) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,772,ax = len;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,775,eturn max;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,778,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,779,uffer.append(mValues[calendar.get(mField)]);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,783,rivate static class UnpaddedNumberField implements NumberRule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,784,rivate final int mField;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,786,npaddedNumberField(int field) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,787,Field = field;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,790,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,791,eturn 4;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,794,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,795,"ppendTo(buffer, calendar.get(mField));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,798,"ublic final void appendTo(StringBuffer buffer, int value) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,799,f (value < 10) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,800,uffer.append((char)(value + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,802,lse if (value < 100) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,803,uffer.append((char)(value / 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,804,uffer.append((char)(value % 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,806,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,807,uffer.append(Integer.toString(value));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,812,rivate static class UnpaddedMonthField implements NumberRule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,813,npaddedMonthField() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,816,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,817,eturn 2;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,820,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,821,"ppendTo(buffer, calendar.get(Calendar.MONTH) + 1);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,824,"ublic final void appendTo(StringBuffer buffer, int value) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,825,f (value < 10) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,826,uffer.append((char)(value + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,828,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,829,uffer.append((char)(value / 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,830,uffer.append((char)(value % 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,835,rivate static class PaddedNumberField implements NumberRule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,836,rivate final int mField;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,837,rivate final int mSize;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,839,"addedNumberField(int field, int size) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,840,f (size < 3) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,841,/ Should use UnpaddedNumberField or TwoDigitNumberField.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,842,hrow new IllegalArgumentException();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,844,Field = field;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,845,Size = size;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,848,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,849,eturn 4;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,852,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,853,"ppendTo(buffer, calendar.get(mField));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,856,"ublic final void appendTo(StringBuffer buffer, int value) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,857,f (value < 100) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,858,or (int i = mSize; --i >= 2; ) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,859,uffer.append('0');
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,861,uffer.append((char)(value / 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,862,uffer.append((char)(value % 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,864,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,865,nt digits;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,866,f (value < 1000) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,867,igits = 3;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,869,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,870,igits = (int)(Math.log(value) / LOG_10) + 1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,872,or (int i = mSize; --i >= digits; ) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,873,uffer.append('0');
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,875,uffer.append(Integer.toString(value));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,880,rivate static class TwoDigitNumberField implements NumberRule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,881,rivate final int mField;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,883,woDigitNumberField(int field) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,884,Field = field;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,887,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,888,eturn 2;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,891,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,892,"ppendTo(buffer, calendar.get(mField));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,895,"ublic final void appendTo(StringBuffer buffer, int value) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,896,f (value < 100) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,897,uffer.append((char)(value / 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,898,uffer.append((char)(value % 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,900,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,901,uffer.append(Integer.toString(value));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,906,rivate static class TwoDigitYearField implements NumberRule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,907,woDigitYearField() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,910,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,911,eturn 2;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,914,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,915,"ppendTo(buffer, calendar.get(Calendar.YEAR) % 100);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,918,"ublic final void appendTo(StringBuffer buffer, int value) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,919,uffer.append((char)(value / 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,920,uffer.append((char)(value % 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,924,rivate static class TwoDigitMonthField implements NumberRule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,925,woDigitMonthField() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,928,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,929,eturn 2;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,932,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,933,"ppendTo(buffer, calendar.get(Calendar.MONTH) + 1);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,936,"ublic final void appendTo(StringBuffer buffer, int value) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,937,uffer.append((char)(value / 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,938,uffer.append((char)(value % 10 + '0'));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,942,rivate static class TwelveHourField implements NumberRule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,943,rivate final NumberRule mRule;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,945,welveHourField(NumberRule rule) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,946,Rule = rule;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,949,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,950,eturn mRule.estimateLength();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,953,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,954,nt value = calendar.get(Calendar.HOUR);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,955,f (value == 0) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,956,alue = calendar.getLeastMaximum(Calendar.HOUR) + 1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,958,"Rule.appendTo(buffer, value);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,961,"ublic void appendTo(StringBuffer buffer, int value) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,962,"Rule.appendTo(buffer, value);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,966,rivate static class TwentyFourHourField implements NumberRule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,967,rivate final NumberRule mRule;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,969,wentyFourHourField(NumberRule rule) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,970,Rule = rule;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,973,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,974,eturn mRule.estimateLength();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,977,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,978,nt value = calendar.get(Calendar.HOUR_OF_DAY);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,979,f (value == 0) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,980,alue = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,982,"Rule.appendTo(buffer, value);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,985,"ublic void appendTo(StringBuffer buffer, int value) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,986,"Rule.appendTo(buffer, value);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,990,rivate static class TimeZoneRule implements Rule {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,991,rivate final TimeZone mTimeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,992,rivate final Locale mLocale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,993,rivate final int mStyle;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,994,rivate final String mStandard;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,995,rivate final String mDaylight;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,997,"imeZoneRule(TimeZone timeZone, Locale locale, int style) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,998,TimeZone = timeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,999,Locale = locale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1000,Style = style;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1002,f (timeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1003,"Standard = getTimeZoneDisplay(timeZone, false, style, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1004,"Daylight = getTimeZoneDisplay(timeZone, true, style, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1006,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1007,Standard = null;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1008,Daylight = null;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1012,ublic int estimateLength() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1013,f (mTimeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1014,"eturn Math.max(mStandard.length(), mDaylight.length());"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1016,lse if (mStyle == TimeZone.SHORT) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1017,eturn 4;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1019,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1020,eturn 40;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1024,"ublic void appendTo(StringBuffer buffer, Calendar calendar) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1025,imeZone timeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1026,f ((timeZone = mTimeZone) != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1027,f (timeZone.useDaylightTime() &&
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1028,alendar.get(Calendar.DST_OFFSET) != 0) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1030,uffer.append(mDaylight);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1032,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1033,uffer.append(mStandard);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1036,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1037,imeZone = calendar.getTimeZone();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1038,f (timeZone.useDaylightTime() &&
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1039,alendar.get(Calendar.DST_OFFSET) != 0) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1041,uffer.append(getTimeZoneDisplay
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1042,"timeZone, true, mStyle, mLocale));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1044,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1045,uffer.append(getTimeZoneDisplay
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1046,"timeZone, false, mStyle, mLocale));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1052,rivate static class TimeZoneDisplayKey {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1053,rivate final TimeZone mTimeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1054,rivate final int mStyle;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1055,rivate final Locale mLocale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1057,"imeZoneDisplayKey(TimeZone timeZone,"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1058,"oolean daylight, int style, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1059,TimeZone = timeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1060,f (daylight) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1061,tyle |= 0x80000000;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1063,Style = style;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1064,Locale = locale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1067,ublic int hashCode() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1068,eturn mStyle * 31 + mLocale.hashCode();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1071,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1072,f (this == obj) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1073,eturn true;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1075,f (obj instanceof TimeZoneDisplayKey) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1076,imeZoneDisplayKey other = (TimeZoneDisplayKey)obj;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1077,eturn
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1078,TimeZone.equals(other.mTimeZone) &&
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1079,Style == other.mStyle &&
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1080,Locale.equals(other.mLocale);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1082,eturn false;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1086,/ Pair
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1089, Helper class for creating compound objects.  One use for this class is to create a
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1090, hashtable key out of multiple objects.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1092,"rivate static class Pair implements Comparable, java.io.Serializable {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1093,rivate final Object mObj1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1094,rivate final Object mObj2;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1096,"ublic Pair(Object obj1, Object obj2) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1097,Obj1 = obj1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1098,Obj2 = obj2;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1101,ublic int compareTo(Object obj) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1102,f (this == obj) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1103,eturn 0;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1106,air other = (Pair)obj;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1108,bject a = mObj1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1109,bject b = other.mObj1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1111,irstTest: {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1112,f (a == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1113,f (b != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1114,eturn 1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1116,/ Both a and b are null.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1117,reak firstTest;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1119,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1120,f (b == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1121,eturn -1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1125,nt result = ((Comparable)a).compareTo(b);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1127,f (result != 0) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1128,eturn result;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1132, = mObj2;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1133, = other.mObj2;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1135,f (a == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1136,f (b != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1137,eturn 1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1139,/ Both a and b are null.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1140,eturn 0;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1142,lse {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1143,f (b == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1144,eturn -1;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1148,eturn ((Comparable)a).compareTo(b);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1151,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1152,f (this == obj) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1153,eturn true;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1156,f (!(obj instanceof Pair)) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1157,eturn false;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1160,air key = (Pair)obj;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1162,eturn
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1163,mObj1 == null ?
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1164,ey.mObj1 == null : mObj1.equals(key.mObj1)) &&
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1165,mObj2 == null ?
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1166,ey.mObj2 == null : mObj2.equals(key.mObj2));
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1169,ublic int hashCode() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1170,eturn
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1171,mObj1 == null ? 0 : mObj1.hashCode()) +
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1172,mObj2 == null ? 0 : mObj2.hashCode());
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1175,ublic String toString() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1176,"eturn ""["" + mObj1 + ':' + mObj2 + ']';"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,5,* reserved.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,9,* are met:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,17,*    distribution.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,55,package org.apache.commons.lang.time;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,57,import java.util.Date;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,58,import java.util.Calendar;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,59,import java.util.GregorianCalendar;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,60,import java.util.Locale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,61,import java.util.TimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,62,import java.util.List;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,63,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,64,import java.util.Map;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,65,import java.util.HashMap;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,66,import java.text.DateFormatSymbols;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,67,import java.text.DateFormat;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,68,import java.text.SimpleDateFormat;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,71,"* Similar to {@link java.text.SimpleDateFormat}, but faster and thread-safe."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,72,"* Only formatting is supported, but all patterns are compatible with"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,73,* SimpleDateFormat. [Code originally taken from the open source TreeTrove
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,74,* project.]
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,76,* @author Brian S O'Neill
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,77,* @author Sean Schofield
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,78,* @since 2.0
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,79,"* @version $Id: FastDateFormat.java,v 1.2 2003/01/07 21:21:42 bayard Exp $"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,81,public class FastDateFormat {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,82,/** Style pattern */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,83,public static final Object
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,84,"FULL = new Integer(SimpleDateFormat.FULL),"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,85,"LONG = new Integer(SimpleDateFormat.LONG),"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,86,"MEDIUM = new Integer(SimpleDateFormat.MEDIUM),"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,87,SHORT = new Integer(SimpleDateFormat.SHORT);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,89,private static final double LOG_10 = Math.log(10);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,91,private static String cDefaultPattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,92,private static TimeZone cDefaultTimeZone = TimeZone.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,94,private static Map cTimeZoneDisplayCache = new HashMap();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,96,private static Map cInstanceCache = new HashMap(7);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,97,private static Map cDateInstanceCache = new HashMap(7);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,98,private static Map cTimeInstanceCache = new HashMap(7);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,99,private static Map cDateTimeInstanceCache = new HashMap(7);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,101,public static FastDateFormat getInstance() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,102,"//return getInstance(getDefaultPattern(), null, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,103,"return getInstance(getDefaultPattern(), null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,107,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,109,public static FastDateFormat getInstance(String pattern) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,110,"//return getInstance(pattern, null, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,111,"return getInstance(pattern, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,115,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,116,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,117,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,119,"public static FastDateFormat getInstance(String pattern, TimeZone timeZone) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,120,"//return getInstance(pattern, timeZone, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,121,"return getInstance(pattern, timeZone, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,125,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,126,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,128,"public static FastDateFormat getInstance(String pattern, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,129,"//return getInstance(pattern, null, locale, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,130,"return getInstance(pattern, null, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,134,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,135,"* @param symbols optional date format symbols, overrides symbols for"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,136,* system locale
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,139,public static FastDateFormat getInstance
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,140,"(String pattern, DateFormatSymbols symbols)"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,141,throws IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,143,"return getInstance(pattern, null, null, symbols);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,148,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,149,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,150,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,151,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,153,"public static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,154,"//return getInstance(pattern, timeZone, locale, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,155,Object key = pattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,157,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,158,"key = new Pair(key, timeZone);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,160,if (locale != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,161,"key = new Pair(key, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,164,FastDateFormat format = (FastDateFormat)cInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,165,if (format == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,166,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,167,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,170,"format = new FastDateFormat(pattern, timeZone, locale, new DateFormatSymbols(locale));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,171,"cInstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,173,return format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,177,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,178,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,179,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,180,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,181,"* @param symbols optional date format symbols, overrides symbols for"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,182,* provided locale
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,185,public static synchronized FastDateFormat getInstance
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,186,"(String pattern, TimeZone timeZone, Locale locale,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,187,DateFormatSymbols symbols)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,188,throws IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,190,Object key = pattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,192,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,193,"key = new Pair(key, timeZone);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,195,if (locale != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,196,"key = new Pair(key, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,198,if (symbols != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,199,"key = new Pair(key, symbols);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,202,FastDateFormat format = (FastDateFormat)cInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,203,if (format == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,204,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,205,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,207,if (symbols == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,208,symbols = new DateFormatSymbols(locale);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,210,"format = new FastDateFormat(pattern, timeZone, locale, symbols);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,211,"cInstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,213,return format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,218,"* @param style date style: FULL, LONG, MEDIUM, or SHORT (corresponds to those in java.text.DateFormat)"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,219,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,220,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,221,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,223,"public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,224,Object key = new Integer(style);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,226,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,227,"key = new Pair(key, timeZone);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,229,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,230,"key = new Pair(key, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,233,FastDateFormat format = (FastDateFormat)cDateInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,235,if (format == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,236,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,237,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,240,try {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,241,"String pattern = ((SimpleDateFormat)DateFormat.getDateInstance(style, locale)).toPattern();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,242,"format = getInstance(pattern, timeZone, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,243,"cDateInstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,245,catch (ClassCastException e) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,246,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,247,"(""No date pattern for locale: "" + locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,251,return format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,255,"* @param style time style: FULL, LONG, MEDIUM, or SHORT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,256,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,257,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,258,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,260,"public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,261,Object key = new Integer(style);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,263,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,264,"key = new Pair(key, timeZone);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,266,if (locale != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,267,"key = new Pair(key, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,270,FastDateFormat format = (FastDateFormat)cTimeInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,272,if (format == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,274,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,275,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,278,try {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,279,"String pattern = ((SimpleDateFormat)DateFormat.getTimeInstance(style, locale)).toPattern();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,280,"format = getInstance(pattern, timeZone, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,281,"cTimeInstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,283,catch (ClassCastException e) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,284,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,285,"(""No date pattern for locale: "" + locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,289,return format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,293,"* @param dateStyle date style: FULL, LONG, MEDIUM, or SHORT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,294,"* @param timeStyle time style: FULL, LONG, MEDIUM, or SHORT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,295,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,296,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,297,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,299,"public static synchronized FastDateFormat getDateTimeInstance(Object dateStyle, Object timeStyle,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,300,"TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,302,"Object key = new Pair(dateStyle, timeStyle);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,304,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,305,"key = new Pair(key, timeZone);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,307,if (locale != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,308,"key = new Pair(key, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,311,FastDateFormat format =
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,312,(FastDateFormat)cDateTimeInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,314,if (format == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,315,int ds;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,316,try {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,317,ds = ((Integer)dateStyle).intValue();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,319,catch (ClassCastException e) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,320,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,321,"(""Illegal date style: "" + dateStyle);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,324,int ts;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,325,try {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,326,ts = ((Integer)timeStyle).intValue();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,328,catch (ClassCastException e) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,329,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,330,"(""Illegal time style: "" + timeStyle);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,333,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,334,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,337,try {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,338,"String pattern = ((SimpleDateFormat)DateFormat.getDateTimeInstance(ds, ts, locale)).toPattern();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,339,"format = getInstance(pattern, timeZone, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,340,"cDateTimeInstanceCache.put(key, format);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,342,catch (ClassCastException e) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,343,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,344,"(""No date time pattern for locale: "" + locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,348,return format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,351,"static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,352,"Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,353,String value = (String)cTimeZoneDisplayCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,354,if (value == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,355,"// This is a very slow call, so cache the results."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,356,"value = tz.getDisplayName(daylight, style, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,357,"cTimeZoneDisplayCache.put(key, value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,359,return value;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,362,private static synchronized String getDefaultPattern() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,363,if (cDefaultPattern == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,364,cDefaultPattern = new SimpleDateFormat().toPattern();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,366,return cDefaultPattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,370,* Returns a list of Rules.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,372,"private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,373,List rules = new ArrayList();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,375,String[] ERAs = symbols.getEras();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,376,String[] months = symbols.getMonths();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,377,String[] shortMonths = symbols.getShortMonths();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,378,String[] weekdays = symbols.getWeekdays();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,379,String[] shortWeekdays = symbols.getShortWeekdays();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,380,String[] AmPmStrings = symbols.getAmPmStrings();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,382,int length = pattern.length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,383,int[] indexRef = new int[1];
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,385,for (int i=0; i<length; i++) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,386,indexRef[0] = i;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,387,"String token = parseToken(pattern, indexRef);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,388,i = indexRef[0];
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,390,int tokenLen = token.length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,391,if (tokenLen == 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,392,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,395,Rule rule;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,396,char c = token.charAt(0);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,398,switch (c) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,399,case 'G': // era designator (text)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,400,"rule = new TextField(Calendar.ERA, ERAs);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,401,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,402,case 'y': // year (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,403,if (tokenLen >= 4) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,404,rule = new UnpaddedNumberField(Calendar.YEAR);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,406,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,407,rule = new TwoDigitYearField();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,409,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,410,case 'M': // month in year (text and number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,411,if (tokenLen >= 4) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,412,"rule = new TextField(Calendar.MONTH, months);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,414,else if (tokenLen == 3) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,415,"rule = new TextField(Calendar.MONTH, shortMonths);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,417,else if (tokenLen == 2) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,418,rule = new TwoDigitMonthField();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,420,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,421,rule = new UnpaddedMonthField();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,423,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,424,case 'd': // day in month (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,425,"rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,426,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,427,"case 'h': // hour in am/pm (number, 1..12)"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,428,rule = new TwelveHourField
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,429,"(selectNumberRule(Calendar.HOUR, tokenLen));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,430,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,431,"case 'H': // hour in day (number, 0..23)"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,432,"rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,433,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,434,case 'm': // minute in hour (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,435,"rule = selectNumberRule(Calendar.MINUTE, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,436,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,437,case 's': // second in minute (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,438,"rule = selectNumberRule(Calendar.SECOND, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,439,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,440,case 'S': // millisecond (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,441,"rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,442,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,443,case 'E': // day in week (text)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,444,rule = new TextField
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,445,"(Calendar.DAY_OF_WEEK,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,446,tokenLen < 4 ? shortWeekdays : weekdays);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,447,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,448,case 'D': // day in year (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,449,"rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,450,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,451,case 'F': // day of week in month (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,452,rule = selectNumberRule
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,453,"(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,454,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,455,case 'w': // week in year (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,456,"rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,457,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,458,case 'W': // week in month (number)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,459,"rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,460,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,461,case 'a': // am/pm marker (text)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,462,"rule = new TextField(Calendar.AM_PM, AmPmStrings);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,463,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,464,case 'k': // hour in day (1..24)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,465,rule = new TwentyFourHourField
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,466,"(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,467,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,468,case 'K': // hour in am/pm (0..11)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,469,"rule = selectNumberRule(Calendar.HOUR, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,470,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,471,case 'z': // time zone (text)
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,472,if (tokenLen >= 4) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,473,"rule = new TimeZoneRule(timeZone, locale, TimeZone.LONG);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,475,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,476,"rule = new TimeZoneRule(timeZone, locale, TimeZone.SHORT);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,478,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,479,case '\'': // literal text
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,480,String sub = token.substring(1);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,481,if (sub.length() == 1) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,482,rule = new CharacterLiteral(sub.charAt(0));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,484,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,485,rule = new StringLiteral(new String(sub));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,487,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,488,default:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,489,throw new IllegalArgumentException
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,490,"(""Illegal pattern component: "" + token);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,493,rules.add(rule);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,496,return rules;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,499,"private static String parseToken(String pattern, int[] indexRef) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,500,StringBuffer buf = new StringBuffer();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,502,int i = indexRef[0];
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,503,int length = pattern.length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,505,char c = pattern.charAt(i);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,506,if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,507,"// Scan a run of the same character, which indicates a time"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,508,// pattern.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,509,buf.append(c);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,511,while (i + 1 < length) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,512,char peek = pattern.charAt(i + 1);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,513,if (peek == c) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,514,buf.append(c);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,515,i++;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,517,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,518,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,522,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,523,// This will identify token as text.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,524,buf.append('\'');
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,526,boolean inLiteral = false;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,528,for (; i < length; i++) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,529,c = pattern.charAt(i);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,531,if (c == '\'') {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,532,if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,533,// '' is treated as escaped '
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,534,i++;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,535,buf.append(c);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,537,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,538,inLiteral = !inLiteral;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,541,else if (!inLiteral &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,542,(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,543,i--;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,544,break;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,546,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,547,buf.append(c);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,552,indexRef[0] = i;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,553,return buf.toString();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,556,"private static NumberRule selectNumberRule(int field, int padding) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,557,switch (padding) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,558,case 1:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,559,return new UnpaddedNumberField(field);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,560,case 2:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,561,return new TwoDigitNumberField(field);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,562,default:
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,563,"return new PaddedNumberField(field, padding);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,567,private final String mPattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,568,private final TimeZone mTimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,569,private final Locale mLocale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,570,private final Rule[] mRules;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,571,private final int mMaxLengthEstimate;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,573,private FastDateFormat() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,574,"this(getDefaultPattern(), null, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,578,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,580,private FastDateFormat(String pattern) throws IllegalArgumentException {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,581,"this(pattern, null, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,585,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,586,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,587,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,589,"private FastDateFormat(String pattern, TimeZone timeZone) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,590,"this(pattern, timeZone, null, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,594,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,595,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,597,"private FastDateFormat(String pattern, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,598,"this(pattern, null, locale, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,602,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,603,"* @param symbols optional date format symbols, overrides symbols for"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,604,* system locale
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,606,"private FastDateFormat(String pattern, DateFormatSymbols symbols) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,607,"this(pattern, null, null, symbols);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,611,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,612,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,613,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,614,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,616,"private FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,617,"this(pattern, timeZone, locale, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,621,* @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,622,"* @param timeZone optional time zone, overrides time zone of formatted"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,623,* date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,624,"* @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,625,"* @param symbols optional date format symbols, overrides symbols for"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,626,* provided locale
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,628,"private FastDateFormat(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,629,if (locale == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,630,locale = Locale.getDefault();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,633,mPattern = pattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,634,mTimeZone = timeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,635,mLocale = locale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,637,if (symbols == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,638,symbols = new DateFormatSymbols(locale);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,641,"List rulesList = parse(pattern, timeZone, locale, symbols);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,642,mRules = (Rule[])rulesList.toArray(new Rule[rulesList.size()]);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,644,int len = 0;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,645,for (int i=mRules.length; --i >= 0; ) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,646,len += mRules[i].estimateLength();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,649,mMaxLengthEstimate = len;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,652,public String format(Date date) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,653,Calendar c = new GregorianCalendar(cDefaultTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,654,c.setTime(date);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,655,if (mTimeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,656,c.setTimeZone(mTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,658,"return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,661,public String format(Calendar calendar) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,662,"return format(calendar, new StringBuffer(mMaxLengthEstimate))"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,663,.toString();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,666,"public StringBuffer format(Date date, StringBuffer buf) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,667,Calendar c = new GregorianCalendar(cDefaultTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,668,c.setTime(date);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,669,if (mTimeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,670,c.setTimeZone(mTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,672,"return applyRules(c, buf);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,675,"public StringBuffer format(Calendar calendar, StringBuffer buf) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,676,if (mTimeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,677,calendar = (Calendar)calendar.clone();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,678,calendar.setTimeZone(mTimeZone);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,680,"return applyRules(calendar, buf);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,683,"private StringBuffer applyRules(Calendar calendar, StringBuffer buf) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,684,Rule[] rules = mRules;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,685,int len = mRules.length;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,686,for (int i=0; i<len; i++) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,687,"rules[i].appendTo(buf, calendar);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,689,return buf;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,692,public String getPattern() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,693,return mPattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,697,"* Returns the time zone used by this formatter, or null if time zone of"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,698,* formatted dates is used instead.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,700,public TimeZone getTimeZone() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,701,return mTimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,704,public Locale getLocale() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,705,return mLocale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,709,* Returns an estimate for the maximum length date that this date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,710,* formatter will produce. The actual formatted length will almost always
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,711,* be less than or equal to this amount.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,713,public int getMaxLengthEstimate() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,714,return mMaxLengthEstimate;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,717,private interface Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,718,int estimateLength();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,720,"void appendTo(StringBuffer buffer, Calendar calendar);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,723,private interface NumberRule extends Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,724,"void appendTo(StringBuffer buffer, int value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,727,private static class CharacterLiteral implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,728,private final char mValue;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,730,CharacterLiteral(char value) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,731,mValue = value;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,734,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,735,return 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,738,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,739,buffer.append(mValue);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,743,private static class StringLiteral implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,744,private final String mValue;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,746,StringLiteral(String value) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,747,mValue = value;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,750,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,751,return mValue.length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,754,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,755,buffer.append(mValue);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,759,private static class TextField implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,760,private final int mField;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,761,private final String[] mValues;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,763,"TextField(int field, String[] values) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,764,mField = field;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,765,mValues = values;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,768,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,769,int max = 0;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,770,for (int i=mValues.length; --i >= 0; ) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,771,int len = mValues[i].length();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,772,if (len > max) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,773,max = len;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,776,return max;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,779,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,780,buffer.append(mValues[calendar.get(mField)]);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,784,private static class UnpaddedNumberField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,785,private final int mField;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,787,UnpaddedNumberField(int field) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,788,mField = field;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,791,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,792,return 4;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,795,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,796,"appendTo(buffer, calendar.get(mField));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,799,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,800,if (value < 10) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,801,buffer.append((char)(value + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,803,else if (value < 100) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,804,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,805,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,807,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,808,buffer.append(Integer.toString(value));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,813,private static class UnpaddedMonthField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,814,UnpaddedMonthField() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,817,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,818,return 2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,821,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,822,"appendTo(buffer, calendar.get(Calendar.MONTH) + 1);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,825,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,826,if (value < 10) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,827,buffer.append((char)(value + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,829,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,830,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,831,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,836,private static class PaddedNumberField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,837,private final int mField;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,838,private final int mSize;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,840,"PaddedNumberField(int field, int size) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,841,if (size < 3) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,842,// Should use UnpaddedNumberField or TwoDigitNumberField.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,843,throw new IllegalArgumentException();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,845,mField = field;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,846,mSize = size;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,849,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,850,return 4;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,853,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,854,"appendTo(buffer, calendar.get(mField));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,857,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,858,if (value < 100) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,859,for (int i = mSize; --i >= 2; ) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,860,buffer.append('0');
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,862,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,863,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,865,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,866,int digits;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,867,if (value < 1000) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,868,digits = 3;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,870,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,871,digits = (int)(Math.log(value) / LOG_10) + 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,873,for (int i = mSize; --i >= digits; ) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,874,buffer.append('0');
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,876,buffer.append(Integer.toString(value));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,881,private static class TwoDigitNumberField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,882,private final int mField;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,884,TwoDigitNumberField(int field) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,885,mField = field;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,888,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,889,return 2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,892,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,893,"appendTo(buffer, calendar.get(mField));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,896,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,897,if (value < 100) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,898,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,899,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,901,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,902,buffer.append(Integer.toString(value));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,907,private static class TwoDigitYearField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,908,TwoDigitYearField() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,911,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,912,return 2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,915,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,916,"appendTo(buffer, calendar.get(Calendar.YEAR) % 100);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,919,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,920,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,921,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,925,private static class TwoDigitMonthField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,926,TwoDigitMonthField() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,929,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,930,return 2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,933,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,934,"appendTo(buffer, calendar.get(Calendar.MONTH) + 1);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,937,"public final void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,938,buffer.append((char)(value / 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,939,buffer.append((char)(value % 10 + '0'));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,943,private static class TwelveHourField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,944,private final NumberRule mRule;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,946,TwelveHourField(NumberRule rule) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,947,mRule = rule;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,950,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,951,return mRule.estimateLength();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,954,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,955,int value = calendar.get(Calendar.HOUR);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,956,if (value == 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,957,value = calendar.getLeastMaximum(Calendar.HOUR) + 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,959,"mRule.appendTo(buffer, value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,962,"public void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,963,"mRule.appendTo(buffer, value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,967,private static class TwentyFourHourField implements NumberRule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,968,private final NumberRule mRule;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,970,TwentyFourHourField(NumberRule rule) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,971,mRule = rule;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,974,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,975,return mRule.estimateLength();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,978,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,979,int value = calendar.get(Calendar.HOUR_OF_DAY);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,980,if (value == 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,981,value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,983,"mRule.appendTo(buffer, value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,986,"public void appendTo(StringBuffer buffer, int value) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,987,"mRule.appendTo(buffer, value);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,991,private static class TimeZoneRule implements Rule {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,992,private final TimeZone mTimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,993,private final Locale mLocale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,994,private final int mStyle;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,995,private final String mStandard;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,996,private final String mDaylight;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,998,"TimeZoneRule(TimeZone timeZone, Locale locale, int style) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,999,mTimeZone = timeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1000,mLocale = locale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1001,mStyle = style;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1003,if (timeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1004,"mStandard = getTimeZoneDisplay(timeZone, false, style, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1005,"mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1007,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1008,mStandard = null;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1009,mDaylight = null;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1013,public int estimateLength() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1014,if (mTimeZone != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1015,"return Math.max(mStandard.length(), mDaylight.length());"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1017,else if (mStyle == TimeZone.SHORT) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1018,return 4;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1020,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1021,return 40;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1025,"public void appendTo(StringBuffer buffer, Calendar calendar) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1026,TimeZone timeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1027,if ((timeZone = mTimeZone) != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1028,if (timeZone.useDaylightTime() &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1029,calendar.get(Calendar.DST_OFFSET) != 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1031,buffer.append(mDaylight);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1033,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1034,buffer.append(mStandard);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1037,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1038,timeZone = calendar.getTimeZone();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1039,if (timeZone.useDaylightTime() &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1040,calendar.get(Calendar.DST_OFFSET) != 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1042,buffer.append(getTimeZoneDisplay
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1043,"(timeZone, true, mStyle, mLocale));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1045,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1046,buffer.append(getTimeZoneDisplay
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1047,"(timeZone, false, mStyle, mLocale));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1053,private static class TimeZoneDisplayKey {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1054,private final TimeZone mTimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1055,private final int mStyle;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1056,private final Locale mLocale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1058,"TimeZoneDisplayKey(TimeZone timeZone,"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1059,"boolean daylight, int style, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1060,mTimeZone = timeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1061,if (daylight) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1062,style |= 0x80000000;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1064,mStyle = style;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1065,mLocale = locale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1068,public int hashCode() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1069,return mStyle * 31 + mLocale.hashCode();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1072,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1073,if (this == obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1074,return true;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1076,if (obj instanceof TimeZoneDisplayKey) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1077,TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1078,return
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1079,mTimeZone.equals(other.mTimeZone) &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1080,mStyle == other.mStyle &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1081,mLocale.equals(other.mLocale);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1083,return false;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1087,// Pair
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1090,* Helper class for creating compound objects.  One use for this class is to create a
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1091,* hashtable key out of multiple objects.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1093,"private static class Pair implements Comparable, java.io.Serializable {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1094,private final Object mObj1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1095,private final Object mObj2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1097,"public Pair(Object obj1, Object obj2) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1098,mObj1 = obj1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1099,mObj2 = obj2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1102,public int compareTo(Object obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1103,if (this == obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1104,return 0;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1107,Pair other = (Pair)obj;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1109,Object a = mObj1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1110,Object b = other.mObj1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1112,firstTest: {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1113,if (a == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1114,if (b != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1115,return 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1117,// Both a and b are null.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1118,break firstTest;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1120,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1121,if (b == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1122,return -1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1126,int result = ((Comparable)a).compareTo(b);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1128,if (result != 0) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1129,return result;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1133,a = mObj2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1134,b = other.mObj2;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1136,if (a == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1137,if (b != null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1138,return 1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1140,// Both a and b are null.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1141,return 0;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1143,else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1144,if (b == null) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1145,return -1;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1149,return ((Comparable)a).compareTo(b);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1152,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1153,if (this == obj) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1154,return true;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1157,if (!(obj instanceof Pair)) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1158,return false;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1161,Pair key = (Pair)obj;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1163,return
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1164,(mObj1 == null ?
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1165,key.mObj1 == null : mObj1.equals(key.mObj1)) &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1166,(mObj2 == null ?
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1167,key.mObj2 == null : mObj2.equals(key.mObj2));
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1170,public int hashCode() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1171,return
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1172,(mObj1 == null ? 0 : mObj1.hashCode()) +
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1173,(mObj2 == null ? 0 : mObj2.hashCode());
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1176,public String toString() {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1177,"return ""["" + mObj1 + ':' + mObj2 + ']';"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,4, Copyright (c) 2002 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,5, reserved.
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,9, are met:
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,17,    distribution.
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,20,"    any, must include the following acknowlegement:"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,54,ackage org.apache.commons.lang.time;
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,56,mport junit.framework.*;
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,57,mport junit.textui.TestRunner;
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,58,mport java.util.*;
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,59,mport java.text.*;
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,62, Unit tests {@link org.apache.commons.lang.time.FastDateFormat}.
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,64, @author Sean Schofield
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,65, @since 2.0
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,66," @version $Id: FastDateFormatTest.java,v 1.1 2003/01/07 19:55:55 bayard Exp $"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,68,ublic class FastDateFormatTest extends TestCase {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,70,rivate FastDateFormat fastDateFormat = null;
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,72,ublic FastDateFormatTest(String name) {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,73,uper(name);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,76,ublic static void main(String[] args) {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,77,estRunner.run(suite());
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,80,ublic static Test suite() {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,81,estSuite suite = new TestSuite(FastDateFormatTest.class);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,82,"uite.setName(""FastDateFormat Tests"");"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,84,eturn suite;
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,87,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,88,uper.setUp();
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,91,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,92,uper.tearDown();
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,95,ublic void test_getInstance() {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,96,astDateFormat format1 = FastDateFormat.getInstance();
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,97,astDateFormat format2 = FastDateFormat.getInstance();
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,98,"ssertSame(format1, format2);"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,101,ublic void test_getInstance_String() {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,102,"astDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"");"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,103,"astDateFormat format2 = FastDateFormat.getInstance(""MM-DD-yyyy"");"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,104,ssertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,105,"ssertSame(format1, FastDateFormat.getInstance(""MM/DD/yyyy""));"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,108,ublic void test_getInstance_String_TimeZone() {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,109,ocale realDefaultLocale = Locale.getDefault();
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,110,ocale.setDefault(Locale.US);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,111,imeZone realDefaultZone = TimeZone.getDefault();
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,112,"imeZone.setDefault(TimeZone.getTimeZone(""America/New_York""));"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,114,"astDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"","
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,115,"imeZone.getTimeZone(""Atlantic/Reykjavik""));"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,116,"astDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"");"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,117,"astDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"", TimeZone.getDefault());"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,118,"astDateFormat format4 = FastDateFormat.getInstance(""MM/DD/yyyy"", TimeZone.getDefault());"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,119,"astDateFormat format5 = FastDateFormat.getInstance(""MM-DD-yyyy"", TimeZone.getDefault());"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,121,ssertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,122,"ssertTrue(format1.getTimeZone().equals(TimeZone.getTimeZone(""Atlantic/Reykjavik"")));"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,123,ssertNull(format2.getTimeZone());
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,124,"ssertSame(format3, format4);"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,125,ssertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,127,ocale.setDefault(realDefaultLocale);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,128,imeZone.setDefault(realDefaultZone);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,131,ublic void test_getInstance_String_Locale() {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,132,ocale realDefaultLocale = Locale.getDefault();
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,133,ocale.setDefault(Locale.US);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,134,"astDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,135,"astDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"");"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,136,"astDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,138,ssertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,139,"ssertSame(format1, format3);"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,140,"ssertSame(Locale.GERMANY, format1.getLocale());"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,142,ocale.setDefault(realDefaultLocale);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,145,ublic void test_getInstance_String_TimeZone_Locale() {
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,146,ocale realDefaultLocale = Locale.getDefault();
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,147,ocale.setDefault(Locale.US);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,148,imeZone realDefaultZone = TimeZone.getDefault();
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,149,"imeZone.setDefault(TimeZone.getTimeZone(""America/New_York""));"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,151,"astDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"","
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,152,"imeZone.getTimeZone(""Atlantic/Reykjavik""), Locale.GERMANY);"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,153,"astDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,154,"astDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"","
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,155,"imeZone.getDefault(), Locale.GERMANY);"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,157,"ssertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,158,"ssertEquals(format1.getTimeZone(), TimeZone.getTimeZone(""Atlantic/Reykjavik""));"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,159,ssertNull(format2.getTimeZone());
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,160,"ssertEquals(format3.getTimeZone(), TimeZone.getDefault());"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,161,"ssertEquals(format3.getTimeZone(), TimeZone.getTimeZone(""America/New_York""));"
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,163,ocale.setDefault(realDefaultLocale);
False,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,164,imeZone.setDefault(realDefaultZone);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,9,* are met:
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,55,package org.apache.commons.lang.time;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,57,import junit.framework.*;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,58,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,59,import java.util.*;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,60,import java.text.*;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,63,* Unit tests {@link org.apache.commons.lang.time.FastDateFormat}.
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,65,* @author Sean Schofield
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,66,* @since 2.0
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,67,"* @version $Id: FastDateFormatTest.java,v 1.2 2003/01/07 21:21:43 bayard Exp $"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,69,public class FastDateFormatTest extends TestCase {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,71,private FastDateFormat fastDateFormat = null;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,73,public FastDateFormatTest(String name) {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,74,super(name);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,77,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,78,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,81,public static Test suite() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,82,TestSuite suite = new TestSuite(FastDateFormatTest.class);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,83,"suite.setName(""FastDateFormat Tests"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,85,return suite;
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,88,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,89,super.setUp();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,92,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,93,super.tearDown();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,96,public void test_getInstance() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,97,FastDateFormat format1 = FastDateFormat.getInstance();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,98,FastDateFormat format2 = FastDateFormat.getInstance();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,99,"assertSame(format1, format2);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,102,public void test_getInstance_String() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,103,"FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,104,"FastDateFormat format2 = FastDateFormat.getInstance(""MM-DD-yyyy"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,105,assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,106,"assertSame(format1, FastDateFormat.getInstance(""MM/DD/yyyy""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,109,public void test_getInstance_String_TimeZone() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,110,Locale realDefaultLocale = Locale.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,111,Locale.setDefault(Locale.US);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,112,TimeZone realDefaultZone = TimeZone.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,113,"TimeZone.setDefault(TimeZone.getTimeZone(""America/New_York""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,115,"FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"","
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,116,"TimeZone.getTimeZone(""Atlantic/Reykjavik""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,117,"FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,118,"FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"", TimeZone.getDefault());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,119,"FastDateFormat format4 = FastDateFormat.getInstance(""MM/DD/yyyy"", TimeZone.getDefault());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,120,"FastDateFormat format5 = FastDateFormat.getInstance(""MM-DD-yyyy"", TimeZone.getDefault());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,122,assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,123,"assertTrue(format1.getTimeZone().equals(TimeZone.getTimeZone(""Atlantic/Reykjavik"")));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,124,assertNull(format2.getTimeZone());
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,125,"assertSame(format3, format4);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,126,assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,128,Locale.setDefault(realDefaultLocale);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,129,TimeZone.setDefault(realDefaultZone);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,132,public void test_getInstance_String_Locale() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,133,Locale realDefaultLocale = Locale.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,134,Locale.setDefault(Locale.US);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,135,"FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,136,"FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"");"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,137,"FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,139,assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,140,"assertSame(format1, format3);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,141,"assertSame(Locale.GERMANY, format1.getLocale());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,143,Locale.setDefault(realDefaultLocale);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,146,public void test_getInstance_String_TimeZone_Locale() {
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,147,Locale realDefaultLocale = Locale.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,148,Locale.setDefault(Locale.US);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,149,TimeZone realDefaultZone = TimeZone.getDefault();
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,150,"TimeZone.setDefault(TimeZone.getTimeZone(""America/New_York""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,152,"FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"","
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,153,"TimeZone.getTimeZone(""Atlantic/Reykjavik""), Locale.GERMANY);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,154,"FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,155,"FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"","
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,156,"TimeZone.getDefault(), Locale.GERMANY);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,158,"assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,159,"assertEquals(format1.getTimeZone(), TimeZone.getTimeZone(""Atlantic/Reykjavik""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,160,assertNull(format2.getTimeZone());
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,161,"assertEquals(format3.getTimeZone(), TimeZone.getDefault());"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,162,"assertEquals(format3.getTimeZone(), TimeZone.getTimeZone(""America/New_York""));"
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,164,Locale.setDefault(realDefaultLocale);
True,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,src/test/org/apache/commons/lang/time/FastDateFormatTest.java,165,TimeZone.setDefault(realDefaultZone);

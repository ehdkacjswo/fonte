is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,19,import java.util.Arrays;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,20,import java.util.Collections;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,21,import java.util.HashMap;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,25,import java.util.Map;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,41,/** Unmodifiable list of available locales. */
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,42,private static final List cAvailableLocaleList;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,43,/** Unmodifiable set of available locales. */
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,44,private static Set cAvailableLocaleSet;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,45,/** Unmodifiable map of language locales by country. */
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,46,private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap());
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,47,/** Unmodifiable map of country locales by language. */
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,48,private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap());
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,49,static {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,50,List list = Arrays.asList(Locale.getAvailableLocales());
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,51,cAvailableLocaleList = Collections.unmodifiableList(list);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,78,* <p>This method validates the input strictly.
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,79,* The language code must be lowercase.
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,80,* The country code must be uppercase.
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,81,* The separator must be an underscore.
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,82,* The length must be correct.
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,83,* </p>
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,62, @return a Locale
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,86,"* @return a Locale, null if null input"
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,69,f (str.length() != 2 &&
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,70,tr.length() != 5 &&
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,71,tr.length() < 7) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,93,int len = str.length();
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,94,if (len != 2 && len != 5 && len < 7) {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,74,f (Character.isLowerCase(str.charAt(0)) == false ||
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,75,haracter.isLowerCase(str.charAt(1)) == false) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,97,char ch0 = str.charAt(0);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,98,char ch1 = str.charAt(1);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,99,if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,78,f (str.length() == 2) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,102,if (len == 2) {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,81,f (Character.isUpperCase(str.charAt(3)) == false ||
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,82,haracter.isUpperCase(str.charAt(4)) == false) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,105,if (str.charAt(2) != '_') {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,106,"throw new IllegalArgumentException(""Invalid locale format: "" + str);"
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,108,char ch3 = str.charAt(3);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,109,char ch4 = str.charAt(4);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,110,if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,85,f (str.length() == 5) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,113,if (len == 5) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,116,if (str.charAt(5) != '_') {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,117,"throw new IllegalArgumentException(""Invalid locale format: "" + str);"
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,104," @return the list of Locale objects, 0 being locale"
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,135,"* @return the unmodifiable list of Locale objects, 0 being locale, never null"
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,120, <p>This method takes a country code and searches to find the
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,121, languages available for that country. Variant locales are removed.</p>
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,151,"* <p>The result list begins with the most specific locale, then the"
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,152,"* next more general and so on, finishing with the default locale."
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,153,* The list will never contain the same locale twice.</p>
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,125," @return the list of Locale objects, 0 being locale"
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,157,"* @return the unmodifiable list of Locale objects, 0 being locale, never null"
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,141,eturn list;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,173,return Collections.unmodifiableList(list);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,178,* <p>Obtains an unmodifiable list of installed locales.</p>
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,180,* <p>This method is a wrapper around {@link Locale#getAvailableLocales()}.
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,181,"* It is more efficient, as the JDK method must create a new array each"
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,182,* time it is called.</p>
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,184,* @return the unmodifiable list of available locales
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,186,public static List availableLocaleList() {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,187,return cAvailableLocaleList;
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,146, <p>Obtains the set of languages supported for a given country.</p>
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,192,* <p>Obtains an unmodifiable set of installed locales.</p>
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,194,* <p>This method is a wrapper around {@link Locale#getAvailableLocales()}.
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,195,"* It is more efficient, as the JDK method must create a new array each"
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,196,* time it is called.</p>
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,198,* @return the unmodifiable set of available locales
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,200,public static Set availableLocaleSet() {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,201,Set set = cAvailableLocaleSet;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,202,if (set == null) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,203,set = new HashSet(availableLocaleList());
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,204,set = Collections.unmodifiableSet(set);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,205,cAvailableLocaleSet = set;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,207,return set;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,212,* <p>Checks if the locale specified is in the list of available locales.</p>
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,214,* @return true if the locale is a known locale
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,216,public static boolean isAvailableLocale(Locale locale) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,217,return cAvailableLocaleSet.contains(locale);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,222,* <p>Obtains the list of languages supported for a given country.</p>
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,152, @return a Set of Locale objects
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,228,"* @return an unmodifiable List of Locale objects, never null"
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,154,ublic static Set languagesByCountry(String countryCode) {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,155,et set = new HashSet();
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,156,ocale[] array = Locale.getAvailableLocales();
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,157,f (countryCode != null) {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,158,or (int i = 0; i < array.length; i++) {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,159,f (countryCode.equals(array[i].getCountry()) &&
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,160,rray[i].getVariant().length() == 0) {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,161,et.add(array[i]);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,230,public static List languagesByCountry(String countryCode) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,231,List langs = (List) cLanguagesByCountry.get(countryCode);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,232,if (langs == null) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,233,if (countryCode != null) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,234,langs = new ArrayList();
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,235,List locales = availableLocaleList();
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,236,for (int i = 0; i < locales.size(); i++) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,237,Locale locale = (Locale) locales.get(i);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,238,if (countryCode.equals(locale.getCountry()) &&
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,239,locale.getVariant().length() == 0) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,240,langs.add(locale);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,243,langs = Collections.unmodifiableList(langs);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,244,} else {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,245,langs = Collections.EMPTY_LIST;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,247,"cLanguagesByCountry.put(countryCode, langs);"
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,165,eturn set;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,249,return langs;
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,170, <p>Obtains the set of countries supported for a given language.</p>
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,254,* <p>Obtains the list of countries supported for a given language.</p>
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,176, @return a Set of Locale objects
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,260,"* @return an unmodifiable List of Locale objects, never null"
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,178,ublic static Set countriesByLanguage(String languageCode) {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,179,et set = new HashSet();
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,180,ocale[] array = Locale.getAvailableLocales();
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,181,f (languageCode != null) {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,182,or (int i = 0; i < array.length; i++) {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,183,f (languageCode.equals(array[i].getLanguage()) &&
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,184,rray[i].getVariant().length() == 0) {
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,185,et.add(array[i]);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,262,public static List countriesByLanguage(String languageCode) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,263,List countries = (List) cCountriesByLanguage.get(languageCode);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,264,if (countries == null) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,265,if (languageCode != null) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,266,countries = new ArrayList();
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,267,List locales = availableLocaleList();
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,268,for (int i = 0; i < locales.size(); i++) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,269,Locale locale = (Locale) locales.get(i);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,270,if (languageCode.equals(locale.getLanguage()) &&
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,271,locale.getCountry().length() != 0 &&
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,272,locale.getVariant().length() == 0) {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,273,countries.add(locale);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,276,countries = Collections.unmodifiableList(countries);
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,277,} else {
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,278,countries = Collections.EMPTY_LIST;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,280,"cCountriesByLanguage.put(languageCode, countries);"
False,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,189,eturn set;
True,src/java/org/apache/commons/lang/LocaleUtils.java,src/java/org/apache/commons/lang/LocaleUtils.java,282,return countries;
True,src/test/org/apache/commons/lang/LangTestSuite.java,src/test/org/apache/commons/lang/LangTestSuite.java,68,suite.addTest(LocaleUtilsTest.suite());
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,16,package org.apache.commons.lang;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,18,import java.lang.reflect.Constructor;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,19,import java.lang.reflect.Modifier;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,20,import java.util.Arrays;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,21,import java.util.HashSet;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,22,import java.util.Iterator;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,23,import java.util.List;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,24,import java.util.Locale;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,25,import java.util.Set;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,27,import junit.framework.Test;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,28,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,29,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,30,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,33,* Unit tests for {@link LocaleUtils}.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,35,* @author Chris Hyzer
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,36,* @author Stephen Colebourne
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,37,* @version $Id$
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,39,public class LocaleUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,41,"private static final Locale LOCALE_EN = new Locale(""en"", """");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,42,"private static final Locale LOCALE_EN_US = new Locale(""en"", ""US"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,43,"private static final Locale LOCALE_EN_US_ZZZZ = new Locale(""en"", ""US"", ""ZZZZ"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,44,"private static final Locale LOCALE_FR = new Locale(""fr"", """");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,45,"private static final Locale LOCALE_FR_CA = new Locale(""fr"", ""CA"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,46,"private static final Locale LOCALE_QQ = new Locale(""qq"", """");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,47,"private static final Locale LOCALE_QQ_ZZ = new Locale(""qq"", ""ZZ"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,50,* Constructor.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,52,* @param name
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,54,public LocaleUtilsTest(String name) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,55,super(name);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,59,* Main.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,60,* @param args
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,62,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,63,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,67,* Run the test cases as a suite.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,68,* @return the Test
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,70,public static Test suite() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,71,TestSuite suite = new TestSuite(LocaleUtilsTest.class);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,72,"suite.setName(""LocaleUtilsTest Tests"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,73,return suite;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,78,"* Test that constructors are public, and work, etc."
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,80,public void testConstructor() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,81,assertNotNull(new LocaleUtils());
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,82,Constructor[] cons = LocaleUtils.class.getDeclaredConstructors();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,83,"assertEquals(1, cons.length);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,84,"assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,85,"assertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,86,"assertEquals(false, Modifier.isFinal(LocaleUtils.class.getModifiers()));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,91,"* Pass in a valid language, test toLocale."
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,93,* @param language  the language string
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,95,private void assertValidToLocale(String language) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,96,Locale locale = LocaleUtils.toLocale(language);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,97,"assertNotNull(""valid locale"", locale);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,98,"assertEquals(language, locale.getLanguage());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,99,//country and variant are empty
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,100,assertTrue(locale.getCountry() == null || locale.getCountry().length() == 0);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,101,assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,105,"* Pass in a valid language, test toLocale."
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,107,* @param localeString to pass to toLocale()
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,108,* @param language of the resulting Locale
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,109,* @param country of the resulting Locale
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,111,"private void assertValidToLocale(String localeString, String language, String country) {"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,112,Locale locale = LocaleUtils.toLocale(localeString);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,113,"assertNotNull(""valid locale"", locale);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,114,"assertEquals(language, locale.getLanguage());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,115,"assertEquals(country, locale.getCountry());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,116,//variant is empty
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,117,assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,121,"* Pass in a valid language, test toLocale."
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,123,* @param localeString to pass to toLocale()
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,124,* @param language of the resulting Locale
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,125,* @param country of the resulting Locale
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,126,* @param variant of the resulting Locale
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,128,private void assertValidToLocale(
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,129,"String localeString, String language,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,130,"String country, String variant) {"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,131,Locale locale = LocaleUtils.toLocale(localeString);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,132,"assertNotNull(""valid locale"", locale);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,133,"assertEquals(language, locale.getLanguage());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,134,"assertEquals(country, locale.getCountry());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,135,"assertEquals(variant, locale.getVariant());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,140,* Test toLocale() method.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,142,public void testToLocale_1Part() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,143,"assertEquals(null, LocaleUtils.toLocale((String) null));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,145,"assertValidToLocale(""us"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,146,"assertValidToLocale(""fr"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,147,"assertValidToLocale(""de"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,148,"assertValidToLocale(""zh"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,149,"// Valid format but lang doesnt exist, should make instance anyway"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,150,"assertValidToLocale(""qq"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,152,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,153,"LocaleUtils.toLocale(""Us"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,154,"fail(""Should fail if not lowercase"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,155,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,156,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,157,"LocaleUtils.toLocale(""US"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,158,"fail(""Should fail if not lowercase"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,159,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,160,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,161,"LocaleUtils.toLocale(""uS"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,162,"fail(""Should fail if not lowercase"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,163,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,164,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,165,"LocaleUtils.toLocale(""u#"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,166,"fail(""Should fail if not lowercase"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,167,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,169,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,170,"LocaleUtils.toLocale(""u"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,171,"fail(""Must be 2 chars if less than 5"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,172,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,174,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,175,"LocaleUtils.toLocale(""uuu"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,176,"fail(""Must be 2 chars if less than 5"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,177,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,179,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,180,"LocaleUtils.toLocale(""uu_U"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,181,"fail(""Must be 2 chars if less than 5"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,182,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,186,* Test toLocale() method.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,188,public void testToLocale_2Part() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,189,"assertValidToLocale(""us_EN"", ""us"", ""EN"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,190,//valid though doesnt exist
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,191,"assertValidToLocale(""us_ZH"", ""us"", ""ZH"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,193,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,194,"LocaleUtils.toLocale(""us-EN"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,195,"fail(""Should fail as not underscore"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,196,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,197,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,198,"LocaleUtils.toLocale(""us_En"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,199,"fail(""Should fail second part not uppercase"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,200,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,201,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,202,"LocaleUtils.toLocale(""us_en"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,203,"fail(""Should fail second part not uppercase"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,204,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,205,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,206,"LocaleUtils.toLocale(""us_eN"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,207,"fail(""Should fail second part not uppercase"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,208,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,209,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,210,"LocaleUtils.toLocale(""uS_EN"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,211,"fail(""Should fail first part not lowercase"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,212,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,213,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,214,"LocaleUtils.toLocale(""us_E3"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,215,"fail(""Should fail second part not uppercase"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,216,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,220,* Test toLocale() method.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,222,public void testToLocale_3Part() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,223,"assertValidToLocale(""us_EN_a"", ""us"", ""EN"", ""a"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,224,"assertValidToLocale(""us_EN_A"", ""us"", ""EN"", ""A"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,225,"assertValidToLocale(""us_EN_SFsafdFDsdfF"", ""us"", ""EN"", ""SFsafdFDsdfF"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,227,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,228,"LocaleUtils.toLocale(""us_EN-a"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,229,"fail(""Should fail as not underscore"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,230,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,231,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,232,"LocaleUtils.toLocale(""uu_UU_"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,233,"fail(""Must be 3, 5 or 7+ in length"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,234,} catch (IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,239,* Helper method for local lookups.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,241,* @param locale  the input locale
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,242,* @param defaultLocale  the input default locale
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,243,* @param expected  expected results
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,245,"private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,246,List localeList = defaultLocale == null ?
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,247,LocaleUtils.localeLookupList(locale) :
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,248,"LocaleUtils.localeLookupList(locale, defaultLocale);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,250,"assertEquals(expected.length, localeList.size());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,251,"assertEquals(Arrays.asList(expected), localeList);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,252,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,253,"localeList.add(""Unmodifiable"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,254,fail();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,255,} catch (UnsupportedOperationException ex) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,260,* Test localeLookupList() method.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,262,public void testLocaleLookupList_Locale() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,263,"assertLocaleLookupList(null, null, new Locale[0]);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,264,"assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,265,"assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,266,"assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,267,"assertLocaleLookupList(LOCALE_EN_US, null,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,268,new Locale[] {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,269,"LOCALE_EN_US,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,270,LOCALE_EN});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,271,"assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,272,new Locale[] {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,273,"LOCALE_EN_US_ZZZZ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,274,"LOCALE_EN_US,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,275,"new Locale(""en"")});"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,279,* Test localeLookupList() method.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,281,public void testLocaleLookupList_LocaleLocale() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,282,"assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,283,new Locale[]{LOCALE_QQ});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,284,"assertLocaleLookupList(LOCALE_EN, LOCALE_EN,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,285,new Locale[]{LOCALE_EN});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,287,"assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,288,new Locale[]{
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,289,"LOCALE_EN_US,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,290,LOCALE_EN});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,291,"assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,292,new Locale[] {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,293,"LOCALE_EN_US,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,294,"LOCALE_EN,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,295,LOCALE_QQ});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,296,"assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,297,new Locale[] {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,298,"LOCALE_EN_US,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,299,"LOCALE_EN,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,300,LOCALE_QQ_ZZ});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,302,"assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,303,new Locale[] {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,304,"LOCALE_EN_US_ZZZZ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,305,"LOCALE_EN_US,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,306,LOCALE_EN});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,307,"assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,308,new Locale[] {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,309,"LOCALE_EN_US_ZZZZ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,310,"LOCALE_EN_US,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,311,LOCALE_EN});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,312,"assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,313,new Locale[] {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,314,"LOCALE_EN_US_ZZZZ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,315,"LOCALE_EN_US,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,316,"LOCALE_EN,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,317,LOCALE_QQ});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,318,"assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,319,new Locale[] {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,320,"LOCALE_EN_US_ZZZZ,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,321,"LOCALE_EN_US,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,322,"LOCALE_EN,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,323,LOCALE_QQ_ZZ});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,324,"assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,325,new Locale[] {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,326,"LOCALE_FR_CA,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,327,"LOCALE_FR,"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,328,LOCALE_EN});
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,333,* Test availableLocaleList() method.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,335,public void testAvailableLocaleList() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,336,List list = LocaleUtils.availableLocaleList();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,337,List list2 = LocaleUtils.availableLocaleList();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,338,assertNotNull(list);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,339,"assertSame(list, list2);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,340,Locale[] jdkLocaleArray = Locale.getAvailableLocales();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,341,List jdkLocaleList = Arrays.asList(jdkLocaleArray);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,342,"assertEquals(jdkLocaleList, list);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,347,* Test availableLocaleSet() method.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,349,public void testAvailableLocaleSet() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,350,Set set = LocaleUtils.availableLocaleSet();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,351,Set set2 = LocaleUtils.availableLocaleSet();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,352,assertNotNull(set);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,353,"assertSame(set, set2);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,354,Locale[] jdkLocaleArray = Locale.getAvailableLocales();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,355,List jdkLocaleList = Arrays.asList(jdkLocaleArray);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,356,Set jdkLocaleSet = new HashSet(jdkLocaleList);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,357,"assertEquals(jdkLocaleSet, set);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,362,* Test availableLocaleSet() method.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,364,public void testIsAvailableLocale() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,365,Set set = LocaleUtils.availableLocaleSet();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,366,"assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,367,"assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,368,"assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,369,"assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,370,"assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,371,"assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,372,"assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,377,* Make sure the language by country is correct.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,379,* @param country
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,380,* @param languages array of languages that should be returned
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,382,"private void assertLanguageByCountry(String country, String[] languages) {"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,383,List list = LocaleUtils.languagesByCountry(country);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,384,List list2 = LocaleUtils.languagesByCountry(country);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,385,assertNotNull(list);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,386,"assertSame(list, list2);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,387,"assertEquals(languages.length, list.size());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,388,//search through langauges
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,389,for (int i = 0; i < languages.length; i++) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,390,Iterator iterator = list.iterator();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,391,boolean found = false;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,392,// see if it was returned by the set
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,393,while (iterator.hasNext()) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,394,Locale locale = (Locale) iterator.next();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,395,// should have an en empty variant
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,396,assertTrue(locale.getVariant() == null
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,397,|| locale.getVariant().length() == 0);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,398,"assertEquals(country, locale.getCountry());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,399,if (languages[i].equals(locale.getLanguage())) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,400,found = true;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,401,break;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,404,if (!found) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,405,"fail(""Cound not find language: "" + languages[i]"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,406,"+ "" for country: "" + country);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,409,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,410,"list.add(""Unmodifiable"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,411,fail();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,412,} catch (UnsupportedOperationException ex) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,416,* Test languagesByCountry() method.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,418,public void testLanguagesByCountry() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,419,"assertLanguageByCountry(null, new String[0]);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,420,"assertLanguageByCountry(""US"", new String[]{""en""});"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,421,"assertLanguageByCountry(""ZZ"", new String[0]);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,422,"assertLanguageByCountry(""CH"", new String[]{""fr"", ""de"", ""it""});"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,427,* Make sure the language by country is correct.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,429,* @param language
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,430,* @param countries array of countries that should be returned
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,432,"private void assertCountriesByLanguage(String language, String[] countries) {"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,433,List list = LocaleUtils.countriesByLanguage(language);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,434,List list2 = LocaleUtils.countriesByLanguage(language);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,435,assertNotNull(list);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,436,"assertSame(list, list2);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,437,"assertEquals(countries.length, list.size());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,438,//search through langauges
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,439,for (int i = 0; i < countries.length; i++) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,440,Iterator iterator = list.iterator();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,441,boolean found = false;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,442,// see if it was returned by the set
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,443,while (iterator.hasNext()) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,444,Locale locale = (Locale) iterator.next();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,445,// should have an en empty variant
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,446,assertTrue(locale.getVariant() == null
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,447,|| locale.getVariant().length() == 0);
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,448,"assertEquals(language, locale.getLanguage());"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,449,if (countries[i].equals(locale.getCountry())) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,450,found = true;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,451,break;
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,454,if (!found) {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,455,"fail(""Cound not find language: "" + countries[i]"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,456,"+ "" for country: "" + language);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,459,try {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,460,"list.add(""Unmodifiable"");"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,461,fail();
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,462,} catch (UnsupportedOperationException ex) {}
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,466,* Test languagesByCountry() method.
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,468,public void testCountriesByLanguage() {
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,469,"assertCountriesByLanguage(null, new String[0]);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,470,"assertCountriesByLanguage(""de"", new String[]{""DE"", ""CH"", ""AT"", ""LU""});"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,471,"assertCountriesByLanguage(""zz"", new String[0]);"
True,src/test/org/apache/commons/lang/LocaleUtilsTest.java,src/test/org/apache/commons/lang/LocaleUtilsTest.java,472,"assertCountriesByLanguage(""it"", new String[]{""IT"", ""CH""});"

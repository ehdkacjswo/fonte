is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,25,mport java.io.FilterInputStream;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,76,his.raw = new TapeInputStream(new CountingStream(is));
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,74,this.raw = new TapeInputStream(is);
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,119,@Deprecated
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,120,@Override
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,121,public int getCount() {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,122,return (int) getBytesRead();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,125,@Override
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,126,public long getBytesRead() {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,127,return raw.getBytesRead();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,514,rivate class CountingStream extends FilterInputStream {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,515,rivate CountingStream(final InputStream in) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,516,uper(in);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,518,Override
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,519,ublic int read() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,520,nt r = in.read();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,521,f (r >= 0) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,522,ount(1);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,524,eturn r;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,526,Override
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,527,ublic int read(byte[] b) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,528,"eturn read(b, 0, b.length);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,530,Override
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,531,"ublic int read(byte[] b, int off, int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,532,"nt r = in.read(b, off, len);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,533,f (r >= 0) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,534,ount(r);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,536,eturn r;
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,19,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,21,import java.io.FilterInputStream;
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,23,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,24,import java.util.concurrent.atomic.AtomicLong;
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,27,* Stream that tracks the number of bytes read.
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,28,* @since Apache Commons Compress 1.3
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,29,* @ThreadSafe
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,31,public class CountingInputStream extends FilterInputStream {
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,32,private final AtomicLong bytesRead = new AtomicLong();
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,34,private CountingInputStream(final InputStream in) {
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,35,super(in);
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,38,@Override
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,39,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,40,int r = in.read();
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,41,if (r >= 0) {
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,42,count(1);
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,44,return r;
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,46,@Override
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,47,public int read(byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,48,"return read(b, 0, b.length);"
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,50,@Override
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,51,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,52,"int r = in.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,53,if (r >= 0) {
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,54,count(r);
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,56,return r;
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,59,* Increments the counter of already read bytes.
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,60,* Doesn't increment if the EOF has been hit (read == -1)
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,62,* @param read the number of bytes read
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,64,protected final void count(long read) {
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,65,if (read != -1) {
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,66,bytesRead.addAndGet(read);
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,71,* Returns the current number of bytes read from this stream.
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,72,* @return the number of read bytes
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,74,public long getBytesRead() {
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,75,return bytesRead.longValue();
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,19,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,21,import java.io.FilterOutputStream;
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,23,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,24,import java.util.concurrent.atomic.AtomicLong;
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,27,* Stream that tracks the number of bytes read.
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,28,* @since Apache Commons Compress 1.3
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,29,* @ThreadSafe
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,31,public class CountingOutputStream extends FilterOutputStream {
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,32,private final AtomicLong bytesWritten = new AtomicLong();
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,34,private CountingOutputStream(final OutputStream out) {
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,35,super(out);
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,38,@Override
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,39,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,40,out.write(b);
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,41,count(1);
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,43,@Override
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,44,public void write(byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,45,"write(b, 0, b.length);"
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,47,@Override
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,48,"public void write(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,49,"out.write(b, off, len);"
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,50,count(len);
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,54,* Increments the counter of already written bytes.
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,55,* Doesn't increment if the EOF has been hit (written == -1)
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,57,* @param written the number of bytes written
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,59,protected void count(long written) {
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,60,if (written != -1) {
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,61,bytesWritten.addAndGet(written);
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,66,* Returns the current number of bytes written to this stream.
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,67,* @return the number of written bytes
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,69,public long getBytesWritten() {
True,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java,70,return bytesWritten.longValue();

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,275,if (current.entry.getCompressedSize() != -1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,276,&& current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,277,"current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,378,} else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,379,"read = current.in.read(buffer, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,983,* The input stream decompressing the data for shrunk and imploded entries.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,985,private InputStream in;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,989,* Bounded input stream adapted from commons-io
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,991,private class BoundedInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,993,/** the wrapped input stream */
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,994,private final InputStream in;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,996,/** the max length to provide */
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,997,private final long max;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,999,/** the number of bytes already returned */
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1000,private long pos = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1003,* Creates a new <code>BoundedInputStream</code> that wraps the given input
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1004,* stream and limits it to a certain size.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1006,* @param in The wrapped input stream
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1007,* @param size The maximum number of bytes to return
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1009,"public BoundedInputStream(final InputStream in, final long size) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1010,this.max = size;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1011,this.in = in;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1014,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1015,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1016,if (max >= 0 && pos >= max) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1017,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1019,final int result = in.read();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1020,pos++;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1021,count(1);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1022,current.bytesReadFromStream++;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1023,return result;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1026,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1027,public int read(final byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1028,"return this.read(b, 0, b.length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1031,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1032,"public int read(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1033,if (max >= 0 && pos >= max) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1034,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1036,"final long maxRead = max >= 0 ? Math.min(len, max - pos) : len;"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1037,"final int bytesRead = in.read(b, off, (int) maxRead);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1039,if (bytesRead == -1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1040,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1043,pos += bytesRead;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1044,count(bytesRead);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1045,current.bytesReadFromStream += bytesRead;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1046,return bytesRead;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1049,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1050,public long skip(final long n) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1051,"final long toSkip = max >= 0 ? Math.min(n, max - pos) : n;"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1052,final long skippedBytes = in.skip(toSkip);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1053,pos += skippedBytes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1054,return skippedBytes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1057,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1058,public int available() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1059,if (max >= 0 && pos >= max) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1060,return 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,1062,return in.available();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,31,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,126,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,127,public void testUnshrinkEntry() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,128,"ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""SHRUNK.ZIP"")));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,130,ZipArchiveEntry entry = in.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,131,"assertEquals(""method"", ZipMethod.UNSHRINKING.getCode(), entry.getMethod());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,133,"FileInputStream original = new FileInputStream(getFile(""test1.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,134,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,135,"assertArrayEquals(IOUtils.toByteArray(original), IOUtils.toByteArray(in));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,136,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,137,original.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,140,entry = in.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,141,"assertEquals(""method"", ZipMethod.UNSHRINKING.getCode(), entry.getMethod());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,143,"original = new FileInputStream(getFile(""test2.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,144,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,145,"assertArrayEquals(IOUtils.toByteArray(original), IOUtils.toByteArray(in));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,146,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,147,original.close();

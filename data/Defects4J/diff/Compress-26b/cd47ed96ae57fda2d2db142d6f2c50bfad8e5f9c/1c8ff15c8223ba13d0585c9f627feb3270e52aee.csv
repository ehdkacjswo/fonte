is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,119," Returns the encoding to use for arj, zip and tar files,"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,120, or null for the default.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,119,"* Returns the encoding to use for arj, zip, dump, cpio and tar"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,120,"* files, or null for the default."
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,130," Sets the encoding to use for arj, zip and tar files."
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,131, Use null for the default.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,130,"* Sets the encoding to use for arj, zip, dump, cpio and tar"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,131,* files.  Use null for the default.
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,188,eturn new CpioArchiveInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,188,if (entryEncoding != null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,189,"return new CpioArchiveInputStream(in, entryEncoding);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,190,} else {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,191,return new CpioArchiveInputStream(in);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,191,eturn new DumpArchiveInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,195,if (entryEncoding != null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,196,"return new DumpArchiveInputStream(in, entryEncoding);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,197,} else {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,198,return new DumpArchiveInputStream(in);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,237,eturn new CpioArchiveOutputStream(out);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,245,if (entryEncoding != null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,246,"return new CpioArchiveOutputStream(out, entryEncoding);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,247,} else {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,248,return new CpioArchiveOutputStream(out);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,118,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,123,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,147,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,156,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,161,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,170,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,72,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,87,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,218,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,228,** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,66,* File mode of this entry.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,68,* <p>The format depends on the host os that created the entry.</p>
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,70,public int getMode() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,71,return localFileHeader.fileAccessMode;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,75,* File mode of this entry as Unix stat value.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,77,* <p>Will only be non-zero of the host os was UNIX.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,79,public int getUnixMode() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,80,return getHostOs() == HostOs.UNIX ? getMode() : 0;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,84,* The operating system the archive has been created on.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,85,* @see HostOs
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,87,public int getHostOs() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,88,return localFileHeader.hostOS;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,92,* The known values for HostOs.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,94,public static class HostOs {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,95,public static final int DOS = 0;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,96,public static final int PRIMOS = 1;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,97,public static final int UNIX = 2;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,98,public static final int AMIGA = 3;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,99,public static final int MAC_OS = 4;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,100,public static final int OS_2 = 5;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,101,public static final int APPLE_GS = 6;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,102,public static final int ATARI_ST = 7;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,103,public static final int NEXT = 8;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,104,public static final int VAX_VMS = 9;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,105,public static final int WIN95 = 10;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,106,public static final int WIN32 = 11;
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,94,rivate static final void debug(final String message) {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,95,f (DEBUG) {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,96,ystem.out.println(message);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,94,private static void debug(final String message) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,95,System.out.println(message);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,100,rivate static final int read16(final DataInputStream in) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,98,private int read8(final DataInputStream in) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,99,int value = in.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,100,count(1);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,101,return value;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,104,private int read16(final DataInputStream in) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,106,count(2);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,110,private int read32(final DataInputStream in) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,111,final int value = in.readInt();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,112,count(4);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,113,return Integer.reverseBytes(value);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,105,rivate final String readString(final DataInputStream in) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,116,private String readString(final DataInputStream in) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,111,"eturn new String(buffer.toByteArray(), charset);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,122,if (charset != null) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,123,"return new String(buffer.toByteArray(), charset);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,124,} else {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,125,return new String(buffer.toByteArray());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,129,"private void readFully(final DataInputStream in, byte[] b)"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,130,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,131,in.readFully(b);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,132,count(b.length);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,119,nt second = in.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,140,int second = read8(in);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,122,econd = in.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,143,second = read8(in);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,131,n.readFully(basicHeaderBytes);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,132,inal int basicHeaderCrc32 = Integer.reverseBytes(in.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,152,"readFully(in, basicHeaderBytes);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,153,final int basicHeaderCrc32 = read32(in);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,165,ainHeader.dateTimeCreated = Integer.reverseBytes(firstHeader.readInt());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,166,ainHeader.dateTimeModified = Integer.reverseBytes(firstHeader.readInt());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,167,ainHeader.archiveSize = 0xffffFFFFL & Integer.reverseBytes(firstHeader.readInt());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,168,ainHeader.securityEnvelopeFilePosition = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,186,mainHeader.dateTimeCreated = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,187,mainHeader.dateTimeModified = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,188,mainHeader.archiveSize = 0xffffFFFFL & read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,189,mainHeader.securityEnvelopeFilePosition = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,192,pushedBackBytes(20); // count has already counted them via readFully
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,188,n.readFully(mainHeader.extendedHeaderBytes);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,189,inal int extendedHeaderCrc32 = Integer.reverseBytes(in.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,210,"readFully(in, mainHeader.extendedHeaderBytes);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,211,final int extendedHeaderCrc32 = read32(in);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,197,ebug(mainHeader.toString());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,219,if (DEBUG) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,220,debug(mainHeader.toString());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,224,ocalFileHeader.dateTimeModified = Integer.reverseBytes(firstHeader.readInt());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,225,ocalFileHeader.compressedSize = 0xffffFFFFL & Integer.reverseBytes(firstHeader.readInt());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,226,ocalFileHeader.originalSize = 0xffffFFFFL & Integer.reverseBytes(firstHeader.readInt());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,227,ocalFileHeader.originalCrc32 = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,248,localFileHeader.dateTimeModified = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,249,localFileHeader.compressedSize = 0xffffFFFFL & read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,250,localFileHeader.originalSize = 0xffffFFFFL & read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,251,localFileHeader.originalCrc32 = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,254,pushedBackBytes(20);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,234,ocalFileHeader.extendedFilePosition = Integer.reverseBytes(firstHeader.readInt());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,235,ocalFileHeader.dateTimeAccessed = Integer.reverseBytes(firstHeader.readInt());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,236,ocalFileHeader.dateTimeCreated = Integer.reverseBytes(firstHeader.readInt());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,237,ocalFileHeader.originalSizeEvenForVolumes = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,259,localFileHeader.extendedFilePosition = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,260,localFileHeader.dateTimeAccessed = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,261,localFileHeader.dateTimeCreated = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,262,localFileHeader.originalSizeEvenForVolumes = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,263,pushedBackBytes(16);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,248,n.readFully(extendedHeaderBytes);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,249,inal int extendedHeaderCrc32 = Integer.reverseBytes(in.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,274,"readFully(in, extendedHeaderBytes);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,275,final int extendedHeaderCrc32 = read32(in);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,259,ebug(localFileHeader.toString());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,285,if (DEBUG) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,286,debug(localFileHeader.toString());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,306,Override
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,307,ublic int read() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,308,f (currentLocalFileHeader.method != LocalFileHeader.Methods.STORED) {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,309,"hrow new IOException(""Unsupported compression method "" + currentLocalFileHeader.method);"
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,311,eturn currentInputStream.read();
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,580,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,600,eturn (this.mode & S_IFMT) == C_ISBLK;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,599,return CpioUtil.fileType(mode) == C_ISBLK;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,609,eturn (this.mode & S_IFMT) == C_ISCHR;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,608,return CpioUtil.fileType(mode) == C_ISCHR;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,618,eturn (this.mode & S_IFMT) == C_ISDIR;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,617,return CpioUtil.fileType(mode) == C_ISDIR;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,627,eturn (this.mode & S_IFMT) == C_ISNWK;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,626,return CpioUtil.fileType(mode) == C_ISNWK;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,636,eturn (this.mode & S_IFMT) == C_ISFIFO;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,635,return CpioUtil.fileType(mode) == C_ISFIFO;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,645,eturn (this.mode & S_IFMT) == C_ISREG;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,644,return CpioUtil.fileType(mode) == C_ISREG;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,654,eturn (this.mode & S_IFMT) == C_ISSOCK;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,653,return CpioUtil.fileType(mode) == C_ISSOCK;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,663,eturn (this.mode & S_IFMT) == C_ISLNK;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,662,return CpioUtil.fileType(mode) == C_ISLNK;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,27,import org.apache.commons.compress.archivers.zip.ZipEncoding;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,28,import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,30,import org.apache.commons.compress.utils.CharsetNames;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,47,     StringBuffer buf = new StringBuffer();
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,50,*     StringBuilder buf = new StringBuilder();
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,91,* The encoding to use for filenames and labels.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,93,private final ZipEncoding encoding;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,89, CpioConstants#BLOCK_SIZE BLOCK_SIZE}.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,97,* CpioConstants#BLOCK_SIZE BLOCK_SIZE} and expecting ASCII file
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,98,* names.
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,95,"his(in, BLOCK_SIZE);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,104,"this(in, BLOCK_SIZE, CharsetNames.US_ASCII);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,99, Construct the cpio input stream with a blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,100, Construct the cpio input stream.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,108,* Construct the cpio input stream with a blocksize of {@link
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,109,* CpioConstants#BLOCK_SIZE BLOCK_SIZE}.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,111,* @param in
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,112,*            The cpio stream
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,113,* @param encoding
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,114,*            The encoding of file names to expect - use null for
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,115,*            the platform's default.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,116,* @since 1.6
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,118,"public CpioArchiveInputStream(final InputStream in, String encoding) {"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,119,"this(in, BLOCK_SIZE, encoding);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,123,* Construct the cpio input stream with a blocksize of {@link
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,124,* CpioConstants#BLOCK_SIZE BLOCK_SIZE} expecting ASCII file
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,125,* names.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,134,"this(in, blockSize, CharsetNames.US_ASCII);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,138,* Construct the cpio input stream with a blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,140,* @param in
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,141,*            The cpio stream
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,142,* @param blockSize
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,143,*            The block size of the archive.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,144,* @param encoding
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,145,*            The encoding of file names to expect - use null for
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,146,*            the platform's default.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,147,* @since 1.6
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,149,"public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,152,this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,331,f (mode != 0){ // mode is initialised to 0
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,373,if (CpioUtil.fileType(mode) != 0){ // mode is initialised to 0
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,347,f (mode == 0 && !name.equals(CPIO_TRAILER)){
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,389,if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,361,f (mode != 0) {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,403,if (CpioUtil.fileType(mode) != 0) {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,373,f (mode == 0 && !name.equals(CPIO_TRAILER)){
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,415,if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,387,f (mode != 0){
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,429,if (CpioUtil.fileType(mode) != 0){
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,399,f (mode == 0 && !name.equals(CPIO_TRAILER)){
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,441,if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,408,yte tmpBuffer[] = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,450,// don't include trailing NUL in file name to decode
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,451,byte tmpBuffer[] = new byte[length - 1];
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,410,"eturn new String(tmpBuffer, 0, tmpBuffer.length - 1); // TODO default charset?"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,453,this.in.read();
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,454,return encoding.decode(tmpBuffer);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,448,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,450,ublic ArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,493,public CpioArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,24,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,29,import org.apache.commons.compress.archivers.zip.ZipEncoding;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,30,import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,32,import org.apache.commons.compress.utils.CharsetNames;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,90, Construct the cpio output stream with a specified format and a
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,91, blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,94,* The encoding to use for filenames and labels.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,96,private final ZipEncoding encoding;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,99,"* Construct the cpio output stream with a specified format, a"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,100,* blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE} and
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,101,* using ASCII as the file name encoding.
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,99,"his(out, format, BLOCK_SIZE);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,109,"this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,103, Construct the cpio output stream with a specified format
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,113,* Construct the cpio output stream with a specified format using
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,114,* ASCII as the file name encoding.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,127,"this(out, format, blockSize, CharsetNames.US_ASCII);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,131,* Construct the cpio output stream with a specified format using
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,132,* ASCII as the file name encoding.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,134,* @param out
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,135,*            The cpio stream
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,136,* @param format
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,137,*            The format of the stream
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,138,* @param blockSize
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,139,*            The block size of the archive.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,140,* @param encoding
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,141,*            The encoding of file names to write - use null for
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,142,*            the platform's default.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,144,* @since 1.6
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,146,"public CpioArchiveOutputStream(final OutputStream out, final short format,"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,147,"final int blockSize, final String encoding) {"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,161,this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,133," ""new"" format"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,166,"* ""new"" format using ASCII encoding for file names"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,176,* Construct the cpio output stream. The format for this CPIO stream is the
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,177,"* ""new"" format."
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,179,* @param out
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,180,*            The cpio stream
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,181,* @param encoding
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,182,*            The encoding of file names to write - use null for
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,183,*            the platform's default.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,184,* @since 1.6
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,186,"public CpioArchiveOutputStream(final OutputStream out, String encoding) {"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,187,"this(out, FORMAT_NEW, BLOCK_SIZE, encoding);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,458,tringBuffer tmp = new StringBuffer();
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,506,StringBuilder tmp = new StringBuilder();
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,488,yte[] b = ArchiveUtils.toAsciiBytes(str);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,489,ut.write(b);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,536,ByteBuffer buf = encoding.encode(str);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,537,final int len = buf.limit() - buf.position();
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,538,"out.write(buf.array(), buf.arrayOffset(), len);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,491,ount(b.length + 1);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,540,count(len + 1);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,29,* Extracts the file type bits from a mode.
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,31,static long fileType(long mode) {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,32,return mode & CpioConstants.S_IFMT;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,589,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveException.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveException.java,38,uper();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,23,import org.apache.commons.compress.archivers.zip.ZipEncoding;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,24,import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,44,* There doesn't seem to exist a hint on the encoding of string values
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,45,* in any piece documentation.  Given the main purpose of dump/restore
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,46,* is backing up a system it seems very likely the format uses the
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,47,* current default encoding of the system.
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,68, Constructor.
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,75,* The encoding to use for filenames and labels.
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,77,private final ZipEncoding encoding;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,80,* Constructor using the platform's default encoding for file
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,81,* names.
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,87,"this(is, null);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,91,* Constructor.
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,93,* @param is
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,94,"* @param encoding the encoding to use for file names, use null"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,95,* for the platform's default encoding
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,96,* @since 1.6
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,98,"public DumpArchiveInputStream(InputStream is, String encoding)"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,99,throws ArchiveException {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,102,this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,86,ummary = new DumpArchiveSummary(headerBytes);
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,113,"summary = new DumpArchiveSummary(headerBytes, this.encoding);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,327,"tring name = new String(blockBuffer, i + 8, blockBuffer[i + 7]); // TODO default charset?"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,354,"String name = DumpArchiveUtil.decode(encoding, blockBuffer, i + 8, blockBuffer[i + 7]);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,24,import org.apache.commons.compress.archivers.zip.ZipEncoding;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,44,umpArchiveSummary(byte[] buffer) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,46,"DumpArchiveSummary(byte[] buffer, ZipEncoding encoding) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,48,"abel = new String(buffer, 676, DumpArchiveConstants.LBLSIZE).trim(); // TODO default charset?"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,50,"label = DumpArchiveUtil.decode(encoding, buffer, 676, DumpArchiveConstants.LBLSIZE).trim();"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,50,"ilesys = new String(buffer, 696, DumpArchiveConstants.NAMELEN).trim(); // TODO default charset?"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,51,"evname = new String(buffer, 760, DumpArchiveConstants.NAMELEN).trim(); // TODO default charset?"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,52,"ostname = new String(buffer, 824, DumpArchiveConstants.NAMELEN).trim(); // TODO default charset?"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,52,"filesys = DumpArchiveUtil.decode(encoding, buffer, 696, DumpArchiveConstants.NAMELEN).trim();"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,53,"devname = DumpArchiveUtil.decode(encoding, buffer, 760, DumpArchiveConstants.NAMELEN).trim();"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,54,"hostname = DumpArchiveUtil.decode(encoding, buffer, 824, DumpArchiveConstants.NAMELEN).trim();"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,22,import org.apache.commons.compress.archivers.zip.ZipEncoding;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,137,* Decodes a byte array to a string.
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,139,"static String decode(ZipEncoding encoding, byte[] b, int offset, int len)"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,140,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,141,byte[] copy = new byte[len];
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,142,"System.arraycopy(b, offset, copy, 0, len);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,143,return encoding.decode(copy);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,33,import org.apache.commons.compress.utils.CharsetNames;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,673,"iles[nextFile++].setName(new String(names, nextName, i-nextName, ""UTF-16LE""));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,674,"files[nextFile++].setName(new String(names, nextName, i-nextName, CharsetNames.UTF_16LE));"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,544,** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,39,import org.apache.commons.compress.utils.IOUtils;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,49,rivate static final int BUFFER_SIZE = 8 * 1024;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,51,rivate final byte[] SKIP_BUF = new byte[BUFFER_SIZE];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,54,/** The size the TAR header */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,55,private final int recordSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,57,/** The size of a block */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,58,private final int blockSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,60,/** True if file has hit EOF */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,63,/** Size of the current entry */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,66,/** How far into the entry the stream is at */
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,57,rivate byte[] readBuf;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,58,rotected final TarBuffer buffer;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,69,/** An input stream to read from */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,70,private final InputStream is;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,72,/** The meta-data about the current entry */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,75,/** The encoding of the file */
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,67,"his(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,83,"this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,77,"his(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE, encoding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,93,"this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,94,encoding);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,86,"his(is, blockSize, TarBuffer.DEFAULT_RCDSIZE);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,103,"this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,98,"his(is, blockSize, TarBuffer.DEFAULT_RCDSIZE, encoding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,115,"this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,108,"his(is, blockSize, recordSize, null);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,125,"this(is, blockSize, recordSize, null);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,121,"his.buffer = new TarBuffer(is, blockSize, recordSize);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,122,his.readBuf = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,138,this.is = is;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,141,this.recordSize = recordSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,142,this.blockSize = blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,133,uffer.close();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,151,is.close();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,137, Get the record size being used by this stream's TarBuffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,155,* Get the record size being used by this stream's buffer.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,142,eturn buffer.getRecordSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,160,return recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,177,/ REVIEW
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,178,"/ This is horribly inefficient, but it ensures that we"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,179,/ properly skip over bytes via the TarBuffer...
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,181,ong skip = numToSkip;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,182,hile (skip > 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,183,nt realSkip = (int) (skip > SKIP_BUF.length
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,184, SKIP_BUF.length : skip);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,185,"nt numRead = read(SKIP_BUF, 0, realSkip);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,186,f (numRead == -1) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,187,reak;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,189,kip -= numRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,191,eturn (numToSkip - skip);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,196,long available = (entrySize - entryOffset);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,197,"numToSkip = Math.min(numToSkip, available);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,199,"long skipped = IOUtils.skip(is, numToSkip);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,200,count(skipped);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,201,entryOffset += skipped;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,202,return skipped;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,220,ong numToSkip = entrySize - entryOffset;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,231,/* Skip will only go to the end of the current entry */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,232,skip(Long.MAX_VALUE);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,222,hile (numToSkip > 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,223,ong skipped = skip(numToSkip);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,224,f (skipped <= 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,225,"hrow new RuntimeException(""failed to skip current tar"""
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,226," "" entry"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,228,umToSkip -= skipped;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,231,eadBuf = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,234,/* skip to the end of the last record */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,235,skipRecordPadding();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,297,"* The last record block should be written at the full size, so skip any"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,298,* additional space used to fill a record after an entry
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,300,private void skipRecordPadding() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,301,if (this.entrySize > 0 && this.entrySize % this.recordSize != 0) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,302,long numRecords = (this.entrySize / this.recordSize) + 1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,303,long padding = (numRecords * this.recordSize) - this.entrySize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,304,"long skipped = IOUtils.skip(is, padding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,305,count(skipped);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,338,yte[] headerBuf = null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,339,f (!hasHitEOF) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,340,eaderBuf = buffer.readRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,341,asHitEOF = buffer.isEOFRecord(headerBuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,342,f (hasHitEOF && headerBuf != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,343,uffer.tryToConsumeSecondEOFRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,344,eaderBuf = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,357,byte[] headerBuf = readRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,358,hasHitEOF = isEOFRecord(headerBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,359,if (hasHitEOF && headerBuf != null) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,360,tryToConsumeSecondEOFRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,361,consumeRemainderOfLastBlock();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,362,headerBuf = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,368,* Determine if an archive record indicate End of Archive. End of
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,369,* archive is indicated by a record that consists entirely of null bytes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,371,* @param record The record data to check.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,372,* @return true if the record data is an End of Archive
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,374,protected boolean isEOFRecord(byte[] record) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,375,"return record == null || ArchiveUtils.isArrayZero(record, recordSize);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,379,* Read a record from the input stream and return the data.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,381,* @return The record data or null if EOF has been hit.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,382,* @throws IOException on error
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,384,protected byte[] readRecord() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,386,byte[] record = new byte[recordSize];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,388,int readNow = is.read(record);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,389,count(readNow);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,390,if (readNow != recordSize) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,391,return null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,394,return record;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,518,* Returns the next Archive Entry in this Stream.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,520,"* @return the next entry,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,521,*         or {@code null} if there are no more entries
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,522,* @throws IOException if the next entry could not be read
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,530,* Tries to read the next record rewinding the stream if it is not a EOF record.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,532,* <p>This is meant to protect against cases where a tar
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,533,* implementation has written only one EOF record when two are
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,534,* expected.  Actually this won't help since a non-conforming
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,535,* implementation likely won't fill full blocks consisting of - by
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,536,* default - ten records either so we probably have already read
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,537,* beyond the archive anyway.</p>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,539,private void tryToConsumeSecondEOFRecord() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,540,boolean shouldReset = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,541,boolean marked = is.markSupported();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,542,if (marked) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,543,is.mark(recordSize);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,545,try {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,546,shouldReset = !isEOFRecord(readRecord());
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,547,} finally {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,548,if (shouldReset && marked) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,549,pushedBackBytes(recordSize);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,550,is.reset();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,491,nt totalRead = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,570,int totalRead = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,493,f (entryOffset >= entrySize) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,572,if (hasHitEOF || entryOffset >= entrySize) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,497,f ((numToRead + entryOffset) > entrySize) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,498,umToRead = (int) (entrySize - entryOffset);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,501,f (readBuf != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,502,nt sz = (numToRead > readBuf.length) ? readBuf.length
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,503, numToRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,505,"ystem.arraycopy(readBuf, 0, buf, offset, sz);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,507,f (sz >= readBuf.length) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,508,eadBuf = null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,509, else {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,510,nt newLen = readBuf.length - sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,511,yte[] newBuf = new byte[newLen];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,513,"ystem.arraycopy(readBuf, sz, newBuf, 0, newLen);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,515,eadBuf = newBuf;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,518,otalRead += sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,519,umToRead -= sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,520,ffset += sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,523,hile (numToRead > 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,524,yte[] rec = buffer.readRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,526,f (rec == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,527,/ Unexpected EOF!
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,528,"hrow new IOException(""unexpected EOF with "" + numToRead"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,529," "" bytes unread. Occured at byte: "" + getBytesRead());"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,531,ount(rec.length);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,532,nt sz = numToRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,533,nt recLen = rec.length;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,535,f (recLen > sz) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,536,"ystem.arraycopy(rec, 0, buf, offset, sz);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,538,eadBuf = new byte[recLen - sz];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,540,"ystem.arraycopy(rec, sz, readBuf, 0, recLen - sz);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,541, else {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,542,z = recLen;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,544,"ystem.arraycopy(rec, 0, buf, offset, recLen);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,547,otalRead += sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,548,umToRead -= sz;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,549,ffset += sz;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,576,"numToRead = Math.min(numToRead, available());"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,578,"totalRead = is.read(buf, offset, numToRead);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,579,count(totalRead);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,581,if (totalRead == -1) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,582,hasHitEOF = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,583,} else {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,584,entryOffset += (long) totalRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,552,ntryOffset += totalRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,571,rotected final TarArchiveEntry getCurrentEntry() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,605,* Get the current TAR Archive Entry that this input stream is processing
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,607,* @return The current Archive Entry
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,609,public ArchiveEntry getCurrentEntry() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,626,"* This method is invoked once the end of the archive is hit, it"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,627,* tries to consume the remaining bytes under the assumption that
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,628,* the tool creating this archive has padded the last block.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,630,private void consumeRemainderOfLastBlock() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,631,long bytesReadOfLastBlock = getBytesRead() % blockSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,632,if (bytesReadOfLastBlock > 0) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,633,"long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,634,count(skipped);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,70,rotected final TarBuffer buffer;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,72,private int recordsWritten;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,73,private final int recordsPerBlock;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,74,private final int recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,95,"his(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,97,"this(os, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,105,"his(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE, encoding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,107,"this(os, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE, encoding);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,114,"his(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,116,"this(os, blockSize, TarConstants.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,126,"his(os, blockSize, TarBuffer.DEFAULT_RCDSIZE, encoding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,128,"this(os, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,152,"his.buffer = new TarBuffer(out, blockSize, recordSize);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,157,this.recordSize = recordSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,158,this.recordsPerBlock = blockSize / recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,220,uffer.flushBlock();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,223,padAsNeeded();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,224,out.flush();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,230,f(!finished) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,234,if (!finished) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,235,uffer.close();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,247,eturn buffer.getRecordSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,250,return this.recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,271,inal ByteBuffer encodedName = encoding.encode(entryName);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,272,inal int nameLen = encodedName.limit() - encodedName.position();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,273,oolean paxHeaderContainsPath = false;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,274,f (nameLen >= TarConstants.NAMELEN) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,274,"boolean paxHeaderContainsPath = handleLongName(entryName, paxHeaders, ""path"","
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,275,"TarConstants.LF_GNUTYPE_LONGNAME, ""file name"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,276,f (longFileMode == LONGFILE_POSIX) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,277,"axHeaders.put(""path"", entryName);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,278,axHeaderContainsPath = true;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,279, else if (longFileMode == LONGFILE_GNU) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,280,"/ create a TarEntry for the LongLink, the contents"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,281,/ of which are the entry's name
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,282,"arArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,283,arConstants.LF_GNUTYPE_LONGNAME);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,285,ongLinkEntry.setSize(nameLen + 1); // +1 for NUL
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,286,utArchiveEntry(longLinkEntry);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,287,"rite(encodedName.array(), encodedName.arrayOffset(), nameLen);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,288,rite(0); // NUL terminator
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,289,loseArchiveEntry();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,290, else if (longFileMode != LONGFILE_TRUNCATE) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,291,"hrow new RuntimeException(""file name '"" + entryName"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,292," ""' is too long ( > """
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,293," TarConstants.NAMELEN + "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,277,final String linkName = entry.getLinkName();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,278,boolean paxHeaderContainsLinkPath = linkName != null && linkName.length() > 0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,279,"&& handleLongName(linkName, paxHeaders, ""linkpath"","
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,280,"TarConstants.LF_GNUTYPE_LONGLINK, ""link name"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,308,f (addPaxHeadersForNonAsciiNames
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,293,if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsLinkPath
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,310,& !ASCII.canEncode(entry.getLinkName())) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,311,"axHeaders.put(""linkpath"", entry.getLinkName());"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,295,&& !ASCII.canEncode(linkName)) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,296,"paxHeaders.put(""linkpath"", linkName);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,320,uffer.writeRecord(recordBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,305,writeRecord(recordBuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,356,uffer.writeRecord(assemBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,341,writeRecord(assemBuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,410,uffer.writeRecord(recordBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,395,writeRecord(recordBuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,441,"uffer.writeRecord(wBuf, wOffset);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,426,"writeRecord(wBuf, wOffset);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,499,tringBuffer result = new StringBuffer(length);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,484,StringBuilder result = new StringBuilder(length);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,515,uffer.writeRecord(recordBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,500,writeRecord(recordBuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,523,** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,518,* Write an archive record to the archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,520,* @param record The record data to write to the archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,521,* @throws IOException on error
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,523,private void writeRecord(byte[] record) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,524,if (record.length != recordSize) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,525,"throw new IOException(""record to write has length '"""
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,526,+ record.length
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,527,"+ ""' which is not the record size of '"""
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,528,"+ recordSize + ""'"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,531,out.write(record);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,532,recordsWritten++;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,536,"* Write an archive record to the archive, where the record may be"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,537,"* inside of a larger array buffer. The buffer must be ""offset plus"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,538,"* record size"" long."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,540,* @param buf The buffer containing the record data to write.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,541,* @param offset The offset of the record data within buf.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,542,* @throws IOException on error
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,544,"private void writeRecord(byte[] buf, int offset) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,546,if ((offset + recordSize) > buf.length) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,547,"throw new IOException(""record has length '"" + buf.length"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,548,"+ ""' with offset '"" + offset"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,549,"+ ""' which is less than the record size of '"""
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,550,"+ recordSize + ""'"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,553,"out.write(buf, offset, recordSize);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,554,recordsWritten++;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,557,private void padAsNeeded() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,558,int start = recordsWritten % recordsPerBlock;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,559,if (start != 0) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,560,for (int i = start; i < recordsPerBlock; i++) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,561,writeEOFRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,617,* Handles long file or link names according to the longFileMode setting.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,619,* <p>I.e. if the given name is too long to be written to a plain
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,620,* tar header then
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,621,* <ul>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,622,*   <li>it creates a pax header who's name is given by the
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,623,*   paxHeaderName parameter if longFileMode is POSIX</li>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,624,*   <li>it creates a GNU longlink entry who's type is given by
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,625,*   the linkType parameter if longFileMode is GNU</li>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,626,*   <li>it throws an exception if longFileMode is ERROR</li>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,627,*   <li>it truncates the name if longFileMode is TRUNCATE</li>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,628,* </ul></p>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,630,* @param name the name to write
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,631,* @param paxHeaders current map of pax headers
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,632,* @param paxHeaderName name of the pax header to write
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,633,* @param linkType type of the GNU entry to write
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,634,* @param fieldName the name of the field
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,635,* @return whether a pax header has been written.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,637,"private boolean handleLongName(String name,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,638,"Map<String, String> paxHeaders,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,639,"String paxHeaderName, byte linkType, String fieldName)"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,640,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,641,final ByteBuffer encodedName = encoding.encode(name);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,642,final int len = encodedName.limit() - encodedName.position();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,643,if (len >= TarConstants.NAMELEN) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,645,if (longFileMode == LONGFILE_POSIX) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,646,"paxHeaders.put(paxHeaderName, name);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,647,return true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,648,} else if (longFileMode == LONGFILE_GNU) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,649,"// create a TarEntry for the LongLink, the contents"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,650,// of which are the link's name
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,651,"TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, linkType);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,653,longLinkEntry.setSize(len + 1); // +1 for NUL
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,654,putArchiveEntry(longLinkEntry);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,655,"write(encodedName.array(), encodedName.arrayOffset(), len);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,656,write(0); // NUL terminator
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,657,closeArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,658,} else if (longFileMode != LONGFILE_TRUNCATE) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,659,"throw new RuntimeException(fieldName + "" '"" + name"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,660,"+ ""' is too long ( > """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,661,"+ TarConstants.NAMELEN + "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,664,return false;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,3, or more contributor license agreements.  See the NOTICE file
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,4, distributed with this work for additional information
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,6," to you under the Apache License, Version 2.0 (the"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,7," ""License""); you may not use this file except in compliance"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,8, with the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,12," Unless required by applicable law or agreed to in writing,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,13, software distributed under the License is distributed on an
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,15," KIND, either express or implied.  See the License for the"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,16, specific language governing permissions and limitations
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,17, under the License.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,19,ackage org.apache.commons.compress.archivers.tar;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,21,mport java.io.IOException;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,22,mport java.io.InputStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,23,mport java.io.OutputStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,24,mport java.util.Arrays;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,27, The TarBuffer class implements the tar archive concept
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,28, of a buffered input stream. This concept goes back to the
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,29, days of blocked tape drives and special io devices. In the
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,30," Java universe, the only real function that this class"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,31," performs is to ensure that files have the correct ""block"""
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,32," size, or other tars will complain."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,33, <p>
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,34, You should never have a need to access this class directly.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,35, TarBuffers are created by Tar IO Streams.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,36, @NotThreadSafe
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,39,"lass TarBuffer { // Not public, because only needed by the Tar IO streams"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,41,** Default record size */
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,42,ublic static final int DEFAULT_RCDSIZE = (512);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,44,** Default block size */
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,45,ublic static final int DEFAULT_BLKSIZE = (DEFAULT_RCDSIZE * 20);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,47,rivate static final byte[] DEFAULT_EOF_RECORD = new byte[DEFAULT_RCDSIZE];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,49,/ TODO make these final? (would need to change close() method)
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,50,rivate InputStream     inStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,51,rivate OutputStream    outStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,52,rivate final int             blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,53,rivate final int             recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,54,rivate final int             recsPerBlock;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,55,rivate final byte[]          blockBuffer;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,56,rivate final byte[]          eofRecord;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,58,rivate int             currBlkIdx;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,59,rivate int             currRecIdx;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,62, Constructor for a TarBuffer on an input stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,63, @param inStream the input stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,65,ublic TarBuffer(InputStream inStream) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,66,"his(inStream, TarBuffer.DEFAULT_BLKSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,70, Constructor for a TarBuffer on an input stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,71, @param inStream the input stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,72, @param blockSize the block size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,74,"ublic TarBuffer(InputStream inStream, int blockSize) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,75,"his(inStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,79, Constructor for a TarBuffer on an input stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,80, @param inStream the input stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,81, @param blockSize the block size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,82, @param recordSize the record size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,84,"ublic TarBuffer(InputStream inStream, int blockSize, int recordSize) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,85,"his(inStream, null, blockSize, recordSize);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,89, Constructor for a TarBuffer on an output stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,90, @param outStream the output stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,92,ublic TarBuffer(OutputStream outStream) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,93,"his(outStream, TarBuffer.DEFAULT_BLKSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,97, Constructor for a TarBuffer on an output stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,98, @param outStream the output stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,99, @param blockSize the block size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,101,"ublic TarBuffer(OutputStream outStream, int blockSize) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,102,"his(outStream, blockSize, TarBuffer.DEFAULT_RCDSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,106, Constructor for a TarBuffer on an output stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,107, @param outStream the output stream to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,108, @param blockSize the block size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,109, @param recordSize the record size to use
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,111,"ublic TarBuffer(OutputStream outStream, int blockSize, int recordSize) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,112,"his(null, outStream, blockSize, recordSize);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,116, Private constructor to perform common setup.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,118,"rivate TarBuffer(InputStream inStream, OutputStream outStream, int blockSize, int recordSize) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,119,his.inStream = inStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,120,his.outStream = outStream;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,121,his.blockSize = blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,122,his.recordSize = recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,123,his.recsPerBlock = (this.blockSize / this.recordSize);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,124,his.blockBuffer = new byte[this.blockSize];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,125,his.eofRecord = recordSize == DEFAULT_RCDSIZE
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,126, DEFAULT_EOF_RECORD : new byte[recordSize];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,128,f (this.inStream != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,129,his.currBlkIdx = -1;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,130,his.currRecIdx = this.recsPerBlock;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,131, else {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,132,his.currBlkIdx = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,133,his.currRecIdx = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,138, Get the TAR Buffer's block size. Blocks consist of multiple records.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,139, @return the block size
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,141,ublic int getBlockSize() {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,142,eturn this.blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,146, Get the TAR Buffer's record size.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,147, @return the record size
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,149,ublic int getRecordSize() {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,150,eturn this.recordSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,154, Determine if an archive record indicate End of Archive. End of
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,155, archive is indicated by a record that consists entirely of null bytes.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,157, @param record The record data to check.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,158, @return true if the record data is an End of Archive
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,160,ublic boolean isEOFRecord(byte[] record) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,161,"eturn record == null || Arrays.equals(record, eofRecord);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,165, Skip over a record on the input stream.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,166, @throws IOException on error
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,168,ublic void skipRecord() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,169,f (inStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,170,"hrow new IOException(""reading (via skip) from an output buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,173,f (currRecIdx >= recsPerBlock && !readBlock()) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,174,eturn;    // UNDONE
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,177,urrRecIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,181, Read a record from the input stream and return the data.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,183, @return The record data or null if EOF has been hit.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,184, @throws IOException on error
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,186,ublic byte[] readRecord() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,187,f (inStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,188,f (outStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,189,"hrow new IOException(""input buffer is closed"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,191,"hrow new IOException(""reading from an output buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,194,f (currRecIdx >= recsPerBlock && !readBlock()) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,195,eturn null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,198,yte[] result = new byte[recordSize];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,200,"ystem.arraycopy(blockBuffer,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,201,"currRecIdx * recordSize), result, 0,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,202,ecordSize);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,204,urrRecIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,206,eturn result;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,210," @return false if End-Of-File, else true"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,212,rivate boolean readBlock() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,213,f (inStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,214,"hrow new IOException(""reading from an output buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,217,urrRecIdx = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,219,nt offset = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,220,nt bytesNeeded = blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,222,hile (bytesNeeded > 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,223,"ong numBytes = inStream.read(blockBuffer, offset,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,224,ytesNeeded);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,227,/ NOTE
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,228,"/ We have fit EOF, and the block is not full!"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,230,/ This is a broken archive. It does not follow the standard
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,231,"/ blocking algorithm. However, because we are generous, and"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,232,"/ it requires little effort, we will simply ignore the error"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,233,/ and continue as if the entire block were read. This does
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,234,/ not appear to break anything upstream. We used to return
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,235,/ false in this case.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,237,/ Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,239,f (numBytes == -1) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,240,f (offset == 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,241,/ Ensure that we do not read gigabytes of zeros
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,242,/ for a corrupt tar file.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,243,/ See http://issues.apache.org/bugzilla/show_bug.cgi?id=39924
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,244,eturn false;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,246,"/ However, just leaving the unread portion of the buffer dirty does"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,247,/ cause problems in some cases.  This problem is described in
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,248,/ http://issues.apache.org/bugzilla/show_bug.cgi?id=29877
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,250,/ The solution is to fill the unused portion of the buffer with zeros.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,252,"rrays.fill(blockBuffer, offset, offset + bytesNeeded, (byte) 0);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,254,reak;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,257,ffset += numBytes;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,258,ytesNeeded -= numBytes;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,260,f (numBytes != blockSize) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,261,/ TODO: Incomplete Read occured - throw exception?
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,265,urrBlkIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,267,eturn true;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,271," Get the current block number, zero based."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,273, @return The current zero based block number.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,275,ublic int getCurrentBlockNum() {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,276,eturn currBlkIdx;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,280," Get the current record number, within the current block, zero based."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,281," Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,283, @return The current zero based record number.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,285,ublic int getCurrentRecordNum() {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,286,eturn currRecIdx - 1;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,290, Write an archive record to the archive.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,292, @param record The record data to write to the archive.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,293, @throws IOException on error
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,295,ublic void writeRecord(byte[] record) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,296,f (outStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,297,f (inStream == null){
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,298,"hrow new IOException(""Output buffer is closed"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,300,"hrow new IOException(""writing to an input buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,303,f (record.length != recordSize) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,304,"hrow new IOException(""record to write has length '"""
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,305, record.length
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,306," ""' which is not the record size of '"""
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,307," recordSize + ""'"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,310,f (currRecIdx >= recsPerBlock) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,311,riteBlock();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,314,"ystem.arraycopy(record, 0, blockBuffer,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,315,"currRecIdx * recordSize),"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,316,ecordSize);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,318,urrRecIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,322," Write an archive record to the archive, where the record may be"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,323," inside of a larger array buffer. The buffer must be ""offset plus"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,324," record size"" long."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,326, @param buf The buffer containing the record data to write.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,327, @param offset The offset of the record data within buf.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,328, @throws IOException on error
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,330,"ublic void writeRecord(byte[] buf, int offset) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,331,f (outStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,332,f (inStream == null){
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,333,"hrow new IOException(""Output buffer is closed"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,335,"hrow new IOException(""writing to an input buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,338,f ((offset + recordSize) > buf.length) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,339,"hrow new IOException(""record has length '"" + buf.length"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,340," ""' with offset '"" + offset"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,341," ""' which is less than the record size of '"""
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,342," recordSize + ""'"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,345,f (currRecIdx >= recsPerBlock) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,346,riteBlock();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,349,"ystem.arraycopy(buf, offset, blockBuffer,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,350,"currRecIdx * recordSize),"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,351,ecordSize);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,353,urrRecIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,357, Write a TarBuffer block to the archive.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,359,rivate void writeBlock() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,360,f (outStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,361,"hrow new IOException(""writing to an input buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,364,"utStream.write(blockBuffer, 0, blockSize);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,365,utStream.flush();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,367,urrRecIdx = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,368,urrBlkIdx++;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,369,"rrays.fill(blockBuffer, (byte) 0);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,373, Flush the current data block if it has any data in it.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,375,oid flushBlock() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,376,f (outStream == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,377,"hrow new IOException(""writing to an input buffer"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,380,f (currRecIdx > 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,381,riteBlock();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,386," Close the TarBuffer. If this is an output buffer, also flush the"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,387, current block before closing.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,388, @throws IOException on error
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,390,ublic void close() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,391,f (outStream != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,392,lushBlock();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,394,f (outStream != System.out
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,395,& outStream != System.err) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,396,utStream.close();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,398,utStream = null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,400, else if (inStream != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,401,f (inStream != System.in) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,402,nStream.close();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,404,nStream = null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,409, Tries to read the next record rewinding the stream if it is not a EOF record.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,411, <p>This is meant to protect against cases where a tar
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,412, implemenation has written only one EOF record when two are
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,413, expected.  Actually this won't help since a non-conforming
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,414, implementation likely won't fill full blocks consisting of - by
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,415, default - ten records either so we probably have already read
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,416, beyond the archive anyway.</p>
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,418,oid tryToConsumeSecondEOFRecord() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,419,oolean shouldReset = true;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,420,oolean marked = inStream.markSupported();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,421,f (marked) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,422,nStream.mark(recordSize);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,424,ry {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,425,houldReset = !isEOFRecord(readRecord());
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,426, finally {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,427,f (shouldReset && marked) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,428,nStream.reset();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,30,/** Default record size */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,31,int DEFAULT_RCDSIZE = (512);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,33,/** Default block size */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,34,int DEFAULT_BLKSIZE = (DEFAULT_RCDSIZE * 20);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,63,tringBuffer result = new StringBuffer(length);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,63,StringBuilder result = new StringBuilder(length);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,242,"tring string = new String(buffer, offset, length); // TODO default charset?"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,242,"// default charset is good enough for an exception message,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,244,// the alternative was to modify parseOctal and
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,245,// parseOctalOrBinary to receive the ZipEncoding of the
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,246,"// archive (deprecating the existing public methods, of"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,247,// course) and dealing with the fact that ZipEncoding#decode
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,248,// can throw an IOException which parseOctal* doesn't declare
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,249,"String string = new String(buffer, offset, length);"
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,130,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,143,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,151,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,156,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,161,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,66,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,64,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,104,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,109,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,114,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,122,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,135,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,150,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,180,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,654,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,351,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,173, compressio. Common file types with custom suffixes for
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,173,* compression. Common file types with custom suffixes for
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,130,"ublic BZip2CompressorInputStream(final InputStream in,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,131,inal boolean decompressConcatenated)
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,132,hrows IOException {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,133,uper();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,130,"public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,143,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,994,uper();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,379,"ublic BZip2CompressorOutputStream(final OutputStream out,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,380,inal int blockSize)
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,381,hrows IOException {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,382,uper();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,379,"public BZip2CompressorOutputStream(final OutputStream out, final int blockSize) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,385,"hrow new IllegalArgumentException(""blockSize("" + blockSize"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,386," "") < 1"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,381,"throw new IllegalArgumentException(""blockSize("" + blockSize + "") < 1"");"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,389,"hrow new IllegalArgumentException(""blockSize("" + blockSize"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,390," "") > 9"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,384,"throw new IllegalArgumentException(""blockSize("" + blockSize + "") > 9"");"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,401,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1330,uper();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,216,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,35,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/pack200/InMemoryCachingStreamBridge.java,src/main/java/org/apache/commons/compress/compressors/pack200/InMemoryCachingStreamBridge.java,38, {@inheritDoc}
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,162,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,168,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,174,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,180,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,186,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,196,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,206,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,212,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,84,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,91, {@inheritDoc}
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,99, {@inheritDoc}
False,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,43, {@inheritDoc}
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,102,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,110,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,118,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,124,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,130,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java,62,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java,68,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java,93,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,44,tringBuffer sb = new StringBuffer();
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,44,StringBuilder sb = new StringBuilder();
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,70,"uffer1 = expected.getBytes(""ASCII"");"
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,70,buffer1 = expected.getBytes(CharsetNames.US_ASCII);
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,97,"eturn inputString.getBytes(""ASCII"");"
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,97,return inputString.getBytes(CharsetNames.US_ASCII);
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,111,"eturn new String(inputBytes, ""ASCII"");"
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,111,"return new String(inputBytes, CharsetNames.US_ASCII);"
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,127,"eturn new String(inputBytes, offset, length, ""ASCII"");"
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,127,"return new String(inputBytes, offset, length, CharsetNames.US_ASCII);"
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,235,* Returns true if the first N bytes of an array are all zero
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,237,* @param a
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,238,*            The array to check
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,239,* @param size
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,240,*            The number of characters to check (not the size of the array)
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,241,* @return true if the first N bytes are zero
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,243,"public static boolean isArrayZero(byte[] a, int size) {"
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,244,for (int i = 0; i < size; i++) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,245,if (a[i] != 0) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,246,return false;
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,249,return true;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,75,* Skips the given number of bytes by repeatedly invoking skip on
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,76,* the given input stream if necessary.
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,78,* <p>This method will only skip less than the requested number of
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,79,* bytes if the end of the input stream has been reached.</p>
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,81,* @param input stream to skip bytes in
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,82,* @param numToSkip the number of bytes to skip
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,83,* @return the number of bytes actually skipped
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,84,* @throws IOException
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,86,"public static long skip(InputStream input, long numToSkip) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,87,long available = numToSkip;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,88,while (numToSkip > 0) {
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,89,long skipped = input.skip(numToSkip);
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,90,if (skipped == 0) {
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,91,break;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,93,numToSkip -= skipped;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,95,return (available - numToSkip);
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,55,uper();
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,29,import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,78,"final ArchiveInputStream arj = getStreamFor(""bla.arj"");"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,79,assertNotNull(arj);
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,80,assertTrue(arj instanceof ArjArchiveInputStream);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,24,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,34,import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,35,import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
False,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,40,inal ClassLoader classLoader = getClass().getClassLoader();
False,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,45,"inal CompressorInputStream bzip2 = getStreamFor(""bla.txt.bz2"");"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,46,"CompressorInputStream bzip2 = getStreamFor(""bla.txt.bz2"");"
False,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,49,"inal CompressorInputStream gzip = getStreamFor(""bla.tgz"");"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,50,"CompressorInputStream gzip = getStreamFor(""bla.tgz"");"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,54,"CompressorInputStream pack200 = getStreamFor(""bla.pack"");"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,55,assertNotNull(pack200);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,56,assertTrue(pack200 instanceof Pack200CompressorInputStream);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,58,"CompressorInputStream xz = getStreamFor(""bla.tar.xz"");"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,59,assertNotNull(xz);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,60,assertTrue(xz instanceof XZCompressorInputStream);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,62,try {
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,63,factory.createCompressorInputStream(new ByteArrayInputStream(new byte[0]));
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,64,"fail(""No exception thrown for an empty input stream"");"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,65,} catch (CompressorException e) {
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,66,// expected
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,20,package org.apache.commons.compress.archivers.arj;
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,24,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,26,public class ArjArchiveInputStreamTest extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,28,public void testArjUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,29,StringBuilder expected = new StringBuilder();
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,30,"expected.append(""test1.xml<?xml version=\""1.0\""?>\n"");"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,31,"expected.append(""<empty/>test2.xml<?xml version=\""1.0\""?>\n"");"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,32,"expected.append(""<empty/>\n"");"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,35,"ArjArchiveInputStream in = new ArjArchiveInputStream(new FileInputStream(getFile(""bla.arj"")));"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,36,ArjArchiveEntry entry;
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,38,StringBuilder result = new StringBuilder();
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,39,while ((entry = in.getNextEntry()) != null) {
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,40,result.append(entry.getName());
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,41,int tmp;
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,42,while ((tmp = in.read()) != -1) {
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,43,result.append((char) tmp);
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,46,in.close();
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,47,"assertEquals(result.toString(), expected.toString());"
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,28,tringBuffer expected = new StringBuffer();
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,28,StringBuilder expected = new StringBuilder();
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,34,pioArchiveInputStream in =
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,35,"ew CpioArchiveInputStream(new FileInputStream(getFile(""bla.cpio"")));"
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,36,pioArchiveEntry entry= null;
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,34,"CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(""bla.cpio"")));"
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,35,CpioArchiveEntry entry;
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,38,tringBuffer result = new StringBuffer();
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,39,hile ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) {
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,37,StringBuilder result = new StringBuilder();
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,38,while ((entry = in.getNextEntry()) != null) {
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,46,n.close();
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,47,"ssertEquals(result.toString(), expected.toString());"
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,45,in.close();
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,46,"assertEquals(result.toString(), expected.toString());"
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,49,public void testCpioUnarchiveCreatedByRedlineRpm() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,50,CpioArchiveInputStream in =
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,51,"new CpioArchiveInputStream(new FileInputStream(getFile(""redline.cpio"")));"
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,52,CpioArchiveEntry entry= null;
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,54,int count = 0;
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,55,while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) {
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,56,count++;
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,58,in.close();
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,60,"assertEquals(count, 1);"
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,47,** {@inheritDoc} */
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,25,import java.io.BufferedInputStream;
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,26,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,44,@Test
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,45,public void readFileHeadersOfArchiveBiggerThan8GByte() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,46,InputStream in = null;
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,47,GzipCompressorInputStream gzin = null;
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,48,TarArchiveInputStream tin = null;
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,49,try {
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,50,in = new BufferedInputStream(BigFilesIT.class
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,51,".getResourceAsStream(""/8.posix.tar.gz"")"
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,53,gzin = new GzipCompressorInputStream(in);
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,54,tin = new TarArchiveInputStream(gzin);
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,55,TarArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,56,assertNotNull(e);
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,57,assertNull(tin.getNextTarEntry());
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,58,} finally {
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,59,if (tin != null) {
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,60,tin.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,62,if (gzin != null) {
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,63,gzin.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,65,if (in != null) {
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,66,in.close();
False,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,43,zipCompressorInputStream in = null;
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,72,InputStream in = null;
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,73,GzipCompressorInputStream gzin = null;
False,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,46,n =
False,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,47,ew GzipCompressorInputStream(BigFilesIT.class
False,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,48,getResourceAsStream(name));
False,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,49,in = new TarArchiveInputStream(in);
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,76,in = new BufferedInputStream(BigFilesIT.class
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,77,.getResourceAsStream(name));
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,78,gzin = new GzipCompressorInputStream(in);
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,79,tin = new TarArchiveInputStream(gzin);
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,103,if (gzin != null) {
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,104,gzin.close();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,30,mport java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,31,import java.io.InputStream;
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,44,inal TarArchiveInputStream tais = new TarArchiveInputStream(null);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,44,final InputStream is = new ByteArrayInputStream(new byte[1]);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,45,final TarArchiveInputStream tais = new TarArchiveInputStream(is);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,55,inal TarArchiveInputStream tais = new TarArchiveInputStream(null);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,56,final InputStream is = new ByteArrayInputStream(new byte[1]);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,57,final TarArchiveInputStream tais = new TarArchiveInputStream(is);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,69,inal TarArchiveInputStream tais = new TarArchiveInputStream(null);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,71,final InputStream is = new ByteArrayInputStream(new byte[1]);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,72,final TarArchiveInputStream tais = new TarArchiveInputStream(is);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,35,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,376,public void testWriteLongDirectoryNameErrorMode() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,377,"String n = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,378,"+ ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,379,"+ ""01234567890123456789012345678901234567890123456789/"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,381,try {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,382,TarArchiveEntry t = new TarArchiveEntry(n);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,383,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,384,"TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,385,tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_ERROR);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,386,tos.putArchiveEntry(t);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,387,tos.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,388,tos.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,390,"fail(""Truncated name didn't throw an exception"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,391,} catch (RuntimeException e) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,392,// expected
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,396,public void testWriteLongDirectoryNameTruncateMode() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,397,"String n = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,398,"+ ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,399,"+ ""01234567890123456789012345678901234567890123456789/"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,400,TarArchiveEntry t = new TarArchiveEntry(n);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,401,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,402,"TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,403,tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_TRUNCATE);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,404,tos.putArchiveEntry(t);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,405,tos.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,406,tos.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,407,byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,408,TarArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,409,new TarArchiveInputStream(new ByteArrayInputStream(data));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,410,TarArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,411,"assertEquals(""Entry name"", n.substring(0, TarConstants.NAMELEN) + ""/"", e.getName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,412,"assertTrue(""The entry is not a directory"", e.isDirectory());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,413,tin.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,472,"* @see ""https://issues.apache.org/jira/browse/COMPRESS-237"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,474,public void testWriteLongLinkNameErrorMode() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,475,"String linkname = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,476,"+ ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,477,"+ ""01234567890123456789012345678901234567890123456789/test"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,478,"TarArchiveEntry entry = new TarArchiveEntry(""test"", TarArchiveEntry.LF_SYMLINK);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,479,entry.setLinkName(linkname);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,481,try {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,482,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,483,"TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,484,tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_ERROR);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,485,tos.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,486,tos.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,487,tos.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,489,"fail(""Truncated link name didn't throw an exception"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,490,} catch (RuntimeException e) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,491,// expected
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,495,public void testWriteLongLinkNameTruncateMode() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,496,"String linkname = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,497,"+ ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,498,"+ ""01234567890123456789012345678901234567890123456789/"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,499,"TarArchiveEntry entry = new TarArchiveEntry(""test"" , TarArchiveEntry.LF_SYMLINK);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,500,entry.setLinkName(linkname);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,502,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,503,"TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,504,tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_TRUNCATE);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,505,tos.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,506,tos.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,507,tos.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,509,byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,510,TarArchiveInputStream tin = new TarArchiveInputStream(new ByteArrayInputStream(data));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,511,TarArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,512,"assertEquals(""Link name"", linkname.substring(0, TarConstants.NAMELEN), e.getLinkName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,513,tin.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,517,"* @see ""https://issues.apache.org/jira/browse/COMPRESS-237"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,519,public void testWriteLongLinkNameGnuMode() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,520,testWriteLongLinkName(TarArchiveOutputStream.LONGFILE_GNU);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,524,"* @see ""https://issues.apache.org/jira/browse/COMPRESS-237"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,526,public void testWriteLongLinkNamePosixMode() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,527,testWriteLongLinkName(TarArchiveOutputStream.LONGFILE_POSIX);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,531,"* @see ""https://issues.apache.org/jira/browse/COMPRESS-237"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,533,public void testWriteLongLinkName(int mode) throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,534,"String linkname = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,535,"+ ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,536,"+ ""01234567890123456789012345678901234567890123456789/test"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,537,"TarArchiveEntry entry = new TarArchiveEntry(""test"", TarArchiveEntry.LF_SYMLINK);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,538,entry.setLinkName(linkname);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,540,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,541,"TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,542,tos.setLongFileMode(mode);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,543,tos.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,544,tos.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,545,tos.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,547,byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,548,TarArchiveInputStream tin = new TarArchiveInputStream(new ByteArrayInputStream(data));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,549,TarArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,550,"assertEquals(""Entry name"", ""test"", e.getName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,551,"assertEquals(""Link name"", linkname, e.getLinkName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,552,"assertTrue(""The entry is not a symbolic link"", e.isSymbolicLink());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,553,tin.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,556,public void testPadsOutputToFullBlockLength() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,557,"File f = File.createTempFile(""commons-compress-padding"", "".tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,558,f.deleteOnExit();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,559,FileOutputStream fos = new FileOutputStream(f);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,560,TarArchiveOutputStream tos = new TarArchiveOutputStream(fos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,561,"File file1 = getFile(""test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,562,TarArchiveEntry sEntry = new TarArchiveEntry(file1);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,563,tos.putArchiveEntry(sEntry);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,564,FileInputStream in = new FileInputStream(file1);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,565,"IOUtils.copy(in, tos);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,566,in.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,567,tos.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,568,tos.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,569,// test1.xml is small enough to fit into the default blockv size
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,570,"assertEquals(TarConstants.DEFAULT_BLKSIZE, f.length());"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,20,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,22,import java.io.RandomAccessFile;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,24,class BoundedRandomAccessFileInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,25,private final RandomAccessFile file;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,26,private long bytesRemaining;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,28,"public BoundedRandomAccessFileInputStream(final RandomAccessFile file,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,29,final long size) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,30,this.file = file;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,31,this.bytesRemaining = size;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,34,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,35,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,36,if (bytesRemaining > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,37,--bytesRemaining;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,38,return file.read();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,39,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,40,return -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,44,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,45,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,46,if (bytesRemaining == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,47,return -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,49,int bytesToRead = len;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,50,if (bytesToRead > bytesRemaining) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,51,bytesToRead = (int) bytesRemaining;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,53,"final int bytesRead = file.read(b, off, bytesToRead);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,54,if (bytesRead >= 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,55,bytesRemaining -= bytesRead;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,57,return bytesRead;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,60,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,61,public void close() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,20,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,22,import java.security.GeneralSecurityException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,23,import java.security.MessageDigest;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,24,import java.security.NoSuchAlgorithmException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,25,import java.util.Arrays;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,27,import javax.crypto.Cipher;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,28,import javax.crypto.CipherInputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,29,import javax.crypto.SecretKey;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,30,import javax.crypto.spec.IvParameterSpec;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,31,import javax.crypto.spec.SecretKeySpec;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,33,import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,34,import org.tukaani.xz.LZMA2InputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,36,class Coders {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,37,"static InputStream addDecoder(final InputStream is,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,38,"final Coder coder, final String password) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,39,for (final CoderId coderId : coderTable) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,40,"if (Arrays.equals(coderId.id, coder.decompressionMethodId)) {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,41,"return coderId.coder.decode(is, coder, password);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,44,"throw new IOException(""Unsupported compression method "" +"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,45,Arrays.toString(coder.decompressionMethodId));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,48,static CoderId[] coderTable = new CoderId[] {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,49,"new CoderId(new byte[] { (byte)0x00 }, new CopyDecoder()),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,50,"new CoderId(new byte[] { (byte)0x21 }, new LZMA2Decoder()),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,51,// FIXME: gives corrupt output
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,52,"//new CoderId(new byte[] { (byte)0x04, (byte)0x01, (byte)0x08 }, new DeflateDecoder()),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,53,"new CoderId(new byte[] { (byte)0x04, (byte)0x02, (byte)0x02 }, new BZIP2Decoder()),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,54,"new CoderId(new byte[] { (byte)0x06, (byte)0xf1, (byte)0x07, (byte)0x01 }, new AES256SHA256Decoder())"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,57,static class CoderId {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,58,"CoderId(final byte[] id, final CoderBase coder) {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,59,this.id = id;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,60,this.coder = coder;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,63,final byte[] id;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,64,final CoderBase coder;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,67,static abstract class CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,68,"abstract InputStream decode(final InputStream in, final Coder coder,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,69,String password) throws IOException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,72,static class CopyDecoder extends CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,73,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,74,"InputStream decode(final InputStream in, final Coder coder,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,75,String password) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,76,return in;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,80,static class LZMA2Decoder extends CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,81,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,82,"InputStream decode(final InputStream in, final Coder coder,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,83,String password) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,84,final int dictionarySizeBits = 0xff & coder.properties[0];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,85,if ((dictionarySizeBits & (~0x3f)) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,86,"throw new IOException(""Unsupported LZMA2 property bits"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,88,if (dictionarySizeBits > 40) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,89,"throw new IOException(""Dictionary larger than 4GiB maximum size"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,91,final int dictionarySize;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,92,if (dictionarySizeBits == 40) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,93,dictionarySize = 0xFFFFffff;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,94,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,95,dictionarySize = (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,97,"return new LZMA2InputStream(in, dictionarySize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,101,//    static class DeflateDecoder extends CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,102,//        @Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,103,"//        InputStream decode(final InputStream in, final Coder coder, final String password)"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,104,//                throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,105,"//            System.out.println(""deflate prop count = "" + (coder.properties == null ? -1 : coder.properties.length));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,106,"//            return new DeflaterInputStream(in, new Deflater(Deflater.DEFAULT_COMPRESSION, true));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,107,//            //return new GZIPInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,111,static class BZIP2Decoder extends CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,112,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,113,"InputStream decode(final InputStream in, final Coder coder, final String password)"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,114,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,115,return new BZip2CompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,119,static class AES256SHA256Decoder extends CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,120,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,121,"InputStream decode(final InputStream in, final Coder coder,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,122,String password) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,123,final int byte0 = 0xff & coder.properties[0];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,124,final int numCyclesPower = byte0 & 0x3f;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,125,final int byte1 = 0xff & coder.properties[1];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,126,final int ivSize = ((byte0 >> 6) & 1) + (byte1 & 0x0f);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,127,final int saltSize = ((byte0 >> 7) & 1) + (byte1 >> 4);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,128,"//debug(""numCyclesPower="" + numCyclesPower + "", saltSize="" + saltSize + "", ivSize="" + ivSize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,129,if (2 + saltSize + ivSize > coder.properties.length) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,130,"throw new IOException(""Salt size + IV size too long"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,132,final byte[] salt = new byte[saltSize];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,133,"System.arraycopy(coder.properties, 2, salt, 0, saltSize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,134,final byte[] iv = new byte[16];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,135,"System.arraycopy(coder.properties, 2 + saltSize, iv, 0, ivSize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,137,if (password == null) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,138,"throw new IOException(""Cannot read encrypted files without a password"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,140,"final byte[] passwordBytes = password.getBytes(""UTF-16LE"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,141,final byte[] aesKeyBytes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,142,if (numCyclesPower == 0x3f) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,143,aesKeyBytes = new byte[32];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,144,"System.arraycopy(salt, 0, aesKeyBytes, 0, saltSize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,145,"System.arraycopy(passwordBytes, 0, aesKeyBytes, saltSize,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,146,"Math.min(passwordBytes.length, aesKeyBytes.length - saltSize));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,147,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,148,final MessageDigest digest;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,149,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,150,"digest = MessageDigest.getInstance(""SHA-256"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,151,} catch (NoSuchAlgorithmException noSuchAlgorithmException) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,152,"throw new IOException(""SHA-256 is unsupported by your Java implementation"","
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,153,noSuchAlgorithmException);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,155,final byte[] extra = new byte[8];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,156,for (long j = 0; j < (1L << numCyclesPower); j++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,157,digest.update(salt);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,158,digest.update(passwordBytes);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,159,digest.update(extra);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,160,for (int k = 0; k < extra.length; k++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,161,++extra[k];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,162,if (extra[k] != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,163,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,167,aesKeyBytes = digest.digest();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,170,"final SecretKey aesKey = new SecretKeySpec(aesKeyBytes, ""AES"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,171,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,172,"Cipher cipher = Cipher.getInstance(""AES/CBC/NoPadding"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,173,"cipher.init(Cipher.DECRYPT_MODE, aesKey, new IvParameterSpec(iv));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,174,"return new CipherInputStream(in, cipher);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,175,} catch (GeneralSecurityException generalSecurityException) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,176,"throw new IOException(""Decryption error "" +"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,177,"""(do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)"","
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,178,generalSecurityException);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,32,mport org.tukaani.xz.LZMA2InputStream;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,39," that can contain many compression types, but"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,40, at the moment only Copy and LZMA2 are
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,41," supported, and archive header compression"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,38,* that can contain many compression and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,39,"* encryption types, but at the moment only"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,40,"* only Copy, LZMA2, BZIP2, and AES-256 + SHA-256"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,41,"* are supported, and archive header compression"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,46, 7z -mhc=off -mx=0 archive.7z files
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,47, 7z -mhc=off -m0=LZMA2 archive.7z files
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,46,* 7z -mhc=off -mx=0 [-ppassword] archive.7z files
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,47,* 7z -mhc=off -m0=LZMA2 [-ppassword] archive.7z files
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,48,* 7z -mhc=off -m0=BZIP2 [-ppassword] archive.7z files
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,78,private String password;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,97,"public SevenZFile(final File filename, final String password) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,98,this(filename);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,99,this.password = password;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,181,"ew BoundedRandomAccessFileInputStream(20), 20, startHeaderCrc));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,188,"new BoundedRandomAccessFileInputStream(file, 20), 20, startHeaderCrc));"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,839,nputStream inputStreamStack = null;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,840,or (int i = 0; i < folder.coders.length; i++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,841,f (i > 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,842,"hrow new IOException(""Unsupported multi-codec stream"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,844,ile.seek(folderOffset);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,845,f (folder.coders[i].decompressionMethodId.length == 1 &&
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,846,older.coders[i].decompressionMethodId[0] == 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,847,/ 00 - Copy
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,848,nputStreamStack = new BoundedRandomAccessFileInputStream(
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,849,rchive.packSizes[firstPackStreamIndex]);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,850,/ FIXME: LZMA is the default coder yet ironically we don't have it.
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,851,/            } else if (folder.coders[i].decompressionMethodId.length == 3 &&
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,852,/                    folder.coders[i].decompressionMethodId[0] == 3 &&
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,853,/                    folder.coders[i].decompressionMethodId[1] == 1 &&
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,854,/                    folder.coders[i].decompressionMethodId[2] == 1) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,855,/                // 03.. - 7z
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,856,/                //    01 - LZMA
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,857,/                //       01 - Version
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,858, else if (folder.coders[i].decompressionMethodId.length == 1 &&
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,859,older.coders[i].decompressionMethodId[0] == 0x21) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,860,/ 21 - LZMA2
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,861,inal int dictionarySizeBits = 0xff & folder.coders[i].properties[0];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,862,f ((dictionarySizeBits & (~0x3f)) != 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,863,"hrow new IOException(""Unsupported LZMA2 property bits"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,865,f (dictionarySizeBits > 40) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,866,"hrow new IOException(""Dictionary larger than 4GiB maximum size"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,868,inal int dictionarySize;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,869,f (dictionarySizeBits == 40) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,870,ictionarySize = 0xFFFFffff;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,871, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,872,ictionarySize = (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,874,nputStreamStack = new LZMA2InputStream(
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,875,ew BoundedRandomAccessFileInputStream(
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,876,"rchive.packSizes[firstPackStreamIndex]),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,877,ictionarySize);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,878,/ FIXME: gives corrupt output:
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,879,/            } else if (folder.coders[i].decompressionMethodId.length == 3 &&
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,880,/                    folder.coders[i].decompressionMethodId[0] == 0x4 &&
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,881,/                    folder.coders[i].decompressionMethodId[1] == 0x1 &&
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,882,/                    folder.coders[i].decompressionMethodId[2] == 0x8) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,883,/                // 04.. - Misc
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,884,/                //    00 - Reserved
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,885,/                //    01 - Zip
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,886,/                //       00 - Copy (not used). Use {00} instead
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,887,/                //       01 - Shrink
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,888,/                //       06 - Implode
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,889,/                //       08 - Deflate
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,890,/                return new DeflaterInputStream(
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,891,/                        new BoundedRandomAccessFileInputStream(
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,892,"/                                archive.packSizes[firstPackStreamIndex]),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,893,"/                                new Deflater(Deflater.DEFAULT_COMPRESSION, true));"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,894, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,895,"hrow new IOException(""Unsupported compression method "" +"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,896,rrays.toString(folder.coders[i].decompressionMethodId));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,846,file.seek(folderOffset);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,847,"InputStream inputStreamStack = new BoundedRandomAccessFileInputStream(file,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,848,archive.packSizes[firstPackStreamIndex]);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,849,for (final Coder coder : folder.coders) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,850,if (coder.numInStreams != 1 || coder.numOutStreams != 1) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,851,"throw new IOException(""Multi input/output stream coders are not yet supported"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,853,"inputStreamStack = Coders.addDecoder(inputStreamStack, coder, password);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,934,rivate class BoundedRandomAccessFileInputStream extends InputStream {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,935,rivate long bytesRemaining;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,937,ublic BoundedRandomAccessFileInputStream(final long size) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,938,ytesRemaining = size;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,941,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,942,ublic int read() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,943,f (bytesRemaining > 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,944,-bytesRemaining;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,945,eturn file.read();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,946, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,947,eturn -1;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,951,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,952,"ublic int read(byte[] b, int off, int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,953,f (bytesRemaining == 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,954,eturn -1;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,956,nt bytesToRead = len;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,957,f (bytesToRead > bytesRemaining) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,958,ytesToRead = (int) bytesRemaining;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,960,"inal int bytesRead = file.read(b, off, bytesToRead);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,961,f (bytesRead >= 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,962,ytesRemaining -= bytesRead;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,964,eturn bytesRead;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,967,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,968,ublic void close() {

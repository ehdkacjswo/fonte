is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,46,// Storage area for extra long names (GNU ar)
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,47,private byte[] namebuffer = null;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,128,"hrow new IOException(""failed to read entry header. Occured at byte: "" + getBytesRead());"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,131,"throw new IOException(""failed to read entry trailer. Occured at byte: "" + getBytesRead());"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,132,"hrow new IOException(""invalid entry header. not read the content? Occured at byte: "" + getBytesRead());"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,135,"throw new IOException(""invalid entry trailer. not read the content? Occured at byte: "" + getBytesRead());"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,139,"/ SVR4/GNU adds a trailing ""/"" to names"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,142,"//        GNU ar stores multiple extended filenames in the data section of a file with the name ""//"", this record is referred to by future headers. A header references an extended filename by storing a ""/"" followed by a decimal offset to the start of the filename in the extended filename data section. The format of this ""//"" file itself is simply a list of the long filenames, each separated by one or more LF characters. Note that the decimal offsets are number of characters, not line or string number within the ""//"" file."
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,144,//        GNU ar uses a '/' to mark the end of the filename; this allows for the use of spaces without the use of an extended filename.
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,142,"f (temp.endsWith(""/"")) {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,149,"if (temp.equals(""//"")){ // GNU extended filenames entry"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,150,int bufflen = asInt(length); // Assume length will fit in an int
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,151,namebuffer = new byte[bufflen];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,152,"int read = read(namebuffer, 0, bufflen);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,153,if (read != bufflen){
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,154,"throw new IOException(""Failed to read complete // record: expected=""+bufflen+"" read=""+read);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,156,"currentEntry = new ArArchiveEntry(temp, bufflen);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,157,return getNextArEntry();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,158,"} else if (temp.endsWith(""/"")) { // GNU terminator"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,160,"} else if (temp.matches(""^/\\d+"")) {// GNU long filename ref."
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,161,int offset = Integer.parseInt(temp.substring(1));// get the offset
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,162,temp = getExtendedName(offset); // convert to the long name
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,171,* Get an extended name from the GNU extended name buffer.
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,173,* @param offset pointer to entry within the buffer
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,174,"* @return the extended file name; without trailing ""/"" if present."
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,175,* @throws IOException if name not found or buffer not set up
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,177,private String getExtendedName(int offset) throws IOException{
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,178,if (namebuffer == null) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,179,"throw new IOException(""Cannot process GNU long filename as no // record was found"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,181,for(int i=offset; i < namebuffer.length; i++){
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,182,if (namebuffer[i]=='\012'){
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,183,if (namebuffer[i-1]=='/') {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,184,i--; // drop trailing /
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,186,"return ArchiveUtils.toAsciiString(namebuffer, offset, i-offset);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,189,"throw new IOException(""Failed to read entry: ""+offset);"
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,34,import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,116,"} else if (name.endsWith("".ar"")){"
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,117,assertTrue(ais instanceof ArArchiveInputStream);
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,118,// CPIO does not store directories or directory names
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,119,expected.clear();
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,120,for(int i=0; i < fileList.size(); i++){
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,121,String ent = (String) fileList.get(i);
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,122,"if (!ent.endsWith(""/"")){// not a directory"
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,123,final int lastSlash = ent.lastIndexOf('/');
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,124,if (lastSlash >= 0) { // extract path name
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,125,"expected.add(ent.substring(lastSlash+1, ent.length()));"
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,126,} else {
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,127,expected.add(ent);

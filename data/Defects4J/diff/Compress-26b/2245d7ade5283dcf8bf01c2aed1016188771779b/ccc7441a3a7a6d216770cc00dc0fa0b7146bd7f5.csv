is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,43,register(X7875_NewUnix.class);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,21,import java.io.Serializable;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,22,import java.math.BigInteger;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,23,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,25,import static org.apache.commons.compress.archivers.zip.ZipUtil.reverse;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,26,import static org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,27,import static org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,30,* An extra field that stores UNIX UID/GID data (owner & group ownership) for a given
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,31,* zip entry.  We're using the field definition given in Info-Zip's source archive:
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,32,* zip-3.0.tar.gz/proginfo/extrafld.txt
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,33,* <p/>
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,34,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,35,* Value         Size        Description
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,37,"* 0x7875        Short       tag for this extra block type (""ux"")"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,38,* TSize         Short       total data size for this block
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,39,"* Version       1 byte      version of this extra field, currently 1"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,40,* UIDSize       1 byte      Size of UID field
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,41,* UID           Variable    UID for this entry (little endian)
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,42,* GIDSize       1 byte      Size of GID field
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,43,* GID           Variable    GID for this entry (little endian)
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,44,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,46,"public class X7875_NewUnix implements ZipExtraField, Cloneable, Serializable {"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,47,private static final ZipShort HEADER_ID = new ZipShort(0x7875);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,48,private static final BigInteger ONE_THOUSAND = BigInteger.valueOf(1000);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,49,private static final long serialVersionUID = 1L;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,51,private int version = 1; // always '1' according to current info-zip spec.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,53,// BigInteger helps us with little-endian / big-endian conversions.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,54,// (thanks to BigInteger.toByteArray() and a reverse() method we created).
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,55,"// Also, the spec theoretically allows UID/GID up to 255 bytes long!"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,56,private BigInteger uid;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,57,private BigInteger gid;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,60,* Constructor for X7875_NewUnix.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,62,public X7875_NewUnix() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,63,reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,67,* The Header-ID.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,69,* @return the value for the header id for this extrafield
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,71,public ZipShort getHeaderId() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,72,return HEADER_ID;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,76,* Gets the UID as a long.  UID is typically a 32 bit unsigned
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,77,"* value on most UNIX systems, so we return a long to avoid"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,78,* integer overflow into the negatives in case values above
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,79,* and including 2^31 are being used.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,81,* @return the UID value.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,83,public long getUID() { return ZipUtil.bigToLong(uid); }
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,86,* Gets the GID as a long.  GID is typically a 32 bit unsigned
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,87,"* value on most UNIX systems, so we return a long to avoid"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,88,* integer overflow into the negatives in case values above
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,89,* and including 2^31 are being used.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,91,* @return the GID value.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,93,public long getGID() { return ZipUtil.bigToLong(gid); }
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,96,* Sets the UID.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,98,* @param l UID value to set on this extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,100,public void setUID(long l) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,101,this.uid = ZipUtil.longToBig(l);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,105,* Sets the GID.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,107,* @param l GID value to set on this extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,109,public void setGID(long l) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,110,this.gid = ZipUtil.longToBig(l);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,114,* Length of the extra field in the local file data - without
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,115,* Header-ID or length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,117,* @return a <code>ZipShort</code> for the length of the data of this extra field
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,119,public ZipShort getLocalFileDataLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,120,int uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,121,int gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,123,// The 3 comes from:  version=1 + uidsize=1 + gidsize=1
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,124,return new ZipShort(3 + uidSize + gidSize);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,128,* Length of the extra field in the central directory data - without
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,129,* Header-ID or length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,131,* @return a <code>ZipShort</code> for the length of the data of this extra field
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,133,public ZipShort getCentralDirectoryLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,134,return getLocalFileDataLength();  // No different than local version.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,138,* The actual data to put into local file data - without Header-ID
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,139,* or length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,141,* @return get the data
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,143,public byte[] getLocalFileDataData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,144,byte[] uidBytes = uid.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,145,byte[] gidBytes = gid.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,147,// BigInteger might prepend a leading-zero to force a positive representation
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,148,"// (e.g., so that the sign-bit is set to zero).  We need to remove that"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,149,// before sending the number over the wire.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,150,uidBytes = trimLeadingZeroesForceMinLength(uidBytes);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,151,gidBytes = trimLeadingZeroesForceMinLength(gidBytes);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,153,// Couldn't bring myself to just call getLocalFileDataLength() when we've
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,154,"// already got the arrays right here.  Yeah, yeah, I know, premature"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,155,// optimization is the root of all...
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,157,// The 3 comes from:  version=1 + uidsize=1 + gidsize=1
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,158,byte[] data = new byte[3 + uidBytes.length + gidBytes.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,160,// reverse() switches byte array from big-endian to little-endian.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,161,reverse(uidBytes);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,162,reverse(gidBytes);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,164,int pos = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,165,data[pos++] = unsignedIntToSignedByte(version);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,166,data[pos++] = unsignedIntToSignedByte(uidBytes.length);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,167,"System.arraycopy(uidBytes, 0, data, pos, uidBytes.length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,168,pos += uidBytes.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,169,data[pos++] = unsignedIntToSignedByte(gidBytes.length);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,170,"System.arraycopy(gidBytes, 0, data, pos, gidBytes.length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,171,return data;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,175,* The actual data to put into central directory data - without Header-ID
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,176,* or length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,178,* @return get the data
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,180,public byte[] getCentralDirectoryData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,181,return getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,185,* Populate data from this array as if it was in local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,187,* @param data   an array of bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,188,* @param offset the start offset
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,189,* @param length the number of bytes in the array from offset
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,190,* @throws java.util.zip.ZipException on error
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,192,public void parseFromLocalFileData(
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,193,"byte[] data, int offset, int length"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,194,) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,195,reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,196,this.version = signedByteToUnsignedInt(data[offset++]);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,197,int uidSize = signedByteToUnsignedInt(data[offset++]);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,198,byte[] uidBytes = new byte[uidSize];
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,199,"System.arraycopy(data, offset, uidBytes, 0, uidSize);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,200,offset += uidSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,201,"this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,203,int gidSize = signedByteToUnsignedInt(data[offset++]);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,204,byte[] gidBytes = new byte[gidSize];
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,205,"System.arraycopy(data, offset, gidBytes, 0, gidSize);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,206,"this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,210,* Doesn't do anything special since this class always uses the
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,211,* same data in central directory and local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,213,public void parseFromCentralDirectoryData(
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,214,"byte[] buffer, int offset, int length"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,215,) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,216,reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,217,"parseFromLocalFileData(buffer, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,221,* Reset state back to newly constructed state.  Helps us make sure
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,222,* parse() calls always generate clean results.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,224,private void reset() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,225,// Typical UID/GID of the first non-root user created on a unix system.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,226,uid = ONE_THOUSAND;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,227,gid = ONE_THOUSAND;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,231,* Returns a String representation of this class useful for
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,232,* debugging purposes.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,234,* @return A String representation of this class useful for
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,235,*         debugging purposes.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,237,public String toString() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,238,"return ""0x7875 Zip Extra Field: UID="" + uid + "" GID="" + gid;"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,241,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,242,public Object clone() throws CloneNotSupportedException {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,243,return super.clone();
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,246,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,247,public boolean equals(Object o) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,248,if (o instanceof X7875_NewUnix) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,249,X7875_NewUnix xf = (X7875_NewUnix) o;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,250,if (version == xf.version) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,251,// The BigInteger==BigInteger clause handles the case where both are null.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,252,if (uid == xf.uid || (uid != null && uid.equals(xf.uid))) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,253,return gid == xf.gid || (gid != null && gid.equals(xf.gid));
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,257,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,260,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,261,public int hashCode() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,262,int hc = (-1234567 * version);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,263,if (uid != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,264,hc ^= uid.hashCode();
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,266,if (gid != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,267,hc ^= gid.hashCode();
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,269,return hc;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,273,"* Not really for external usage, but marked ""package"" visibility"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,274,* to help us JUnit it.   Trims a byte array of leading zeroes while
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,275,"* also enforcing a minimum length, and thus it really trims AND pads"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,276,* at the same time.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,278,* @param array byte[] array to trim & pad.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,279,* @return trimmed & padded byte[] array.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,281,static byte[] trimLeadingZeroesForceMinLength(byte[] array) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,282,if (array == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,283,return array;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,286,int pos = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,287,for (byte b : array) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,288,if (b == 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,289,pos++;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,290,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,291,break;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,297,I agonized over my choice of MIN_LENGTH=1.  Here's the situation:
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,298,InfoZip (the tool I am using to test interop) always sets these
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,299,to length=4.  And so a UID of 0 (typically root) for example is
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,300,"encoded as {4,0,0,0,0} (len=4, 32 bits of zero), when it could just"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,301,"as easily be encoded as {1,0} (len=1, 8 bits of zero) according to"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,302,the spec.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,304,In the end I decided on MIN_LENGTH=1 for four reasons:
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,306,"1.)  We are adhering to the spec as far as I can tell, and so"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,307,a consumer that cannot parse this is broken.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,309,"2.)  Fundamentally, zip files are about shrinking things, so"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,310,let's save a few bytes per entry while we can.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,312,3.)  Of all the people creating zip files using commons-
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,313,"compress, how many care about UNIX UID/GID attributes"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,314,"of the files they store?   (e.g., I am probably thinking"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,315,way too hard about this and no one cares!)
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,317,"4.)  InfoZip's tool, even though it carefully stores every UID/GID"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,318,for every file zipped on a unix machine (by default) currently
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,319,appears unable to ever restore UID/GID.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,320,"unzip -X has no effect on my machine, even when run as root!!!!"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,322,And thus it is decided:  MIN_LENGTH=1.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,324,"If anyone runs into interop problems from this, feel free to set"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,325,"it to MIN_LENGTH=4 at some future time, and then we will behave"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,326,"exactly like InfoZip (requires changes to unit tests, though)."
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,328,And I am sorry that the time you spent reading this comment is now
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,329,gone and you can never have it back.
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,332,final int MIN_LENGTH = 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,334,"byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)];"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,335,int startPos = trimmedArray.length - (array.length - pos);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,336,"System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,337,return trimmedArray;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,21,import java.math.BigInteger;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,74, <p>This methods is no longer used as of Apache Commons Compress
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,75, 1.3</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,87,* Reverses a byte[] array.  Reverses in-place (thus provided array is
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,88,"* mutated), but also returns same for convenience."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,90,"* @param array to reverse (mutated in-place, but also returned for"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,91,*        convenience).
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,93,"* @return the reversed array (mutated in-place, but also returned for"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,94,*        convenience).
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,96,public static byte[] reverse(final byte[] array) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,97,final int z = array.length - 1; // position of last element
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,98,for (int i = 0; i < array.length / 2; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,99,byte x = array[i];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,100,array[i] = array[z - i];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,101,array[z - i] = x;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,103,return array;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,107,"* Converts a BigInteger into a long, and blows up"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,108,* (NumberFormatException) if the BigInteger is too big.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,110,* @param big BigInteger to convert.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,111,* @return long representation of the BigInteger.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,113,static long bigToLong(BigInteger big) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,114,if (big.bitLength() <= 63) { // bitLength() doesn't count the sign bit.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,115,return big.longValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,116,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,117,"throw new NumberFormatException(""The BigInteger cannot fit inside a 64 bit java long: ["" + big + ""]"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,122,* <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,123,* Converts a long into a BigInteger.  Negative numbers between -1 and
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,124,"* -2^31 are treated as unsigned 32 bit (e.g., positive) integers."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,125,* Negative numbers below -2^31 cause an IllegalArgumentException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,126,* to be thrown.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,127,* </p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,129,* @param l long to convert to BigInteger.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,130,* @return BigInteger representation of the provided long.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,132,static BigInteger longToBig(long l) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,133,if (l < Integer.MIN_VALUE) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,134,"throw new IllegalArgumentException(""Negative longs < -2^31 not permitted: ["" + l + ""]"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,135,} else if (l < 0 && l >= Integer.MIN_VALUE) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,136,"// If someone passes in a -2, they probably mean 4294967294"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,137,"// (For example, Unix UID/GID's are 32 bit unsigned.)"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,138,l = ZipUtil.adjustToLong((int) l);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,140,return BigInteger.valueOf(l);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,144,* Converts a signed byte into an unsigned integer representation
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,145,"* (e.g., -1 becomes 255)."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,147,* @param b byte to convert to int
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,148,* @return int representation of the provided byte
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,150,public static int signedByteToUnsignedInt(byte b) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,151,if (b >= 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,152,return b;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,153,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,154,return 256 + b;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,159,"* Converts an unsigned integer to a signed byte (e.g., 255 becomes -1)."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,161,* @param i integer to convert to byte
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,162,* @return byte representation of the provided int
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,163,"* @throws IllegalArgumentException if the provided integer is not inside the range [0,255]."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,165,public static byte unsignedIntToSignedByte(int i) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,166,if (i > 255 || i < 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,167,"throw new IllegalArgumentException(""Can only convert non-negative integers between [0,255] to byte: ["" + i + ""]"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,169,if (i < 128) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,170,return (byte) i;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,171,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,172,return (byte) (i - 256);
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,19,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,21,import org.junit.Before;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,24,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,25,import java.net.URI;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,26,import java.net.URL;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,27,import java.util.Arrays;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,28,import java.util.Enumeration;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,29,import java.util.zip.ZipException;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,31,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,32,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,34,public class X7875_NewUnixTest {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,36,private final static ZipShort X7875 = new ZipShort(0x7875);
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,38,private X7875_NewUnix xf;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,40,@Before
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,41,public void before() {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,42,xf = new X7875_NewUnix();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,46,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,47,public void testSampleFile() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,48,"URL zip = getClass().getResource(""/COMPRESS-211_uid_gid_zip_test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,49,File archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,50,ZipFile zf = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,52,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,53,zf = new ZipFile(archive);
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,54,Enumeration<ZipArchiveEntry> en = zf.getEntries();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,56,// We expect EVERY entry of this zip file (dir & file) to
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,57,// contain extra field 0x7875.
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,58,while (en.hasMoreElements()) {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,60,ZipArchiveEntry zae = en.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,61,String name = zae.getName();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,62,X7875_NewUnix xf = (X7875_NewUnix) zae.getExtraField(X7875);
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,64,// The directory entry in the test zip file is uid/gid 1000.
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,65,long expected = 1000;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,66,"if (name.contains(""uid555_gid555"")) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,67,expected = 555;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,68,"} else if (name.contains(""uid5555_gid5555"")) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,69,expected = 5555;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,70,"} else if (name.contains(""uid55555_gid55555"")) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,71,expected = 55555;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,72,"} else if (name.contains(""uid555555_gid555555"")) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,73,expected = 555555;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,74,"} else if (name.contains(""min_unix"")) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,75,expected = 0;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,76,"} else if (name.contains(""max_unix"")) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,77,// 2^32-2 was the biggest UID/GID I could create on my linux!
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,78,"// (December 2012, linux kernel 3.4)"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,79,expected = 0x100000000L - 2;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,81,"assertEquals(expected, xf.getUID());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,82,"assertEquals(expected, xf.getGID());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,84,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,85,if (zf != null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,86,zf.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,91,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,92,public void testGetHeaderId() {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,93,"assertEquals(X7875, xf.getHeaderId());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,96,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,97,public void testMisc() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,98,"assertTrue(xf.toString().startsWith(""0x7875 Zip Extra Field""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,99,Object o = xf.clone();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,100,"assertEquals(o.hashCode(), xf.hashCode());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,101,assertTrue(xf.equals(o));
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,104,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,105,public void testTrimLeadingZeroesForceMinLength4() throws ZipException {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,106,final byte[] NULL = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,107,final byte[] EMPTY = new byte[0];
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,108,final byte[] ONE_ZERO = {0};
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,109,"final byte[] TWO_ZEROES = {0, 0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,110,"final byte[] FOUR_ZEROES = {0, 0, 0, 0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,111,"final byte[] SEQUENCE = {1, 2, 3};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,112,"final byte[] SEQUENCE_LEADING_ZERO = {0, 1, 2, 3};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,113,"final byte[] SEQUENCE_LEADING_ZEROES = {0, 0, 0, 0, 0, 0, 0, 1, 2, 3};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,114,"final byte[] TRAILING_ZERO = {1, 2, 3, 0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,115,"final byte[] PADDING_ZERO = {0, 1, 2, 3, 0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,116,"final byte[] SEQUENCE6 = {1, 2, 3, 4, 5, 6};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,117,"final byte[] SEQUENCE6_LEADING_ZERO = {0, 1, 2, 3, 4, 5, 6};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,119,assertTrue(NULL == trimTest(NULL));
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,120,"assertTrue(Arrays.equals(ONE_ZERO, trimTest(EMPTY)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,121,"assertTrue(Arrays.equals(ONE_ZERO, trimTest(ONE_ZERO)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,122,"assertTrue(Arrays.equals(ONE_ZERO, trimTest(TWO_ZEROES)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,123,"assertTrue(Arrays.equals(ONE_ZERO, trimTest(FOUR_ZEROES)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,124,"assertTrue(Arrays.equals(SEQUENCE, trimTest(SEQUENCE)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,125,"assertTrue(Arrays.equals(SEQUENCE, trimTest(SEQUENCE_LEADING_ZERO)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,126,"assertTrue(Arrays.equals(SEQUENCE, trimTest(SEQUENCE_LEADING_ZEROES)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,127,"assertTrue(Arrays.equals(TRAILING_ZERO, trimTest(TRAILING_ZERO)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,128,"assertTrue(Arrays.equals(TRAILING_ZERO, trimTest(PADDING_ZERO)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,129,"assertTrue(Arrays.equals(SEQUENCE6, trimTest(SEQUENCE6)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,130,"assertTrue(Arrays.equals(SEQUENCE6, trimTest(SEQUENCE6_LEADING_ZERO)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,133,private static byte[] trimTest(byte[] b) { return X7875_NewUnix.trimLeadingZeroesForceMinLength(b); }
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,135,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,136,public void testParseReparse() throws ZipException {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,138,"// Version=1, Len=1, zero, Len=1, zero."
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,139,"final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,141,"// Version=1, Len=1, one, Len=1, one"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,142,"final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,144,"// Version=1, Len=2, one thousand, Len=2, one thousand"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,145,"final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,147,// (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,148,"// two's complement, and -1 often has a special meaning."
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,149,"final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,151,"// Version=1, Len=5, 2^32, Len=5, 2^32 + 1"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,152,// Esoteric test:  can we handle 40 bit numbers?
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,153,"final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,155,"// Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,156,// Esoteric test:  can we handle 64 bit numbers?
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,157,"final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,159,final long TWO_TO_32 = 0x100000000L;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,160,final long MAX = TWO_TO_32 - 2;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,162,"parseReparse(0, 0, ZERO_UID_GID, 0, 0);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,163,"parseReparse(1, 1, ONE_UID_GID, 1, 1);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,164,"parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,165,"parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,166,"parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,167,"parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,168,"parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,170,"// We never emit this, but we should be able to parse it:"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,171,"final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,172,"final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,173,"xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,175,"assertEquals(255, xf.getUID());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,176,"assertEquals(128, xf.getGID());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,177,"assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,179,"final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,180,"final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,181,"xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,183,"assertEquals(65535, xf.getUID());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,184,"assertEquals(513, xf.getGID());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,185,"assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,189,private void parseReparse(
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,190,"final long uid,"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,191,"final long gid,"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,192,"final byte[] expected,"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,193,"final long expectedUID,"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,194,final long expectedGID
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,195,) throws ZipException {
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,196,xf.setUID(uid);
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,197,xf.setGID(gid);
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,198,"assertEquals(expected.length, xf.getLocalFileDataLength().getValue());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,199,byte[] result = xf.getLocalFileDataData();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,200,"assertTrue(Arrays.equals(expected, result));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,202,// And now we re-parse:
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,203,"xf.parseFromLocalFileData(result, 0, result.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,205,// Did uid/gid change from re-parse?  They shouldn't!
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,206,"assertEquals(expectedUID, xf.getUID());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,207,"assertEquals(expectedGID, xf.getGID());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,209,"// Do the same as above, but with Central Directory data:"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,210,xf.setUID(uid);
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,211,xf.setGID(gid);
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,212,"assertEquals(expected.length, xf.getCentralDirectoryLength().getValue());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,213,result = xf.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,214,"assertTrue(Arrays.equals(expected, result));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,216,// And now we re-parse:
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,217,"xf.parseFromCentralDirectoryData(result, 0, result.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,219,// Did uid/gid change from 2nd re-parse?  They shouldn't!
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,220,"assertEquals(expectedUID, xf.getUID());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,221,"assertEquals(expectedGID, xf.getGID());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,21,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,23,import java.math.BigInteger;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,24,import java.util.Arrays;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,24,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,89,public void testReverse() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,90,byte[][] bTest = new byte[6][];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,91,bTest[0] = new byte[]{};
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,92,bTest[1] = new byte[]{1};
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,93,"bTest[2] = new byte[]{1, 2};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,94,"bTest[3] = new byte[]{1, 2, 3};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,95,"bTest[4] = new byte[]{1, 2, 3, 4};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,96,"bTest[5] = new byte[]{1, 2, 3, 4, 5};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,98,byte[][] rTest = new byte[6][];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,99,rTest[0] = new byte[]{};
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,100,rTest[1] = new byte[]{1};
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,101,"rTest[2] = new byte[]{2, 1};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,102,"rTest[3] = new byte[]{3, 2, 1};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,103,"rTest[4] = new byte[]{4, 3, 2, 1};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,104,"rTest[5] = new byte[]{5, 4, 3, 2, 1};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,106,"assertEquals(""test and result arrays are same length"", bTest.length, rTest.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,108,for (int i = 0; i < bTest.length; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,109,byte[] result = ZipUtil.reverse(bTest[i]);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,110,"assertTrue(""reverse mutates in-place"", bTest[i] == result);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,111,"assertTrue(""reverse actually reverses"", Arrays.equals(rTest[i], result));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,115,public void testBigToLong() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,116,BigInteger big1 = BigInteger.valueOf(1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,117,BigInteger big2 = BigInteger.valueOf(Long.MAX_VALUE);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,118,BigInteger big3 = BigInteger.valueOf(Long.MIN_VALUE);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,120,"assertEquals(1L, ZipUtil.bigToLong(big1));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,121,"assertEquals(Long.MAX_VALUE, ZipUtil.bigToLong(big2));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,122,"assertEquals(Long.MIN_VALUE, ZipUtil.bigToLong(big3));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,124,BigInteger big4 = big2.add(big1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,125,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,126,ZipUtil.bigToLong(big4);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,127,"fail(""Should have thrown IllegalArgumentException"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,128,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,129,// All is good.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,132,BigInteger big5 = big3.subtract(big1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,133,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,134,ZipUtil.bigToLong(big5);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,135,"fail(""ZipUtil.bigToLong(BigInteger) should have thrown IllegalArgumentException"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,136,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,137,// All is good.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,141,public void testLongToBig() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,142,long l0 = 0;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,143,long l1 = 1;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,144,long l2 = -1;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,145,long l3 = Integer.MIN_VALUE;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,146,long l4 = Long.MAX_VALUE;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,147,long l5 = Long.MIN_VALUE;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,149,BigInteger big0 = ZipUtil.longToBig(l0);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,150,BigInteger big1 = ZipUtil.longToBig(l1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,151,BigInteger big2 = ZipUtil.longToBig(l2);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,152,BigInteger big3 = ZipUtil.longToBig(l3);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,153,BigInteger big4 = ZipUtil.longToBig(l4);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,155,"assertEquals(0, big0.longValue());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,156,"assertEquals(1, big1.longValue());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,157,"assertEquals(0xFFFFFFFFL, big2.longValue());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,158,"assertEquals(0x80000000L, big3.longValue());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,159,"assertEquals(Long.MAX_VALUE, big4.longValue());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,161,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,162,ZipUtil.longToBig(l5);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,163,"fail(""ZipUtil.longToBig(long) should have thrown IllegalArgumentException"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,164,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,169,public void testSignedByteToUnsignedInt() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,170,"// Yay, we can completely test all possible input values in this case!"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,171,int expectedVal = 128;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,172,for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,173,byte b = (byte) i;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,174,"assertEquals(expectedVal, ZipUtil.signedByteToUnsignedInt(b));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,175,expectedVal++;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,176,if (expectedVal == 256) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,177,expectedVal = 0;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,182,public void testUnsignedIntToSignedByte() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,183,int unsignedVal = 128;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,184,for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,185,byte expectedVal = (byte) i;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,186,"assertEquals(expectedVal, ZipUtil.unsignedIntToSignedByte(unsignedVal));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,187,unsignedVal++;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,188,if (unsignedVal == 256) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,189,unsignedVal = 0;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,193,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,194,ZipUtil.unsignedIntToSignedByte(-1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,195,"fail(""ZipUtil.unsignedIntToSignedByte(-1) should have thrown IllegalArgumentException"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,196,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,197,// All is good.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,200,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,201,ZipUtil.unsignedIntToSignedByte(256);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,202,"fail(""ZipUtil.unsignedIntToSignedByte(256) should have thrown IllegalArgumentException"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,203,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,204,// All is good.

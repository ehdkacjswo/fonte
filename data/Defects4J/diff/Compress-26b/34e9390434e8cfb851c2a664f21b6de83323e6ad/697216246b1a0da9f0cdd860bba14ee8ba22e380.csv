is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,185,rivate Date atime;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,186,rivate Date mtime;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,185,private long atime;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,186,private long mtime;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,191,* Currently unused
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,201,rivate Date ctime;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,204,private long ctime;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,283,eturn ctime;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,286,return new Date(ctime);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,290,his.ctime = ctime;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,293,this.ctime = ctime.getTime();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,392, else if (!o.getClass().equals(getClass())) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,395,} else if (o == null || !o.getClass().equals(getClass())) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,406,f ((summary != null) || summary.equals(rhs.summary)) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,409,if ((summary == null && rhs.summary != null)
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,410,|| (summary != null && !summary.equals(rhs.summary))) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,464,ntry.ctime = new Date(t);
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,468,entry.ctime = t;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,568,eturn mtime;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,572,return new Date(mtime);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,667,his.mtime = mtime;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,671,this.mtime = mtime.getTime();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,674,eturn atime;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,678,return new Date(atime);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,681,his.atime = atime;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,685,this.atime = atime.getTime();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,24,import java.io.EOFException;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,144,aw.skip(DumpArchiveConstants.TP_SIZE * active.getHeaderCount());
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,145,if (raw.skip(DumpArchiveConstants.TP_SIZE * active.getHeaderCount())
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,146,== -1) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,147,throw new EOFException();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,165,aw.skip(DumpArchiveConstants.TP_SIZE * active.getHeaderCount());
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,169,if (raw.skip(DumpArchiveConstants.TP_SIZE * active.getHeaderCount())
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,170,== -1) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,171,throw new EOFException();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,192,f (!active.isSparseRecord(readIdx++)) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,193,aw.skip(DumpArchiveConstants.TP_SIZE);
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,199,if (!active.isSparseRecord(readIdx++)
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,200,&& raw.skip(DumpArchiveConstants.TP_SIZE) == -1) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,201,throw new EOFException();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,210,aw.skip(DumpArchiveConstants.TP_SIZE * (active.getHeaderCount() -
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,211,ctive.getHeaderHoles()));
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,218,if (raw.skip(DumpArchiveConstants.TP_SIZE
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,219,* (active.getHeaderCount()
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,220,- active.getHeaderHoles())) == -1) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,221,throw new EOFException();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,290,"aw.read(blockBuffer, 0, datalen);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,301,"if (raw.read(blockBuffer, 0, datalen) != datalen) {"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,302,throw new EOFException();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,448,"aw.read(readBuf, 0, readBuf.length);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,461,"int r = raw.read(readBuf, 0, readBuf.length);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,462,if (r != readBuf.length) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,463,throw new EOFException();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,32,rivate Date dumpDate;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,33,rivate Date previousDumpDate;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,32,private long dumpDate;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,33,private long previousDumpDate;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,45,"umpDate = new Date(1000L * DumpArchiveUtil.convert32(buffer, 4));"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,46,"reviousDumpDate = new Date(1000L * DumpArchiveUtil.convert32(buffer, 8));"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,45,"dumpDate = 1000L * DumpArchiveUtil.convert32(buffer, 4);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,46,"previousDumpDate = 1000L * DumpArchiveUtil.convert32(buffer, 8);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,65,eturn dumpDate;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,65,return new Date(dumpDate);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,72,his.dumpDate = dumpDate;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,72,this.dumpDate = dumpDate.getTime();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,80,eturn previousDumpDate;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,80,return new Date(previousDumpDate);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,87,his.previousDumpDate = previousDumpDate;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,87,this.previousDumpDate = previousDumpDate.getTime();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,290,f (dumpDate != null) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,291,ash = (31 * dumpDate.hashCode()) + 17;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,290,hash += 31 * dumpDate;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,314,f (!o.getClass().equals(getClass())) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,312,if (o == null || !o.getClass().equals(getClass())) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,320,f ((dumpDate == null) || !dumpDate.equals(rhs.dumpDate)) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,318,if (dumpDate != rhs.dumpDate) {
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,107," @see java.io.InputStream#read(byte[], int, int)"
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,107,* {@inheritDoc}
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,109,* <p>reads the full given length unless EOF is reached.</p>
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,111,"* @param len length to read, must be a multiple of the stream's"
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,112,* record size
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,149," @see java.io.InputStream#read(byte[], int, int)"
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,155,* <p>skips the full given length unless EOF is reached.</p>
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,157,"* @param len length to read, must be a multiple of the stream's"
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,158,* record size
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,257,"n.read(blockBuffer, 0, 4);"
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,266,"if (!readFully(blockBuffer, 0, 4)) {"
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,267,return false;

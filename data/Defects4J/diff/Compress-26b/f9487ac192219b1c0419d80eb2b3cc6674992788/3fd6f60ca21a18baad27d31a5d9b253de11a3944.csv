is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,20,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,22,import java.io.DataInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,23,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,24,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,25,import java.util.Arrays;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,28,* Binary tree of positive values.
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,30,* @author Emmanuel Bourg
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,31,* @since 1.7
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,33,class BinaryTree {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,35,/** Value in the array indicating an undefined node */
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,36,private static final int UNDEFINED = -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,38,/** Value in the array indicating a non leaf node */
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,39,private static final int NODE = -2;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,42,"* The array representing the binary tree. The root is at index 0,"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,43,* the left children are at 2*i+1 and the right children at 2*i+2.
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,45,private final int[] tree;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,47,public BinaryTree(int depth) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,48,tree = new int[(1 << (depth + 1)) - 1];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,49,"Arrays.fill(tree, UNDEFINED);"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,53,* Adds a leaf to the tree.
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,55,* @param node   the index of the node where the path is appended
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,56,* @param path   the path to the leaf (bits are parsed from the right to the left)
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,57,* @param depth  the number of nodes in the path
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,58,* @param value  the value of the leaf (must be positive)
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,60,"public void addLeaf(int node, int path, int depth, int value) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,61,if (depth == 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,62,"// end of the path reached, add the value to the current node"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,63,if (tree[node] == UNDEFINED) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,64,tree[node] = value;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,65,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,66,"throw new IllegalArgumentException(""Tree value at index "" + node + "" has already been assigned ("" + tree[node] + "")"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,68,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,69,// mark the current node as a non leaf node
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,70,tree[node] = NODE;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,72,// move down the path recursively
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,73,int nextChild = 2 * node + 1 + (path & 1);
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,74,"addLeaf(nextChild, path >>> 1, depth - 1, value);"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,79,* Reads a value from the specified bit stream.
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,81,* @param stream
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,82,"* @return the value decoded, or -1 if the end of the stream is reached"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,84,public int read(BitStream stream) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,85,short currentIndex = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,87,while (true) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,88,int bit = stream.nextBit();
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,89,if (bit == -1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,90,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,93,short childIndex = (short) (2 * currentIndex + 1 + bit);
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,94,int value = tree[childIndex];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,95,if (value == NODE) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,96,// consume the next bit
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,97,currentIndex = childIndex;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,98,} else if (value != UNDEFINED) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,99,return value;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,100,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,101,"throw new IOException(""The child "" + bit + "" of node at index "" + currentIndex + "" is not defined"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,108,* Decodes the packed binary tree from the specified stream.
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,110,"static BinaryTree decode(InputStream in, final int totalNumberOfValues) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,111,// the first byte contains the size of the structure minus one
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,112,int size = in.read() + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,113,if (size == 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,114,"throw new IOException(""Cannot read the size of the encoded tree, unexpected end of stream"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,117,byte[] encodedTree = new byte[size];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,118,new DataInputStream(in).readFully(encodedTree);
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,120,/** The maximum bit length for a value (16 or lower) */
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,121,int maxLength = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,123,int[] originalBitLengths = new int[totalNumberOfValues];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,124,int pos = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,125,for (byte b : encodedTree) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,126,// each byte encodes the number of values (upper 4 bits) for a bit length (lower 4 bits)
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,127,int numberOfValues = ((b & 0xF0) >> 4) + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,128,int bitLength = (b & 0x0F) + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,130,for (int j = 0; j < numberOfValues; j++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,131,originalBitLengths[pos++] = bitLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,134,"maxLength = Math.max(maxLength, bitLength);"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,137,// sort the array of bit lengths and memorize the permutation used to restore the order of the codes
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,138,int[] permutation = new int[originalBitLengths.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,139,for (int k = 0; k < permutation.length; k++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,140,permutation[k] = k;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,143,int c = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,144,int[] sortedBitLengths = new int[originalBitLengths.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,145,for (int k = 0; k < originalBitLengths.length; k++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,146,// iterate over the values
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,147,for (int l = 0; l < originalBitLengths.length; l++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,148,// look for the value in the original array
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,149,if (originalBitLengths[l] == k) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,150,// put the value at the current position in the sorted array...
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,151,sortedBitLengths[c] = k;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,153,// ...and memorize the permutation
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,154,permutation[c] = l;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,156,c++;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,161,// decode the values of the tree
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,162,int code = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,163,int codeIncrement = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,164,int lastBitLength = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,166,int[] codes = new int[totalNumberOfValues];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,168,for (int i = totalNumberOfValues - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,169,code = code + codeIncrement;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,170,if (sortedBitLengths[i] != lastBitLength) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,171,lastBitLength = sortedBitLengths[i];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,172,codeIncrement = 1 << (16 - lastBitLength);
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,174,codes[permutation[i]] = code;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,177,// build the tree
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,178,BinaryTree tree = new BinaryTree(maxLength);
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,180,for (int k = 0; k < codes.length; k++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,181,int bitLength = originalBitLengths[k];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,182,if (bitLength > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,183,"tree.addLeaf(0, Integer.reverse(codes[k] << 16), bitLength, k);"
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,187,return tree;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,20,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,23,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,26,* Iterates over the bits of an InputStream. For each byte the bits
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,27,* are read from the right to the left.
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,29,* @since 1.7
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,31,class BitStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,33,private final InputStream in;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,35,/** The bits read from the underlying stream but not consumed by nextBits() */
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,36,private long bitCache;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,38,/** The number of bits available in the bit cache */
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,39,private int bitCacheSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,41,/** Bit masks for extracting the right most bits from a byte */
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,42,private static final int[] MASKS = new int[]{
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,43,"0x00, // 00000000"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,44,"0x01, // 00000001"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,45,"0x03, // 00000011"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,46,"0x07, // 00000111"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,47,"0x0F, // 00001111"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,48,"0x1F, // 00011111"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,49,"0x3F, // 00111111"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,50,"0x7F, // 01111111"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,51,0xFF  // 11111111
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,54,BitStream(InputStream in) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,55,this.in = in;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,58,private boolean fillCache() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,59,boolean filled = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,61,while (bitCacheSize <= 56) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,62,long nextByte = in.read();
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,63,if (nextByte == -1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,64,break;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,67,filled = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,68,bitCache = bitCache | (nextByte << bitCacheSize);
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,69,bitCacheSize += 8;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,72,return filled;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,76,* Returns the next bit.
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,78,* @return The next bit (0 or 1) or -1 if the end of the stream has been reached
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,80,int nextBit() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,81,if (bitCacheSize == 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,82,if (!fillCache()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,83,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,87,int bit = (int) (bitCache & 1); // extract the right most bit
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,89,bitCache = (bitCache >>> 1); // shift the remaning bits to the right
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,90,bitCacheSize--;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,92,return bit;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,96,* Returns the integer value formed by the n next bits (up to 8 bits).
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,98,* @param n the number of bits read (up to 8)
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,99,"* @return The value formed by the n bits, or -1 if the end of the stream has been reached"
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,101,int nextBits(final int n) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,102,if (bitCacheSize < n) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,103,if (!fillCache()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,104,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,108,final int bits = (int) (bitCache & MASKS[n]); // extract the right most bits
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,110,bitCache = (bitCache >>> n); // shift the remaning bits to the right
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,111,bitCacheSize = bitCacheSize - n;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,113,return bits;
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,116,int nextByte() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java,117,return nextBits(8);
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,20,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,23,* Circular byte buffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,25,* @author Emmanuel Bourg
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,26,* @since 1.7
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,28,class CircularBuffer {
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,30,/** Size of the buffer */
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,31,private final int size;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,33,/** The buffer */
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,34,private final byte[] buffer;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,36,/** Index of the next data to be read from the buffer */
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,37,private int readIndex;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,39,/** Index of the next data written in the buffer */
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,40,private int writeIndex;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,42,CircularBuffer(int size) {
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,43,this.size = size;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,44,buffer = new byte[size];
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,48,* Tells if a new byte can be read from the buffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,50,public boolean available() {
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,51,return readIndex != writeIndex;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,55,* Writes a byte to the buffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,57,public void put(int value) {
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,58,buffer[writeIndex] = (byte) value;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,59,writeIndex = (writeIndex + 1) % size;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,63,* Reads a byte from the buffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,65,public int get() {
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,66,if (available()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,67,int value = buffer[readIndex];
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,68,readIndex = (readIndex + 1) % size;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,69,return value & 0xFF;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,70,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,71,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,76,* Copy a previous interval in the buffer to the current position.
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,78,* @param distance the distance from the current write position
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,79,* @param length   the number of bytes to copy
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,81,"public void copy(int distance, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,82,int pos1 = writeIndex - distance;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,83,int pos2 = pos1 + length;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,84,for (int i = pos1; i < pos2; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,85,buffer[writeIndex] = buffer[(i + size) % size];
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,86,writeIndex = (writeIndex + 1) % size;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,20,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,23,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,26,* The implode compression method was added to PKZIP 1.01 released in 1989.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,27,* It was then dropped from PKZIP 2.0 released in 1993 in favor of the deflate
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,28,* method.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,29,* <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,30,* The algorithm is described in the ZIP File Format Specification.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,32,"* @see <a href=""http://www.pkware.com/documents/casestudies/APPNOTE.TXT"">ZIP File Format Specification</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,34,* @author Emmanuel Bourg
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,35,* @since 1.7
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,37,class ExplodingInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,39,/** The underlying stream containing the compressed data */
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,40,private final InputStream in;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,42,/** The stream of bits read from the input stream */
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,43,private BitStream bits;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,45,/** The size of the sliding dictionary (4K or 8K) */
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,46,private final int dictionarySize;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,48,/** The number of Shannon-Fano trees (2 or 3) */
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,49,private final int numberOfTrees;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,51,private final int minimumMatchLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,53,/** The binary tree containing the 256 encoded literals (null when only two trees are used) */
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,54,private BinaryTree literalTree;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,56,/** The binary tree containing the 64 encoded lengths */
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,57,private BinaryTree lengthTree;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,59,/** The binary tree containing the 64 encoded distances */
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,60,private BinaryTree distanceTree;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,62,/** Output buffer holding the decompressed data */
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,63,private final CircularBuffer buffer = new CircularBuffer(32 * 1024);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,66,* Create a new stream decompressing the content of the specified stream
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,67,* using the explode algorithm.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,69,* @param dictionarySize the size of the sliding dictionary (4096 or 8192)
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,70,* @param numberOfTrees  the number of trees (2 or 3)
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,71,* @param in             the compressed data stream
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,73,"public ExplodingInputStream(int dictionarySize, int numberOfTrees, InputStream in) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,74,if (dictionarySize != 4096 && dictionarySize != 8192) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,75,"throw new IllegalArgumentException(""The dictionary size must be 4096 or 8192"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,77,if (numberOfTrees != 2 && numberOfTrees != 3) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,78,"throw new IllegalArgumentException(""The number of trees must be 2 or 3"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,80,this.dictionarySize = dictionarySize;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,81,this.numberOfTrees = numberOfTrees;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,82,this.minimumMatchLength = numberOfTrees;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,83,this.in = in;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,87,* Reads the encoded binary trees and prepares the bit stream.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,89,* @throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,91,private void init() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,92,if (bits == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,93,if (numberOfTrees == 3) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,94,"literalTree = BinaryTree.decode(in, 256);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,97,"lengthTree = BinaryTree.decode(in, 64);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,98,"distanceTree = BinaryTree.decode(in, 64);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,100,bits = new BitStream(in);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,104,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,105,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,106,if (!buffer.available()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,107,fillBuffer();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,110,return buffer.get();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,114,* Fill the sliding dictionary with more data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,115,* @throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,117,private void fillBuffer() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,118,init();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,120,int bit = bits.nextBit();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,121,if (bit == 1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,122,// literal value
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,123,int literal;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,124,if (literalTree != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,125,literal = literalTree.read(bits);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,126,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,127,literal = bits.nextBits(8);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,130,if (literal == -1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,131,"// end of stream reached, nothing left to decode"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,132,return;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,135,buffer.put(literal);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,137,} else if (bit == 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,138,// back reference
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,139,int distanceLowSize = dictionarySize == 4096 ? 6 : 7;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,140,int distanceLow = bits.nextBits(distanceLowSize);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,141,int distanceHigh = distanceTree.read(bits);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,142,if (distanceHigh == -1 && distanceLow <= 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,143,"// end of stream reached, nothing left to decode"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,144,return;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,146,int distance = distanceHigh << distanceLowSize | distanceLow;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,148,int length = lengthTree.read(bits);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,149,if (length == 63) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,150,length += bits.nextBits(8);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,152,length += minimumMatchLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,154,"buffer.copy(distance + 1, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,35,* Indicates the size of the sliding dictionary used by the compression method 6 (imploding).
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,36,* <ul>
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,37,*   <li>0: 4096 bytes</li>
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,38,*   <li>1: 8192 bytes</li>
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,39,* </ul>
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,41,private static final int SLIDING_DICTIONARY_SIZE_FLAG = 1 << 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,44,* Indicates the number of Shannon-Fano trees used by the compression method 6 (imploding).
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,45,* <ul>
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,46,"*   <li>0: 2 trees (lengths, distances)</li>"
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,47,"*   <li>1: 3 trees (literals, lengths, distances)</li>"
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,48,* </ul>
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,50,private static final int NUMBER_OF_SHANNON_FANO_TREES_FLAG = 1 << 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,76,private int slidingDictionarySize;
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,77,private int numberOfShannonFanoTrees;
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,144,* Returns the sliding dictionary size used by the compression method 6 (imploding).
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,146,int getSlidingDictionarySize() {
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,147,return slidingDictionarySize;
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,151,* Returns the number of trees used by the compression method 6 (imploding).
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,153,int getNumberOfShannonFanoTrees() {
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,154,return numberOfShannonFanoTrees;
False,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,146,.useStrongEncryption((generalPurposeFlag & STRONG_ENCRYPTION_FLAG)
False,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,147,= 0);
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,183,b.useStrongEncryption((generalPurposeFlag & STRONG_ENCRYPTION_FLAG) != 0);
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,185,b.slidingDictionarySize = ((generalPurposeFlag & SLIDING_DICTIONARY_SIZE_FLAG) != 0) ? 8192 : 4096;
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,186,b.numberOfShannonFanoTrees = ((generalPurposeFlag & NUMBER_OF_SHANNON_FANO_TREES_FLAG) != 0) ? 3 : 2;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,275,f (current.entry.getCompressedSize() != -1
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,276,& current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,277,"urrent.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,275,if (current.entry.getCompressedSize() != -1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,276,if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,277,"current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,278,} else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,279,current.in = new ExplodingInputStream(
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,280,"current.entry.getGeneralPurposeBit().getSlidingDictionarySize(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,281,"current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,282,"new BoundedInputStream(in, current.entry.getCompressedSize()));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,377, else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,383,} else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,384,|| current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,744,eturn ZipUtil.canHandleEntryData((ZipArchiveEntry) ae);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,744,ZipArchiveEntry zae = (ZipArchiveEntry) ae;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,745,return zae.getMethod() != ZipMethod.IMPLODING.getCode() && ZipUtil.canHandleEntryData(zae);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,20,import java.io.BufferedInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,382,case IMPLODING:
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,383,"return new ExplodingInputStream(ze.getGeneralPurposeBit().getSlidingDictionarySize(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,384,"ze.getGeneralPurposeBit().getNumberOfShannonFanoTrees(), new BufferedInputStream(bis));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,306,|| entry.getMethod() == ZipMethod.IMPLODING.getCode()
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,35,import org.apache.commons.compress.archivers.zip.ZipMethod;
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,147,"ssertFalse(moby.canReadEntryData(moby.getEntry(""README"")));"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,150,"ZipArchiveEntry entry = moby.getEntry(""README"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,151,"assertEquals(""method"", ZipMethod.TOKENIZATION.getCode(), entry.getMethod());"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,152,assertFalse(moby.canReadEntryData(entry));
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,170,"assertEquals(""method"", ZipMethod.TOKENIZATION.getCode(), entry.getMethod());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,20,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,22,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,23,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,24,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,26,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,28,public class BinaryTreeTest extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,30,public void testDecode() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,31,"InputStream in = new ByteArrayInputStream(new byte[] { 0x02, 0x42, 0x01, 0x13 });"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,33,"BinaryTree tree = BinaryTree.decode(in, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,35,assertNotNull(tree);
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,37,"BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0x8D, (byte) 0xC5, (byte) 0x11, 0x00 }));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,38,"assertEquals(0, tree.read(stream));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,39,"assertEquals(1, tree.read(stream));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,40,"assertEquals(2, tree.read(stream));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,41,"assertEquals(3, tree.read(stream));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,42,"assertEquals(4, tree.read(stream));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,43,"assertEquals(5, tree.read(stream));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,44,"assertEquals(6, tree.read(stream));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,45,"assertEquals(7, tree.read(stream));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,20,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,22,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,24,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,26,public class BitStreamTest extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,28,public void testEmptyStream() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,29,BitStream stream = new BitStream(new ByteArrayInputStream(new byte[0]));
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,30,"assertEquals(""next bit"", -1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,31,"assertEquals(""next bit"", -1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,32,"assertEquals(""next bit"", -1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,35,public void testStream() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,36,"BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x03 }));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,38,"assertEquals(""bit 0"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,39,"assertEquals(""bit 1"", 1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,40,"assertEquals(""bit 2"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,41,"assertEquals(""bit 3"", 1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,42,"assertEquals(""bit 4"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,43,"assertEquals(""bit 5"", 1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,44,"assertEquals(""bit 6"", 1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,45,"assertEquals(""bit 7"", 1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,47,"assertEquals(""bit 8"", 1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,48,"assertEquals(""bit 9"", 1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,49,"assertEquals(""bit 10"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,50,"assertEquals(""bit 11"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,51,"assertEquals(""bit 12"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,52,"assertEquals(""bit 13"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,53,"assertEquals(""bit 14"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,54,"assertEquals(""bit 15"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,56,"assertEquals(""next bit"", -1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,59,public void testNextByteFromEmptyStream() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,60,BitStream stream = new BitStream(new ByteArrayInputStream(new byte[0]));
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,61,"assertEquals(""next byte"", -1, stream.nextByte());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,62,"assertEquals(""next byte"", -1, stream.nextByte());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,65,public void testReadAlignedBytes() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,66,"BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x35 }));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,67,"assertEquals(""next byte"", 0xEA, stream.nextByte());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,68,"assertEquals(""next byte"", 0x35, stream.nextByte());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,69,"assertEquals(""next byte"", -1, stream.nextByte());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,72,public void testNextByte() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,73,"BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x35 }));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,74,"assertEquals(""bit 0"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,75,"assertEquals(""bit 1"", 1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,76,"assertEquals(""bit 2"", 0, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,77,"assertEquals(""bit 3"", 1, stream.nextBit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,79,"assertEquals(""next byte"", 0x5E, stream.nextByte());"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,80,"assertEquals(""next byte"", -1, stream.nextByte()); // not enough bits left to read a byte"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,20,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,22,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,24,public class CircularBufferTest extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,26,public void testPutAndGet() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,27,int size = 16;
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,28,CircularBuffer buffer = new CircularBuffer(size);
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,29,for (int i = 0; i < size / 2; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,30,buffer.put(i);
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,33,"assertTrue(""available"", buffer.available());"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,35,for (int i = 0; i < size / 2; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,36,"assertEquals(""buffer["" + i + ""]"", i, buffer.get());"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,39,"assertEquals(-1, buffer.get());"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,40,"assertFalse(""available"", buffer.available());"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,43,public void testCopy() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,44,CircularBuffer buffer = new CircularBuffer(16);
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,46,buffer.put(1);
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,47,buffer.put(2);
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,48,buffer.get();
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,49,buffer.get();
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,51,// copy uninitialized data
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,52,"buffer.copy(6, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,54,for (int i = 2; i < 6; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,55,"assertEquals(""buffer["" + i + ""]"", 0, buffer.get());"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,57,"assertEquals(""buffer["" + 6 + ""]"", 1, buffer.get());"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,58,"assertEquals(""buffer["" + 7 + ""]"", 2, buffer.get());"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,59,"assertEquals(""buffer["" + 8 + ""]"", 0, buffer.get());"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,60,"assertEquals(""buffer["" + 9 + ""]"", 0, buffer.get());"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,62,for (int i = 10; i < 14; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,63,buffer.put(i);
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,64,buffer.get();
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,67,"assertFalse(""available"", buffer.available());"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,69,// copy data and wrap
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,70,"buffer.copy(2, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,72,for (int i = 14; i < 18; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,73,"assertEquals(""buffer["" + i + ""]"", i % 2 == 0 ? 12 : 13, buffer.get());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,20,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,22,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,23,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,24,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,25,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,26,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,27,import java.util.zip.CRC32;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,28,import java.util.zip.CheckedOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,30,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,31,import org.apache.commons.compress.utils.BoundedInputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,32,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,34,public class ExplodeSupportTest extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,36,"private void testArchiveWithImplodeCompression(String filename, String entryName) throws IOException {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,37,ZipFile zip = new ZipFile(new File(filename));
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,38,ZipArchiveEntry entry = zip.getEntries().nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,39,"assertEquals(""entry name"", entryName, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,40,"assertTrue(""entry can't be read"", zip.canReadEntryData(entry));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,41,"assertEquals(""method"", ZipMethod.IMPLODING.getCode(), entry.getMethod());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,43,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,44,"CheckedOutputStream out = new CheckedOutputStream(bout, new CRC32());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,45,"IOUtils.copy(zip.getInputStream(entry), out);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,47,out.flush();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,49,"assertEquals(""CRC32"", entry.getCrc(), out.getChecksum().getValue());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,52,public void testArchiveWithImplodeCompression4K2Trees() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,53,"testArchiveWithImplodeCompression(""target/test-classes/archives/imploding-4Kdict-2trees.zip"", ""HEADER.TXT"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,56,public void testArchiveWithImplodeCompression8K3Trees() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,57,"testArchiveWithImplodeCompression(""target/test-classes/archives/imploding-8Kdict-3trees.zip"", ""LICENSE.TXT"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,60,"private void testZipStreamWithImplodeCompression(String filename, String entryName) throws IOException {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,61,ZipArchiveInputStream zin = new ZipArchiveInputStream(new FileInputStream(new File(filename)));
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,62,ZipArchiveEntry entry = zin.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,63,"assertEquals(""entry name"", entryName, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,64,"assertTrue(""entry can't be read"", zin.canReadEntryData(entry));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,65,"assertEquals(""method"", ZipMethod.IMPLODING.getCode(), entry.getMethod());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,67,"InputStream bio = new BoundedInputStream(zin, entry.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,69,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,70,"CheckedOutputStream out = new CheckedOutputStream(bout, new CRC32());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,71,"IOUtils.copy(bio, out);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,73,out.flush();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,75,"assertEquals(""CRC32"", entry.getCrc(), out.getChecksum().getValue());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,78,public void testZipStreamWithImplodeCompression4K2Trees() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,79,"testZipStreamWithImplodeCompression(""target/test-classes/archives/imploding-4Kdict-2trees.zip"", ""HEADER.TXT"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,82,public void testZipStreamWithImplodeCompression8K3Trees() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,83,"testZipStreamWithImplodeCompression(""target/test-classes/archives/imploding-8Kdict-3trees.zip"", ""LICENSE.TXT"");"

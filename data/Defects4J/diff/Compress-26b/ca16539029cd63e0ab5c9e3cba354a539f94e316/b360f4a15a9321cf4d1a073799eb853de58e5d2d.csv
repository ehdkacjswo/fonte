is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,19,package org.apache.commons.compress.archivers;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,22,* Represents an entry of an archive.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,24,public interface ArchiveEntry {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,26,* Returns the name of this entry.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,27,* @return the name of this entry
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,29,public String getName();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java,31,public long getSize();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,19,package org.apache.commons.compress.archivers;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,22,* Archiver related Exception
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,24,public class ArchiveException extends Exception {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,26,private static final long serialVersionUID = 3256440322136748848L;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,28,public ArchiveException() {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,29,super();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,32,public ArchiveException(String message) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,33,super(message);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,36,"public ArchiveException(String message, Exception e) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,37,super(message);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,src/main/java/org/apache/commons/compress/archivers/ArchiveException.java,38,this.initCause(e);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,19,package org.apache.commons.compress.archivers;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,24,public abstract class ArchiveInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,26,* Returns the next Archive Entry in this Stream.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,27,* @return the next entry
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,28,* @throws IOException if the next entry could not be read
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,30,public abstract ArchiveEntry getNextEntry() throws IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,19,package org.apache.commons.compress.archivers;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,24,public abstract class ArchiveOutputStream extends OutputStream {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,26,public abstract void putArchiveEntry(ArchiveEntry entry) throws IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java,28,public abstract void closeArchiveEntry() throws IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,19,package org.apache.commons.compress.archivers;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,23,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,24,import java.lang.reflect.Constructor;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,25,import java.lang.reflect.InvocationTargetException;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,26,import java.lang.reflect.Method;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,27,import java.util.HashMap;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,28,import java.util.Iterator;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,29,import java.util.Map;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,31,import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,32,import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,33,import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,34,import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,35,import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,36,import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,37,import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,38,import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,39,import org.apache.commons.compress.utils.ReflectionUtils;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,41,public class ArchiveStreamFactory {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,43,final Map inputStreamClasses = new HashMap();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,44,final Map outputStreamClasses = new HashMap();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,46,public ArchiveStreamFactory() throws ArchiveException {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,47,"registerArchiveInputStream(""zip"", ZipArchiveInputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,48,"registerArchiveOutputStream(""zip"", ZipArchiveOutputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,50,"registerArchiveInputStream(""tar"", TarArchiveInputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,51,"registerArchiveOutputStream(""tar"", TarArchiveOutputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,53,"registerArchiveInputStream(""ar"", ArArchiveInputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,54,"registerArchiveOutputStream(""ar"", ArArchiveOutputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,56,"registerArchiveInputStream(""jar"", JarArchiveInputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,57,"registerArchiveOutputStream(""jar"", JarArchiveOutputStream.class);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,61,"public void registerArchiveInputStream( final String name, final Class stream ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,62,if (ArchiveInputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,63,"inputStreamClasses.put(name, stream);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,64,} else {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,65,"throw new ArchiveException(""Archive does not implement the ArchiveInputStream interface."");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,69,"public void registerArchiveOutputStream( final String name, final Class stream ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,70,"ReflectionUtils.registerClazz(outputStreamClasses, name, ArchiveOutputStream.class, stream);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,71,if (ArchiveOutputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,72,"outputStreamClasses.put(name, stream);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,73,} else {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,74,"throw new ArchiveException(""Archive does not implement the ArchiveOutputStream interface."");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,78,"public ArchiveInputStream createArchiveInputStream( final String archiverName, final InputStream out ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,79,try {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,80,final Class clazz = (Class) inputStreamClasses.get(archiverName);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,82,if (clazz == null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,83,"throw new ArchiveException(""ArchiverFactory could not create instance"");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,86,final Class[] params = { InputStream.class };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,87,final Constructor constructor = clazz.getConstructor(params);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,88,final Object[] initargs = { out };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,89,return (ArchiveInputStream) constructor.newInstance(initargs);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,90,} catch (InstantiationException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,91,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,92,} catch (IllegalAccessException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,93,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,94,} catch (SecurityException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,95,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,96,} catch (NoSuchMethodException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,97,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,98,} catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,99,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,100,} catch (InvocationTargetException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,101,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,105,"public ArchiveOutputStream createArchiveOutputStream( final String archiverName, final OutputStream out ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,106,try {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,107,final Class clazz = (Class) outputStreamClasses.get(archiverName);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,109,if (clazz == null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,110,"throw new ArchiveException(""ArchiverFactory could not create instance"");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,113,final Class[] params = { OutputStream.class };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,114,final Constructor constructor = clazz.getConstructor(params);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,115,final Object[] initargs = { out };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,116,return (ArchiveOutputStream) constructor.newInstance(initargs);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,117,} catch (InstantiationException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,118,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,119,} catch (IllegalAccessException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,120,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,121,} catch (SecurityException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,122,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,123,} catch (NoSuchMethodException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,124,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,125,} catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,126,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,127,} catch (InvocationTargetException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,128,"throw new ArchiveException(""ArchiverFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,132,public ArchiveInputStream createArchiveInputStream( final InputStream input ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,134,final byte[] signature = new byte[12];
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,135,input.mark(signature.length);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,136,input.read(signature);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,137,// reset not supported exception?
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,138,input.reset();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,140,//		for (int i = 0; i < signature.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,141,//			System.out.print(Integer.toHexString(signature[i]));
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,142,"//			System.out.print("","");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,144,"//		System.out.println("""");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,146,for (Iterator it = inputStreamClasses.values().iterator(); it.hasNext();) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,147,final Class clazz = (Class) it.next();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,148,try {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,149,"final Method method = clazz.getMethod(""matches"", new Class[] { byte[].class });"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,151,"final Object result = method.invoke(null, new Object[] { signature } );"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,153,if (result.equals(Boolean.TRUE)) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,154,final Class[] params = { InputStream.class };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,155,final Constructor constructor = clazz.getConstructor(params);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,156,final Object[] initargs = { input };
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,157,return (ArchiveInputStream) constructor.newInstance(initargs);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,159,} catch (SecurityException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,160,} catch (NoSuchMethodException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,161,} catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,162,} catch (IllegalAccessException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,163,} catch (InvocationTargetException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,164,} catch (InstantiationException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,167,return null;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,19,package org.apache.commons.compress.archivers.ar;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,21,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,23,public class ArArchiveEntry implements ArchiveEntry {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,25,private final String name;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,26,private int userId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,27,private int groupId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,28,private int mode;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,29,private long lastModified;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,30,private long length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,32,"public ArArchiveEntry(String name, long length) {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,33,"this(name, length, 0, 0, 33188, System.currentTimeMillis());"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,36,"public ArArchiveEntry(String name, long length, int userId, int groupId, int mode, long lastModified) {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,37,this.name = name;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,38,this.length = length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,39,this.userId = userId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,40,this.groupId = groupId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,41,this.mode = mode;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,42,this.lastModified = lastModified;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,45,public long getSize() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,46,return this.getLength();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,49,public String getName() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,50,return name;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,53,public int getUserId() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,54,return userId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,57,public int getGroupId() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,58,return groupId;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,61,public int getMode() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,62,return mode;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,65,public long getLastModified() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,66,return lastModified;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,69,public long getLength() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,70,return length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,19,package org.apache.commons.compress.archivers.ar;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,25,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,27,public class ArArchiveInputStream extends ArchiveInputStream {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,29,private final InputStream input;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,30,private long offset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,32,public ArArchiveInputStream( final InputStream pInput ) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,33,input = pInput;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,36,public ArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,38,if (offset == 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,39,"final byte[] expected = ""!<arch>\n"".getBytes();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,40,final byte[] realized = new byte[expected.length];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,41,final int read = input.read(realized);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,42,if (read != expected.length) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,43,"throw new IOException(""failed to read header"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,45,for (int i = 0; i < expected.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,46,if (expected[i] != realized[i]) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,47,"throw new IOException(""invalid header "" + new String(realized));"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,52,if (input.available() == 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,53,return null;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,56,if (offset % 2 != 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,57,read();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,60,final byte[] name = new byte[16];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,61,final byte[] lastmodified = new byte[12];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,62,final byte[] userid = new byte[6];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,63,final byte[] groupid = new byte[6];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,64,final byte[] filemode = new byte[8];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,65,final byte[] length = new byte[10];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,67,read(name);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,68,read(lastmodified);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,69,read(userid);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,70,read(groupid);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,71,read(filemode);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,72,read(length);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,75,"final byte[] expected = ""`\012"".getBytes();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,76,final byte[] realized = new byte[expected.length];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,77,final int read = input.read(realized);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,78,if (read != expected.length) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,79,"throw new IOException(""failed to read entry header"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,81,for (int i = 0; i < expected.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,82,if (expected[i] != realized[i]) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,83,"throw new IOException(""invalid entry header. not read the content?"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,88,"return new ArArchiveEntry(new String(name).trim(), Long.parseLong(new String(length).trim()));"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,93,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,94,final int ret = input.read();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,95,offset++;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,96,return ret;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,99,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,100,"return this.input.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,103,public static boolean matches( byte[] signature ) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,104,// 3c21 7261 6863 0a3e
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,106,if (signature[0] != 0x21) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,107,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,109,if (signature[1] != 0x3c) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,110,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,112,if (signature[2] != 0x61) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,113,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,115,if (signature[3] != 0x72) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,116,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,118,if (signature[4] != 0x63) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,119,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,121,if (signature[5] != 0x68) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,122,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,124,if (signature[6] != 0x3e) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,125,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,127,if (signature[7] != 0x0a) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,128,return false;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,131,return true;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,19,package org.apache.commons.compress.archivers.ar;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,25,import org.apache.commons.compress.archivers.ArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,27,public class ArArchiveOutputStream extends ArchiveOutputStream {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,29,private final OutputStream out;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,30,private long archiveOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,31,private long entryOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,32,private ArArchiveEntry prevEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,34,public ArArchiveOutputStream( final OutputStream pOut ) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,35,out = pOut;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,39,private long writeArchiveHeader() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,40,"final String header = ""!<arch>\n"";"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,41,out.write(header.getBytes());
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,42,return header.length();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,45,public void closeArchiveEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,46,if ((entryOffset % 2) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,47,write('\n');
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,48,archiveOffset++;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,52,public void putArchiveEntry( final ArchiveEntry pEntry ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,53,ArArchiveEntry pArEntry = (ArArchiveEntry)pEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,54,if (prevEntry == null) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,55,archiveOffset += writeArchiveHeader();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,56,} else {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,57,if (prevEntry.getLength() != entryOffset) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,58,"throw new IOException(""length does not match entry ("" + prevEntry.getLength() + "" != "" + entryOffset);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,61,closeArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,64,prevEntry = pArEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,66,archiveOffset += writeEntryHeader(pArEntry);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,68,entryOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,71,"private long fill( final long pOffset, final long pNewOffset, final char pFill ) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,72,final long diff = pNewOffset - pOffset;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,74,if (diff > 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,75,for (int i = 0; i < diff; i++) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,76,write(pFill);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,80,return pNewOffset;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,83,private long write( final String data ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,84,"final byte[] bytes = data.getBytes(""ascii"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,85,write(bytes);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,86,return bytes.length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,89,private long writeEntryHeader( final ArArchiveEntry pEntry ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,91,long offset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,93,final String n = pEntry.getName();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,94,if (n.length() > 16) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,95,"throw new IOException(""filename too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,97,offset += write(n);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,99,"offset = fill(offset, 16, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,100,"final String m = """" + (pEntry.getLastModified() / 1000);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,101,if (m.length() > 12) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,102,"throw new IOException(""modified too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,104,offset += write(m);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,106,"offset = fill(offset, 28, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,107,"final String u = """" + pEntry.getUserId();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,108,if (u.length() > 6) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,109,"throw new IOException(""userid too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,111,offset += write(u);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,113,"offset = fill(offset, 34, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,114,"final String g = """" + pEntry.getGroupId();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,115,if (g.length() > 6) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,116,"throw new IOException(""groupid too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,118,offset += write(g);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,120,"offset = fill(offset, 40, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,121,"final String fm = """" + Integer.toString(pEntry.getMode(), 8);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,122,if (fm.length() > 8) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,123,"throw new IOException(""filemode too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,125,offset += write(fm);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,127,"offset = fill(offset, 48, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,128,"final String s = """" + pEntry.getLength();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,129,if (s.length() > 10) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,130,"throw new IOException(""size too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,132,offset += write(s);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,134,"offset = fill(offset, 58, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,136,"offset += write(""`\012"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,138,return offset;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,141,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,142,out.write(b);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,143,entryOffset++;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,146,"public void write(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,147,"out.write(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,148,entryOffset += len;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,151,public void write(byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,152,out.write(b);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,153,entryOffset += b.length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,156,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,157,closeArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,158,out.close();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,159,prevEntry = null;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,162,public String getDefaultFileExtension() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,163,"return ""ar"";"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,166,public byte[] getHeader() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,167,// TODO Auto-generated method stub
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,168,return null;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,171,public String getName() {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,172,"return ""ar"";"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,19,package org.apache.commons.compress.archivers.jar;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,21,import java.security.cert.Certificate;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,22,import java.util.jar.Attributes;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,23,import java.util.jar.JarEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,24,import java.util.zip.ZipEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,25,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,27,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,28,import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,30,public class JarArchiveEntry extends ZipArchiveEntry implements ArchiveEntry {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,32,private Attributes manifestAttributes = null;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,33,private Certificate[] certificates = null;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,35,public JarArchiveEntry(ZipEntry entry) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,36,super(entry);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,39,public JarArchiveEntry(String name) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,40,super(name);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,43,public JarArchiveEntry(ZipArchiveEntry entry) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,44,super(entry);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,47,public JarArchiveEntry(JarEntry entry) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,48,super(entry);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,52,public Attributes getManifestAttributes() {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,53,return manifestAttributes;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,56,public Certificate[] getCertificates() {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,57,return certificates;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,19,package org.apache.commons.compress.archivers.jar;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,25,import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,26,import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,28,public class JarArchiveInputStream extends ZipArchiveInputStream {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,30,public JarArchiveInputStream( final InputStream inputStream ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,31,super(inputStream);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,34,public ArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,35,return (ArchiveEntry)new JarArchiveEntry((ZipArchiveEntry)super.getNextEntry());
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,38,public static boolean matches( byte[] signature ) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,39,// 4b50 0403 0014 0008
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,41,if (signature[0] != 0x50) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,42,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,44,if (signature[1] != 0x4b) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,45,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,47,if (signature[2] != 0x03) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,48,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,50,if (signature[3] != 0x04) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,51,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,53,if (signature[4] != 0x14) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,54,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,56,if (signature[5] != 0x00) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,57,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,59,if (signature[6] != 0x08) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,60,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,62,if (signature[7] != 0x00) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,63,return false;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,66,return true;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,19,package org.apache.commons.compress.archivers.jar;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,25,import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,26,import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,28,public class JarArchiveOutputStream extends ZipArchiveOutputStream {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,30,public JarArchiveOutputStream( final OutputStream out ) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,31,super(out);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,34,public void putArchiveEntry(ArchiveEntry entry) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,35,// TODO special jar stuff
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,36,super.putArchiveEntry((ZipArchiveEntry) entry);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,21,import java.io.File;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,22,import java.util.Date;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,23,import java.util.Locale;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,28,* This class represents an entry in a Tar archive. It consists of the entry's
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,29,"* header, as well as the entry's File. Entries can be instantiated in one of"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,30,"* three ways, depending on how they are to be used. <p>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,32,* TarEntries that are created from the header bytes read from an archive are
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,33,* instantiated with the TarEntry( byte[] ) constructor. These entries will be
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,34,* used when extracting from or listing the contents of an archive. These
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,35,* entries have their header filled in using the header bytes. They also set the
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,36,"* File to null, since they reference an archive entry not a file. <p>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,38,* TarEntries that are created from Files that are to be written into an archive
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,39,* are instantiated with the TarEntry( File ) constructor. These entries have
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,40,* their header filled in using the File's information. They also keep a
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,41,* reference to the File for convenience when writing entries. <p>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,43,"* Finally, TarEntries can be constructed from nothing but a name. This allows"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,44,"* the programmer to construct the entry by hand, for instance when only an"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,45,"* InputStream is available for writing to the archive, and the header"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,46,* information is constructed from other information. In this case the header
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,47,* fields are set to defaults and the File is set to null. <p>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,49,* The C structure for a Tar Entry's header is: <pre>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,50,* struct header {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,51,* char name[NAMSIZ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,52,* char mode[8];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,53,* char uid[8];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,54,* char gid[8];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,55,* char size[12];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,56,* char mtime[12];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,57,* char chksum[8];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,58,* char linkflag;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,59,* char linkname[NAMSIZ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,60,* char magic[8];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,61,* char uname[TUNMLEN];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,62,* char gname[TGNMLEN];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,63,* char devmajor[8];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,64,* char devminor[8];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,65,* } header;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,66,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,68,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,69,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,70,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,71,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,72,* @see TarInputStream
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,73,* @see TarArchiveOutputStream
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,75,public class TarArchiveEntry implements ArchiveEntry {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,77,* The length of the name field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,79,public static final int NAMELEN = 100;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,82,* The entry's modification time.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,84,private int m_checkSum;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,87,* The entry's group name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,89,private int m_devMajor;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,92,* The entry's major device number.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,94,private int m_devMinor;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,97,* The entry's minor device number.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,99,private File m_file;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,102,* The entry's user id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,104,private int m_groupID;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,107,* The entry's user name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,109,private StringBuffer m_groupName;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,112,* The entry's checksum.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,114,private byte m_linkFlag;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,117,* The entry's link flag.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,119,private StringBuffer m_linkName;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,122,* The entry's link name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,124,private StringBuffer m_magic;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,127,* The entry's size.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,129,private long m_modTime;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,132,* The entry's name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,134,private int m_mode;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,136,private StringBuffer m_name;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,139,* The entry's group id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,141,private long m_size;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,144,* The entry's permission mode.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,146,private int m_userID;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,149,* The entry's magic tag.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,151,private StringBuffer m_userName;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,154,* Construct an entry with only a name. This allows the programmer to
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,155,"* construct the entry's header ""by hand"". File is set to null."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,157,* @param name the name of the entry
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,159,public TarArchiveEntry( final String name )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,161,this();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,163,"final boolean isDir = name.endsWith( ""/"" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,165,m_name = new StringBuffer( name );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,166,m_mode = isDir ? 040755 : 0100644;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,167,m_linkFlag = isDir ? TarConstants.LF_DIR : TarConstants.LF_NORMAL;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,168,m_modTime = ( new Date() ).getTime() / 1000;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,169,"m_linkName = new StringBuffer( """" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,170,"m_userName = new StringBuffer( """" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,171,"m_groupName = new StringBuffer( """" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,175,* Construct an entry with a name an a link flag.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,177,* @param name Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,178,* @param linkFlag Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,180,"public TarArchiveEntry( final String name, final byte linkFlag )"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,182,this( name );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,183,m_linkFlag = linkFlag;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,187,"* Construct an entry for a file. File is set to file, and the header is"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,188,* constructed from information from the file.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,190,* @param file The file that the entry represents.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,192,public TarArchiveEntry( final File file )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,194,this();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,196,m_file = file;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,198,String name = file.getPath();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,200,// Strip off drive letters!
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,201,final String osName =
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,202,"System.getProperty( ""os.name"" ).toLowerCase( Locale.US );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,203,"if( -1 != osName.indexOf( ""netware"" ) )"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,205,if( name.length() > 2 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,207,final char ch1 = name.charAt( 0 );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,208,final char ch2 = name.charAt( 1 );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,210,if( ch2 == ':' &&
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,211,( ( ch1 >= 'a' && ch1 <= 'z' ) ||
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,212,( ch1 >= 'A' && ch1 <= 'Z' ) ) )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,214,name = name.substring( 2 );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,218,"else if( -1 != osName.indexOf( ""netware"" ) )"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,220,final int colon = name.indexOf( ':' );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,221,if( colon != -1 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,223,name = name.substring( colon + 1 );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,227,"name = name.replace( File.separatorChar, '/' );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,229,// No absolute pathnames
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,230,"// Windows (and Posix?) paths can start with ""\\NetworkDrive\"","
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,231,// so we loop on starting /'s.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,232,"while( name.startsWith( ""/"" ) )"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,234,name = name.substring( 1 );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,237,"m_linkName = new StringBuffer( """" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,238,m_name = new StringBuffer( name );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,240,if( file.isDirectory() )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,242,m_mode = 040755;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,243,m_linkFlag = TarConstants.LF_DIR;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,245,if( m_name.charAt( m_name.length() - 1 ) != '/' )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,247,"m_name.append( ""/"" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,250,else
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,252,m_mode = 0100644;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,253,m_linkFlag = TarConstants.LF_NORMAL;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,256,m_size = file.length();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,257,m_modTime = file.lastModified() / 1000;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,258,m_checkSum = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,259,m_devMajor = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,260,m_devMinor = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,264,* Construct an entry from an archive's header bytes. File is set to null.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,266,* @param header The header bytes from a tar archive entry.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,268,public TarArchiveEntry( final byte[] header )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,270,this();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,271,parseTarHeader( header );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,275,* Construct an empty entry and prepares the header values.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,277,private TarArchiveEntry()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,279,m_magic = new StringBuffer( TarConstants.TMAGIC );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,280,m_name = new StringBuffer();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,281,m_linkName = new StringBuffer();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,283,"String user = System.getProperty( ""user.name"", """" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,284,if( user.length() > 31 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,286,"user = user.substring( 0, 31 );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,289,m_userName = new StringBuffer( user );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,290,"m_groupName = new StringBuffer( """" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,294,* Set this entry's group id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,296,* @param groupId This entry's new group id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,298,public void setGroupID( final int groupId )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,300,m_groupID = groupId;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,304,* Set this entry's group id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,306,* @param groupId This entry's new group id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,307,* @deprecated Use setGroupID() instead
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,308,* @see #setGroupID(int)
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,310,public void setGroupId( final int groupId )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,312,m_groupID = groupId;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,316,* Set this entry's group name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,318,* @param groupName This entry's new group name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,320,public void setGroupName( final String groupName )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,322,m_groupName = new StringBuffer( groupName );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,326,* Set this entry's modification time. The parameter passed to this method
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,327,"* is in ""Java time""."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,329,* @param time This entry's new modification time.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,331,public void setModTime( final long time )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,333,m_modTime = time / 1000;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,337,* Set this entry's modification time.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,339,* @param time This entry's new modification time.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,341,public void setModTime( final Date time )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,343,m_modTime = time.getTime() / 1000;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,347,* Set the mode for this entry
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,349,* @param mode The new Mode value
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,351,public void setMode( final int mode )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,353,m_mode = mode;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,357,* Set this entry's name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,359,* @param name This entry's new name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,361,public void setName( final String name )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,363,m_name = new StringBuffer( name );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,367,* Set this entry's file size.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,369,* @param size This entry's new file size.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,371,public void setSize( final long size )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,373,m_size = size;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,377,* Set this entry's user id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,379,* @param userId This entry's new user id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,381,public void setUserID( final int userId )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,383,m_userID = userId;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,387,* Set this entry's user id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,389,* @param userId This entry's new user id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,390,* @deprecated Use setUserID() instead
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,391,* @see #setUserID(int)
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,393,public void setUserId( final int userId )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,395,m_userID = userId;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,399,* Set this entry's user name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,401,* @param userName This entry's new user name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,403,public void setUserName( final String userName )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,405,m_userName = new StringBuffer( userName );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,409,"* If this entry represents a file, and the file is a directory, return an"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,410,* array of TarEntries for this entry's children.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,412,* @return An array of TarEntry's for this entry's children.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,414,public TarArchiveEntry[] getDirectoryEntries()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,416,if( null == m_file || !m_file.isDirectory() )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,418,return new TarArchiveEntry[ 0 ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,421,final String[] list = m_file.list();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,422,final TarArchiveEntry[] result = new TarArchiveEntry[ list.length ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,424,for( int i = 0; i < list.length; ++i )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,426,"result[ i ] = new TarArchiveEntry( new File( m_file, list[ i ] ) );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,429,return result;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,433,* Get this entry's file.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,435,* @return This entry's file.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,437,public File getFile()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,439,return m_file;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,443,* Get this entry's group id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,445,* @return This entry's group id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,446,* @deprecated Use getGroupID() instead
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,447,* @see #getGroupID()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,449,public int getGroupId()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,451,return m_groupID;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,455,* Get this entry's group id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,457,* @return This entry's group id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,459,public int getGroupID()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,461,return m_groupID;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,465,* Get this entry's group name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,467,* @return This entry's group name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,469,public String getGroupName()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,471,return m_groupName.toString();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,475,* Set this entry's modification time.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,477,* @return The ModTime value
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,479,public Date getModTime()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,481,return new Date( m_modTime * 1000 );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,485,* Get this entry's mode.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,487,* @return This entry's mode.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,489,public int getMode()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,491,return m_mode;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,495,* Get this entry's name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,497,* @return This entry's name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,499,public String getName()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,501,return m_name.toString();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,505,* Get this entry's file size.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,507,* @return This entry's file size.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,509,public long getSize()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,511,return m_size;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,515,* Get this entry's checksum.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,517,* @return This entry's checksum.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,519,public int getCheckSum()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,521,return m_checkSum;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,525,* Get this entry's user id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,527,* @return This entry's user id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,528,* @deprecated Use getUserID() instead
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,529,* @see #getUserID()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,531,public int getUserId()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,533,return m_userID;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,537,* Get this entry's user id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,539,* @return This entry's user id.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,541,public int getUserID()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,543,return m_userID;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,547,* Get this entry's user name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,549,* @return This entry's user name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,551,public String getUserName()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,553,return m_userName.toString();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,557,* Determine if the given entry is a descendant of this entry. Descendancy
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,558,* is determined by the name of the descendant starting with this entry's
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,559,* name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,561,* @param desc Entry to be checked as a descendent of
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,562,* @return True if entry is a descendant of
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,564,public boolean isDescendent( final TarArchiveEntry desc )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,566,return desc.getName().startsWith( getName() );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,570,* Return whether or not this entry represents a directory.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,572,* @return True if this entry is a directory.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,574,public boolean isDirectory()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,576,if( m_file != null )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,578,return m_file.isDirectory();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,581,if( m_linkFlag == TarConstants.LF_DIR )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,583,return true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,586,"if( getName().endsWith( ""/"" ) )"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,588,return true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,591,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,595,* Indicate if this entry is a GNU long name block
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,597,* @return true if this is a long name extension provided by GNU tar
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,599,public boolean isGNULongNameEntry()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,601,return m_linkFlag == TarConstants.LF_GNUTYPE_LONGNAME &&
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,602,m_name.toString().equals( TarConstants.GNU_LONGLINK );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,606,* Determine if the two entries are equal. Equality is determined by the
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,607,* header names being equal.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,609,* @param other Entry to be checked for equality.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,610,* @return True if the entries are equal.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,612,public boolean equals( final TarArchiveEntry other )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,614,return getName().equals( other.getName() );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,618,* Parse an entry's header information from a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,620,* @param header The tar entry header buffer to get information from.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,622,private void parseTarHeader( final byte[] header )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,624,int offset = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,626,"m_name = TarUtils.parseName( header, offset, NAMELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,627,offset += NAMELEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,628,"m_mode = (int)TarUtils.parseOctal( header, offset, TarConstants.MODELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,629,offset += TarConstants.MODELEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,630,"m_userID = (int)TarUtils.parseOctal( header, offset, TarConstants.UIDLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,631,offset += TarConstants.UIDLEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,632,"m_groupID = (int)TarUtils.parseOctal( header, offset, TarConstants.GIDLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,633,offset += TarConstants.GIDLEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,634,"m_size = TarUtils.parseOctal( header, offset, TarConstants.SIZELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,635,offset += TarConstants.SIZELEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,636,"m_modTime = TarUtils.parseOctal( header, offset, TarConstants.MODTIMELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,637,offset += TarConstants.MODTIMELEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,638,"m_checkSum = (int)TarUtils.parseOctal( header, offset, TarConstants.CHKSUMLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,639,offset += TarConstants.CHKSUMLEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,640,m_linkFlag = header[ offset++ ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,641,"m_linkName = TarUtils.parseName( header, offset, NAMELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,642,offset += NAMELEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,643,"m_magic = TarUtils.parseName( header, offset, TarConstants.MAGICLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,644,offset += TarConstants.MAGICLEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,645,"m_userName = TarUtils.parseName( header, offset, TarConstants.UNAMELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,646,offset += TarConstants.UNAMELEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,647,"m_groupName = TarUtils.parseName( header, offset, TarConstants.GNAMELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,648,offset += TarConstants.GNAMELEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,649,"m_devMajor = (int)TarUtils.parseOctal( header, offset, TarConstants.DEVLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,650,offset += TarConstants.DEVLEN;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,651,"m_devMinor = (int)TarUtils.parseOctal( header, offset, TarConstants.DEVLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,655,* Write an entry's header information to a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,657,* @param buffer The tar entry header buffer to fill in.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,659,public void writeEntryHeader( final byte[] buffer )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,661,int offset = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,663,"offset = TarUtils.getNameBytes( m_name, buffer, offset, NAMELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,664,"offset = TarUtils.getOctalBytes( m_mode, buffer, offset, TarConstants.MODELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,665,"offset = TarUtils.getOctalBytes( m_userID, buffer, offset, TarConstants.UIDLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,666,"offset = TarUtils.getOctalBytes( m_groupID, buffer, offset, TarConstants.GIDLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,667,"offset = TarUtils.getLongOctalBytes( m_size, buffer, offset, TarConstants.SIZELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,668,"offset = TarUtils.getLongOctalBytes( m_modTime, buffer, offset, TarConstants.MODTIMELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,670,final int checkSumOffset = offset;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,671,for( int i = 0; i < TarConstants.CHKSUMLEN; ++i )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,673,buffer[ offset++ ] = (byte)' ';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,676,buffer[ offset++ ] = m_linkFlag;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,677,"offset = TarUtils.getNameBytes( m_linkName, buffer, offset, NAMELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,678,"offset = TarUtils.getNameBytes( m_magic, buffer, offset, TarConstants.MAGICLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,679,"offset = TarUtils.getNameBytes( m_userName, buffer, offset, TarConstants.UNAMELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,680,"offset = TarUtils.getNameBytes( m_groupName, buffer, offset, TarConstants.GNAMELEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,681,"offset = TarUtils.getOctalBytes( m_devMajor, buffer, offset, TarConstants.DEVLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,682,"offset = TarUtils.getOctalBytes( m_devMinor, buffer, offset, TarConstants.DEVLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,684,while( offset < buffer.length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,686,buffer[ offset++ ] = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,689,final long checkSum = TarUtils.computeCheckSum( buffer );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,690,"TarUtils.getCheckSumOctalBytes( checkSum, buffer, checkSumOffset, TarConstants.CHKSUMLEN );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,25,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,27,public class TarArchiveInputStream extends ArchiveInputStream {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,28,private final TarInputStream in;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,30,public TarArchiveInputStream( InputStream inputStream ) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,31,in = new TarInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,34,public ArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,35,return (ArchiveEntry)in.getNextEntry();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,38,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,39,"return in.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,42,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,43,return in.read();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,46,public static boolean matches( byte[] signature ) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,47,// 6574 7473 2e31 6d78
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,49,if (signature[0] != 0x74) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,50,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,52,if (signature[1] != 0x65) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,53,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,55,if (signature[2] != 0x73) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,56,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,58,if (signature[3] != 0x74) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,59,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,61,if (signature[4] != 0x31) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,62,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,64,if (signature[5] != 0x2e) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,65,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,67,if (signature[6] != 0x78) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,68,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,70,if (signature[7] != 0x6d) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,71,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,74,return true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,25,import org.apache.commons.compress.archivers.ArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,27,public class TarArchiveOutputStream extends ArchiveOutputStream {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,29,private TarOutputStream out = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,32,* @param out
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,34,public TarArchiveOutputStream(OutputStream out) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,35,this.out = new TarOutputStream(out);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,38,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,39,this.out.close();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,42,public void closeArchiveEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,43,this.out.closeEntry();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,46,public void putArchiveEntry(ArchiveEntry entry) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,47,this.out.putNextEntry((TarArchiveEntry)entry);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,50,"public void write(byte[] buffer, int offset, int length) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,51,"this.out.write(buffer, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,54,public String getDefaultFileExtension() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,55,"return ""tar"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,58,public byte[] getHeader() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,59,// TODO Auto-generated method stub
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,60,return null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,63,public String getName() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,64,"return ""tar"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,67,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,68,this.out.write(b);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,23,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,24,import java.util.Arrays;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,27,* The TarBuffer class implements the tar archive concept of a buffered input
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,28,* stream. This concept goes back to the days of blocked tape drives and special
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,29,"* io devices. In the Java universe, the only real function that this class"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,30,"* performs is to ensure that files have the correct ""block"" size, or other tars"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,31,* will complain. <p>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,33,* You should never have a need to access this class directly. TarBuffers are
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,34,* created by Tar IO Streams.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,36,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,37,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,38,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,40,class TarBuffer
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,42,public static final int DEFAULT_RECORDSIZE = ( 512 );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,43,public static final int DEFAULT_BLOCKSIZE = ( DEFAULT_RECORDSIZE * 20 );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,45,private byte[] m_blockBuffer;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,46,private int m_blockSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,47,private int m_currBlkIdx;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,48,private int m_currRecIdx;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,49,private boolean m_debug;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,51,private InputStream m_input;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,52,private OutputStream m_output;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,53,private int m_recordSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,54,private int m_recsPerBlock;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,56,public TarBuffer( final InputStream input )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,58,"this( input, TarBuffer.DEFAULT_BLOCKSIZE );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,61,"public TarBuffer( final InputStream input, final int blockSize )"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,63,"this( input, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,66,"public TarBuffer( final InputStream input,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,67,"final int blockSize,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,68,final int recordSize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,70,m_input = input;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,71,"initialize( blockSize, recordSize );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,74,public TarBuffer( final OutputStream output )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,76,"this( output, TarBuffer.DEFAULT_BLOCKSIZE );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,79,"public TarBuffer( final OutputStream output, final int blockSize )"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,81,"this( output, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,84,"public TarBuffer( final OutputStream output,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,85,"final int blockSize,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,86,final int recordSize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,88,m_output = output;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,89,"initialize( blockSize, recordSize );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,93,* Set the debugging flag for the buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,95,"* @param debug If true, print debugging output."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,97,public void setDebug( final boolean debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,99,m_debug = debug;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,103,* Get the TAR Buffer's block size. Blocks consist of multiple records.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,105,* @return The BlockSize value
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,107,public int getBlockSize()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,109,return m_blockSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,113,"* Get the current block number, zero based."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,115,* @return The current zero based block number.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,117,public int getCurrentBlockNum()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,119,return m_currBlkIdx;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,123,"* Get the current record number, within the current block, zero based."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,124,"* Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,126,* @return The current zero based record number.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,128,public int getCurrentRecordNum()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,130,return m_currRecIdx - 1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,134,* Get the TAR Buffer's record size.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,136,* @return The RecordSize value
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,138,public int getRecordSize()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,140,return m_recordSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,144,* Determine if an archive record indicate End of Archive. End of archive is
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,145,* indicated by a record that consists entirely of null bytes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,147,* @param record The record data to check.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,148,* @return The EOFRecord value
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,150,public boolean isEOFRecord( final byte[] record )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,152,final int size = getRecordSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,153,for( int i = 0; i < size; ++i )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,155,if( record[ i ] != 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,157,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,161,return true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,165,"* Close the TarBuffer. If this is an output buffer, also flush the current"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,166,* block before closing.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,168,public void close()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,169,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,171,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,173,"debug( ""TarBuffer.closeBuffer()."" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,176,if( null != m_output )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,178,flushBlock();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,180,if( m_output != System.out && m_output != System.err )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,182,m_output.close();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,183,m_output = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,186,else if( m_input != null )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,188,if( m_input != System.in )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,190,m_input.close();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,191,m_input = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,197,* Read a record from the input stream and return the data.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,199,* @return The record data.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,200,* @exception IOException Description of Exception
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,202,public byte[] readRecord()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,203,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,205,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,207,"final String message = ""ReadRecord: recIdx = "" + m_currRecIdx +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,208,""" blkIdx = "" + m_currBlkIdx;"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,209,debug( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,212,if( null == m_input )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,214,"final String message = ""reading from an output buffer"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,215,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,218,if( m_currRecIdx >= m_recsPerBlock )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,220,if( !readBlock() )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,222,return null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,226,final byte[] result = new byte[ m_recordSize ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,227,"System.arraycopy( m_blockBuffer,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,228,"( m_currRecIdx * m_recordSize ),"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,229,"result,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,230,"0,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,231,m_recordSize );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,233,m_currRecIdx++;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,235,return result;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,239,* Skip over a record on the input stream.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,241,public void skipRecord()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,242,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,244,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,246,"final String message = ""SkipRecord: recIdx = "" + m_currRecIdx +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,247,""" blkIdx = "" + m_currBlkIdx;"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,248,debug( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,251,if( null == m_input )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,253,"final String message = ""reading (via skip) from an output buffer"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,254,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,257,if( m_currRecIdx >= m_recsPerBlock )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,259,if( !readBlock() )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,261,return;// UNDONE
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,265,m_currRecIdx++;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,269,* Write an archive record to the archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,271,* @param record The record data to write to the archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,273,public void writeRecord( final byte[] record )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,274,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,276,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,278,"final String message = ""WriteRecord: recIdx = "" + m_currRecIdx +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,279,""" blkIdx = "" + m_currBlkIdx;"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,280,debug( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,283,if( null == m_output )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,285,"final String message = ""writing to an input buffer"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,286,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,289,if( record.length != m_recordSize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,291,"final String message = ""record to write has length '"" +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,292,"record.length + ""' which is not the record size of '"" +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,293,"m_recordSize + ""'"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,294,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,297,if( m_currRecIdx >= m_recsPerBlock )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,299,writeBlock();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,302,"System.arraycopy( record,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,303,"0,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,304,"m_blockBuffer,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,305,"( m_currRecIdx * m_recordSize ),"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,306,m_recordSize );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,308,m_currRecIdx++;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,312,"* Write an archive record to the archive, where the record may be inside of"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,313,"* a larger array buffer. The buffer must be ""offset plus record size"" long."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,315,* @param buffer The buffer containing the record data to write.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,316,* @param offset The offset of the record data within buf.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,318,"public void writeRecord( final byte[] buffer, final int offset )"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,319,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,321,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,323,"final String message = ""WriteRecord: recIdx = "" + m_currRecIdx +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,324,""" blkIdx = "" + m_currBlkIdx;"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,325,debug( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,328,if( null == m_output )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,330,"final String message = ""writing to an input buffer"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,331,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,334,if( ( offset + m_recordSize ) > buffer.length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,336,"final String message = ""record has length '"" + buffer.length +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,337,"""' with offset '"" + offset + ""' which is less than the record size of '"" +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,338,"m_recordSize + ""'"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,339,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,342,if( m_currRecIdx >= m_recsPerBlock )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,344,writeBlock();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,347,"System.arraycopy( buffer,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,348,"offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,349,"m_blockBuffer,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,350,"( m_currRecIdx * m_recordSize ),"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,351,m_recordSize );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,353,m_currRecIdx++;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,357,* Flush the current data block if it has any data in it.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,359,private void flushBlock()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,360,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,362,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,364,"final String message = ""TarBuffer.flushBlock() called."";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,365,debug( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,368,if( m_output == null )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,370,"final String message = ""writing to an input buffer"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,371,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,374,if( m_currRecIdx > 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,376,writeBlock();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,381,* Initialization common to all constructors.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,383,"private void initialize( final int blockSize, final int recordSize )"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,385,m_debug = false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,386,m_blockSize = blockSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,387,m_recordSize = recordSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,388,m_recsPerBlock = ( m_blockSize / m_recordSize );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,389,m_blockBuffer = new byte[ m_blockSize ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,391,if( null != m_input )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,393,m_currBlkIdx = -1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,394,m_currRecIdx = m_recsPerBlock;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,396,else
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,398,m_currBlkIdx = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,399,m_currRecIdx = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,404,"* @return false if End-Of-File, else true"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,406,private boolean readBlock()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,407,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,409,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,411,"final String message = ""ReadBlock: blkIdx = "" + m_currBlkIdx;"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,412,debug( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,415,if( null == m_input )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,417,"final String message = ""reading from an output buffer"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,418,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,421,m_currRecIdx = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,423,int offset = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,424,int bytesNeeded = m_blockSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,426,while( bytesNeeded > 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,428,"final long numBytes = m_input.read( m_blockBuffer, offset, bytesNeeded );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,431,// NOTE
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,432,"// We have fit EOF, and the block is not full!"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,434,// This is a broken archive. It does not follow the standard
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,435,"// blocking algorithm. However, because we are generous, and"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,436,"// it requires little effort, we will simply ignore the error"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,437,// and continue as if the entire block were read. This does
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,438,// not appear to break anything upstream. We used to return
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,439,// false in this case.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,441,// Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,443,if( numBytes == -1 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,445,"// However, just leaving the unread portion of the buffer dirty does"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,446,// cause problems in some cases.  This problem is described in
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,447,// http://issues.apache.org/bugzilla/show_bug.cgi?id=29877
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,449,// The solution is to fill the unused portion of the buffer with zeros.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,451,"Arrays.fill(m_blockBuffer, offset, offset + bytesNeeded, (byte) 0);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,453,break;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,456,offset += numBytes;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,457,bytesNeeded -= numBytes;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,459,if( numBytes != m_blockSize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,461,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,463,"System.err.println( ""ReadBlock: INCOMPLETE READ """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,464,"+ numBytes + "" of "" + m_blockSize"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,465,"+ "" bytes read."" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,470,m_currBlkIdx++;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,472,return true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,476,* Write a TarBuffer block to the archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,478,* @exception IOException Description of Exception
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,480,private void writeBlock()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,481,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,483,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,485,"final String message = ""WriteBlock: blkIdx = "" + m_currBlkIdx;"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,486,debug( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,489,if( null == m_output )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,491,"final String message = ""writing to an input buffer"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,492,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,495,"m_output.write( m_blockBuffer, 0, m_blockSize );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,496,m_output.flush();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,498,m_currRecIdx = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,499,m_currBlkIdx++;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,502,protected void debug( final String message )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,504,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,506,System.err.println( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,22,* This interface contains all the definitions used in the package.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,24,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,25,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,26,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,28,interface TarConstants
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,31,* The length of the mode field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,33,int MODELEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,36,* The length of the user id field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,38,int UIDLEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,41,* The length of the group id field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,43,int GIDLEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,46,* The length of the checksum field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,48,int CHKSUMLEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,51,* The length of the size field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,53,int SIZELEN = 12;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,56,* The length of the magic field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,58,int MAGICLEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,61,* The length of the modification time field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,63,int MODTIMELEN = 12;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,66,* The length of the user name field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,68,int UNAMELEN = 32;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,71,* The length of the group name field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,73,int GNAMELEN = 32;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,76,* The length of the devices field in a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,78,int DEVLEN = 8;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,81,"* LF_ constants represent the ""link flag"" of an entry, or more commonly,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,82,"* the ""entry type"". This is the ""old way"" of indicating a normal file."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,84,byte LF_OLDNORM = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,87,* Normal file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,89,byte LF_NORMAL = (byte)'0';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,92,* Link file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,94,byte LF_LINK = (byte)'1';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,97,* Symbolic link file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,99,byte LF_SYMLINK = (byte)'2';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,102,* Character device file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,104,byte LF_CHR = (byte)'3';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,107,* Block device file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,109,byte LF_BLK = (byte)'4';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,112,* Directory file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,114,byte LF_DIR = (byte)'5';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,117,* FIFO (pipe) file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,119,byte LF_FIFO = (byte)'6';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,122,* Contiguous file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,124,byte LF_CONTIG = (byte)'7';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,127,* The magic tag representing a POSIX tar archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,129,"String TMAGIC = ""ustar"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,132,* The magic tag representing a GNU tar archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,134,"String GNU_TMAGIC = ""ustar  "";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,137,* The namr of the GNU tar entry which contains a long name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,139,"String GNU_LONGLINK = ""././@LongLink"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,142,* Identifies the *next* file on the tape as having a long name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,144,byte LF_GNUTYPE_LONGNAME = (byte)'L';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,21,import java.io.FilterInputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,23,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,24,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,27,* The TarInputStream reads a UNIX tar archive as an InputStream. methods are
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,28,"* provided to position at each successive entry in the archive, and the read"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,29,* each entry as a normal input stream using read().
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,31,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,32,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,33,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,34,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,35,* @see TarInputStream
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,36,* @see TarArchiveEntry
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,38,public class TarInputStream
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,39,extends FilterInputStream
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,41,private TarBuffer m_buffer;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,42,private TarArchiveEntry m_currEntry;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,43,private boolean m_debug;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,44,private int m_entryOffset;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,45,private int m_entrySize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,46,private boolean m_hasHitEOF;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,47,private byte[] m_oneBuf;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,48,private byte[] m_readBuf;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,51,* Construct a TarInputStream using specified input
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,52,* stream and default block and record sizes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,54,* @param input stream to create TarInputStream from
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,55,* @see TarBuffer#DEFAULT_BLOCKSIZE
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,56,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,58,public TarInputStream( final InputStream input )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,60,"this( input, TarBuffer.DEFAULT_BLOCKSIZE, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,64,* Construct a TarInputStream using specified input
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,65,"* stream, block size and default record sizes."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,67,* @param input stream to create TarInputStream from
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,68,* @param blockSize the block size to use
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,69,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,71,"public TarInputStream( final InputStream input,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,72,final int blockSize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,74,"this( input, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,78,* Construct a TarInputStream using specified input
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,79,"* stream, block size and record sizes."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,81,* @param input stream to create TarInputStream from
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,82,* @param blockSize the block size to use
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,83,* @param recordSize the record size to use
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,85,"public TarInputStream( final InputStream input,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,86,"final int blockSize,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,87,final int recordSize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,89,super( input );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,91,"m_buffer = new TarBuffer( input, blockSize, recordSize );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,92,m_oneBuf = new byte[ 1 ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,96,* Sets the debugging flag.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,98,* @param debug The new Debug value
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,100,public void setDebug( final boolean debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,102,m_debug = debug;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,103,m_buffer.setDebug( debug );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,107,* Get the next entry in this tar archive. This will skip over any remaining
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,108,"* data in the current entry, if there is one, and place the input stream at"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,109,"* the header of the next entry, and read the header and instantiate a new"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,110,* TarEntry from the header bytes and return that entry. If there are no
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,111,"* more entries in the archive, null will be returned to indicate that the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,112,* end of the archive has been reached.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,114,"* @return The next TarEntry in the archive, or null."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,115,* @exception IOException Description of Exception
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,117,public TarArchiveEntry getNextEntry()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,118,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,120,if( m_hasHitEOF )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,122,return null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,125,if( m_currEntry != null )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,127,final int numToSkip = m_entrySize - m_entryOffset;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,129,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,131,"final String message = ""TarInputStream: SKIP currENTRY '"" +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,132,"m_currEntry.getName() + ""' SZ "" + m_entrySize +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,133,""" OFF "" + m_entryOffset + ""  skipping "" + numToSkip + "" bytes"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,134,debug( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,137,if( numToSkip > 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,139,skip( numToSkip );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,142,m_readBuf = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,145,final byte[] headerBuf = m_buffer.readRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,146,if( headerBuf == null )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,148,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,150,"debug( ""READ NULL RECORD"" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,152,m_hasHitEOF = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,154,else if( m_buffer.isEOFRecord( headerBuf ) )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,156,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,158,"debug( ""READ EOF RECORD"" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,160,m_hasHitEOF = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,163,if( m_hasHitEOF )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,165,m_currEntry = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,167,else
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,169,m_currEntry = new TarArchiveEntry( headerBuf );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,171,if( !( headerBuf[ 257 ] == 'u' && headerBuf[ 258 ] == 's' &&
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,172,headerBuf[ 259 ] == 't' && headerBuf[ 260 ] == 'a' &&
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,173,headerBuf[ 261 ] == 'r' ) )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,175,//Must be v7Format
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,178,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,180,"final String message = ""TarInputStream: SET CURRENTRY '"" +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,181,"m_currEntry.getName() + ""' size = "" + m_currEntry.getSize();"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,182,debug( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,185,m_entryOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,187,// REVIEW How do we resolve this discrepancy?!
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,188,m_entrySize = (int)m_currEntry.getSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,191,if( null != m_currEntry && m_currEntry.isGNULongNameEntry() )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,193,// read in the name
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,194,final StringBuffer longName = new StringBuffer();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,195,final byte[] buffer = new byte[ 256 ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,196,int length = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,197,while( ( length = read( buffer ) ) >= 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,199,"final String str = new String( buffer, 0, length );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,200,longName.append( str );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,202,getNextEntry();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,204,// remove trailing null terminator
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,205,if (longName.length() > 0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,206,&& longName.charAt(longName.length() - 1) == 0) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,207,longName.deleteCharAt(longName.length() - 1);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,210,m_currEntry.setName( longName.toString() );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,213,return m_currEntry;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,217,* Get the record size being used by this stream's TarBuffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,219,* @return The TarBuffer record size.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,221,public int getRecordSize()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,223,return m_buffer.getRecordSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,227,* Get the available data that can be read from the current entry in the
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,228,* archive. This does not indicate how much data is left in the entire
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,229,"* archive, only in the current entry. This value is determined from the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,230,* entry's size header field and the amount of data already read from the
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,231,* current entry.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,233,* @return The number of available bytes for the current entry.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,234,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,236,public int available()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,237,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,239,return m_entrySize - m_entryOffset;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,243,* Closes this stream. Calls the TarBuffer's close() method.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,245,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,247,public void close()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,248,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,250,m_buffer.close();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,254,* Copies the contents of the current tar archive entry directly into an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,255,* output stream.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,257,* @param output The OutputStream into which to write the entry's data.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,258,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,260,public void copyEntryContents( final OutputStream output )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,261,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,263,final byte[] buffer = new byte[ 32 * 1024 ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,264,while( true )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,266,"final int numRead = read( buffer, 0, buffer.length );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,267,if( numRead == -1 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,269,break;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,272,"output.write( buffer, 0, numRead );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,277,"* Since we do not support marking just yet, we do nothing."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,279,* @param markLimit The limit to mark.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,281,public void mark( int markLimit )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,286,"* Since we do not support marking just yet, we return false."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,288,* @return False.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,290,public boolean markSupported()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,292,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,296,* Reads a byte from the current tar archive entry. This method simply calls
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,297,"* read( byte[], int, int )."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,299,"* @return The byte read, or -1 at EOF."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,300,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,302,public int read()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,303,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,305,"final int num = read( m_oneBuf, 0, 1 );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,306,if( num == -1 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,308,return num;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,310,else
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,312,return (int)m_oneBuf[ 0 ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,317,* Reads bytes from the current tar archive entry. This method simply calls
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,318,"* read( byte[], int, int )."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,320,* @param buffer The buffer into which to place bytes read.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,321,"* @return The number of bytes read, or -1 at EOF."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,322,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,324,public int read( final byte[] buffer )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,325,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,327,"return read( buffer, 0, buffer.length );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,331,* Reads bytes from the current tar archive entry. This method is aware of
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,332,* the boundaries of the current entry in the archive and will deal with
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,333,* them as if they were this stream's start and EOF.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,335,* @param buffer The buffer into which to place bytes read.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,336,* @param offset The offset at which to place bytes read.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,337,* @param count The number of bytes to read.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,338,"* @return The number of bytes read, or -1 at EOF."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,339,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,341,"public int read( final byte[] buffer,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,342,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,343,final int count )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,344,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,346,int position = offset;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,347,int numToRead = count;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,348,int totalRead = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,350,if( m_entryOffset >= m_entrySize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,352,return -1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,355,if( ( numToRead + m_entryOffset ) > m_entrySize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,357,numToRead = ( m_entrySize - m_entryOffset );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,360,if( null != m_readBuf )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,362,final int size =
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,363,( numToRead > m_readBuf.length ) ? m_readBuf.length : numToRead;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,365,"System.arraycopy( m_readBuf, 0, buffer, position, size );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,367,if( size >= m_readBuf.length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,369,m_readBuf = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,371,else
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,373,final int newLength = m_readBuf.length - size;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,374,final byte[] newBuffer = new byte[ newLength ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,376,"System.arraycopy( m_readBuf, size, newBuffer, 0, newLength );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,378,m_readBuf = newBuffer;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,381,totalRead += size;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,382,numToRead -= size;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,383,position += size;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,386,while( numToRead > 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,388,final byte[] rec = m_buffer.readRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,389,if( null == rec )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,391,// Unexpected EOF!
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,392,final String message =
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,393,"""unexpected EOF with "" + numToRead + "" bytes unread"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,394,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,397,int size = numToRead;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,398,final int recordLength = rec.length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,400,if( recordLength > size )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,402,"System.arraycopy( rec, 0, buffer, position, size );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,404,m_readBuf = new byte[ recordLength - size ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,406,"System.arraycopy( rec, size, m_readBuf, 0, recordLength - size );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,408,else
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,410,size = recordLength;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,412,"System.arraycopy( rec, 0, buffer, position, recordLength );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,415,totalRead += size;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,416,numToRead -= size;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,417,position += size;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,420,m_entryOffset += totalRead;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,422,return totalRead;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,426,"* Since we do not support marking just yet, we do nothing."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,428,public void reset()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,433,* Skip bytes in the input buffer. This skips bytes in the current entry's
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,434,"* data, not the entire archive, and will stop at the end of the current"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,435,* entry's data if the number to skip extends beyond that point.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,437,* @param numToSkip The number of bytes to skip.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,438,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,440,public void skip( final int numToSkip )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,441,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,443,// REVIEW
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,444,"// This is horribly inefficient, but it ensures that we"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,445,// properly skip over bytes via the TarBuffer...
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,447,final byte[] skipBuf = new byte[ 8 * 1024 ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,448,int num = numToSkip;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,449,while( num > 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,451,final int count = ( num > skipBuf.length ) ? skipBuf.length : num;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,452,"final int numRead = read( skipBuf, 0, count );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,453,if( numRead == -1 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,455,break;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,458,num -= numRead;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,463,* Utility method to do debugging.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,464,* Capable of being overidden in sub-classes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,466,* @param message the message to use in debugging
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,468,protected void debug( final String message )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,470,if( m_debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,472,System.err.println( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,21,import java.io.FilterOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,23,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,24,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,27,* The TarOutputStream writes a UNIX tar archive as an OutputStream. Methods are
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,28,"* provided to put entries, and then write their contents by writing to this"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,29,* stream using write().
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,31,"* @author Timothy Gerard Endres <a href=""mailto:time@ice.com"">time@ice.com</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,32,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,33,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,34,* @see TarInputStream
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,35,* @see TarArchiveEntry
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,37,public class TarOutputStream
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,38,extends FilterOutputStream
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,41,* Flag to indicate that an error should be generated if
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,42,* an attempt is made to write an entry that exceeds the 100 char
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,43,* POSIX limit.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,45,public static final int LONGFILE_ERROR = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,48,* Flag to indicate that entry name should be truncated if
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,49,* an attempt is made to write an entry that exceeds the 100 char
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,50,* POSIX limit.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,52,public static final int LONGFILE_TRUNCATE = 1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,55,* Flag to indicate that entry name should be formatted
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,56,* according to GNU tar extension if an attempt is made
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,57,* to write an entry that exceeds the 100 char POSIX
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,58,* limit. Note that this makes the jar unreadable by
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,59,* non-GNU tar commands.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,61,public static final int LONGFILE_GNU = 2;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,63,private int m_longFileMode = LONGFILE_ERROR;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,64,private byte[] m_assemBuf;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,65,private int m_assemLen;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,66,private TarBuffer m_buffer;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,67,private int m_currBytes;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,68,private int m_currSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,70,private byte[] m_oneBuf;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,71,private byte[] m_recordBuf;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,74,* Construct a TarOutputStream using specified input
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,75,* stream and default block and record sizes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,77,* @param output stream to create TarOutputStream from
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,78,* @see TarBuffer#DEFAULT_BLOCKSIZE
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,79,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,81,public TarOutputStream( final OutputStream output )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,83,"this( output, TarBuffer.DEFAULT_BLOCKSIZE, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,87,* Construct a TarOutputStream using specified input
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,88,"* stream, block size and default record sizes."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,90,* @param output stream to create TarOutputStream from
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,91,* @param blockSize the block size
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,92,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,94,"public TarOutputStream( final OutputStream output,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,95,final int blockSize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,97,"this( output, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,101,* Construct a TarOutputStream using specified input
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,102,"* stream, block size and record sizes."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,104,* @param output stream to create TarOutputStream from
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,105,* @param blockSize the block size
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,106,* @param recordSize the record size
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,108,"public TarOutputStream( final OutputStream output,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,109,"final int blockSize,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,110,final int recordSize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,112,super( output );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,114,"m_buffer = new TarBuffer( output, blockSize, recordSize );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,115,m_assemLen = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,116,m_assemBuf = new byte[ recordSize ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,117,m_recordBuf = new byte[ recordSize ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,118,m_oneBuf = new byte[ 1 ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,122,* Sets the debugging flag in this stream's TarBuffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,124,* @param debug The new BufferDebug value
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,126,public void setBufferDebug( boolean debug )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,128,m_buffer.setDebug( debug );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,132,* Set the mode used to work with entrys exceeding
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,133,* 100 chars (and thus break the POSIX standard).
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,134,* Must be one of the LONGFILE_* constants.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,136,* @param longFileMode the mode
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,138,public void setLongFileMode( final int longFileMode )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,140,if( LONGFILE_ERROR != longFileMode &&
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,141,LONGFILE_GNU != longFileMode &&
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,142,LONGFILE_TRUNCATE != longFileMode )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,144,"throw new IllegalArgumentException( ""longFileMode"" );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,146,m_longFileMode = longFileMode;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,150,* Get the record size being used by this stream's TarBuffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,152,* @return The TarBuffer record size.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,154,public int getRecordSize()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,156,return m_buffer.getRecordSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,160,* Ends the TAR archive and closes the underlying OutputStream. This means
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,161,* that finish() is called followed by calling the TarBuffer's close().
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,163,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,165,public void close()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,166,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,168,finish();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,169,m_buffer.close();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,173,* Close an entry. This method MUST be called for all file entries that
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,174,* contain data. The reason is that we must buffer data written to the
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,175,"* stream in order to satisfy the buffer's record based writes. Thus, there"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,176,* may be data fragments still being assembled that must be written to the
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,177,* output stream before this entry is closed and the next entry written.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,179,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,181,public void closeEntry()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,182,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,184,if( m_assemLen > 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,186,for( int i = m_assemLen; i < m_assemBuf.length; ++i )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,188,m_assemBuf[ i ] = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,191,m_buffer.writeRecord( m_assemBuf );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,193,m_currBytes += m_assemLen;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,194,m_assemLen = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,197,if( m_currBytes < m_currSize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,199,"final String message = ""entry closed at '"" + m_currBytes +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,200,"""' before the '"" + m_currSize +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,201,"""' bytes specified in the header were written"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,202,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,207,* Ends the TAR archive without closing the underlying OutputStream. The
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,208,* result is that the EOF record of nulls is written.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,210,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,212,public void finish()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,213,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,215,writeEOFRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,219,* Put an entry on the output stream. This writes the entry's header record
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,220,* and positions the output stream for writing the contents of the entry.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,221,"* Once this method is called, the stream is ready for calls to write() to"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,222,"* write the entry's contents. Once the contents are written, closeEntry()"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,223,* <B>MUST</B> be called to ensure that all buffered data is completely
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,224,* written to the output stream.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,226,* @param entry The TarArchiveEntry to be written to the archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,227,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,229,public void putNextEntry( final TarArchiveEntry entry )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,230,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,232,if( entry.getName().length() >= TarArchiveEntry.NAMELEN )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,234,if( m_longFileMode == LONGFILE_GNU )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,236,"// create a TarArchiveEntry for the LongLink, the contents"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,237,// of which are the entry's name
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,238,final TarArchiveEntry longLinkEntry =
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,239,"new TarArchiveEntry( TarConstants.GNU_LONGLINK,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,240,TarConstants.LF_GNUTYPE_LONGNAME );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,242,longLinkEntry.setSize( entry.getName().length() );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,243,putNextEntry( longLinkEntry );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,244,write( entry.getName().getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,245,//write( 0 );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,246,closeEntry();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,248,else if( m_longFileMode != LONGFILE_TRUNCATE )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,250,"final String message = ""file name '"" + entry.getName() +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,251,"""' is too long ( > "" + TarArchiveEntry.NAMELEN + "" bytes)"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,252,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,256,entry.writeEntryHeader( m_recordBuf );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,257,m_buffer.writeRecord( m_recordBuf );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,259,m_currBytes = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,261,if( entry.isDirectory() )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,263,m_currSize = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,265,else
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,267,m_currSize = (int)entry.getSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,272,* Copies the contents of the specified stream into current tar
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,273,* archive entry.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,275,* @param input The InputStream from which to read entrys data
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,276,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,278,public void copyEntryContents( final InputStream input )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,279,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,281,final byte[] buffer = new byte[ 32 * 1024 ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,282,while( true )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,284,"final int numRead = input.read( buffer, 0, buffer.length );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,285,if( numRead == -1 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,287,break;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,290,"write( buffer, 0, numRead );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,295,* Writes a byte to the current tar archive entry. This method simply calls
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,296,"* read( byte[], int, int )."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,298,* @param data The byte written.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,299,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,301,public void write( final int data )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,302,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,304,m_oneBuf[ 0 ] = (byte)data;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,306,"write( m_oneBuf, 0, 1 );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,310,* Writes bytes to the current tar archive entry. This method simply calls
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,311,"* write( byte[], int, int )."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,313,* @param buffer The buffer to write to the archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,314,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,316,public void write( final byte[] buffer )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,317,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,319,"write( buffer, 0, buffer.length );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,323,* Writes bytes to the current tar archive entry. This method is aware of
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,324,* the current entry and will throw an exception if you attempt to write
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,325,* bytes past the length specified for the current entry. The method is also
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,326,"* (painfully) aware of the record buffering required by TarBuffer, and"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,327,"* manages buffers that are not a multiple of recordsize in length,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,328,* including assembling records from small buffers.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,330,* @param buffer The buffer to write to the archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,331,* @param offset The offset in the buffer from which to get bytes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,332,* @param count The number of bytes to write.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,333,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,335,"public void write( final byte[] buffer,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,336,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,337,final int count )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,338,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,340,int position = offset;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,341,int numToWrite = count;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,342,if( ( m_currBytes + numToWrite ) > m_currSize )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,344,"final String message = ""request to write '"" + numToWrite +"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,345,"""' bytes exceeds size in header of '"" + m_currSize + ""' bytes"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,346,throw new IOException( message );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,348,// We have to deal with assembly!!!
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,349,// The programmer can be writing little 32 byte chunks for all
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,350,"// we know, and we must assemble complete records for writing."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,351,// REVIEW Maybe this should be in TarBuffer? Could that help to
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,352,// eliminate some of the buffer copying.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,356,if( m_assemLen > 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,358,if( ( m_assemLen + numToWrite ) >= m_recordBuf.length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,360,final int length = m_recordBuf.length - m_assemLen;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,362,"System.arraycopy( m_assemBuf, 0, m_recordBuf, 0,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,363,m_assemLen );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,364,"System.arraycopy( buffer, position, m_recordBuf,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,365,"m_assemLen, length );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,366,m_buffer.writeRecord( m_recordBuf );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,368,m_currBytes += m_recordBuf.length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,369,position += length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,370,numToWrite -= length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,371,m_assemLen = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,373,else
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,375,"System.arraycopy( buffer, position, m_assemBuf, m_assemLen,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,376,numToWrite );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,378,position += numToWrite;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,379,m_assemLen += numToWrite;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,380,numToWrite -= numToWrite;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,385,// When we get here we have EITHER:
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,386,"// o An empty ""assemble"" buffer."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,387,// o No bytes to write (numToWrite == 0)
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,389,while( numToWrite > 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,391,if( numToWrite < m_recordBuf.length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,393,"System.arraycopy( buffer, position, m_assemBuf, m_assemLen,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,394,numToWrite );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,396,m_assemLen += numToWrite;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,398,break;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,401,"m_buffer.writeRecord( buffer, position );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,403,int num = m_recordBuf.length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,405,m_currBytes += num;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,406,numToWrite -= num;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,407,position += num;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,412,* Write an EOF (end of archive) record to the tar archive. An EOF record
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,413,* consists of a record of all zeros.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,415,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,417,private void writeEOFRecord()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,418,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,420,for( int i = 0; i < m_recordBuf.length; ++i )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,422,m_recordBuf[ i ] = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,425,m_buffer.writeRecord( m_recordBuf );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,22,* This class provides static utility methods to work with byte streams.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,24,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,25,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,26,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,28,class TarUtils
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,31,* Parse the checksum octal integer from a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,33,* @param offset The offset into the buffer from which to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,34,* @param length The number of header bytes to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,35,* @param value Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,36,* @param buf Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,37,* @return The integer value of the entry's checksum.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,39,"public static int getCheckSumOctalBytes( final long value,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,40,"final byte[] buf,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,41,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,42,final int length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,44,"getOctalBytes( value, buf, offset, length );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,46,buf[ offset + length - 1 ] = (byte)' ';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,47,buf[ offset + length - 2 ] = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,49,return offset + length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,53,* Parse an octal long integer from a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,55,* @param offset The offset into the buffer from which to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,56,* @param length The number of header bytes to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,57,* @param value Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,58,* @param buf Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,59,* @return The long value of the octal bytes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,61,"public static int getLongOctalBytes( final long value,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,62,"final byte[] buf,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,63,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,64,final int length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,66,byte[] temp = new byte[ length + 1 ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,68,"getOctalBytes( value, temp, 0, length + 1 );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,69,"System.arraycopy( temp, 0, buf, offset, length );"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,71,return offset + length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,75,* Determine the number of bytes in an entry name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,77,* @param offset The offset into the buffer from which to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,78,* @param length The number of header bytes to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,79,* @param name Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,80,* @param buffer Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,81,* @return The number of bytes in a header's entry name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,83,"public static int getNameBytes( final StringBuffer name,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,84,"final byte[] buffer,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,85,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,86,final int length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,88,int i;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,90,for( i = 0; i < length && i < name.length(); ++i )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,92,buffer[ offset + i ] = (byte)name.charAt( i );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,95,for( ; i < length; ++i )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,97,buffer[ offset + i ] = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,100,return offset + length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,104,* Parse an octal integer from a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,106,* @param offset The offset into the buffer from which to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,107,* @param length The number of header bytes to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,108,* @return The integer value of the octal bytes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,110,"public static int getOctalBytes( final long value,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,111,"final byte[] buffer,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,112,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,113,final int length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,115,int idx = length - 1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,117,buffer[ offset + idx ] = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,118,--idx;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,119,buffer[ offset + idx ] = (byte)' ';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,120,--idx;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,122,if( value == 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,124,buffer[ offset + idx ] = (byte)'0';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,125,--idx;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,127,else
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,129,long val = value;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,130,while( idx >= 0 && val > 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,132,buffer[ offset + idx ] = (byte)( (byte)'0' + (byte)( val & 7 ) );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,133,val = val >> 3;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,134,idx--;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,138,while( idx >= 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,140,buffer[ offset + idx ] = (byte)' ';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,141,idx--;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,144,return offset + length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,148,* Compute the checksum of a tar entry header.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,150,* @param buffer The tar entry's header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,151,* @return The computed checksum.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,153,public static long computeCheckSum( final byte[] buffer )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,155,long sum = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,157,for( int i = 0; i < buffer.length; ++i )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,159,sum += 255 & buffer[ i ];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,162,return sum;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,166,* Parse an entry name from a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,168,* @param header The header buffer from which to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,169,* @param offset The offset into the buffer from which to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,170,* @param length The number of header bytes to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,171,* @return The header's entry name.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,173,"public static StringBuffer parseName( final byte[] header,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,174,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,175,final int length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,177,StringBuffer result = new StringBuffer( length );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,178,int end = offset + length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,180,for( int i = offset; i < end; ++i )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,182,if( header[ i ] == 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,184,break;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,187,result.append( (char)header[ i ] );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,190,return result;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,194,* Parse an octal string from a header buffer. This is used for the file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,195,* permission mode value.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,197,* @param header The header buffer from which to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,198,* @param offset The offset into the buffer from which to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,199,* @param length The number of header bytes to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,200,* @return The long value of the octal string.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,202,"public static long parseOctal( final byte[] header,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,203,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,204,final int length )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,206,long result = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,207,boolean stillPadding = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,208,int end = offset + length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,210,for( int i = offset; i < end; ++i )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,212,if( header[ i ] == 0 )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,214,break;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,217,if( header[ i ] == (byte)' ' || header[ i ] == '0' )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,219,if( stillPadding )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,221,continue;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,224,if( header[ i ] == (byte)' ' )
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,226,break;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,230,stillPadding = false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,231,result = ( result << 3 ) + ( header[ i ] - '0' );
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,234,return result;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,21,import java.util.zip.CRC32;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,22,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,25,* Adds Unix file permission and UID/GID fields as well as symbolic link
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,26,* handling. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,28,* This class uses the ASi extra field in the format: <pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,29,*         Value         Size            Description
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,31,* (Unix3) 0x756e        Short           tag for this extra block type
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,32,*         TSize         Short           total data size for this block
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,33,*         CRC           Long            CRC-32 of the remaining data
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,34,*         Mode          Short           file permissions
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,35,*         SizDev        Long            symlink'd size OR major/minor dev num
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,36,*         UID           Short           user ID
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,37,*         GID           Short           group ID
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,38,*         (var.)        variable        symbolic link filename
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,39,"* </pre> taken from appnote.iz (Info-ZIP note, 981119) found at <a"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,40,"* href=""ftp://ftp.uu.net/pub/archiving/zip/doc/"">"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,41,* ftp://ftp.uu.net/pub/archiving/zip/doc/</a> </p> <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,43,"* Short is two bytes and Long is four bytes in big endian byte and word order,"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,44,* device numbers are currently not supported.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,46,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,47,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,49,public class AsiExtraField
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,50,"implements ZipExtraField, UnixStat, Cloneable"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,52,private static final ZipShort HEADER_ID = new ZipShort( 0x756E );
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,55,* Standard Unix stat(2) file mode.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,57,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,59,private int m_mode;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,62,* User ID.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,64,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,66,private int m_uid;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,69,* Group ID.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,71,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,73,private int m_gid;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,76,"* File this entry points to, if it is a symbolic link. <p>"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,78,* empty string - if entry is not a symbolic link.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,80,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,82,"private String m_link = """";"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,85,* Is this an entry for a directory?
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,87,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,89,private boolean m_dirFlag;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,92,* Instance used to calculate checksums.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,94,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,96,private CRC32 m_crc = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,99,* Indicate whether this entry is a directory.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,101,* @param dirFlag The new Directory value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,102,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,104,public void setDirectory( final boolean dirFlag )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,106,m_dirFlag = dirFlag;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,107,m_mode = getMode( m_mode );
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,111,* Set the group id.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,113,* @param gid The new GroupId value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,114,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,116,public void setGroupId( int gid )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,118,m_gid = gid;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,122,* Indicate that this entry is a symbolic link to the given filename.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,124,"* @param name Name of the file this entry links to, empty String if it is"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,125,*      not a symbolic link.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,126,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,128,public void setLinkedFile( final String name )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,130,m_link = name;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,131,m_mode = getMode( m_mode );
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,135,* File mode of this file.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,137,* @param mode The new Mode value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,138,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,140,public void setMode( final int mode )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,142,m_mode = getMode( mode );
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,146,* Set the user id.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,148,* @param uid The new UserId value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,149,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,150,* @deprecated Use setUserID(int)
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,151,* @see #setUserID(int)
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,153,public void setUserId( final int uid )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,155,m_uid = uid;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,159,* Set the user id.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,161,* @param uid The new UserId value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,163,public void setUserID( final int uid )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,165,m_uid = uid;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,169,* Delegate to local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,171,* @return The CentralDirectoryData value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,172,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,174,public byte[] getCentralDirectoryData()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,176,return getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,180,* Delegate to local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,182,* @return The CentralDirectoryLength value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,183,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,185,public ZipShort getCentralDirectoryLength()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,187,return getLocalFileDataLength();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,191,* Get the group id.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,193,* @return The GroupId value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,194,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,196,public int getGroupID()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,198,return m_gid;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,202,* Get the group id.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,204,* @return The GroupId value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,205,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,206,* @deprecated Use getGroupID() instead
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,207,* @see #getGroupID()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,209,public int getGroupId()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,211,return m_gid;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,215,* The Header-ID.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,217,* @return The HeaderId value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,218,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,220,public ZipShort getHeaderID()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,222,return HEADER_ID;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,226,* Name of linked file
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,228,"* @return name of the file this entry links to if it is a symbolic link,"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,229,*      the empty string otherwise.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,230,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,232,public String getLinkedFile()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,234,return m_link;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,238,* The actual data to put into local file data - without Header-ID or length
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,239,* specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,241,* @return The LocalFileDataData value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,242,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,244,public byte[] getLocalFileDataData()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,246,// CRC will be added later
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,247,byte[] data = new byte[ getLocalFileDataLength().getValue() - 4 ];
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,248,"System.arraycopy( ( new ZipShort( getMode() ) ).getBytes(), 0, data, 0, 2 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,250,byte[] linkArray = getLinkedFile().getBytes();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,251,"System.arraycopy( ( new ZipLong( linkArray.length ) ).getBytes(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,252,"0, data, 2, 4 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,254,"System.arraycopy( ( new ZipShort( getUserID() ) ).getBytes(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,255,"0, data, 6, 2 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,256,"System.arraycopy( ( new ZipShort( getGroupID() ) ).getBytes(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,257,"0, data, 8, 2 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,259,"System.arraycopy( linkArray, 0, data, 10, linkArray.length );"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,261,m_crc.reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,262,m_crc.update( data );
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,263,long checksum = m_crc.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,265,byte[] result = new byte[ data.length + 4 ];
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,266,"System.arraycopy( ( new ZipLong( checksum ) ).getBytes(), 0, result, 0, 4 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,267,"System.arraycopy( data, 0, result, 4, data.length );"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,268,return result;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,272,* Length of the extra field in the local file data - without Header-ID or
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,273,* length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,275,* @return The LocalFileDataLength value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,276,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,278,public ZipShort getLocalFileDataLength()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,280,return new ZipShort( 4 + // CRC
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,281,2 + // Mode
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,282,4 + // SizDev
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,283,2 + // UID
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,284,2 + // GID
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,285,getLinkedFile().getBytes().length );
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,289,* File mode of this file.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,291,* @return The Mode value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,292,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,294,public int getMode()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,296,return m_mode;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,300,* Get the user id.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,302,* @return The UserId value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,303,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,304,* @deprecated Use getUserID()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,305,* @see #getUserID()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,307,public int getUserId()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,309,return m_uid;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,313,* Get the user id.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,315,* @return The UserID value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,317,public int getUserID()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,319,return m_uid;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,323,* Is this entry a directory?
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,325,* @return The Directory value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,326,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,328,public boolean isDirectory()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,330,return m_dirFlag && !isLink();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,334,* Is this entry a symbolic link?
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,336,* @return The Link value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,337,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,339,public boolean isLink()
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,341,return getLinkedFile().length() != 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,345,* Populate data from this array as if it was in local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,347,* @param buffer the buffer
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,348,* @param offset the offset into buffer
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,349,* @param length the length of data in buffer
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,350,* @throws ZipException on error
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,351,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,353,"public void parseFromLocalFileData( final byte[] buffer,"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,354,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,355,final int length )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,356,throws ZipException
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,359,"long givenChecksum = ( new ZipLong( buffer, offset ) ).getValue();"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,360,byte[] tmp = new byte[ length - 4 ];
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,361,"System.arraycopy( buffer, offset + 4, tmp, 0, length - 4 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,362,m_crc.reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,363,m_crc.update( tmp );
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,364,long realChecksum = m_crc.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,365,if( givenChecksum != realChecksum )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,367,"throw new ZipException( ""bad CRC checksum "" + Long.toHexString( givenChecksum ) +"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,368,""" instead of "" + Long.toHexString( realChecksum ) );"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,371,"int newMode = ( new ZipShort( tmp, 0 ) ).getValue();"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,372,"byte[] linkArray = new byte[ (int)( new ZipLong( tmp, 2 ) ).getValue() ];"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,373,"m_uid = ( new ZipShort( tmp, 6 ) ).getValue();"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,374,"m_gid = ( new ZipShort( tmp, 8 ) ).getValue();"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,376,if( linkArray.length == 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,378,"m_link = """";"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,380,else
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,382,"System.arraycopy( tmp, 10, linkArray, 0, linkArray.length );"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,383,m_link = new String( linkArray );
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,385,setDirectory( ( newMode & DIR_FLAG ) != 0 );
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,386,setMode( newMode );
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,390,* Get the file mode for given permissions with the correct file type.
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,392,* @param mode Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,393,* @return The Mode value
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,394,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,396,protected int getMode( final int mode )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,398,int type = FILE_FLAG;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,399,if( isLink() )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,401,type = LINK_FLAG;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,403,else if( isDirectory() )
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,405,type = DIR_FLAG;
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,407,return type | ( mode & PERM_MASK );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,21,import java.util.ArrayList;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,22,import java.util.Hashtable;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,23,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,26,* ZipExtraField related methods
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,28,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,29,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,31,public class ExtraFieldUtils
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,34,* Static registry of known extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,36,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,38,private static final Hashtable c_implementations;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,40,static
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,42,c_implementations = new Hashtable();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,43,register( AsiExtraField.class );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,47,"* Create an instance of the approriate ExtraField, falls back to {@link"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,48,* UnrecognizedExtraField UnrecognizedExtraField}.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,50,* Throws java.lang.IllegalAccessException if cant create implementation.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,52,* @param headerID the header ID
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,53,* @return the extra field implementation
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,54,* @throws InstantiationException if cant create implementation
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,55,* @throws IllegalAccessException if cant create implementation
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,56,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,58,public static ZipExtraField createExtraField( final ZipShort headerID )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,59,"throws InstantiationException, IllegalAccessException"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,61,final Class clazz =
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,62,(Class)c_implementations.get( headerID );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,63,if( clazz != null )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,65,return (ZipExtraField)clazz.newInstance();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,67,final UnrecognizedExtraField unrecognized = new UnrecognizedExtraField();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,68,unrecognized.setHeaderID( headerID );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,69,return unrecognized;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,73,* Merges the central directory fields of the given ZipExtraFields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,75,* @param data the central directory data
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,76,* @return the merged data
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,77,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,79,public static byte[] mergeCentralDirectoryData( final ZipExtraField[] data )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,81,int sum = 4 * data.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,82,for( int i = 0; i < data.length; i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,84,sum += data[ i ].getCentralDirectoryLength().getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,86,byte[] result = new byte[ sum ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,87,int start = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,88,for( int i = 0; i < data.length; i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,90,"System.arraycopy( data[ i ].getHeaderID().getBytes(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,91,"0, result, start, 2 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,92,"System.arraycopy( data[ i ].getCentralDirectoryLength().getBytes(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,93,"0, result, start + 2, 2 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,94,byte[] local = data[ i ].getCentralDirectoryData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,95,"System.arraycopy( local, 0, result, start + 4, local.length );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,96,start += ( local.length + 4 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,98,return result;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,102,* Merges the local file data fields of the given ZipExtraFields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,104,* @param data the data
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,105,* @return the merged data
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,106,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,108,public static byte[] mergeLocalFileDataData( final ZipExtraField[] data )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,110,int sum = 4 * data.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,111,for( int i = 0; i < data.length; i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,113,sum += data[ i ].getLocalFileDataLength().getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,115,byte[] result = new byte[ sum ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,116,int start = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,117,for( int i = 0; i < data.length; i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,119,"System.arraycopy( data[ i ].getHeaderID().getBytes(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,120,"0, result, start, 2 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,121,"System.arraycopy( data[ i ].getLocalFileDataLength().getBytes(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,122,"0, result, start + 2, 2 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,123,byte[] local = data[ i ].getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,124,"System.arraycopy( local, 0, result, start + 4, local.length );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,125,start += ( local.length + 4 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,127,return result;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,131,* Split the array into ExtraFields and populate them with the give data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,133,* @param data the data to parse
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,134,* @return the parsed fields
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,135,* @exception ZipException on error
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,136,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,138,public static ZipExtraField[] parse( final byte[] data )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,139,throws ZipException
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,141,ArrayList v = new ArrayList();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,142,int start = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,143,while( start <= data.length - 4 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,145,"final ZipShort headerID = new ZipShort( data, start );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,146,"int length = ( new ZipShort( data, start + 2 ) ).getValue();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,147,if( start + 4 + length > data.length )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,149,"throw new ZipException( ""data starting at "" + start + "" is in unknown format"" );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,151,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,153,ZipExtraField ze = createExtraField( headerID );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,154,"ze.parseFromLocalFileData( data, start + 4, length );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,155,v.add( ze );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,157,catch( InstantiationException ie )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,159,throw new ZipException( ie.getMessage() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,161,catch( IllegalAccessException iae )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,163,throw new ZipException( iae.getMessage() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,165,start += ( length + 4 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,167,if( start != data.length )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,168,{// array not exhausted
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,169,"throw new ZipException( ""data starting at "" + start + "" is in unknown format"" );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,172,final ZipExtraField[] result = new ZipExtraField[ v.size() ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,173,return (ZipExtraField[])v.toArray( result );
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,177,* Register a ZipExtraField implementation. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,179,* The given class must have a no-arg constructor and implement the {@link
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,180,* ZipExtraField ZipExtraField interface}.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,182,* @param clazz The Class for particular implementation
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,183,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,185,public static void register( final Class clazz )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,187,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,189,ZipExtraField ze = (ZipExtraField)clazz.newInstance();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,190,"c_implementations.put( ze.getHeaderID(), clazz );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,192,catch( ClassCastException cc )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,194,throw new RuntimeException( clazz +
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,195,""" doesn\'t implement ZipExtraField"" );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,197,catch( InstantiationException ie )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,199,"throw new RuntimeException( clazz + "" is not a concrete class"" );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,201,catch( IllegalAccessException ie )
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,203,throw new RuntimeException( clazz +
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,204,"""\'s no-arg constructor is not public"" );"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,22,* Constants from stat.h on Unix systems.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,24,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,25,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,27,public interface UnixStat
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,30,* Bits used for permissions (and sticky bit)
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,32,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,34,int PERM_MASK = 07777;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,36,* Indicates symbolic links.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,38,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,40,int LINK_FLAG = 0120000;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,42,* Indicates plain files.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,44,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,46,int FILE_FLAG = 0100000;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,48,* Indicates directories.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,50,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,52,int DIR_FLAG = 040000;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,55,// somewhat arbitrary choices that are quite common for shared
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,56,// installations
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,60,* Default permissions for symbolic links.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,62,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,64,int DEFAULT_LINK_PERM = 0777;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,67,* Default permissions for directories.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,69,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,71,int DEFAULT_DIR_PERM = 0755;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,74,* Default permissions for plain files.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,76,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java,78,int DEFAULT_FILE_PERM = 0644;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,22,* Simple placeholder for all those extra fields we don't want to deal with. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,24,* Assumes local file data and central directory entries are identical - unless
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,25,* told the opposite.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,27,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,28,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,30,public class UnrecognizedExtraField
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,31,implements ZipExtraField
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,34,* Extra field data in central directory - without Header-ID or length
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,35,* specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,37,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,39,private byte[] m_centralData;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,42,* The Header-ID.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,44,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,46,private ZipShort m_headerID;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,49,* Extra field data in local file data - without Header-ID or length
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,50,* specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,52,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,54,private byte[] m_localData;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,57,* Set the central directory data
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,59,* @param centralData the central directory data
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,61,public void setCentralDirectoryData( final byte[] centralData )
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,63,m_centralData = centralData;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,67,* Set the header ID.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,69,* @param headerID the header ID
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,71,public void setHeaderID( final ZipShort headerID )
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,73,m_headerID = headerID;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,77,* Set the local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,79,* @param localData the local file data
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,81,public void setLocalFileDataData( final byte[] localData )
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,83,m_localData = localData;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,87,* Get the central directory data.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,89,* @return the central directory data.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,91,public byte[] getCentralDirectoryData()
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,93,if( m_centralData != null )
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,95,return m_centralData;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,97,return getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,101,* Get the length of the central directory in bytes.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,103,* @return the length of the central directory in bytes.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,105,public ZipShort getCentralDirectoryLength()
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,107,if( m_centralData != null )
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,109,return new ZipShort( m_centralData.length );
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,111,return getLocalFileDataLength();
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,115,* Get the HeaderID.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,117,* @return the HeaderID
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,119,public ZipShort getHeaderID()
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,121,return m_headerID;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,125,* Get the local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,127,* @return the local file data
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,129,public byte[] getLocalFileDataData()
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,131,return m_localData;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,135,* Get the length of local file data in bytes.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,137,* @return the length of local file data in bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,139,public ZipShort getLocalFileDataLength()
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,141,return new ZipShort( m_localData.length );
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,145,* Parse LocalFiledata out of supplied buffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,147,* @param buffer the buffer to use
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,148,* @param offset the offset into buffer
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,149,* @param length then length of data
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,151,"public void parseFromLocalFileData( final byte[] buffer,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,152,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,153,final int length )
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,155,final byte[] fileData = new byte[ length ];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,156,"System.arraycopy( buffer, offset, fileData, 0, length );"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,157,setLocalFileDataData( fileData );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,21,import java.lang.reflect.InvocationTargetException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,22,import java.lang.reflect.Method;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,23,import java.util.ArrayList;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,24,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,26,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,29,* Extension that adds better handling of extra fields and provides access to
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,30,* the internal and external file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,32,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,33,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,35,public class ZipArchiveEntry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,36,extends java.util.zip.ZipEntry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,37,implements ArchiveEntry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,40,* Helper for JDK 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,42,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,44,private static Method c_setCompressedSizeMethod;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,47,* Helper for JDK 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,49,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,51,private static final Object c_lockReflection = new Object();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,54,* Helper for JDK 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,56,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,58,private static boolean c_triedToGetMethod;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,60,private final ArrayList m_extraFields = new ArrayList();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,62,private int m_internalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,63,private long m_externalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,66,* Helper for JDK 1.1 <-> 1.2 incompatibility.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,68,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,70,private Long m_compressedSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,73,* Creates a new zip entry with the specified name.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,75,* @param name the name of entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,76,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,78,public ZipArchiveEntry( final String name )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,80,super( name );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,84,* Creates a new zip entry with fields taken from the specified zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,86,* @param entry the JDK ZipEntry to adapt
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,87,* @exception ZipException if can not create entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,88,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,90,public ZipArchiveEntry( java.util.zip.ZipEntry entry )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,91,throws ZipException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,94,"* REVISIT: call super(entry) instead of this stuff in Ant2,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,95,"* ""copy constructor"" has not been available in JDK 1.1"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,97,super( entry.getName() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,99,setComment( entry.getComment() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,100,setMethod( entry.getMethod() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,101,setTime( entry.getTime() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,103,final long size = entry.getSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,104,if( size > 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,106,setSize( size );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,109,final long cSize = entry.getCompressedSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,110,if( cSize > 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,112,setComprSize( cSize );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,115,final long crc = entry.getCrc();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,116,if( crc > 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,118,setCrc( crc );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,121,final byte[] extra = entry.getExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,122,if( extra != null )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,124,setExtraFields( ExtraFieldUtils.parse( extra ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,126,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,128,// initializes extra data to an empty byte array
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,129,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,134,* Creates a new zip entry with fields taken from the specified zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,136,* @param entry the entry to adapt
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,137,* @exception ZipException if can not create entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,138,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,140,public ZipArchiveEntry( final ZipArchiveEntry entry )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,141,throws ZipException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,143,this( (java.util.zip.ZipEntry)entry );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,144,setInternalAttributes( entry.getInternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,145,setExternalAttributes( entry.getExternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,146,setExtraFields( entry.getExtraFields() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,150,* Try to get a handle to the setCompressedSize method.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,152,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,154,private static void checkSCS()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,156,if( !c_triedToGetMethod )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,158,synchronized( c_lockReflection )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,160,c_triedToGetMethod = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,161,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,163,c_setCompressedSizeMethod =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,164,"java.util.zip.ZipEntry.class.getMethod( ""setCompressedSize"","
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,165,new Class[]{Long.TYPE} );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,167,catch( NoSuchMethodException nse )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,175,* Are we running JDK 1.2 or higher?
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,177,* @return Description of the Returned Value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,178,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,180,private static boolean haveSetCompressedSize()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,182,checkSCS();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,183,return c_setCompressedSizeMethod != null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,187,* Invoke setCompressedSize via reflection.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,189,* @param entry Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,190,* @param size Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,191,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,193,"private static void performSetCompressedSize( final ZipArchiveEntry entry,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,194,final long size )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,196,final Long[] s = {new Long( size )};
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,197,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,199,"c_setCompressedSizeMethod.invoke( entry, s );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,201,catch( final InvocationTargetException ite )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,203,final Throwable nested = ite.getTargetException();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,204,"final String message = ""Exception setting the compressed size "" +"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,205,"""of "" + entry + "": "" + nested.getMessage();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,206,throw new RuntimeException( message );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,208,catch( final Throwable t )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,210,"final String message = ""Exception setting the compressed size "" +"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,211,"""of "" + entry + "": "" + t.getMessage();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,212,throw new RuntimeException( message );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,217,* Make this class work in JDK 1.1 like a 1.2 class. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,219,* This either stores the size for later usage or invokes setCompressedSize
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,220,* via reflection.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,222,* @param size The new ComprSize value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,223,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,225,public void setComprSize( final long size )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,227,if( haveSetCompressedSize() )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,229,"performSetCompressedSize( this, size );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,231,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,233,m_compressedSize = new Long( size );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,238,* Sets the external file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,240,* @param externalAttributes The new ExternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,241,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,243,public void setExternalAttributes( final long externalAttributes )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,245,m_externalAttributes = externalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,249,* Throws an Exception if extra data cannot be parsed into extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,251,* @param extra The new Extra value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,252,* @throws RuntimeException if fail to set extra data
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,253,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,255,public void setExtra( final byte[] extra )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,256,throws RuntimeException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,258,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,260,setExtraFields( ExtraFieldUtils.parse( extra ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,262,catch( final Exception e )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,264,throw new RuntimeException( e.getMessage() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,269,* Replaces all currently attached extra fields with the new array.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,271,* @param fields The new ExtraFields value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,272,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,274,public void setExtraFields( final ZipExtraField[] fields )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,276,m_extraFields.clear();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,277,for( int i = 0; i < fields.length; i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,279,m_extraFields.add( fields[ i ] );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,281,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,285,* Sets the internal file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,287,* @param value The new InternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,288,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,290,public void setInternalAttributes( final int value )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,292,m_internalAttributes = value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,296,* Retrieves the extra data for the central directory.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,298,* @return The CentralDirectoryExtra value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,299,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,301,public byte[] getCentralDirectoryExtra()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,303,return ExtraFieldUtils.mergeCentralDirectoryData( getExtraFields() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,307,* Override to make this class work in JDK 1.1 like a 1.2 class.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,309,* @return The CompressedSize value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,310,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,312,public long getCompressedSize()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,314,if( m_compressedSize != null )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,316,// has been set explicitly and we are running in a 1.1 VM
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,317,return m_compressedSize.longValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,319,return super.getCompressedSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,323,* Retrieves the external file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,325,* @return The ExternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,326,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,328,public long getExternalAttributes()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,330,return m_externalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,334,* Retrieves extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,336,* @return The ExtraFields value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,337,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,339,public ZipExtraField[] getExtraFields()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,341,final ZipExtraField[] result = new ZipExtraField[ m_extraFields.size() ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,342,return (ZipExtraField[])m_extraFields.toArray( result );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,346,* Retrieves the internal file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,348,* @return The InternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,349,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,351,public int getInternalAttributes()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,353,return m_internalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,357,* Retrieves the extra data for the local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,359,* @return The LocalFileDataExtra value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,360,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,362,public byte[] getLocalFileDataExtra()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,364,byte[] extra = getExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,365,return extra != null ? extra : new byte[ 0 ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,369,* Adds an extra fields - replacing an already present extra field of the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,370,* same type.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,372,* @param extraField The feature to be added to the ExtraField attribute
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,373,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,375,public void addExtraField( final ZipExtraField extraField )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,377,final ZipShort type = extraField.getHeaderID();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,378,boolean done = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,379,for( int i = 0; !done && i < m_extraFields.size(); i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,381,final ZipExtraField other = (ZipExtraField)m_extraFields.get( i );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,382,if( other.getHeaderID().equals( type ) )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,384,"m_extraFields.set( i, extraField );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,385,done = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,388,if( !done )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,390,m_extraFields.add( extraField );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,392,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,396,* Overwrite clone
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,398,* @return Description of the Returned Value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,399,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,401,public Object clone()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,403,ZipArchiveEntry entry = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,404,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,406,entry = new ZipArchiveEntry( (java.util.zip.ZipEntry)super.clone() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,408,catch( final Exception e )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,410,// impossible as extra data is in correct format
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,411,e.printStackTrace();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,412,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,415,entry.setInternalAttributes( getInternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,416,entry.setExternalAttributes( getExternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,417,entry.setExtraFields( getExtraFields() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,418,return entry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,422,* Remove an extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,424,* @param type Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,425,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,427,public void removeExtraField( final ZipShort type )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,429,boolean done = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,430,for( int i = 0; !done && i < m_extraFields.size(); i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,432,if( ( (ZipExtraField)m_extraFields.get( i ) ).getHeaderID().equals( type ) )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,434,m_extraFields.remove( i );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,435,done = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,438,if( !done )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,440,throw new java.util.NoSuchElementException();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,442,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,446,* Unfortunately {@link java.util.zip.ZipOutputStream
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,447,"* java.util.zip.ZipOutputStream} seems to access the extra data directly,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,448,* so overriding getExtra doesn't help - we need to modify super's data
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,449,* directly.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,451,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,453,protected void setExtra()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,455,super.setExtra( ExtraFieldUtils.mergeLocalFileDataData( getExtraFields() ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,23,import java.util.zip.ZipInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,26,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,28,public class ZipArchiveInputStream extends ArchiveInputStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,30,private final ZipInputStream input;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,32,public ZipArchiveInputStream(InputStream inputStream) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,33,input = new ZipInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,36,public ArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,37,java.util.zip.ZipEntry entry = input.getNextEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,38,if(entry == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,39,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,41,return (ArchiveEntry)new ZipArchiveEntry(entry);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,44,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,45,"return input.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,48,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,49,return input.read();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,53,public static boolean matches( byte[] signature ) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,54,// 4b50 0403 0014 0000
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,56,if (signature[0] != 0x50) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,57,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,59,if (signature[1] != 0x4b) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,60,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,62,if (signature[2] != 0x03) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,63,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,65,if (signature[3] != 0x04) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,66,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,68,if (signature[4] != 0x14) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,69,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,71,if (signature[5] != 0x00) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,72,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,74,if (signature[6] != 0x00) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,75,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,77,if (signature[7] != 0x00) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,78,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,81,return true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,23,import java.util.zip.ZipOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,26,import org.apache.commons.compress.archivers.ArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,28,public class ZipArchiveOutputStream extends ArchiveOutputStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,30,private ZipOutputStream zipOut = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,33,public ZipArchiveOutputStream(OutputStream out) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,34,this.zipOut = new ZipOutputStream(out);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,37,public void putArchiveEntry(ArchiveEntry entry) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,38,zipOut.putNextEntry((ZipArchiveEntry) entry);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,41,public String getDefaultFileExtension() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,42,"return ""zip"";"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,45,public byte[] getHeader() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,46,// TODO Auto-generated method stub
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,47,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,50,public String getName() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,51,"return ""zip"";"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,54,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,55,zipOut.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,58,"public void write(byte[] buffer, int offset, int length) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,59,"zipOut.write(buffer, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,62,public void closeArchiveEntry() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,63,// do nothing
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,66,public void write(int arg0) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,67,this.zipOut.write(arg0);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,21,import java.lang.reflect.InvocationTargetException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,22,import java.lang.reflect.Method;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,23,import java.util.ArrayList;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,24,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,27,* Extension that adds better handling of extra fields and provides access to
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,28,* the internal and external file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,30,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,31,<<<<<<< HEAD:src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,32,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,34,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,35,>>>>>>> 75cb63ff7005344589b57d17338b64783f8f430c:src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,37,public class ZipEntry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,38,extends java.util.zip.ZipEntry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,41,* Helper for JDK 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,43,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,45,private static Method c_setCompressedSizeMethod;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,48,* Helper for JDK 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,50,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,52,private static final Object c_lockReflection = new Object();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,55,* Helper for JDK 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,57,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,59,private static boolean c_triedToGetMethod;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,61,private final ArrayList m_extraFields = new ArrayList();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,63,private int m_internalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,64,private long m_externalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,67,* Helper for JDK 1.1 <-> 1.2 incompatibility.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,69,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,71,private Long m_compressedSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,74,* Creates a new zip entry with the specified name.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,76,* @param name the name of entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,77,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,79,public ZipEntry( final String name )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,81,super( name );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,85,* Creates a new zip entry with fields taken from the specified zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,87,* @param entry the JDK ZipEntry to adapt
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,88,* @exception ZipException if can not create entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,89,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,91,public ZipEntry( java.util.zip.ZipEntry entry )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,92,throws ZipException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,95,"* REVISIT: call super(entry) instead of this stuff in Ant2,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,96,"* ""copy constructor"" has not been available in JDK 1.1"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,98,super( entry.getName() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,100,setComment( entry.getComment() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,101,setMethod( entry.getMethod() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,102,setTime( entry.getTime() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,104,final long size = entry.getSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,105,if( size > 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,107,setSize( size );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,110,final long cSize = entry.getCompressedSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,111,if( cSize > 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,113,setComprSize( cSize );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,116,final long crc = entry.getCrc();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,117,if( crc > 0 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,119,setCrc( crc );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,122,final byte[] extra = entry.getExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,123,if( extra != null )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,125,setExtraFields( ExtraFieldUtils.parse( extra ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,127,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,129,// initializes extra data to an empty byte array
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,130,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,135,* Creates a new zip entry with fields taken from the specified zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,137,* @param entry the entry to adapt
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,138,* @exception ZipException if can not create entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,139,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,141,public ZipEntry( final ZipEntry entry )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,142,throws ZipException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,144,this( (java.util.zip.ZipEntry)entry );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,145,setInternalAttributes( entry.getInternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,146,setExternalAttributes( entry.getExternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,147,setExtraFields( entry.getExtraFields() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,151,* Try to get a handle to the setCompressedSize method.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,153,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,155,private static void checkSCS()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,157,if( !c_triedToGetMethod )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,159,synchronized( c_lockReflection )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,161,c_triedToGetMethod = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,162,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,164,c_setCompressedSizeMethod =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,165,"java.util.zip.ZipEntry.class.getMethod( ""setCompressedSize"","
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,166,new Class[]{Long.TYPE} );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,168,catch( NoSuchMethodException nse )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,176,* Are we running JDK 1.2 or higher?
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,178,* @return Description of the Returned Value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,179,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,181,private static boolean haveSetCompressedSize()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,183,checkSCS();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,184,return c_setCompressedSizeMethod != null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,188,* Invoke setCompressedSize via reflection.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,190,* @param entry Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,191,* @param size Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,192,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,194,"private static void performSetCompressedSize( final ZipEntry entry,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,195,final long size )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,197,final Long[] s = {new Long( size )};
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,198,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,200,"c_setCompressedSizeMethod.invoke( entry, s );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,202,catch( final InvocationTargetException ite )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,204,final Throwable nested = ite.getTargetException();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,205,"final String message = ""Exception setting the compressed size "" +"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,206,"""of "" + entry + "": "" + nested.getMessage();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,207,throw new RuntimeException( message );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,209,catch( final Throwable t )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,211,"final String message = ""Exception setting the compressed size "" +"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,212,"""of "" + entry + "": "" + t.getMessage();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,213,throw new RuntimeException( message );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,218,* Make this class work in JDK 1.1 like a 1.2 class. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,220,* This either stores the size for later usage or invokes setCompressedSize
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,221,* via reflection.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,223,* @param size The new ComprSize value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,224,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,226,public void setComprSize( final long size )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,228,if( haveSetCompressedSize() )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,230,"performSetCompressedSize( this, size );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,232,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,234,m_compressedSize = new Long( size );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,239,* Sets the external file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,241,* @param externalAttributes The new ExternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,242,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,244,public void setExternalAttributes( final long externalAttributes )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,246,m_externalAttributes = externalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,250,* Throws an Exception if extra data cannot be parsed into extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,252,* @param extra The new Extra value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,253,* @throws RuntimeException if fail to set extra data
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,254,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,256,public void setExtra( final byte[] extra )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,257,throws RuntimeException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,259,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,261,setExtraFields( ExtraFieldUtils.parse( extra ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,263,catch( final Exception e )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,265,throw new RuntimeException( e.getMessage() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,270,* Replaces all currently attached extra fields with the new array.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,272,* @param fields The new ExtraFields value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,273,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,275,public void setExtraFields( final ZipExtraField[] fields )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,277,m_extraFields.clear();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,278,for( int i = 0; i < fields.length; i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,280,m_extraFields.add( fields[ i ] );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,282,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,286,* Sets the internal file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,288,* @param value The new InternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,289,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,291,public void setInternalAttributes( final int value )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,293,m_internalAttributes = value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,297,* Retrieves the extra data for the central directory.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,299,* @return The CentralDirectoryExtra value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,300,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,302,public byte[] getCentralDirectoryExtra()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,304,return ExtraFieldUtils.mergeCentralDirectoryData( getExtraFields() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,308,* Override to make this class work in JDK 1.1 like a 1.2 class.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,310,* @return The CompressedSize value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,311,* @since 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,313,public long getCompressedSize()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,315,if( m_compressedSize != null )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,317,// has been set explicitly and we are running in a 1.1 VM
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,318,return m_compressedSize.longValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,320,return super.getCompressedSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,324,* Retrieves the external file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,326,* @return The ExternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,327,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,329,public long getExternalAttributes()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,331,return m_externalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,335,* Retrieves extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,337,* @return The ExtraFields value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,338,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,340,public ZipExtraField[] getExtraFields()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,342,final ZipExtraField[] result = new ZipExtraField[ m_extraFields.size() ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,343,return (ZipExtraField[])m_extraFields.toArray( result );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,347,* Retrieves the internal file attributes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,349,* @return The InternalAttributes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,350,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,352,public int getInternalAttributes()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,354,return m_internalAttributes;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,358,* Retrieves the extra data for the local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,360,* @return The LocalFileDataExtra value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,361,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,363,public byte[] getLocalFileDataExtra()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,365,byte[] extra = getExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,366,return extra != null ? extra : new byte[ 0 ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,370,* Adds an extra fields - replacing an already present extra field of the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,371,* same type.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,373,* @param extraField The feature to be added to the ExtraField attribute
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,374,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,376,public void addExtraField( final ZipExtraField extraField )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,378,final ZipShort type = extraField.getHeaderID();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,379,boolean done = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,380,for( int i = 0; !done && i < m_extraFields.size(); i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,382,final ZipExtraField other = (ZipExtraField)m_extraFields.get( i );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,383,if( other.getHeaderID().equals( type ) )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,385,"m_extraFields.set( i, extraField );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,386,done = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,389,if( !done )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,391,m_extraFields.add( extraField );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,393,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,397,* Overwrite clone
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,399,* @return Description of the Returned Value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,400,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,402,public Object clone()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,404,ZipEntry entry = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,405,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,407,entry = new ZipEntry( (java.util.zip.ZipEntry)super.clone() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,409,catch( final Exception e )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,411,// impossible as extra data is in correct format
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,412,e.printStackTrace();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,413,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,416,entry.setInternalAttributes( getInternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,417,entry.setExternalAttributes( getExternalAttributes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,418,entry.setExtraFields( getExtraFields() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,419,return entry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,423,* Remove an extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,425,* @param type Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,426,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,428,public void removeExtraField( final ZipShort type )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,430,boolean done = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,431,for( int i = 0; !done && i < m_extraFields.size(); i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,433,if( ( (ZipExtraField)m_extraFields.get( i ) ).getHeaderID().equals( type ) )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,435,m_extraFields.remove( i );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,436,done = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,439,if( !done )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,441,throw new java.util.NoSuchElementException();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,443,setExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,447,* Unfortunately {@link java.util.zip.ZipOutputStream
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,448,"* java.util.zip.ZipOutputStream} seems to access the extra data directly,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,449,* so overriding getExtra doesn't help - we need to modify super's data
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,450,* directly.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,452,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,454,protected void setExtra()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,456,super.setExtra( ExtraFieldUtils.mergeLocalFileDataData( getExtraFields() ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,21,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,24,* General format of extra field data. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,26,"* Extra fields usually appear twice per file, once in the local file data and"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,27,"* once in the central directory. Usually they are the same, but they don't have"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,28,* to be. {@link java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream}
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,29,* will only use the local file data in both places.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,31,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,32,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,34,public interface ZipExtraField
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,37,* The Header-ID.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,39,* @return The HeaderId value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,40,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,42,ZipShort getHeaderID();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,45,* Length of the extra field in the local file data - without Header-ID or
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,46,* length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,48,* @return The LocalFileDataLength value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,49,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,51,ZipShort getLocalFileDataLength();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,54,* Length of the extra field in the central directory - without Header-ID or
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,55,* length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,57,* @return The CentralDirectoryLength value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,58,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,60,ZipShort getCentralDirectoryLength();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,63,* The actual data to put into local file data - without Header-ID or length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,64,* specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,66,* @return The LocalFileDataData value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,67,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,69,byte[] getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,72,* The actual data to put central directory - without Header-ID or length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,73,* specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,75,* @return The CentralDirectoryData value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,76,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,78,byte[] getCentralDirectoryData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,81,* Populate data from this array as if it was in local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,83,* @param buffer the buffer to read data from
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,84,* @param offset offset into buffer to read data
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,85,* @param length the length of data
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,86,* @exception ZipException on error
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,87,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,89,"void parseFromLocalFileData( byte[] buffer, int offset, int length )"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,90,throws ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,22,* Utility class that represents a four byte integer with conversion rules for
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,23,* the big endian byte order of ZIP files.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,25,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,26,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,28,public final class ZipLong implements Cloneable
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,30,private long m_value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,33,* Create instance from a number.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,35,* @param value the value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,36,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,38,public ZipLong( final long value )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,40,m_value = value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,44,* Create instance from bytes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,46,* @param buffer the buffer to read data from
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,47,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,49,public ZipLong( final byte[] buffer )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,51,"this( buffer, 0 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,55,* Create instance from the four bytes starting at offset.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,57,* @param buffer buffer to read data from
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,58,* @param offset offset into buffer
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,59,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,61,"public ZipLong( final byte[] buffer, final int offset )"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,63,m_value = ( buffer[ offset + 3 ] << 24 ) & 0xFF000000l;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,64,m_value += ( buffer[ offset + 2 ] << 16 ) & 0xFF0000;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,65,m_value += ( buffer[ offset + 1 ] << 8 ) & 0xFF00;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,66,m_value += ( buffer[ offset ] & 0xFF );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,70,* Get value as two bytes in big endian byte order.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,72,* @return The value as bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,73,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,75,public byte[] getBytes()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,77,byte[] result = new byte[ 4 ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,78,result[ 0 ] = (byte)( ( m_value & 0xFF ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,79,result[ 1 ] = (byte)( ( m_value & 0xFF00 ) >> 8 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,80,result[ 2 ] = (byte)( ( m_value & 0xFF0000 ) >> 16 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,81,result[ 3 ] = (byte)( ( m_value & 0xFF000000l ) >> 24 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,82,return result;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,86,* Get value as Java int.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,88,* @return The value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,89,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,91,public long getValue()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,93,return m_value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,97,* Override to make two instances with same value equal.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,99,* @param o the object to compare against
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,100,"* @return true if equyal, false otherwise"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,101,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,103,public boolean equals( final Object o )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,105,if( o == null || !( o instanceof ZipLong ) )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,107,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,109,return m_value == ( (ZipLong)o ).getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,113,* Override to make two instances with same value equal.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,115,* @return the hashcode
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,116,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,118,public int hashCode()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,120,return (int)m_value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,23,import java.io.UnsupportedEncodingException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,24,import java.util.ArrayList;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,25,import java.util.Calendar;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,26,import java.util.Date;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,27,import java.util.Hashtable;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,28,import java.util.zip.CRC32;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,29,import java.util.zip.Deflater;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,30,import java.util.zip.DeflaterOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,31,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,34,* Reimplementation of {@link java.util.zip.ZipOutputStream
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,35,* java.util.zip.ZipOutputStream} that does handle the extended functionality of
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,36,"* this package, especially internal/external file attributes and extra fields"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,37,* with different layouts for local file data and central directory entries. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,39,* This implementation will use a Data Descriptor to store size and CRC
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,40,"* information for DEFLATED entries, this means, you don't need to calculate"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,41,"* them yourself. Unfortunately this is not possible for the STORED method, here"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,42,* setting the CRC and uncompressed size information is required before {@link
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,43,* #putNextEntry putNextEntry} will be called.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,45,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,46,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,48,public class ZipOutputStream
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,49,extends DeflaterOutputStream
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,52,"* Helper, a 0 as ZipShort."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,54,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,56,"private static final byte[] ZERO = {0, 0};"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,59,"* Helper, a 0 as ZipLong."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,61,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,63,"private static final byte[] LZERO = {0, 0, 0, 0};"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,66,* Compression method for deflated entries.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,68,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,70,public static final int DEFLATED = ZipEntry.DEFLATED;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,73,* Compression method for deflated entries.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,75,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,77,public static final int STORED = ZipEntry.STORED;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,80,* Various ZIP constants
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,83,* local file header signature
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,85,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,87,protected static final ZipLong LFH_SIG = new ZipLong( 0X04034B50L );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,89,* data descriptor signature
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,91,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,93,protected static final ZipLong DD_SIG = new ZipLong( 0X08074B50L );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,95,* central file header signature
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,97,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,99,protected static final ZipLong CFH_SIG = new ZipLong( 0X02014B50L );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,101,* end of central dir signature
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,103,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,105,protected static final ZipLong EOCD_SIG = new ZipLong( 0X06054B50L );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,108,* Smallest date/time ZIP can handle.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,110,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,112,private static final ZipLong DOS_TIME_MIN = new ZipLong( 0x00002100L );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,115,* The file comment.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,117,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,119,"private String m_comment = """";"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,122,* Compression level for next entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,124,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,126,private int m_level = Deflater.DEFAULT_COMPRESSION;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,129,* Default compression method for next entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,131,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,133,private int m_method = DEFLATED;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,136,* List of ZipEntries written so far.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,138,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,140,private final ArrayList m_entries = new ArrayList();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,143,* CRC instance to avoid parsing DEFLATED data twice.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,145,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,147,private final CRC32 m_crc = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,150,* Count the bytes written to out.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,152,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,154,private long m_written;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,157,* Data for current entry started here.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,159,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,161,private long m_dataStart;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,164,* Start of central directory.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,166,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,168,private ZipLong m_cdOffset = new ZipLong( 0 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,171,* Length of central directory.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,173,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,175,private ZipLong m_cdLength = new ZipLong( 0 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,178,* Holds the offsets of the LFH starts for each entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,180,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,182,private final Hashtable m_offsets = new Hashtable();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,185,* The encoding to use for filenames and the file comment. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,187,* For a list of possible values see <a
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,188,"* href=""http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html"">"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,189,* http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,190,* </a>. Defaults to the platform's default character encoding.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,192,* @since 1.3
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,194,private String m_encoding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,197,* Current entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,199,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,201,private ZipArchiveEntry m_entry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,204,* Creates a new ZIP OutputStream filtering the underlying stream.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,206,* @param output the output stream to write to
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,207,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,209,public ZipOutputStream( final OutputStream output )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,211,"super( output, new Deflater( Deflater.DEFAULT_COMPRESSION, true ) );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,215,* Convert a Date object to a DOS date/time field. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,217,* Stolen from InfoZip's <code>fileio.c</code></p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,219,* @param time Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,220,* @return Description of the Returned Value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,221,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,223,protected static ZipLong toDosTime( Date time )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,225,Calendar cal = Calendar.getInstance();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,226,cal.setTime( time );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,227,int year = cal.get(Calendar.YEAR);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,228,int month = cal.get(Calendar.MONTH) + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,229,if( year < 1980 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,231,return DOS_TIME_MIN;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,233,long value = ( ( year - 1980 ) << 25 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,234,| ( month << 21 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,235,| ( cal.get(Calendar.DAY_OF_MONTH) << 16 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,236,| ( cal.get(Calendar.HOUR_OF_DAY) << 11 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,237,| ( cal.get(Calendar.MINUTE) << 5 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,238,| ( cal.get(Calendar.SECOND) >> 1 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,240,byte[] result = new byte[ 4 ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,241,result[ 0 ] = (byte)( ( value & 0xFF ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,242,result[ 1 ] = (byte)( ( value & 0xFF00 ) >> 8 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,243,result[ 2 ] = (byte)( ( value & 0xFF0000 ) >> 16 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,244,result[ 3 ] = (byte)( ( value & 0xFF000000l ) >> 24 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,245,return new ZipLong( result );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,249,* Set the file comment.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,251,* @param comment The new Comment value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,252,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,254,public void setComment( String comment )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,256,m_comment = comment;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,260,* The encoding to use for filenames and the file comment. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,262,* For a list of possible values see <a
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,263,"* href=""http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html"">"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,264,* http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,265,* </a>. Defaults to the platform's default character encoding.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,267,* @param encoding The new Encoding value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,268,* @since 1.3
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,270,public void setEncoding( String encoding )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,272,m_encoding = encoding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,276,* Sets the compression level for subsequent entries. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,278,* Default is Deflater.DEFAULT_COMPRESSION.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,280,* @param level The new Level value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,281,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,283,public void setLevel( int level )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,285,m_level = level;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,289,* Sets the default compression method for subsequent entries. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,291,* Default is DEFLATED.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,293,* @param method The new Method value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,294,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,296,public void setMethod( final int method )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,298,m_method = method;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,302,* The encoding to use for filenames and the file comment.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,304,* @return null if using the platform's default character encoding.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,305,* @since 1.3
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,307,public String getEncoding()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,309,return m_encoding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,313,* Writes all necessary data for this entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,315,* @throws IOException if an IO failure causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,316,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,318,public void closeEntry()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,319,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,321,if( m_entry == null )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,323,return;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,326,long realCrc = m_crc.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,327,m_crc.reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,329,if( m_entry.getMethod() == DEFLATED )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,331,def.finish();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,332,while( !def.finished() )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,334,deflate();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,337,m_entry.setSize( def.getTotalIn() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,338,m_entry.setComprSize( def.getTotalOut() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,339,m_entry.setCrc( realCrc );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,341,def.reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,343,m_written += m_entry.getCompressedSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,345,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,347,if( m_entry.getCrc() != realCrc )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,349,"throw new ZipException( ""bad CRC checksum for entry """
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,350,"+ m_entry.getName() + "": """
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,351,+ Long.toHexString( m_entry.getCrc() )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,352,"+ "" instead of """
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,353,+ Long.toHexString( realCrc ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,356,if( m_entry.getSize() != m_written - m_dataStart )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,358,"throw new ZipException( ""bad size for entry """
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,359,"+ m_entry.getName() + "": """
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,360,+ m_entry.getSize()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,361,"+ "" instead of """
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,362,+ ( m_written - m_dataStart ) );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,367,writeDataDescriptor( m_entry );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,368,m_entry = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,372,"* Found out by experiment, that DeflaterOutputStream.close()"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,373,* will call finish() - so we don't need to override close
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,374,* ourselves.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,377,* Finishs writing the contents and closes this as well as the underlying
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,378,* stream.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,380,* @throws IOException if an IO failure causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,381,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,383,public void finish()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,384,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,386,closeEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,387,m_cdOffset = new ZipLong( m_written );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,388,final int size = m_entries.size();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,389,for( int i = 0; i < size; i++ )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,391,final ZipArchiveEntry entry = (ZipArchiveEntry)m_entries.get( i );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,392,writeCentralFileHeader( entry );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,394,m_cdLength = new ZipLong( m_written - m_cdOffset.getValue() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,395,writeCentralDirectoryEnd();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,396,m_offsets.clear();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,397,m_entries.clear();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,401,* Begin writing next entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,403,* @param entry the entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,404,* @throws IOException if an IO failure causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,405,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,407,public void putNextEntry( final ZipArchiveEntry entry )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,408,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,410,closeEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,412,m_entry = entry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,413,m_entries.add( m_entry );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,415,if( m_entry.getMethod() == -1 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,416,{// not specified
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,417,m_entry.setMethod( m_method );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,420,if( m_entry.getTime() == -1 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,421,{// not specified
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,422,m_entry.setTime( System.currentTimeMillis() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,425,if( m_entry.getMethod() == STORED )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,427,if( m_entry.getSize() == -1 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,429,"throw new ZipException( ""uncompressed size is required for STORED method"" );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,431,if( m_entry.getCrc() == -1 )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,433,"throw new ZipException( ""crc checksum is required for STORED method"" );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,435,m_entry.setComprSize( m_entry.getSize() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,437,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,439,def.setLevel( m_level );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,441,writeLocalFileHeader( m_entry );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,445,* Writes bytes to ZIP entry. <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,447,"* Override is necessary to support STORED entries, as well as calculationg"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,448,* CRC automatically for DEFLATED entries.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,450,* @param buffer the buffer to write to
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,451,* @param offset the offset to write to
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,452,* @param length the length of data to write
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,453,* @exception IOException if an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,455,"public void write( final byte[] buffer,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,456,"final int offset,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,457,final int length )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,458,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,460,if( m_entry.getMethod() == DEFLATED )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,462,"super.write( buffer, offset, length );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,464,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,466,"out.write( buffer, offset, length );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,467,m_written += length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,469,"m_crc.update( buffer, offset, length );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,473,* Retrieve the bytes for the given String in the encoding set for this
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,474,* Stream.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,476,* @param name the name to decode
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,477,* @return the bytes for string
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,478,* @exception ZipException if fail to retrieve bytes for specified string
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,479,* @since 1.3
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,481,protected byte[] getBytes( String name )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,482,throws ZipException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,484,if( m_encoding == null )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,486,return name.getBytes();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,488,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,490,try
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,492,return name.getBytes( m_encoding );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,494,catch( UnsupportedEncodingException uee )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,496,throw new ZipException( uee.getMessage() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,502,* Writes the &quot;End of central dir record&quot;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,504,* @exception IOException when an IO erro causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,505,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,507,protected void writeCentralDirectoryEnd()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,508,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,510,out.write( EOCD_SIG.getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,512,// disk numbers
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,513,out.write( ZERO );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,514,out.write( ZERO );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,516,// number of entries
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,517,byte[] num = ( new ZipShort( m_entries.size() ) ).getBytes();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,518,out.write( num );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,519,out.write( num );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,521,// length and location of CD
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,522,out.write( m_cdLength.getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,523,out.write( m_cdOffset.getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,525,// ZIP file comment
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,526,byte[] data = getBytes( m_comment );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,527,out.write( ( new ZipShort( data.length ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,528,out.write( data );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,532,* Writes the central file header entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,534,* @param entry the zip entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,535,* @throws IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,536,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,538,protected void writeCentralFileHeader( final ZipArchiveEntry entry )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,539,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,541,out.write( CFH_SIG.getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,542,m_written += 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,544,// version made by
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,545,out.write( ( new ZipShort( 20 ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,546,m_written += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,548,// version needed to extract
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,549,// general purpose bit flag
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,550,if( entry.getMethod() == DEFLATED )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,552,// requires version 2 as we are going to store length info
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,553,// in the data descriptor
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,554,out.write( ( new ZipShort( 20 ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,556,"// bit3 set to signal, we use a data descriptor"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,557,out.write( ( new ZipShort( 8 ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,559,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,561,out.write( ( new ZipShort( 10 ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,562,out.write( ZERO );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,564,m_written += 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,566,// compression method
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,567,out.write( ( new ZipShort( entry.getMethod() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,568,m_written += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,570,// last mod. time and date
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,571,out.write( toDosTime( new Date( entry.getTime() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,572,m_written += 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,574,// CRC
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,575,// compressed length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,576,// uncompressed length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,577,out.write( ( new ZipLong( entry.getCrc() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,578,out.write( ( new ZipLong( entry.getCompressedSize() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,579,out.write( ( new ZipLong( entry.getSize() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,580,m_written += 12;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,582,// file name length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,583,byte[] name = getBytes( entry.getName() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,584,out.write( ( new ZipShort( name.length ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,585,m_written += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,587,// extra field length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,588,byte[] extra = entry.getCentralDirectoryExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,589,out.write( ( new ZipShort( extra.length ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,590,m_written += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,592,// file comment length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,593,String comm = entry.getComment();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,594,if( comm == null )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,596,"comm = """";"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,598,byte[] comment = getBytes( comm );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,599,out.write( ( new ZipShort( comment.length ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,600,m_written += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,602,// disk number start
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,603,out.write( ZERO );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,604,m_written += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,606,// internal file attributes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,607,out.write( ( new ZipShort( entry.getInternalAttributes() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,608,m_written += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,610,// external file attributes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,611,out.write( ( new ZipLong( entry.getExternalAttributes() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,612,m_written += 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,614,// relative offset of LFH
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,615,out.write( ( (ZipLong)m_offsets.get( entry ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,616,m_written += 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,618,// file name
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,619,out.write( name );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,620,m_written += name.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,622,// extra field
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,623,out.write( extra );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,624,m_written += extra.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,626,// file comment
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,627,out.write( comment );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,628,m_written += comment.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,632,* Writes the data descriptor entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,634,* @param ze Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,635,* @throws IOException if an IO failure causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,636,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,638,protected void writeDataDescriptor( ZipArchiveEntry ze )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,639,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,641,if( ze.getMethod() != DEFLATED )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,643,return;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,645,out.write( DD_SIG.getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,646,out.write( ( new ZipLong( m_entry.getCrc() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,647,out.write( ( new ZipLong( m_entry.getCompressedSize() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,648,out.write( ( new ZipLong( m_entry.getSize() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,649,m_written += 16;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,653,* Writes the local file header entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,655,* @param entry the zip entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,656,* @exception IOException when an IO error causes operation to fail
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,657,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,659,protected void writeLocalFileHeader( final ZipArchiveEntry entry )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,660,throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,662,"m_offsets.put( entry, new ZipLong( m_written ) );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,664,out.write( LFH_SIG.getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,665,m_written += 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,667,// version needed to extract
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,668,// general purpose bit flag
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,669,if( entry.getMethod() == DEFLATED )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,671,// requires version 2 as we are going to store length info
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,672,// in the data descriptor
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,673,out.write( ( new ZipShort( 20 ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,675,"// bit3 set to signal, we use a data descriptor"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,676,out.write( ( new ZipShort( 8 ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,678,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,680,out.write( ( new ZipShort( 10 ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,681,out.write( ZERO );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,683,m_written += 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,685,// compression method
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,686,out.write( ( new ZipShort( entry.getMethod() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,687,m_written += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,689,// last mod. time and date
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,690,out.write( toDosTime( new Date( entry.getTime() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,691,m_written += 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,693,// CRC
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,694,// compressed length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,695,// uncompressed length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,696,if( entry.getMethod() == DEFLATED )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,698,out.write( LZERO );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,699,out.write( LZERO );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,700,out.write( LZERO );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,702,else
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,704,out.write( ( new ZipLong( entry.getCrc() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,705,out.write( ( new ZipLong( entry.getSize() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,706,out.write( ( new ZipLong( entry.getSize() ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,708,m_written += 12;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,710,// file name length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,711,byte[] name = getBytes( entry.getName() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,712,out.write( ( new ZipShort( name.length ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,713,m_written += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,715,// extra field length
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,716,byte[] extra = entry.getLocalFileDataExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,717,out.write( ( new ZipShort( extra.length ) ).getBytes() );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,718,m_written += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,720,// file name
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,721,out.write( name );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,722,m_written += name.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,724,// extra field
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,725,out.write( extra );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,726,m_written += extra.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,728,m_dataStart = m_written;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,22,* Utility class that represents a two byte integer with conversion rules for
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,23,* the big endian byte order of ZIP files.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,25,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,26,* @version $Revision$
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,28,public final class ZipShort implements Cloneable
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,30,private int m_value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,33,* Create instance from a number.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,35,* @param value Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,36,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,38,public ZipShort( int value )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,40,this.m_value = value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,44,* Create instance from bytes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,46,* @param bytes Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,47,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,49,public ZipShort( byte[] bytes )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,51,"this( bytes, 0 );"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,55,* Create instance from the two bytes starting at offset.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,57,* @param bytes Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,58,* @param offset Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,59,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,61,"public ZipShort( byte[] bytes, int offset )"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,63,m_value = ( bytes[ offset + 1 ] << 8 ) & 0xFF00;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,64,m_value += ( bytes[ offset ] & 0xFF );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,68,* Get value as two bytes in big endian byte order.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,70,* @return The Bytes value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,71,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,73,public byte[] getBytes()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,75,byte[] result = new byte[ 2 ];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,76,result[ 0 ] = (byte)( m_value & 0xFF );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,77,result[ 1 ] = (byte)( ( m_value & 0xFF00 ) >> 8 );
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,78,return result;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,82,* Get value as Java int.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,84,* @return The Value value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,85,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,87,public int getValue()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,89,return m_value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,93,* Override to make two instances with same value equal.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,95,* @param o Description of Parameter
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,96,* @return Description of the Returned Value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,97,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,99,public boolean equals( Object o )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,101,if( o == null || !( o instanceof ZipShort ) )
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,103,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,105,return m_value == ( (ZipShort)o ).getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,109,* Override to make two instances with same value equal.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,111,* @return Description of the Returned Value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,112,* @since 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,114,public int hashCode()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,116,return m_value;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,4,package org.apache.commons.compress.changes;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,6,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,9,* @author Cy
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,12,interface Change {
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,13,// public void perform(ArchiveInputStream input);
True,src/main/java/org/apache/commons/compress/changes/Change.java,src/main/java/org/apache/commons/compress/changes/Change.java,14,public int type();
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,19,package org.apache.commons.compress.changes;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,22,import java.util.LinkedHashSet;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,23,import java.util.Set;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,28,public final class ChangeSet {
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,30,private final Set changes = new LinkedHashSet();
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,32,public static final int CHANGE_TYPE_DELETE = 1;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,33,public static final int CHANGE_TYPE_ADD = 2;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,36,public void delete( final String pFilename ) {
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,37,changes.add(new DeleteChange(pFilename));
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,40,"public void move( final String pFrom, final String pTo ) {"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,43,"public void add( final ArchiveEntry pEntry, final InputStream pInput) {"
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,46,public Set asSet() {
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,47,return changes;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,19,package org.apache.commons.compress.changes;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,23,import java.util.Iterator;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,26,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,27,import org.apache.commons.compress.archivers.ArchiveOutputStream;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,28,import org.apache.commons.compress.utils.IOUtils;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,31,* Performs the operations of a change set
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,33,public class ChangeWorker {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,34,private ChangeWorker() {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,35,// nothing to do
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,39,* TODO
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,40,* @param changes
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,41,* @param in
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,42,* @param out
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,43,* @throws IOException
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,45,"public static void perform(ChangeSet changes, ArchiveInputStream in, ArchiveOutputStream out) throws IOException {"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,46,ArchiveEntry entry = null;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,47,while((entry = in.getNextEntry()) != null) {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,48,System.out.println(entry.getName());
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,49,boolean copy = true;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,51,for (Iterator it = changes.asSet().iterator(); it.hasNext();) {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,52,Change change = (Change)it.next();
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,54,if(change.type() == ChangeSet.CHANGE_TYPE_DELETE) {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,55,DeleteChange delete = ((DeleteChange)change);
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,56,if(entry.getName() != null &&
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,57,entry.getName().equals(delete.targetFile())) {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,58,copy = false;
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,63,if(copy) {
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,64,// copy archive
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,65,// TODO: unsafe long to int
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,66,"System.out.println(""Copy: "" + entry.getName());"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,67,long size = entry.getSize();
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,68,out.putArchiveEntry(entry);
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,69,"IOUtils.copy((InputStream)in, out, (int)size);"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,70,out.closeArchiveEntry();
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,74,"System.out.println(""---"");"
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,76,// add operation stuff
True,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,src/main/java/org/apache/commons/compress/changes/ChangeWorker.java,77,out.close();
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,4,package org.apache.commons.compress.changes;
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,6,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,9,* Implementation for a delete operation
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,11,class DeleteChange implements Change {
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,12,private String filename = null;
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,15,* Constructor. Takes the filename of the file to be deleted
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,16,* from the stream as argument.
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,17,* @param pFilename the filename of the file to delete
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,19,public DeleteChange(final String pFilename) {
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,20,if(pFilename == null) {
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,21,throw new NullPointerException();
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,23,filename = pFilename;
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,26,public void perform(ArchiveInputStream input) {
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,27,"System.out.println(""PERFORMING DELETE"");"
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,30,public String targetFile() {
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,31,return filename;
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,34,public int type() {
True,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,src/main/java/org/apache/commons/compress/changes/DeleteChange.java,35,return ChangeSet.CHANGE_TYPE_DELETE;
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,4,package org.apache.commons.compress.compressors;
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,9,public class CompressorException extends Exception {
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,10,/* Serial */
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,11,private static final long serialVersionUID = -2770299103090672278L;
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,13,public CompressorException() {
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,14,super();
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,17,"public CompressorException(String arg0, Throwable arg1) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,18,"super(arg0, arg1);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,21,public CompressorException(String arg0) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,22,super(arg0);
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,25,public CompressorException(Throwable arg0) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,src/main/java/org/apache/commons/compress/compressors/CompressorException.java,26,super(arg0);
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,19,package org.apache.commons.compress.compressors;
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,23,public abstract class CompressorInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,24,// TODO
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,19,package org.apache.commons.compress.compressors;
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,21,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,24,public abstract class CompressorOutputStream extends OutputStream {
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,25,// TODO
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,1,package org.apache.commons.compress.compressors;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,3,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,4,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,5,import java.lang.reflect.Constructor;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,6,import java.lang.reflect.InvocationTargetException;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,7,import java.util.HashMap;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,8,import java.util.Map;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,10,import org.apache.commons.compress.archivers.ArchiveException;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,11,import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,12,import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,13,import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,14,import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,16,public class CompressorStreamFactory {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,17,final Map inputStreamClasses = new HashMap();
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,18,final Map outputStreamClasses = new HashMap();
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,20,public CompressorStreamFactory() throws CompressorException {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,21,"registerInputStream(""gz"", GzipCompressorInputStream.class);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,22,"registerOutputStream(""gz"", GzipCompressorOutputStream.class);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,23,"registerInputStream(""bzip2"", BZip2CompressorInputStream.class);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,24,"registerOutputStream(""bzip2"", BZip2CompressorOutputStream.class);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,28,"public void registerInputStream( final String name, final Class stream ) throws CompressorException {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,29,if (CompressorInputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,30,"inputStreamClasses.put(name, stream);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,31,} else {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,32,"throw new CompressorException(""Compressor does not implement the CompressorInputStream interface."");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,36,"public void registerOutputStream( final String name, final Class stream ) throws CompressorException {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,37,if (CompressorOutputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,38,"outputStreamClasses.put(name, stream);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,39,} else {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,40,"throw new CompressorException(""Compressor does not implement the CompressorOutputStream interface."");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,44,"public CompressorInputStream createCompressorInputStream( final String name, final InputStream out ) throws CompressorException {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,45,try {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,46,final Class clazz = (Class) inputStreamClasses.get(name);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,48,if (clazz == null) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,49,"throw new CompressorException(""CompressorFactory could not create instance"");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,52,final Class[] params = { InputStream.class };
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,53,final Constructor constructor = clazz.getConstructor(params);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,54,final Object[] initargs = { out };
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,55,return (CompressorInputStream) constructor.newInstance(initargs);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,56,} catch (InstantiationException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,57,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,58,} catch (IllegalAccessException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,59,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,60,} catch (SecurityException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,61,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,62,} catch (NoSuchMethodException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,63,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,64,} catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,65,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,66,} catch (InvocationTargetException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,67,"throw new CompressorException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,71,"public CompressorOutputStream createCompressorOutputStream( final String name, final OutputStream out ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,72,try {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,73,final Class clazz = (Class) outputStreamClasses.get(name);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,75,if (clazz == null) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,76,"throw new ArchiveException(""CompressorFactory could not create instance"");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,79,final Class[] params = { OutputStream.class };
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,80,final Constructor constructor = clazz.getConstructor(params);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,81,final Object[] initargs = { out };
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,82,return (CompressorOutputStream) constructor.newInstance(initargs);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,83,} catch (InstantiationException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,84,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,85,} catch (IllegalAccessException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,86,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,87,} catch (SecurityException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,88,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,89,} catch (NoSuchMethodException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,90,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,91,} catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,92,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,93,} catch (InvocationTargetException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,94,"throw new ArchiveException(""CompressorFactory could not create instance"", e);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,19,package org.apache.commons.compress.compressors.bzip2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,24,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,27,"* This package is based on the work done by Keiron Liddle, Aftex Software"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,28,* <keiron@aftexsw.com> to whom the Ant project is very grateful for his great
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,29,* code.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,33,* An input stream that decompresses from the BZip2 format (without the file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,34,* header chars) to be read as any other stream.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,36,"* @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,38,public class BZip2CompressorInputStream extends CompressorInputStream implements BZip2Constants {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,40,private static void cadvise() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,41,"System.out.println(""CRC Error"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,42,//throw new CCoruptionError();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,45,private static void badBGLengths() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,46,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,49,private static void bitStreamEOF() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,50,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,53,private static void compressedStreamEOF() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,54,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,57,private void makeMaps() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,58,int i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,59,nInUse = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,60,for (i = 0; i < 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,61,if (inUse[i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,62,seqToUnseq[nInUse] = (char) i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,63,unseqToSeq[i] = (char) nInUse;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,64,nInUse++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,70,"index of the last char in the block, so"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,71,the block size == last + 1.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,73,private int  last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,76,index in zptr[] of original string after sorting.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,78,private int  origPtr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,81,always: in the range 0 .. 9.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,82,The current block size is 100000 * this number.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,84,private int blockSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,86,private boolean blockRandomised;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,88,private int bsBuff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,89,private int bsLive;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,90,private CRC mCrc = new CRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,92,private boolean[] inUse = new boolean[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,93,private int nInUse;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,95,private char[] seqToUnseq = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,96,private char[] unseqToSeq = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,98,private char[] selector = new char[MAX_SELECTORS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,99,private char[] selectorMtf = new char[MAX_SELECTORS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,101,private int[] tt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,102,private char[] ll8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,105,freq table collected to save a pass over the data
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,106,during decompression.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,108,private int[] unzftab = new int[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,110,private int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,111,private int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,112,private int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,113,private int[] minLens = new int[N_GROUPS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,115,private InputStream bsStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,117,private boolean streamEnd = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,119,private int currentChar = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,121,private static final int START_BLOCK_STATE = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,122,private static final int RAND_PART_A_STATE = 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,123,private static final int RAND_PART_B_STATE = 3;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,124,private static final int RAND_PART_C_STATE = 4;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,125,private static final int NO_RAND_PART_A_STATE = 5;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,126,private static final int NO_RAND_PART_B_STATE = 6;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,127,private static final int NO_RAND_PART_C_STATE = 7;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,129,private int currentState = START_BLOCK_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,131,"private int storedBlockCRC, storedCombinedCRC;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,132,"private int computedBlockCRC, computedCombinedCRC;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,134,"int i2, count, chPrev, ch2;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,135,"int i, tPos;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,136,int rNToGo = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,137,int rTPos  = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,138,int j2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,139,char z;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,141,public BZip2CompressorInputStream(InputStream zStream) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,142,ll8 = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,143,tt = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,144,bsSetStream(zStream);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,145,initialize();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,146,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,147,setupBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,150,public int read() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,151,if (streamEnd) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,152,return -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,153,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,154,int retChar = currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,155,switch(currentState) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,156,case START_BLOCK_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,157,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,158,case RAND_PART_A_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,159,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,160,case RAND_PART_B_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,161,setupRandPartB();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,162,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,163,case RAND_PART_C_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,164,setupRandPartC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,165,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,166,case NO_RAND_PART_A_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,167,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,168,case NO_RAND_PART_B_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,169,setupNoRandPartB();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,170,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,171,case NO_RAND_PART_C_STATE:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,172,setupNoRandPartC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,173,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,174,default:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,175,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,177,return retChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,181,private void initialize() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,182,"char magic3, magic4;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,183,magic3 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,184,magic4 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,185,if (magic3 != 'h' || magic4 < '1' || magic4 > '9') {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,186,bsFinishedWithStream();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,187,streamEnd = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,188,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,191,setDecompressStructureSizes(magic4 - '0');
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,192,computedCombinedCRC = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,195,private void initBlock() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,196,"char magic1, magic2, magic3, magic4;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,197,"char magic5, magic6;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,198,magic1 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,199,magic2 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,200,magic3 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,201,magic4 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,202,magic5 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,203,magic6 = bsGetUChar();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,204,if (magic1 == 0x17 && magic2 == 0x72 && magic3 == 0x45
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,205,&& magic4 == 0x38 && magic5 == 0x50 && magic6 == 0x90) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,206,complete();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,207,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,210,if (magic1 != 0x31 || magic2 != 0x41 || magic3 != 0x59
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,211,|| magic4 != 0x26 || magic5 != 0x53 || magic6 != 0x59) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,212,badBlockHeader();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,213,streamEnd = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,214,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,217,storedBlockCRC = bsGetInt32();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,219,if (bsR(1) == 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,220,blockRandomised = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,221,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,222,blockRandomised = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,225,//        currBlockNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,226,getAndMoveToFrontDecode();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,228,mCrc.initialiseCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,229,currentState = START_BLOCK_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,232,private void endBlock() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,233,computedBlockCRC = mCrc.getFinalCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,234,/* A bad CRC is considered a fatal error. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,235,if (storedBlockCRC != computedBlockCRC) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,236,crcError();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,239,computedCombinedCRC = (computedCombinedCRC << 1)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,240,| (computedCombinedCRC >>> 31);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,241,computedCombinedCRC ^= computedBlockCRC;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,244,private void complete() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,245,storedCombinedCRC = bsGetInt32();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,246,if (storedCombinedCRC != computedCombinedCRC) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,247,crcError();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,250,bsFinishedWithStream();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,251,streamEnd = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,254,private static void blockOverrun() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,255,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,258,private static void badBlockHeader() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,259,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,262,private static void crcError() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,263,cadvise();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,266,private void bsFinishedWithStream() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,267,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,268,if (this.bsStream != null) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,269,if (this.bsStream != System.in) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,270,this.bsStream.close();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,271,this.bsStream = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,274,} catch (IOException ioe) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,275,//ignore
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,279,private void bsSetStream(InputStream f) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,280,bsStream = f;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,281,bsLive = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,282,bsBuff = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,285,private int bsR(int n) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,286,int v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,287,while (bsLive < n) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,288,int zzi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,289,char thech = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,290,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,291,thech = (char) bsStream.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,292,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,293,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,295,if (thech == -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,296,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,298,zzi = thech;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,299,bsBuff = (bsBuff << 8) | (zzi & 0xff);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,300,bsLive += 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,303,v = (bsBuff >> (bsLive - n)) & ((1 << n) - 1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,304,bsLive -= n;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,305,return v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,308,private char bsGetUChar() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,309,return (char) bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,312,private int bsGetint() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,313,int u = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,314,u = (u << 8) | bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,315,u = (u << 8) | bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,316,u = (u << 8) | bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,317,u = (u << 8) | bsR(8);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,318,return u;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,321,private int bsGetIntVS(int numBits) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,322,return (int) bsR(numBits);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,325,private int bsGetInt32() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,326,return (int) bsGetint();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,329,"private void hbCreateDecodeTables(int[] limit, int[] base,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,330,"int[] perm, char[] length,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,331,"int minLen, int maxLen, int alphaSize) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,332,"int pp, i, j, vec;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,334,pp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,335,for (i = minLen; i <= maxLen; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,336,for (j = 0; j < alphaSize; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,337,if (length[j] == i) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,338,perm[pp] = j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,339,pp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,344,for (i = 0; i < MAX_CODE_LEN; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,345,base[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,347,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,348,base[length[i] + 1]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,351,for (i = 1; i < MAX_CODE_LEN; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,352,base[i] += base[i - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,355,for (i = 0; i < MAX_CODE_LEN; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,356,limit[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,358,vec = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,360,for (i = minLen; i <= maxLen; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,361,vec += (base[i + 1] - base[i]);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,362,limit[i] = vec - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,363,vec <<= 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,365,for (i = minLen + 1; i <= maxLen; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,366,base[i] = ((limit[i - 1] + 1) << 1) - base[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,370,private void recvDecodingTables() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,371,char len[][] = new char[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,372,"int i, j, t, nGroups, nSelectors, alphaSize;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,373,"int minLen, maxLen;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,374,boolean[] inUse16 = new boolean[16];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,376,/* Receive the mapping table */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,377,for (i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,378,if (bsR(1) == 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,379,inUse16[i] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,380,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,381,inUse16[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,385,for (i = 0; i < 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,386,inUse[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,389,for (i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,390,if (inUse16[i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,391,for (j = 0; j < 16; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,392,if (bsR(1) == 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,393,inUse[i * 16 + j] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,399,makeMaps();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,400,alphaSize = nInUse + 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,402,/* Now the selectors */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,403,nGroups = bsR(3);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,404,nSelectors = bsR(15);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,405,for (i = 0; i < nSelectors; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,406,j = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,407,while (bsR(1) == 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,408,j++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,410,selectorMtf[i] = (char) j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,413,/* Undo the MTF values for the selectors. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,415,char[] pos = new char[N_GROUPS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,416,"char tmp, v;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,417,for (v = 0; v < nGroups; v++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,418,pos[v] = v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,421,for (i = 0; i < nSelectors; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,422,v = selectorMtf[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,423,tmp = pos[v];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,424,while (v > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,425,pos[v] = pos[v - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,426,v--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,428,pos[0] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,429,selector[i] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,433,/* Now the coding tables */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,434,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,435,int curr = bsR(5);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,436,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,437,while (bsR(1) == 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,438,if (bsR(1) == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,439,curr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,440,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,441,curr--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,444,len[t][i] = (char) curr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,448,/* Create the Huffman decoding tables */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,449,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,450,minLen = 32;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,451,maxLen = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,452,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,453,if (len[t][i] > maxLen) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,454,maxLen = len[t][i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,456,if (len[t][i] < minLen) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,457,minLen = len[t][i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,460,"hbCreateDecodeTables(limit[t], base[t], perm[t], len[t], minLen,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,461,"maxLen, alphaSize);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,462,minLens[t] = minLen;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,466,private void getAndMoveToFrontDecode() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,467,char[] yy = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,468,"int i, j, nextSym, limitLast;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,469,"int EOB, groupNo, groupPos;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,471,limitLast = baseBlockSize * blockSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,472,origPtr = bsGetIntVS(24);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,474,recvDecodingTables();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,475,EOB = nInUse + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,476,groupNo = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,477,groupPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,480,Setting up the unzftab entries here is not strictly
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,481,"necessary, but it does save having to do it later"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,482,"in a separate pass, and so saves a block's worth of"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,483,cache misses.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,485,for (i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,486,unzftab[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,489,for (i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,490,yy[i] = (char) i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,493,last = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,496,"int zt, zn, zvec, zj;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,497,if (groupPos == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,498,groupNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,499,groupPos = G_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,501,groupPos--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,502,zt = selector[groupNo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,503,zn = minLens[zt];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,504,zvec = bsR(zn);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,505,while (zvec > limit[zt][zn]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,506,zn++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,509,while (bsLive < 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,510,int zzi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,511,char thech = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,512,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,513,thech = (char) bsStream.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,514,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,515,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,517,if (thech == -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,518,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,520,zzi = thech;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,521,bsBuff = (bsBuff << 8) | (zzi & 0xff);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,522,bsLive += 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,525,zj = (bsBuff >> (bsLive - 1)) & 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,526,bsLive--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,528,zvec = (zvec << 1) | zj;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,530,nextSym = perm[zt][zvec - base[zt][zn]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,533,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,535,if (nextSym == EOB) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,536,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,539,if (nextSym == RUNA || nextSym == RUNB) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,540,char ch;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,541,int s = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,542,int N = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,543,do {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,544,if (nextSym == RUNA) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,545,s = s + (0 + 1) * N;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,546,} else if (nextSym == RUNB) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,547,s = s + (1 + 1) * N;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,549,N = N * 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,551,"int zt, zn, zvec, zj;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,552,if (groupPos == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,553,groupNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,554,groupPos = G_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,556,groupPos--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,557,zt = selector[groupNo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,558,zn = minLens[zt];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,559,zvec = bsR(zn);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,560,while (zvec > limit[zt][zn]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,561,zn++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,564,while (bsLive < 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,565,int zzi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,566,char thech = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,567,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,568,thech = (char) bsStream.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,569,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,570,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,572,if (thech == -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,573,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,575,zzi = thech;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,576,bsBuff = (bsBuff << 8) | (zzi & 0xff);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,577,bsLive += 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,580,zj = (bsBuff >> (bsLive - 1)) & 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,581,bsLive--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,583,zvec = (zvec << 1) | zj;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,585,nextSym = perm[zt][zvec - base[zt][zn]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,587,} while (nextSym == RUNA || nextSym == RUNB);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,589,s++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,590,ch = seqToUnseq[yy[0]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,591,unzftab[ch] += s;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,593,while (s > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,594,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,595,ll8[last] = ch;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,596,s--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,599,if (last >= limitLast) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,600,blockOverrun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,602,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,603,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,604,char tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,605,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,606,if (last >= limitLast) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,607,blockOverrun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,610,tmp = yy[nextSym - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,611,unzftab[seqToUnseq[tmp]]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,612,ll8[last] = seqToUnseq[tmp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,615,"This loop is hammered during decompression,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,616,hence the unrolling.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,618,for (j = nextSym-1; j > 0; j--) yy[j] = yy[j-1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,621,j = nextSym - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,622,for (; j > 3; j -= 4) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,623,yy[j]     = yy[j - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,624,yy[j - 1] = yy[j - 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,625,yy[j - 2] = yy[j - 3];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,626,yy[j - 3] = yy[j - 4];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,628,for (; j > 0; j--) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,629,yy[j] = yy[j - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,632,yy[0] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,634,"int zt, zn, zvec, zj;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,635,if (groupPos == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,636,groupNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,637,groupPos = G_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,639,groupPos--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,640,zt = selector[groupNo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,641,zn = minLens[zt];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,642,zvec = bsR(zn);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,643,while (zvec > limit[zt][zn]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,644,zn++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,647,while (bsLive < 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,648,int zzi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,649,char thech = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,650,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,651,thech = (char) bsStream.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,652,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,653,compressedStreamEOF();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,655,zzi = thech;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,656,bsBuff = (bsBuff << 8) | (zzi & 0xff);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,657,bsLive += 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,660,zj = (bsBuff >> (bsLive - 1)) & 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,661,bsLive--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,663,zvec = (zvec << 1) | zj;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,665,nextSym = perm[zt][zvec - base[zt][zn]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,667,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,672,private void setupBlock() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,673,int[] cftab = new int[257];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,674,char ch;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,676,cftab[0] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,677,for (i = 1; i <= 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,678,cftab[i] = unzftab[i - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,680,for (i = 1; i <= 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,681,cftab[i] += cftab[i - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,684,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,685,ch = (char) ll8[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,686,tt[cftab[ch]] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,687,cftab[ch]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,689,cftab = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,691,tPos = tt[origPtr];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,693,count = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,694,i2 = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,695,ch2 = 256;   /* not a char and not EOF */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,697,if (blockRandomised) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,698,rNToGo = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,699,rTPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,700,setupRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,701,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,702,setupNoRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,706,private void setupRandPartA() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,707,if (i2 <= last) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,708,chPrev = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,709,ch2 = ll8[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,710,tPos = tt[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,711,if (rNToGo == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,712,rNToGo = rNums[rTPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,713,rTPos++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,714,if (rTPos == 512) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,715,rTPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,718,rNToGo--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,719,ch2 ^= (int) ((rNToGo == 1) ? 1 : 0);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,720,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,722,currentChar = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,723,currentState = RAND_PART_B_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,724,mCrc.updateCRC(ch2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,725,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,726,endBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,727,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,728,setupBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,732,private void setupNoRandPartA() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,733,if (i2 <= last) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,734,chPrev = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,735,ch2 = ll8[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,736,tPos = tt[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,737,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,739,currentChar = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,740,currentState = NO_RAND_PART_B_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,741,mCrc.updateCRC(ch2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,742,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,743,endBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,744,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,745,setupBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,749,private void setupRandPartB() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,750,if (ch2 != chPrev) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,751,currentState = RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,752,count = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,753,setupRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,754,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,755,count++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,756,if (count >= 4) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,757,z = ll8[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,758,tPos = tt[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,759,if (rNToGo == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,760,rNToGo = rNums[rTPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,761,rTPos++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,762,if (rTPos == 512) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,763,rTPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,766,rNToGo--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,767,z ^= ((rNToGo == 1) ? 1 : 0);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,768,j2 = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,769,currentState = RAND_PART_C_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,770,setupRandPartC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,771,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,772,currentState = RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,773,setupRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,778,private void setupRandPartC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,779,if (j2 < (int) z) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,780,currentChar = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,781,mCrc.updateCRC(ch2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,782,j2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,783,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,784,currentState = RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,785,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,786,count = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,787,setupRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,791,private void setupNoRandPartB() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,792,if (ch2 != chPrev) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,793,currentState = NO_RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,794,count = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,795,setupNoRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,796,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,797,count++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,798,if (count >= 4) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,799,z = ll8[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,800,tPos = tt[tPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,801,currentState = NO_RAND_PART_C_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,802,j2 = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,803,setupNoRandPartC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,804,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,805,currentState = NO_RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,806,setupNoRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,811,private void setupNoRandPartC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,812,if (j2 < (int) z) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,813,currentChar = ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,814,mCrc.updateCRC(ch2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,815,j2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,816,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,817,currentState = NO_RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,818,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,819,count = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,820,setupNoRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,824,private void setDecompressStructureSizes(int newSize100k) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,825,if (!(0 <= newSize100k && newSize100k <= 9 && 0 <= blockSize100k
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,826,&& blockSize100k <= 9)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,827,"// throw new IOException(""Invalid block size"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,830,blockSize100k = newSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,832,if (newSize100k == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,833,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,836,int n = baseBlockSize * newSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,837,ll8 = new char[n];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,838,tt = new int[n];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,19,package org.apache.commons.compress.compressors.bzip2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,24,import org.apache.commons.compress.compressors.CompressorOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,27,"* This package is based on the work done by Keiron Liddle, Aftex Software"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,28,* <keiron@aftexsw.com> to whom the Ant project is very grateful for his great
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,29,* code.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,32,* An output stream that compresses into the BZip2 format (without the file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,33,* header chars) into another stream. TODO: Update to BZip2 1.0.1
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,35,"* @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,37,public class BZip2CompressorOutputStream extends CompressorOutputStream implements BZip2Constants {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,38,protected static final int SETMASK = (1 << 21);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,39,protected static final int CLEARMASK = (~SETMASK);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,40,protected static final int GREATER_ICOST = 15;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,41,protected static final int LESSER_ICOST = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,42,protected static final int SMALL_THRESH = 20;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,43,protected static final int DEPTH_THRESH = 10;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,46,If you are ever unlucky/improbable enough
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,47,"to get a stack overflow whilst sorting,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,48,increase the following constant and try
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,49,again.  In practice I have never seen the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,50,"stack go above 27 elems, so the following"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,51,limit seems very generous.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,53,protected static final int QSORT_STACK_SIZE = 1000;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,55,private static void panic() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,56,"System.out.println(""panic"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,57,//throw new CError();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,60,private void makeMaps() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,61,int i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,62,nInUse = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,63,for (i = 0; i < 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,64,if (inUse[i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,65,seqToUnseq[nInUse] = (char) i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,66,unseqToSeq[i] = (char) nInUse;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,67,nInUse++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,72,"protected static void hbMakeCodeLengths(char[] len, int[] freq,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,73,"int alphaSize, int maxLen) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,75,Nodes and heap entries run from 1.  Entry 0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,76,for both the heap and nodes is a sentinel.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,78,"int nNodes, nHeap, n1, n2, i, j, k;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,79,boolean  tooLong;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,81,int[] heap = new int[MAX_ALPHA_SIZE + 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,82,int[] weight = new int[MAX_ALPHA_SIZE * 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,83,int[] parent = new int[MAX_ALPHA_SIZE * 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,85,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,86,weight[i + 1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,89,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,90,nNodes = alphaSize;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,91,nHeap = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,93,heap[0] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,94,weight[0] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,95,parent[0] = -2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,97,for (i = 1; i <= alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,98,parent[i] = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,99,nHeap++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,100,heap[nHeap] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,102,"int zz, tmp;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,103,zz = nHeap;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,104,tmp = heap[zz];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,105,while (weight[tmp] < weight[heap[zz >> 1]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,106,heap[zz] = heap[zz >> 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,107,zz >>= 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,109,heap[zz] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,112,if (!(nHeap < (MAX_ALPHA_SIZE + 2))) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,113,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,116,while (nHeap > 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,117,n1 = heap[1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,118,heap[1] = heap[nHeap];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,119,nHeap--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,121,"int zz = 0, yy = 0, tmp = 0;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,122,zz = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,123,tmp = heap[zz];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,124,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,125,yy = zz << 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,126,if (yy > nHeap) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,127,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,129,if (yy < nHeap
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,130,&& weight[heap[yy + 1]] < weight[heap[yy]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,131,yy++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,133,if (weight[tmp] < weight[heap[yy]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,134,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,136,heap[zz] = heap[yy];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,137,zz = yy;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,139,heap[zz] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,141,n2 = heap[1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,142,heap[1] = heap[nHeap];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,143,nHeap--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,145,"int zz = 0, yy = 0, tmp = 0;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,146,zz = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,147,tmp = heap[zz];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,148,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,149,yy = zz << 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,150,if (yy > nHeap) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,151,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,153,if (yy < nHeap
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,154,&& weight[heap[yy + 1]] < weight[heap[yy]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,155,yy++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,157,if (weight[tmp] < weight[heap[yy]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,158,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,160,heap[zz] = heap[yy];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,161,zz = yy;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,163,heap[zz] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,165,nNodes++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,166,parent[n1] = parent[n2] = nNodes;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,168,weight[nNodes] = ((weight[n1] & 0xffffff00)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,169,+ (weight[n2] & 0xffffff00))
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,170,| (1 + (((weight[n1] & 0x000000ff) >
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,171,(weight[n2] & 0x000000ff)) ?
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,172,(weight[n1] & 0x000000ff) :
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,173,(weight[n2] & 0x000000ff)));
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,175,parent[nNodes] = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,176,nHeap++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,177,heap[nHeap] = nNodes;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,179,"int zz = 0, tmp = 0;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,180,zz = nHeap;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,181,tmp = heap[zz];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,182,while (weight[tmp] < weight[heap[zz >> 1]]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,183,heap[zz] = heap[zz >> 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,184,zz >>= 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,186,heap[zz] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,189,if (!(nNodes < (MAX_ALPHA_SIZE * 2))) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,190,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,193,tooLong = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,194,for (i = 1; i <= alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,195,j = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,196,k = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,197,while (parent[k] >= 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,198,k = parent[k];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,199,j++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,201,len[i - 1] = (char) j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,202,if (j > maxLen) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,203,tooLong = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,207,if (!tooLong) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,208,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,211,for (i = 1; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,212,j = weight[i] >> 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,213,j = 1 + (j / 2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,214,weight[i] = j << 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,220,"index of the last char in the block, so"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,221,the block size == last + 1.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,223,int last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,226,index in zptr[] of original string after sorting.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,228,int origPtr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,231,always: in the range 0 .. 9.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,232,The current block size is 100000 * this number.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,234,int blockSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,236,boolean blockRandomised;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,238,int bytesOut;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,239,int bsBuff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,240,int bsLive;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,241,CRC mCrc = new CRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,243,private boolean[] inUse = new boolean[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,244,private int nInUse;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,246,private char[] seqToUnseq = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,247,private char[] unseqToSeq = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,249,private char[] selector = new char[MAX_SELECTORS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,250,private char[] selectorMtf = new char[MAX_SELECTORS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,252,private char[] block;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,253,private int[] quadrant;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,254,private int[] zptr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,255,private short[] szptr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,256,private int[] ftab;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,258,private int nMTF;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,260,private int[] mtfFreq = new int[MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,263,* Used when sorting.  If too many long comparisons
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,264,"* happen, we stop sorting, randomise the block"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,265,"* slightly, and try again."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,267,private int workFactor;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,268,private int workDone;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,269,private int workLimit;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,270,private boolean firstAttempt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,271,private int nBlocksRandomised;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,273,private int currentChar = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,274,private int runLength = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,276,public BZip2CompressorOutputStream(OutputStream inStream) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,277,"this(inStream, 9);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,280,"public BZip2CompressorOutputStream(OutputStream inStream, int inBlockSize)"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,281,throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,282,block = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,283,quadrant = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,284,zptr = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,285,ftab = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,287,bsSetStream(inStream);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,289,workFactor = 50;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,290,if (inBlockSize > 9) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,291,inBlockSize = 9;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,293,if (inBlockSize < 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,294,inBlockSize = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,296,blockSize100k = inBlockSize;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,297,allocateCompressStructures();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,298,initialize();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,299,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,304,"* modified by Oliver Merkel, 010128"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,307,public void write(int bv) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,308,int b = (256 + bv) % 256;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,309,if (currentChar != -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,310,if (currentChar == b) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,311,runLength++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,312,if (runLength > 254) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,313,writeRun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,314,currentChar = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,315,runLength = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,317,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,318,writeRun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,319,runLength = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,320,currentChar = b;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,322,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,323,currentChar = b;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,324,runLength++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,328,private void writeRun() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,329,if (last < allowableBlockSize) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,330,inUse[currentChar] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,331,for (int i = 0; i < runLength; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,332,mCrc.updateCRC((char) currentChar);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,334,switch (runLength) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,335,case 1:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,336,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,337,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,338,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,339,case 2:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,340,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,341,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,342,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,343,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,344,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,345,case 3:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,346,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,347,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,348,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,349,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,350,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,351,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,352,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,353,default:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,354,inUse[runLength - 4] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,355,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,356,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,357,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,358,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,359,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,360,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,361,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,362,block[last + 1] = (char) currentChar;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,363,last++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,364,block[last + 1] = (char) (runLength - 4);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,365,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,367,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,368,endBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,369,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,370,writeRun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,374,boolean closed = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,376,protected void finalize() throws Throwable {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,377,close();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,378,super.finalize();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,381,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,382,if (closed) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,383,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,386,if (runLength > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,387,writeRun();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,389,currentChar = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,390,endBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,391,endCompression();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,392,closed = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,393,super.close();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,394,bsStream.close();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,397,public void flush() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,398,super.flush();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,399,bsStream.flush();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,402,"private int blockCRC, combinedCRC;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,404,private void initialize() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,405,bytesOut = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,406,nBlocksRandomised = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,408,"/* Write `magic' bytes h indicating file-format == huffmanised,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,409,followed by a digit indicating blockSize100k.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,411,bsPutUChar('h');
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,412,bsPutUChar('0' + blockSize100k);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,414,combinedCRC = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,417,private int allowableBlockSize;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,419,private void initBlock() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,420,//        blockNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,421,mCrc.initialiseCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,422,last = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,423,//        ch = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,425,for (int i = 0; i < 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,426,inUse[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,429,/* 20 is just a paranoia constant */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,430,allowableBlockSize = baseBlockSize * blockSize100k - 20;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,433,private void endBlock() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,434,blockCRC = mCrc.getFinalCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,435,combinedCRC = (combinedCRC << 1) | (combinedCRC >>> 31);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,436,combinedCRC ^= blockCRC;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,438,/* sort the block and establish posn of original string */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,439,doReversibleTransformation();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,442,"A 6-byte block header, the value chosen arbitrarily"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,443,as 0x314159265359 :-).  A 32 bit value does not really
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,444,give a strong enough guarantee that the value will not
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,445,appear by chance in the compressed datastream.  Worst-case
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,446,"probability of this event, for a 900k block, is about"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,447,"2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48 bits."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,448,For a compressed file of size 100Gb -- about 100000 blocks --
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,449,only a 48-bit marker will do.  NB: normal compression/
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,450,decompression do *not* rely on these statistical properties.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,451,They are only important when trying to recover blocks from
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,452,damaged files.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,454,bsPutUChar(0x31);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,455,bsPutUChar(0x41);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,456,bsPutUChar(0x59);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,457,bsPutUChar(0x26);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,458,bsPutUChar(0x53);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,459,bsPutUChar(0x59);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,461,"/* Now the block's CRC, so it is in a known place. */"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,462,bsPutint(blockCRC);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,464,/* Now a single bit indicating randomisation. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,465,if (blockRandomised) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,466,"bsW(1, 1);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,467,nBlocksRandomised++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,468,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,469,"bsW(1, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,472,"/* Finally, block's contents proper. */"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,473,moveToFrontCodeAndSend();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,476,private void endCompression() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,478,"Now another magic 48-bit number, 0x177245385090, to"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,479,"indicate the end of the last block.  (sqrt(pi), if"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,480,"you want to know.  I did want to use e, but it contains"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,481,too much repetition -- 27 18 28 18 28 46 -- for me
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,482,to feel statistically comfortable.  Call me paranoid.)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,484,bsPutUChar(0x17);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,485,bsPutUChar(0x72);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,486,bsPutUChar(0x45);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,487,bsPutUChar(0x38);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,488,bsPutUChar(0x50);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,489,bsPutUChar(0x90);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,491,bsPutint(combinedCRC);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,493,bsFinishedWithStream();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,496,"private void hbAssignCodes (int[] code, char[] length, int minLen,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,497,"int maxLen, int alphaSize) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,498,"int n, vec, i;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,500,vec = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,501,for (n = minLen; n <= maxLen; n++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,502,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,503,if (length[i] == n) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,504,code[i] = vec;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,505,vec++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,508,vec <<= 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,512,private void bsSetStream(OutputStream f) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,513,bsStream = f;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,514,bsLive = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,515,bsBuff = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,516,bytesOut = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,519,private void bsFinishedWithStream() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,520,while (bsLive > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,521,int ch = (bsBuff >> 24);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,522,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,523,bsStream.write(ch); // write 8-bit
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,524,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,525,throw  e;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,527,bsBuff <<= 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,528,bsLive -= 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,529,bytesOut++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,533,"private void bsW(int n, int v) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,534,while (bsLive >= 8) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,535,int ch = (bsBuff >> 24);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,536,try {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,537,bsStream.write(ch); // write 8-bit
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,538,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,539,throw e;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,541,bsBuff <<= 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,542,bsLive -= 8;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,543,bytesOut++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,545,bsBuff |= (v << (32 - bsLive - n));
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,546,bsLive += n;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,549,private void bsPutUChar(int c) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,550,"bsW(8, c);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,553,private void bsPutint(int u) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,554,"bsW(8, (u >> 24) & 0xff);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,555,"bsW(8, (u >> 16) & 0xff);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,556,"bsW(8, (u >>  8) & 0xff);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,557,"bsW(8,  u        & 0xff);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,560,"private void bsPutIntVS(int numBits, int c) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,561,"bsW(numBits, c);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,564,private void sendMTFValues() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,565,char len[][] = new char[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,567,"int v, t, i, j, gs, ge, totc, bt, bc, iter;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,568,"int nSelectors = 0, alphaSize, minLen, maxLen, selCtr;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,569,"int nGroups, nBytes;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,571,alphaSize = nInUse + 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,572,for (t = 0; t < N_GROUPS; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,573,for (v = 0; v < alphaSize; v++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,574,len[t][v] = (char) GREATER_ICOST;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,578,/* Decide how many coding tables to use */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,579,if (nMTF <= 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,580,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,583,if (nMTF < 200) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,584,nGroups = 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,585,} else if (nMTF < 600) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,586,nGroups = 3;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,587,} else if (nMTF < 1200) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,588,nGroups = 4;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,589,} else if (nMTF < 2400) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,590,nGroups = 5;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,591,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,592,nGroups = 6;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,595,/* Generate an initial set of coding tables */ {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,596,"int nPart, remF, tFreq, aFreq;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,598,nPart = nGroups;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,599,remF  = nMTF;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,600,gs = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,601,while (nPart > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,602,tFreq = remF / nPart;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,603,ge = gs - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,604,aFreq = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,605,while (aFreq < tFreq && ge < alphaSize - 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,606,ge++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,607,aFreq += mtfFreq[ge];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,610,if (ge > gs && nPart != nGroups && nPart != 1
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,611,&& ((nGroups - nPart) % 2 == 1)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,612,aFreq -= mtfFreq[ge];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,613,ge--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,616,for (v = 0; v < alphaSize; v++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,617,if (v >= gs && v <= ge) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,618,len[nPart - 1][v] = (char) LESSER_ICOST;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,619,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,620,len[nPart - 1][v] = (char) GREATER_ICOST;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,624,nPart--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,625,gs = ge + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,626,remF -= aFreq;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,630,int[][] rfreq = new int[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,631,int[] fave = new int[N_GROUPS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,632,short[] cost = new short[N_GROUPS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,634,Iterate up to N_ITERS times to improve the tables.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,636,for (iter = 0; iter < N_ITERS; iter++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,637,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,638,fave[t] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,641,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,642,for (v = 0; v < alphaSize; v++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,643,rfreq[t][v] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,647,nSelectors = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,648,totc = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,649,gs = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,650,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,652,/* Set group start & end marks. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,653,if (gs >= nMTF) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,654,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,656,ge = gs + G_SIZE - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,657,if (ge >= nMTF) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,658,ge = nMTF - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,662,Calculate the cost of this group as coded
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,663,by each of the coding tables.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,665,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,666,cost[t] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,669,if (nGroups == 6) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,670,"short cost0, cost1, cost2, cost3, cost4, cost5;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,671,cost0 = cost1 = cost2 = cost3 = cost4 = cost5 = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,672,for (i = gs; i <= ge; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,673,short icv = szptr[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,674,cost0 += len[0][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,675,cost1 += len[1][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,676,cost2 += len[2][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,677,cost3 += len[3][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,678,cost4 += len[4][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,679,cost5 += len[5][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,681,cost[0] = cost0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,682,cost[1] = cost1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,683,cost[2] = cost2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,684,cost[3] = cost3;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,685,cost[4] = cost4;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,686,cost[5] = cost5;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,687,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,688,for (i = gs; i <= ge; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,689,short icv = szptr[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,690,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,691,cost[t] += len[t][icv];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,697,"Find the coding table which is best for this group,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,698,and record its identity in the selector table.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,700,bc = 999999999;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,701,bt = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,702,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,703,if (cost[t] < bc) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,704,bc = cost[t];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,705,bt = t;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,708,totc += bc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,709,fave[bt]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,710,selector[nSelectors] = (char) bt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,711,nSelectors++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,714,Increment the symbol frequencies for the selected table.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,716,for (i = gs; i <= ge; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,717,rfreq[bt][szptr[i]]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,720,gs = ge + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,724,Recompute the tables based on the accumulated frequencies.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,726,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,727,"hbMakeCodeLengths(len[t], rfreq[t], alphaSize, 20);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,731,rfreq = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,732,fave = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,733,cost = null;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,735,if (!(nGroups < 8)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,736,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,738,if (!(nSelectors < 32768 && nSelectors <= (2 + (900000 / G_SIZE)))) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,739,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,743,/* Compute MTF values for the selectors. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,745,char[] pos = new char[N_GROUPS];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,746,"char ll_i, tmp2, tmp;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,747,for (i = 0; i < nGroups; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,748,pos[i] = (char) i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,750,for (i = 0; i < nSelectors; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,751,ll_i = selector[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,752,j = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,753,tmp = pos[j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,754,while (ll_i != tmp) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,755,j++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,756,tmp2 = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,757,tmp = pos[j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,758,pos[j] = tmp2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,760,pos[0] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,761,selectorMtf[i] = (char) j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,765,int[][] code = new int[N_GROUPS][MAX_ALPHA_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,767,/* Assign actual codes for the tables. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,768,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,769,minLen = 32;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,770,maxLen = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,771,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,772,if (len[t][i] > maxLen) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,773,maxLen = len[t][i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,775,if (len[t][i] < minLen) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,776,minLen = len[t][i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,779,if (maxLen > 20) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,780,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,782,if (minLen < 1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,783,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,785,"hbAssignCodes(code[t], len[t], minLen, maxLen, alphaSize);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,788,/* Transmit the mapping table. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,790,boolean[] inUse16 = new boolean[16];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,791,for (i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,792,inUse16[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,793,for (j = 0; j < 16; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,794,if (inUse[i * 16 + j]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,795,inUse16[i] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,800,nBytes = bytesOut;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,801,for (i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,802,if (inUse16[i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,803,"bsW(1, 1);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,804,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,805,"bsW(1, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,809,for (i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,810,if (inUse16[i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,811,for (j = 0; j < 16; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,812,if (inUse[i * 16 + j]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,813,"bsW(1, 1);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,814,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,815,"bsW(1, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,823,/* Now the selectors. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,824,nBytes = bytesOut;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,825,"bsW (3, nGroups);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,826,"bsW (15, nSelectors);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,827,for (i = 0; i < nSelectors; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,828,for (j = 0; j < selectorMtf[i]; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,829,"bsW(1, 1);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,831,"bsW(1, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,834,/* Now the coding tables. */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,835,nBytes = bytesOut;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,837,for (t = 0; t < nGroups; t++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,838,int curr = len[t][0];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,839,"bsW(5, curr);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,840,for (i = 0; i < alphaSize; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,841,while (curr < len[t][i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,842,"bsW(2, 2);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,843,curr++; /* 10 */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,845,while (curr > len[t][i]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,846,"bsW(2, 3);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,847,curr--; /* 11 */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,849,"bsW (1, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,853,"/* And finally, the block data proper */"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,854,nBytes = bytesOut;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,855,selCtr = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,856,gs = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,857,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,858,if (gs >= nMTF) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,859,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,861,ge = gs + G_SIZE - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,862,if (ge >= nMTF) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,863,ge = nMTF - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,865,for (i = gs; i <= ge; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,866,"bsW(len[selector[selCtr]][szptr[i]],"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,867,code[selector[selCtr]][szptr[i]]);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,870,gs = ge + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,871,selCtr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,873,if (!(selCtr == nSelectors)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,874,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,878,private void moveToFrontCodeAndSend () throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,879,"bsPutIntVS(24, origPtr);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,880,generateMTFValues();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,881,sendMTFValues();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,884,private OutputStream bsStream;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,886,"private void simpleSort(int lo, int hi, int d) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,887,"int i, j, h, bigN, hp;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,888,int v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,890,bigN = hi - lo + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,891,if (bigN < 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,892,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,895,hp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,896,while (incs[hp] < bigN) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,897,hp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,899,hp--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,901,for (; hp >= 0; hp--) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,902,h = incs[hp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,904,i = lo + h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,905,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,906,/* copy 1 */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,907,if (i > hi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,908,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,910,v = zptr[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,911,j = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,912,"while (fullGtU(zptr[j - h] + d, v + d)) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,913,zptr[j] = zptr[j - h];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,914,j = j - h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,915,if (j <= (lo + h - 1)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,916,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,919,zptr[j] = v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,920,i++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,922,/* copy 2 */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,923,if (i > hi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,924,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,926,v = zptr[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,927,j = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,928,"while (fullGtU(zptr[j - h] + d, v + d)) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,929,zptr[j] = zptr[j - h];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,930,j = j - h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,931,if (j <= (lo + h - 1)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,932,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,935,zptr[j] = v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,936,i++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,938,/* copy 3 */
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,939,if (i > hi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,940,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,942,v = zptr[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,943,j = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,944,"while (fullGtU(zptr[j - h] + d, v + d)) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,945,zptr[j] = zptr[j - h];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,946,j = j - h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,947,if (j <= (lo + h - 1)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,948,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,951,zptr[j] = v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,952,i++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,954,if (workDone > workLimit && firstAttempt) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,955,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,961,"private void vswap(int p1, int p2, int n) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,962,int temp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,963,while (n > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,964,temp = zptr[p1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,965,zptr[p1] = zptr[p2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,966,zptr[p2] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,967,p1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,968,p2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,969,n--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,973,"private char med3(char a, char b, char c) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,974,char t;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,975,if (a > b) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,976,t = a;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,977,a = b;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,978,b = t;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,980,if (b > c) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,981,t = b;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,982,b = c;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,983,c = t;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,985,if (a > b) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,986,b = a;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,988,return b;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,991,private static class StackElem {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,992,int ll;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,993,int hh;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,994,int dd;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,997,"private void qSort3(int loSt, int hiSt, int dSt) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,998,"int unLo, unHi, ltLo, gtHi, med, n, m;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,999,"int sp, lo, hi, d;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1000,StackElem[] stack = new StackElem[QSORT_STACK_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1001,for (int count = 0; count < QSORT_STACK_SIZE; count++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1002,stack[count] = new StackElem();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1005,sp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1007,stack[sp].ll = loSt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1008,stack[sp].hh = hiSt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1009,stack[sp].dd = dSt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1010,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1012,while (sp > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1013,if (sp >= QSORT_STACK_SIZE) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1014,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1017,sp--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1018,lo = stack[sp].ll;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1019,hi = stack[sp].hh;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1020,d = stack[sp].dd;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1022,if (hi - lo < SMALL_THRESH || d > DEPTH_THRESH) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1023,"simpleSort(lo, hi, d);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1024,if (workDone > workLimit && firstAttempt) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1025,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1027,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1030,"med = med3(block[zptr[lo] + d + 1],"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1031,"block[zptr[hi            ] + d  + 1],"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1032,block[zptr[(lo + hi) >> 1] + d + 1]);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1034,unLo = ltLo = lo;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1035,unHi = gtHi = hi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1037,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1038,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1039,if (unLo > unHi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1040,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1042,n = ((int) block[zptr[unLo] + d + 1]) - med;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1043,if (n == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1044,int temp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1045,temp = zptr[unLo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1046,zptr[unLo] = zptr[ltLo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1047,zptr[ltLo] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1048,ltLo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1049,unLo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1050,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1052,if (n >  0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1053,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1055,unLo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1057,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1058,if (unLo > unHi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1059,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1061,n = ((int) block[zptr[unHi] + d + 1]) - med;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1062,if (n == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1063,int temp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1064,temp = zptr[unHi];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1065,zptr[unHi] = zptr[gtHi];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1066,zptr[gtHi] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1067,gtHi--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1068,unHi--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1069,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1071,if (n <  0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1072,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1074,unHi--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1076,if (unLo > unHi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1077,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1079,int temp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1080,temp = zptr[unLo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1081,zptr[unLo] = zptr[unHi];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1082,zptr[unHi] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1083,unLo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1084,unHi--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1087,if (gtHi < ltLo) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1088,stack[sp].ll = lo;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1089,stack[sp].hh = hi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1090,stack[sp].dd = d + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1091,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1092,continue;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1095,n = ((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo) : (unLo - ltLo);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1096,"vswap(lo, unLo - n, n);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1097,m = ((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi) : (gtHi - unHi);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1098,"vswap(unLo, hi - m + 1, m);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1100,n = lo + unLo - ltLo - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1101,m = hi - (gtHi - unHi) + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1103,stack[sp].ll = lo;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1104,stack[sp].hh = n;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1105,stack[sp].dd = d;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1106,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1108,stack[sp].ll = n + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1109,stack[sp].hh = m - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1110,stack[sp].dd = d + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1111,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1113,stack[sp].ll = m;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1114,stack[sp].hh = hi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1115,stack[sp].dd = d;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1116,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1120,private void mainSort() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1121,"int i, j, ss, sb;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1122,int[] runningOrder = new int[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1123,int[] copy = new int[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1124,boolean[] bigDone = new boolean[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1125,"int c1, c2;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1126,int numQSorted;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1129,"In the various block-sized structures, live data runs"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1130,"from 0 to last+NUM_OVERSHOOT_BYTES inclusive.  First,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1131,set up the overshoot area for block.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1134,"//   if (verbosity >= 4) fprintf ( stderr, ""   sort initialise ...\n"" );"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1135,for (i = 0; i < NUM_OVERSHOOT_BYTES; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1136,block[last + i + 2] = block[(i % (last + 1)) + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1138,for (i = 0; i <= last + NUM_OVERSHOOT_BYTES; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1139,quadrant[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1142,block[0] = (char) (block[last + 1]);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1144,if (last < 4000) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1146,"Use simpleSort(), since the full sorting mechanism"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1147,has quite a large constant overhead.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1149,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1150,zptr[i] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1152,firstAttempt = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1153,workDone = workLimit = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1154,"simpleSort(0, last, 0);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1155,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1156,numQSorted = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1157,for (i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1158,bigDone[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1161,for (i = 0; i <= 65536; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1162,ftab[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1165,c1 = block[0];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1166,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1167,c2 = block[i + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1168,ftab[(c1 << 8) + c2]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1169,c1 = c2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1172,for (i = 1; i <= 65536; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1173,ftab[i] += ftab[i - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1176,c1 = block[1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1177,for (i = 0; i < last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1178,c2 = block[i + 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1179,j = (c1 << 8) + c2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1180,c1 = c2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1181,ftab[j]--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1182,zptr[ftab[j]] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1185,j = ((block[last + 1]) << 8) + (block[1]);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1186,ftab[j]--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1187,zptr[ftab[j]] = last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1190,Now ftab contains the first loc of every small bucket.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1191,"Calculate the running order, from smallest to largest"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1192,big bucket.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1195,for (i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1196,runningOrder[i] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1200,int vv;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1201,int h = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1202,do {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1203,h = 3 * h + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1205,while (h <= 256);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1206,do {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1207,h = h / 3;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1208,for (i = h; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1209,vv = runningOrder[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1210,j = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1211,while ((ftab[((runningOrder[j - h]) + 1) << 8]
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1212,- ftab[(runningOrder[j - h]) << 8]) >
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1213,(ftab[((vv) + 1) << 8] - ftab[(vv) << 8])) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1214,runningOrder[j] = runningOrder[j - h];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1215,j = j - h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1216,if (j <= (h - 1)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1217,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1220,runningOrder[j] = vv;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1222,} while (h != 1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1226,The main sorting loop.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1228,for (i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1231,"Process big buckets, starting with the least full."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1233,ss = runningOrder[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1236,Complete the big bucket [ss] by quicksorting
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1237,"any unsorted small buckets [ss, j].  Hopefully"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1238,previous pointer-scanning phases have already
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1239,"completed many of the small buckets [ss, j], so"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1240,we don't have to sort them at all.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1242,for (j = 0; j <= 255; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1243,sb = (ss << 8) + j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1244,if (!((ftab[sb] & SETMASK) == SETMASK)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1245,int lo = ftab[sb] & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1246,int hi = (ftab[sb + 1] & CLEARMASK) - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1247,if (hi > lo) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1248,"qSort3(lo, hi, 2);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1249,numQSorted += (hi - lo + 1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1250,if (workDone > workLimit && firstAttempt) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1251,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1254,ftab[sb] |= SETMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1259,"The ss big bucket is now done.  Record this fact,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1260,and update the quadrant descriptors.  Remember to
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1261,"update quadrants in the overshoot area too, if"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1262,"necessary.  The ""if (i < 255)"" test merely skips"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1263,"this updating for the last bucket processed, since"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1264,updating for the last bucket is pointless.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1266,bigDone[ss] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1268,if (i < 255) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1269,int bbStart  = ftab[ss << 8] & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1270,int bbSize   = (ftab[(ss + 1) << 8] & CLEARMASK) - bbStart;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1271,int shifts   = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1273,while ((bbSize >> shifts) > 65534) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1274,shifts++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1277,for (j = 0; j < bbSize; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1278,int a2update = zptr[bbStart + j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1279,int qVal = (j >> shifts);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1280,quadrant[a2update] = qVal;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1281,if (a2update < NUM_OVERSHOOT_BYTES) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1282,quadrant[a2update + last + 1] = qVal;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1286,if (!(((bbSize - 1) >> shifts) <= 65535)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1287,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1292,Now scan this big bucket so as to synthesise the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1293,"sorted order for small buckets [t, ss] for all t != ss."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1295,for (j = 0; j <= 255; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1296,copy[j] = ftab[(j << 8) + ss] & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1299,for (j = ftab[ss << 8] & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1300,j < (ftab[(ss + 1) << 8] & CLEARMASK); j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1301,c1 = block[zptr[j]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1302,if (!bigDone[c1]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1303,zptr[copy[c1]] = zptr[j] == 0 ? last : zptr[j] - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1304,copy[c1]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1308,for (j = 0; j <= 255; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1309,ftab[(j << 8) + ss] |= SETMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1315,private void randomiseBlock() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1316,int i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1317,int rNToGo = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1318,int rTPos  = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1319,for (i = 0; i < 256; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1320,inUse[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1323,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1324,if (rNToGo == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1325,rNToGo = (char) rNums[rTPos];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1326,rTPos++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1327,if (rTPos == 512) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1328,rTPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1331,rNToGo--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1332,block[i + 1] ^= ((rNToGo == 1) ? 1 : 0);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1333,// handle 16 bit signed numbers
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1334,block[i + 1] &= 0xFF;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1336,inUse[block[i + 1]] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1340,private void doReversibleTransformation() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1341,int i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1343,workLimit = workFactor * last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1344,workDone = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1345,blockRandomised = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1346,firstAttempt = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1348,mainSort();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1350,if (workDone > workLimit && firstAttempt) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1351,randomiseBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1352,workLimit = workDone = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1353,blockRandomised = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1354,firstAttempt = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1355,mainSort();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1358,origPtr = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1359,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1360,if (zptr[i] == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1361,origPtr = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1362,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1366,if (origPtr == -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1367,panic();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1371,"private boolean fullGtU(int i1, int i2) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1372,int k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1373,"char c1, c2;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1374,"int s1, s2;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1376,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1377,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1378,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1379,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1381,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1382,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1384,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1385,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1386,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1387,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1389,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1390,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1392,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1393,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1394,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1395,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1397,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1398,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1400,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1401,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1402,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1403,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1405,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1406,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1408,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1409,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1410,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1411,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1413,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1414,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1416,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1417,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1418,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1419,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1421,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1422,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1424,k = last + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1426,do {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1427,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1428,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1429,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1430,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1432,s1 = quadrant[i1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1433,s2 = quadrant[i2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1434,if (s1 != s2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1435,return (s1 > s2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1437,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1438,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1440,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1441,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1442,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1443,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1445,s1 = quadrant[i1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1446,s2 = quadrant[i2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1447,if (s1 != s2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1448,return (s1 > s2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1450,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1451,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1453,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1454,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1455,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1456,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1458,s1 = quadrant[i1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1459,s2 = quadrant[i2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1460,if (s1 != s2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1461,return (s1 > s2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1463,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1464,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1466,c1 = block[i1 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1467,c2 = block[i2 + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1468,if (c1 != c2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1469,return (c1 > c2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1471,s1 = quadrant[i1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1472,s2 = quadrant[i2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1473,if (s1 != s2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1474,return (s1 > s2);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1476,i1++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1477,i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1479,if (i1 > last) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1480,i1 -= last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1481,i1--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1483,if (i2 > last) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1484,i2 -= last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1485,i2--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1488,k -= 4;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1489,workDone++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1490,} while (k >= 0);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1492,return false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1496,Knuth's increments seem to work better
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1497,than Incerpi-Sedgewick here.  Possibly
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1498,because the number of elems to sort is
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1499,"usually small, typically <= 20."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1501,"private int[] incs = { 1, 4, 13, 40, 121, 364, 1093, 3280,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1502,"9841, 29524, 88573, 265720,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1503,"797161, 2391484 };"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1505,private void allocateCompressStructures () {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1506,int n = baseBlockSize * blockSize100k;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1507,block = new char[(n + 1 + NUM_OVERSHOOT_BYTES)];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1508,quadrant = new int[(n + NUM_OVERSHOOT_BYTES)];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1509,zptr = new int[n];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1510,ftab = new int[65537];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1512,if (block == null || quadrant == null || zptr == null
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1513,|| ftab == null) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1514,//int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1515,"//compressOutOfMemory ( totalDraw, n );"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1519,The back end needs a place to store the MTF values
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1520,whilst it calculates the coding tables.  We could
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1521,"put them in the zptr array.  However, these values"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1522,"will fit in a short, so we overlay szptr at the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1523,"start of zptr, in the hope of reducing the number"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1524,of cache misses induced by the multiple traversals
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1525,of the MTF values when calculating coding tables.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1526,Seems to improve compression speed by about 1%.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1528,//    szptr = zptr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1531,szptr = new short[2 * n];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1534,private void generateMTFValues() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1535,char[] yy = new char[256];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1536,"int  i, j;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1537,char tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1538,char tmp2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1539,int zPend;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1540,int wr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1541,int EOB;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1543,makeMaps();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1544,EOB = nInUse + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1546,for (i = 0; i <= EOB; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1547,mtfFreq[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1550,wr = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1551,zPend = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1552,for (i = 0; i < nInUse; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1553,yy[i] = (char) i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1557,for (i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1558,char ll_i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1560,ll_i = unseqToSeq[block[zptr[i]]];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1562,j = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1563,tmp = yy[j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1564,while (ll_i != tmp) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1565,j++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1566,tmp2 = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1567,tmp = yy[j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1568,yy[j] = tmp2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1570,yy[0] = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1572,if (j == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1573,zPend++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1574,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1575,if (zPend > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1576,zPend--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1577,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1578,switch (zPend % 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1579,case 0:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1580,szptr[wr] = (short) RUNA;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1581,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1582,mtfFreq[RUNA]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1583,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1584,case 1:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1585,szptr[wr] = (short) RUNB;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1586,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1587,mtfFreq[RUNB]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1588,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1590,if (zPend < 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1591,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1593,zPend = (zPend - 2) / 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1595,zPend = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1597,szptr[wr] = (short) (j + 1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1598,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1599,mtfFreq[j + 1]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1603,if (zPend > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1604,zPend--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1605,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1606,switch (zPend % 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1607,case 0:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1608,szptr[wr] = (short) RUNA;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1609,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1610,mtfFreq[RUNA]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1611,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1612,case 1:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1613,szptr[wr] = (short) RUNB;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1614,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1615,mtfFreq[RUNB]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1616,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1618,if (zPend < 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1619,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1621,zPend = (zPend - 2) / 2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1625,szptr[wr] = (short) EOB;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1626,wr++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1627,mtfFreq[EOB]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1629,nMTF = wr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,20,package org.apache.commons.compress.compressors.bzip2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,23,"* This package is based on the work done by Keiron Liddle, Aftex Software"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,24,* <keiron@aftexsw.com> to whom the Ant project is very grateful for his great
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,25,* code.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,29,"* Base class for both the compress and decompress classes. Holds common arrays,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,30,* and static data.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,32,"* @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,34,interface BZip2Constants {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,36,int baseBlockSize = 100000;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,37,int MAX_ALPHA_SIZE = 258;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,38,int MAX_CODE_LEN = 23;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,39,int RUNA = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,40,int RUNB = 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,41,int N_GROUPS = 6;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,42,int G_SIZE = 50;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,43,int N_ITERS = 4;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,44,int MAX_SELECTORS = (2 + (900000 / G_SIZE));
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,45,int NUM_OVERSHOOT_BYTES = 20;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,47,int[] rNums = {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,48,"619, 720, 127, 481, 931, 816, 813, 233, 566, 247,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,49,"985, 724, 205, 454, 863, 491, 741, 242, 949, 214,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,50,"733, 859, 335, 708, 621, 574, 73, 654, 730, 472,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,51,"419, 436, 278, 496, 867, 210, 399, 680, 480, 51,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,52,"878, 465, 811, 169, 869, 675, 611, 697, 867, 561,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,53,"862, 687, 507, 283, 482, 129, 807, 591, 733, 623,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,54,"150, 238, 59, 379, 684, 877, 625, 169, 643, 105,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,55,"170, 607, 520, 932, 727, 476, 693, 425, 174, 647,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,56,"73, 122, 335, 530, 442, 853, 695, 249, 445, 515,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,57,"909, 545, 703, 919, 874, 474, 882, 500, 594, 612,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,58,"641, 801, 220, 162, 819, 984, 589, 513, 495, 799,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,59,"161, 604, 958, 533, 221, 400, 386, 867, 600, 782,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,60,"382, 596, 414, 171, 516, 375, 682, 485, 911, 276,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,61,"98, 553, 163, 354, 666, 933, 424, 341, 533, 870,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,62,"227, 730, 475, 186, 263, 647, 537, 686, 600, 224,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,63,"469, 68, 770, 919, 190, 373, 294, 822, 808, 206,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,64,"184, 943, 795, 384, 383, 461, 404, 758, 839, 887,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,65,"715, 67, 618, 276, 204, 918, 873, 777, 604, 560,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,66,"951, 160, 578, 722, 79, 804, 96, 409, 713, 940,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,67,"652, 934, 970, 447, 318, 353, 859, 672, 112, 785,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,68,"645, 863, 803, 350, 139, 93, 354, 99, 820, 908,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,69,"609, 772, 154, 274, 580, 184, 79, 626, 630, 742,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,70,"653, 282, 762, 623, 680, 81, 927, 626, 789, 125,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,71,"411, 521, 938, 300, 821, 78, 343, 175, 128, 250,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,72,"170, 774, 972, 275, 999, 639, 495, 78, 352, 126,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,73,"857, 956, 358, 619, 580, 124, 737, 594, 701, 612,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,74,"669, 112, 134, 694, 363, 992, 809, 743, 168, 974,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,75,"944, 375, 748, 52, 600, 747, 642, 182, 862, 81,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,76,"344, 805, 988, 739, 511, 655, 814, 334, 249, 515,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,77,"897, 955, 664, 981, 649, 113, 974, 459, 893, 228,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,78,"433, 837, 553, 268, 926, 240, 102, 654, 459, 51,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,79,"686, 754, 806, 760, 493, 403, 415, 394, 687, 700,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,80,"946, 670, 656, 610, 738, 392, 760, 799, 887, 653,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,81,"978, 321, 576, 617, 626, 502, 894, 679, 243, 440,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,82,"680, 879, 194, 572, 640, 724, 926, 56, 204, 700,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,83,"707, 151, 457, 449, 797, 195, 791, 558, 945, 679,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,84,"297, 59, 87, 824, 713, 663, 412, 693, 342, 606,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,85,"134, 108, 571, 364, 631, 212, 174, 643, 304, 329,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,86,"343, 97, 430, 751, 497, 314, 983, 374, 822, 928,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,87,"140, 206, 73, 263, 980, 736, 876, 478, 430, 305,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,88,"170, 514, 364, 692, 829, 82, 855, 953, 676, 246,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,89,"369, 970, 294, 750, 807, 827, 150, 790, 288, 923,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,90,"804, 378, 215, 828, 592, 281, 565, 555, 710, 82,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,91,"896, 831, 547, 261, 524, 462, 293, 465, 502, 56,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,92,"661, 821, 976, 991, 658, 869, 905, 758, 745, 193,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,93,"768, 550, 608, 933, 378, 286, 215, 979, 792, 961,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,94,"61, 688, 793, 644, 986, 403, 106, 366, 905, 644,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,95,"372, 567, 466, 434, 645, 210, 389, 550, 919, 135,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,96,"780, 773, 635, 389, 707, 100, 626, 958, 165, 504,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,97,"920, 176, 193, 713, 857, 265, 203, 50, 668, 108,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,98,"645, 990, 626, 197, 510, 357, 358, 850, 858, 364,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,99,"936, 638"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,19,package org.apache.commons.compress.compressors.bzip2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,22,"* This package is based on the work done by Keiron Liddle, Aftex Software"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,23,* <keiron@aftexsw.com> to whom the Ant project is very grateful for his great
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,24,* code.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,28,* A simple class the hold and calculate the CRC for sanity checking of the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,29,* data.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,31,"* @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,33,class CRC {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,34,"private static int[] CRC32_TABLE = new int[] { 0x00000000, 0x04c11db7,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,35,"0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b, 0x1a864db2,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,36,"0x1e475005, 0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,37,"0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd, 0x4c11db70,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,38,"0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,39,"0x569796c2, 0x52568b75, 0x6a1936c8, 0x6ed82b7f, 0x639b0da6,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,40,"0x675a1011, 0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,41,"0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039, 0x8b27c03c,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,42,"0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5, 0xbe2b5b58, 0xbaea46ef,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,43,"0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,44,"0xa06c0b5d, 0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,45,"0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95, 0xf23a8028,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,46,"0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1, 0xe13ef6f4, 0xe5ffeb43,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,47,"0xe8bccd9a, 0xec7dd02d, 0x34867077, 0x30476dc0, 0x3d044b19,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,48,"0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,49,"0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,50,"0x054bf6a4, 0x0808d07d, 0x0cc9cdca, 0x7897ab07, 0x7c56b6b0,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,51,"0x71159069, 0x75d48dde, 0x6b93dddb, 0x6f52c06c, 0x6211e6b5,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,52,"0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,53,"0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba, 0xaca5c697,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,54,"0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,55,"0xb6238b25, 0xb2e29692, 0x8aad2b2f, 0x8e6c3698, 0x832f1041,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,56,"0x87ee0df6, 0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,57,"0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e, 0xf3b06b3b,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,58,"0xf771768c, 0xfa325055, 0xfef34de2, 0xc6bcf05f, 0xc27dede8,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,59,"0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34, 0xdc3abded,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,60,"0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,61,"0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb, 0x4f040d56,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,62,"0x4bc510e1, 0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,63,"0x558240e4, 0x51435d53, 0x251d3b9e, 0x21dc2629, 0x2c9f00f0,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,64,"0x285e1d47, 0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,65,"0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff, 0x1011a0fa,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,66,"0x14d0bd4d, 0x19939b94, 0x1d528623, 0xf12f560e, 0xf5ee4bb9,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,67,"0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,68,"0xef68060b, 0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,69,"0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3, 0xbd3e8d7e,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,70,"0xb9ff90c9, 0xb4bcb610, 0xb07daba7, 0xae3afba2, 0xaafbe615,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,71,"0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6, 0x9ff77d71, 0x92b45ba8,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,72,"0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,73,"0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,74,"0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c, 0x7b827d21, 0x7f436096,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,75,"0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a, 0x61043093,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,76,"0x65c52d24, 0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,77,"0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec, 0x3793a651,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,78,"0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,79,"0x2d15ebe3, 0x29d4f654, 0xc5a92679, 0xc1683bce, 0xcc2b1d17,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,80,"0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,81,"0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,82,"0xf464a0aa, 0xf9278673, 0xfde69bc4, 0x89b8fd09, 0x8d79e0be,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,83,"0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,84,"0x97ffad0c, 0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,85,"0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4 };"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,87,private int m_globalCrc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,89,protected CRC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,90,initialiseCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,93,int getFinalCRC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,94,return ~m_globalCrc;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,97,void initialiseCRC() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,98,m_globalCrc = 0xffffffff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,101,void updateCRC(final int inCh) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,102,int temp = (m_globalCrc >> 24) ^ inCh;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,103,if (temp < 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,104,temp = 256 + temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,106,m_globalCrc = (m_globalCrc << 8) ^ CRC32_TABLE[temp];
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,19,package org.apache.commons.compress.compressors.gzip;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,23,import java.util.zip.GZIPInputStream;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,25,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,27,public class GzipCompressorInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,29,private final GZIPInputStream in;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,31,public GzipCompressorInputStream(InputStream inputStream) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,32,in = new GZIPInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,35,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,36,return in.read();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,19,package org.apache.commons.compress.compressors.gzip;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,23,import java.util.zip.GZIPOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,25,import org.apache.commons.compress.compressors.CompressorOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,27,public class GzipCompressorOutputStream extends CompressorOutputStream {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,29,private final GZIPOutputStream out;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,31,public GzipCompressorOutputStream( final OutputStream outputStream ) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,32,out = new GZIPOutputStream(outputStream);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,35,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,36,out.write(b);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,39,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,40,out.close();
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,19,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,22,public final class CompressUtils {
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,25,* Compares one byte array to another
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,26,* @param source- the array to compare to
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,27,* @param headerBytes - the bytearray match
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,29,"public static boolean compareByteArrays(byte[] source, byte[] match) {"
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,30,int i = 0;
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,31,while(source.length < i || i < match.length ) {
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,32,if(source[i] != match[i]) {
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,33,return false;
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,35,i++;
True,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,src/main/java/org/apache/commons/compress/utils/CompressUtils.java,37,return true;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,19,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,23,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,25,public final class IOUtils {
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,28,* Copies the content of a InputStream into an OutputStream
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,30,* @param input
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,31,*            the InputStream to copy
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,32,* @param output
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,33,*            the target Stream
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,34,* @throws IOException
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,35,*             if the streams are interrupted
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,37,"public static void copy(final InputStream input, final OutputStream output) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,38,final byte[] buffer = new byte[8024];
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,39,int n = 0;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,40,while (-1 != (n = input.read(buffer))) {
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,41,"output.write(buffer, 0, n);"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,45,"public static void copy(final InputStream input, final OutputStream output, int buffersize) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,46,final byte[] buffer = new byte[buffersize];
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,47,int n = 0;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,48,while (-1 != (n = input.read(buffer))) {
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,49,"output.write(buffer, 0, n);"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,19,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,21,import java.util.Map;
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,23,import org.apache.commons.compress.archivers.ArchiveException;
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,25,public final class ReflectionUtils {
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,27,"public static void registerClazz(Map map, String name, Class type, Class clazz) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,28,if (type.isAssignableFrom(clazz) && !(clazz.isInterface())) {
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,29,"map.put(name, clazz);"
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,30,} else {
True,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,src/main/java/org/apache/commons/compress/utils/ReflectionUtils.java,31,"throw new ArchiveException(""Archive does not implement the "" + type + "" interface."");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,19,package org.apache.commons.compress.archivers;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,21,import java.io.BufferedInputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,22,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,23,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,24,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,25,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,26,import java.io.OutputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,28,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,30,import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,31,import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,32,import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,33,import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,34,import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,35,import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,36,import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,37,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,38,import org.apache.commons.compress.compressors.CompressorOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,39,import org.apache.commons.compress.compressors.CompressorStreamFactory;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,40,import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,41,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,43,public final class CompressTestCase extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,45,private File dir;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,47,protected void setUp() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,48,"dir = File.createTempFile(""dir"", """");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,49,dir.delete();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,50,dir.mkdir();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,53,protected void tearDown() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,54,dir.delete();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,55,dir = null;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,59,public void testGzipCreation()  throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,60,"final File output = new File(dir, ""bla.gz"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,61,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,62,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,63,"CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(""gz"", out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,64,"IOUtils.copy(new FileInputStream(file1), cos);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,65,cos.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,68,public void testGzipUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,69,"final File output = new File(dir, ""bla-entpackt.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,70,"final File input = new File(getClass().getClassLoader().getResource(""bla.tgz"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,71,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,72,"final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(""gz"", is);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,73,"IOUtils.copy(in, new FileOutputStream(output));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,74,in.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,77,public void testBzipCreation()  throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,78,"final File output = new File(dir, ""bla.txt.bz2"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,79,System.out.println(dir);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,80,"final File file1 = new File(getClass().getClassLoader().getResource(""test.txt"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,81,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,82,"CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(""bzip2"", out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,83,"IOUtils.copy(new FileInputStream(file1), cos);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,84,cos.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,87,public void testBzip2Unarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,88,"final File output = new File(dir, ""test-entpackt.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,89,System.out.println(dir);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,90,"final File input = new File(getClass().getClassLoader().getResource(""bla.txt.bz2"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,91,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,92,"//final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(""bzip2"", is);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,93,final CompressorInputStream in = new BZip2CompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,94,"IOUtils.copy(in, new FileOutputStream(output));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,95,in.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,98,public void testJarArchiveCreation() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,99,"final File output = new File(dir, ""bla.jar"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,101,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,102,"final File file2 = new File(getClass().getClassLoader().getResource(""test2.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,104,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,106,"final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""jar"", out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,108,"os.putArchiveEntry(new ZipArchiveEntry(""testdata/test1.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,109,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,110,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,112,"os.putArchiveEntry(new ZipArchiveEntry(""testdata/test2.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,113,"IOUtils.copy(new FileInputStream(file2), os);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,114,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,116,os.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,119,public void testJarUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,120,"final File input = new File(getClass().getClassLoader().getResource(""bla.jar"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,121,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,122,"final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(""jar"", is);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,124,ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,125,"File o = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,126,o.getParentFile().mkdirs();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,127,OutputStream out = new FileOutputStream(o);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,128,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,129,out.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,131,entry = (ZipArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,132,"o = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,133,o.getParentFile().mkdirs();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,134,out = new FileOutputStream(o);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,135,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,136,out.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,138,entry = (ZipArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,139,"o = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,140,o.getParentFile().mkdirs();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,141,out = new FileOutputStream(o);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,142,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,143,out.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,145,in.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,149,public void testDetection() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,150,final ArchiveStreamFactory factory = new ArchiveStreamFactory();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,152,final ArchiveInputStream ar = factory.createArchiveInputStream(
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,153,new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,154,"new File(getClass().getClassLoader().getResource(""bla.ar"").getFile()))));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,155,assertTrue(ar instanceof ArArchiveInputStream);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,157,final ArchiveInputStream tar = factory.createArchiveInputStream(
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,158,new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,159,"new File(getClass().getClassLoader().getResource(""bla.tar"").getFile()))));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,160,assertTrue(tar instanceof TarArchiveInputStream);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,162,final ArchiveInputStream zip = factory.createArchiveInputStream(
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,163,new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,164,"new File(getClass().getClassLoader().getResource(""bla.zip"").getFile()))));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,165,assertTrue(zip instanceof ZipArchiveInputStream);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,167,final ArchiveInputStream jar = factory.createArchiveInputStream(
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,168,new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,169,"new File(getClass().getClassLoader().getResource(""bla.jar"").getFile()))));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,170,assertTrue(jar instanceof JarArchiveInputStream);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,172,//		final ArchiveInputStream tgz = factory.createArchiveInputStream(
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,173,//				new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,174,"//						new File(getClass().getClassLoader().getResource(""bla.tgz"").getFile()))));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,175,//		assertTrue(tgz instanceof TarArchiveInputStream);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,179,public void testArArchiveCreation() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,180,"final File output = new File(dir, ""bla.ar"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,182,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,183,"final File file2 = new File(getClass().getClassLoader().getResource(""test2.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,185,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,186,"final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""ar"", out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,187,"os.putArchiveEntry(new ArArchiveEntry(""test1.xml"", file1.length()));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,188,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,189,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,191,"os.putArchiveEntry(new ArArchiveEntry(""test2.xml"", file2.length()));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,192,"IOUtils.copy(new FileInputStream(file2), os);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,193,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,195,os.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,198,public void testArUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,199,"final File output = new File(dir, ""bla.ar"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,201,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,202,"final File file2 = new File(getClass().getClassLoader().getResource(""test2.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,204,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,205,"final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""ar"", out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,206,"os.putArchiveEntry(new ArArchiveEntry(""test1.xml"", file1.length()));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,207,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,208,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,210,"os.putArchiveEntry(new ArArchiveEntry(""test2.xml"", file2.length()));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,211,"IOUtils.copy(new FileInputStream(file2), os);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,212,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,213,os.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,216,// UnArArchive Operation
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,217,final File input = output;
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,218,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,219,"final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(""ar"", is);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,220,final ArArchiveEntry entry = (ArArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,222,"File target = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,223,final OutputStream out = new FileOutputStream(target);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,225,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,227,out.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,228,in.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,231,public void testZipArchiveCreation() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,233,"final File output = new File(dir, ""bla.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,235,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,236,"final File file2 = new File(getClass().getClassLoader().getResource(""test2.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,238,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,240,"final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""zip"", out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,242,"os.putArchiveEntry(new ZipArchiveEntry(""testdata/test1.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,243,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,244,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,246,"os.putArchiveEntry(new ZipArchiveEntry(""testdata/test2.xml""));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,247,"IOUtils.copy(new FileInputStream(file2), os);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,248,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,250,os.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,253,public void testTarArchiveCreation() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,255,"final File output = new File(dir, ""bla.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,257,"final File file1 = new File(getClass().getClassLoader().getResource(""test1.xml"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,259,final OutputStream out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,261,"final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""tar"", out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,263,"final TarArchiveEntry entry = new TarArchiveEntry(""testdata/test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,264,entry.setModTime(0);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,265,entry.setSize(file1.length());
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,266,entry.setUserID(0);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,267,entry.setGroupID(0);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,268,"entry.setUserName(""avalon"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,269,"entry.setGroupName(""excalibur"");"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,270,entry.setMode(0100000);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,272,os.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,273,"IOUtils.copy(new FileInputStream(file1), os);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,275,os.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,276,os.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,279,public void testZipUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,281,"final File input = new File(getClass().getClassLoader().getResource(""bla.zip"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,283,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,284,"final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(""zip"", is);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,286,final ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,287,"final OutputStream out = new FileOutputStream(new File(dir, entry.getName()));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,289,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,291,out.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,292,in.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,295,public void testTarUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,296,"final File input = new File(getClass().getClassLoader().getResource(""bla.tar"").getFile());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,297,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,298,"final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(""tar"", is);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,299,final TarArchiveEntry entry = (TarArchiveEntry)in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,300,"final OutputStream out = new FileOutputStream(new File(dir, entry.getName()));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,301,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,302,out.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,303,in.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,306,//  public void testZipUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,307,//        ZipInputStream zip =
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,308,"//            new ZipInputStream(new FileInputStream(""C:\\dev\\sources\\compress\\testdata\\bla.zip""));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,309,//        Iterator iterator = zip.getEntryIterator();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,310,//        while (iterator.hasNext()) {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,311,//            ArchiveEntry entry = (ArchiveEntry) iterator.next();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,312,"//            OutputStream output = new FileOutputStream(""testdata\\blub\\"" + entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,313,"//            IOUtils.copy(zip, output);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,315,//        zip.close();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,319,//	public void xtestFactoryUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,320,"//		CompressUtils.unpack(new FileInputStream(""bla.tgz""), new File(""output""));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,324,//	public void xtestArUnarchive() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,325,"//		ArchiveInputStream ar = new ArArchiveInputStream(new FileInputStream(""bla.tgz""));"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,326,//		Iterator iterator = ar.getEntryIterator();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,327,//		while(iterator.hasNext()) {
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,328,//			ArchiveEntry entry = (ArchiveEntry) iterator.next();
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,329,//			OutputStream output = new FileOutputStream(entry.getName());
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,330,"//			IOUtils.copy(ar, output);"
True,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,src/test/java/org/apache/commons/compress/archivers/CompressTestCase.java,332,//		ar.close();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,19,package org.apache.commons.compress.archivers.memory;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,21,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,23,public final class MemoryArchiveEntry implements ArchiveEntry {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,25,private final String name;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,27,public MemoryArchiveEntry( final String pName ) {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,28,name = pName;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,31,public String getName() {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,32,return name;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,35,public long getSize() {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,36,// TODO Auto-generated method stub
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java,37,return 0;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,19,package org.apache.commons.compress.archivers.memory;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,21,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,23,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,24,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,26,public final class MemoryArchiveInputStream extends ArchiveInputStream {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,28,private final String[] filenames;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,29,private final String[] content;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,30,private int p;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,32,public MemoryArchiveInputStream( final String[][] pFiles ) {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,33,filenames = new String[pFiles.length];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,34,content = new String[pFiles.length];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,36,for (int i = 0; i < pFiles.length; i++) {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,37,String[] nameAndContent = pFiles[i];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,38,filenames[i] = nameAndContent[0];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,39,content[i] = nameAndContent[1];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,41,p = 0;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,44,public ArchiveEntry getNextEntry() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,45,if (p >= filenames.length) {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,46,return null;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,49,return new MemoryArchiveEntry(filenames[p]);
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,52,public String readString() {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,53,return content[p++];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,56,public int read() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,57,return 0;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,1,package org.apache.commons.compress.archivers.memory;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,3,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,5,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,7,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,9,public final class MemoryArchiveTestCase extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,11,public void testReading() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,13,final MemoryArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,14,"{ ""test1"",     ""content1"" },"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,15,"{ ""test2"",     ""content2"" },"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,18,final ArchiveEntry entry1 = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,19,assertNotNull(entry1);
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,20,"assertEquals(""test1"", entry1.getName());"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,21,final String content1 = is.readString();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,22,"assertEquals(""content1"", content1);"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,24,final ArchiveEntry entry2 = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,25,assertNotNull(entry2);
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,26,"assertEquals(""test2"", entry2.getName());"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,27,final String content2 = is.readString();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,28,"assertEquals(""content2"", content2);"
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,30,final ArchiveEntry entry3 = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java,31,assertNull(entry3);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,19,package org.apache.commons.compress.changes;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,21,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,23,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,25,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,26,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,27,import org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,29,public final class ChangeSetTestCase extends TestCase {
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,31,private void apply( final ChangeSet cs ) throws IOException {
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,33,final ArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,34,"{ ""test1"",      """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,35,"{ ""test2"",      """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,36,"{ ""dir1/test1"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,37,"{ ""dir1/test2"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,38,"{ ""dir2/test1"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,39,"{ ""dir2/test2"", """" }"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,42,while(true) {
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,43,final ArchiveEntry entry = is.getNextEntry();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,45,if (entry == null) {
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,46,break;
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,49,"// delete, new name, new content"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,4,package org.apache.commons.compress.changes;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,6,import java.io.File;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,7,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,8,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,9,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,11,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,13,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,14,import org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,15,import org.apache.commons.compress.archivers.*;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,17,* @author Cy
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,20,public class ChangeWorkerTest extends TestCase {
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,22,final ArchiveInputStream is = null;
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,24,/* (non-Javadoc)
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,25,* @see junit.framework.TestCase#setUp()
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,27,protected void setUp() throws Exception {
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,28,super.setUp();
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,29,final ArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,30,"{ ""test1"",      """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,31,"{ ""test2"",      """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,32,"{ ""dir1/test1"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,33,"{ ""dir1/test2"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,34,"{ ""dir2/test1"", """" },"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,35,"{ ""dir2/test2"", """" }"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,39,/* (non-Javadoc)
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,40,* @see junit.framework.TestCase#tearDown()
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,42,protected void tearDown() throws Exception {
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,43,super.tearDown();
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,47,"* Test method for {@link org.apache.commons.compress.changes.ChangeWorker#perform(org.apache.commons.compress.changes.ChangeSet, java.io.InputStream, java.io.OutputStream)}."
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,49,public void testPerform() throws Exception {
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,50,ChangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,51,"changes.delete(""test2.xml"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,53,"final File input = new File(getClass().getClassLoader().getResource(""bla.zip"").getFile());"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,54,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,55,"ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(""zip"", is);"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,57,"File temp = File.createTempFile(""test"", "".zip"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,58,"ArchiveOutputStream out = new ArchiveStreamFactory().createArchiveOutputStream(""zip"", new FileOutputStream(temp));"
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,60,System.out.println(temp.getAbsolutePath());
True,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,src/test/java/org/apache/commons/compress/changes/ChangeWorkerTest.java,61,"ChangeWorker.perform(changes, ais, out);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,30,import java.net.URI;
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,31,import java.net.URL;
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,74,rotected File getFile(String path) {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,75,"eturn new File(""src/test/resources"", path);"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,76,public static File getFile(String path) throws IOException {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,77,URL url = AbstractTestCase.class.getClassLoader().getResource(path);
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,78,if (url == null) {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,79,"throw new FileNotFoundException(""couldn't find "" + path);"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,81,URI uri = null;
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,82,try {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,83,uri = url.toURI();
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,84,} catch (java.net.URISyntaxException ex) {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,85,throw new IOException(ex);
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,87,return new File(uri);
False,src/test/java/org/apache/commons/compress/ChainingTestCase.java,src/test/java/org/apache/commons/compress/ChainingTestCase.java,33,"ile file = new File(""src/test/resources/bla.tgz"");"
True,src/test/java/org/apache/commons/compress/ChainingTestCase.java,src/test/java/org/apache/commons/compress/ChainingTestCase.java,33,"File file = getFile(""bla.tgz"");"
False,src/test/java/org/apache/commons/compress/ChainingTestCase.java,src/test/java/org/apache/commons/compress/ChainingTestCase.java,42,"ile file = new File(""src/test/resources/bla.tar.bz2"");"
True,src/test/java/org/apache/commons/compress/ChainingTestCase.java,src/test/java/org/apache/commons/compress/ChainingTestCase.java,42,"File file = getFile(""bla.tar.bz2"");"
False,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,24,mport java.io.FileNotFoundException;
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,24,import java.io.IOException;
False,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,41,ublic void testDetectionNotArchive() throws FileNotFoundException {
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,41,public void testDetectionNotArchive() throws IOException {
False,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,86,"hrows ArchiveException, FileNotFoundException {"
False,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,87,inal URL rsc = classLoader.getResource(resource);
False,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,88,"ssertNotNull(""Could not find resource ""+resource,rsc);"
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,86,"throws ArchiveException, IOException {"
False,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,91,ew File(rsc.getFile()))));
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,89,getFile(resource))));
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,21,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,24,mport java.io.FileNotFoundException;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,26,import java.io.IOException;
False,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,57,"hrows CompressorException, FileNotFoundException {"
False,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,59,inal URL rsc = classLoader.getResource(resource);
False,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,60,"ssertNotNull(""Could not find resource ""+resource,rsc);"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,59,"throws CompressorException, IOException {"
False,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,63,ew File(rsc.getFile()))));
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,62,getFile(resource))));
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,65,"RL resource = classLoader.getResource(""longpath"");"
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,66,"ssertNotNull(""Cannot find 'longpath' resource"",resource);"
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,67,ile arcdir =new File(resource.getFile());
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,65,"File arcdir = getFile(""longpath"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,21,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,23,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,24,mport java.net.URL;
False,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,31,"RL tar = getClass().getResource(""/oldgnu_sparse.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,32,ile file = new File(new URI(tar.toString()));
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,31,"File file = getFile(""oldgnu_sparse.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,21,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,28,mport java.io.File;
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,32,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,33,mport java.net.URL;
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,81,"RL tar = getClass().getResource(""/simple-aix-native-tar.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,84,n = new TarArchiveInputStream(new FileInputStream(new File(new URI(tar.toString()))));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,81,"in = new TarArchiveInputStream(new FileInputStream(getFile(""simple-aix-native-tar.tar"")));"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,100,"atePriorToEpoch(""/preepoch-star.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,97,"datePriorToEpoch(""preepoch-star.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,106,"atePriorToEpoch(""/preepoch-posix.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,103,"datePriorToEpoch(""preepoch-posix.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,110,RL tar = getClass().getResource(archive);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,113,n = new TarArchiveInputStream(new FileInputStream(new File(new URI(tar.toString()))));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,109,in = new TarArchiveInputStream(new FileInputStream(getFile(archive)));
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,21,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,24,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,25,mport java.net.URISyntaxException;
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,26,mport java.net.URL;
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,33,"hrows IOException, URISyntaxException {"
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,34,"RL zip = getClass().getResource(""/password-encrypted.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,35,ile file = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,32,throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,33,"File file = getFile(""password-encrypted.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,56,"hrows IOException, URISyntaxException {"
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,57,"RL zip = getClass().getResource(""/password-encrypted.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,58,ile file = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,54,throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,55,"File file = getFile(""password-encrypted.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,21,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,24,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,25,mport java.net.URISyntaxException;
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,26,mport java.net.URL;
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,69,"ublic void testRead7ZipMultiVolumeArchiveForStream() throws IOException,"
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,70,RISyntaxException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,68,public void testRead7ZipMultiVolumeArchiveForStream() throws IOException {
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,72,"RL zip = getClass().getResource(""/apache-maven-2.2.1.zip.001"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,73,ileInputStream archive = new FileInputStream(
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,74,ew File(new URI(zip.toString())));
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,70,FileInputStream archive =
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,71,"new FileInputStream(getFile(""apache-maven-2.2.1.zip.001""));"
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,117,ublic void testRead7ZipMultiVolumeArchiveForFile()
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,118,hrows URISyntaxException {
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,119,"RL zip = getClass().getResource(""/apache-maven-2.2.1.zip.001"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,120,ile file = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,114,public void testRead7ZipMultiVolumeArchiveForFile() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,115,"File file = getFile(""apache-maven-2.2.1.zip.001"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,21,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,26,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,28,mport java.net.URL;
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,90,"RL zip = getClass().getResource(""/utf8-7zip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,91,ile archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,90,"File archive = getFile(""utf8-7zip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,105,"RL zip = getClass().getResource(""/utf8-7zip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,107,ew FileInputStream(new File(new URI(zip.toString())));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,105,"new FileInputStream(getFile(""utf8-7zip-test.zip""));"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,126,"RL zip = getClass().getResource(""/utf8-winzip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,127,ile archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,124,"File archive = getFile(""utf8-winzip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,153,"RL zip = getClass().getResource(""/utf8-winzip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,155,ew FileInputStream(new File(new URI(zip.toString())));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,151,"new FileInputStream(getFile(""utf8-winzip-test.zip""));"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,207,"RL zip = getClass().getResource(""/utf8-7zip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,208,ile archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,203,"File archive = getFile(""utf8-7zip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,220,"RL zip = getClass().getResource(""/utf8-7zip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,222,ew FileInputStream(new File(new URI(zip.toString())));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,216,"new FileInputStream(getFile(""utf8-7zip-test.zip""));"
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,24,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,25,mport java.net.URL;
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,32,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,90,"RL zip = getClass().getResource(""/COMPRESS-210_unix_time_zip_test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,91,ile archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,89,"File archive = getFile(""COMPRESS-210_unix_time_zip_test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,25,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,26,mport java.net.URL;
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,29,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,49,"RL zip = getClass().getResource(""/COMPRESS-211_uid_gid_zip_test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,50,ile archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,48,"File archive = getFile(""COMPRESS-211_uid_gid_zip_test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,21,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,38,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,39,mport java.net.URL;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2323,rivate static File getFile(String name) throws Throwable {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2324,RL url = Zip64SupportIT.class.getResource(name);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2325,ssumeNotNull(url);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2326,ile file = new File(new URI(url.toString()));
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2327,ssumeTrue(file.exists());
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2328,eturn file;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2332,"eturn getFile(""/5GB_of_Zeros.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2323,"return getFile(""5GB_of_Zeros.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2336,"eturn getFile(""/5GB_of_Zeros_7ZIP.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2327,"return getFile(""5GB_of_Zeros_7ZIP.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2340,"eturn getFile(""/5GB_of_Zeros_jar.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2331,"return getFile(""5GB_of_Zeros_jar.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2344,"eturn getFile(""/5GB_of_Zeros_WinZip.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2335,"return getFile(""5GB_of_Zeros_WinZip.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2348,"eturn getFile(""/5GB_of_Zeros_PKZip.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2339,"return getFile(""5GB_of_Zeros_PKZip.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2352,"eturn getFile(""/100k_Files.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2343,"return getFile(""100k_Files.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2356,"eturn getFile(""/100k_Files_7ZIP.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2347,"return getFile(""100k_Files_7ZIP.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2360,"eturn getFile(""/100k_Files_WindowsCompressedFolders.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2351,"return getFile(""100k_Files_WindowsCompressedFolders.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2364,"eturn getFile(""/100k_Files_jar.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2355,"return getFile(""100k_Files_jar.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2368,"eturn getFile(""/100k_Files_WinZIP.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2359,"return getFile(""100k_Files_WinZIP.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2372,"eturn getFile(""/100k_Files_PKZip.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2363,"return getFile(""100k_Files_PKZip.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,21,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,25,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,26,mport java.net.URL;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,62,"RL zip = getClass().getResource(""/COMPRESS-214_unix_symlinks.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,63,ile archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,62,"File archive = getFile(""COMPRESS-214_unix_symlinks.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,21,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,29,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,30,mport java.net.URL;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,41,"RL zip = getClass().getResource(""/test-winzip.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,44,n = new ZipArchiveInputStream(new FileInputStream(new File(new URI(zip.toString()))));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,42,"in = new ZipArchiveInputStream(new FileInputStream(getFile(""test-winzip.zip"")));"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,61,"RL zip = getClass().getResource(""/COMPRESS-189.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,65,f = new ZipFile(new File(new URI(zip.toString())));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,62,"zf = new ZipFile(getFile(""COMPRESS-189.zip""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,21,import static org.apache.commons.compress.AbstractTestCase.getFile;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,25,mport java.net.URI;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,26,mport java.net.URL;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,148,"RL zip = getClass().getResource(""/test-winzip.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,149,ile archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,148,"File archive = getFile(""test-winzip.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,161,"RL zip = getClass().getResource(""/COMPRESS-208.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,162,ile archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,160,"File archive = getFile(""COMPRESS-208.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,179,"RL zip = getClass().getResource(""/ordertest.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,180,ile archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,177,"File archive = getFile(""ordertest.zip"");"

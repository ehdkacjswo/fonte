is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,19,package org.apache.commons.compress.compressors;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,21,import java.util.Collections;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,22,import java.util.HashMap;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,23,import java.util.Locale;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,24,import java.util.Map;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,27,* File name mapping code for the compression formats.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,28,* @ThreadSafe
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,29,* @since Apache Commons Compress 1.4
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,31,public class FileNameUtil {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,34,* Map from common filename suffixes to the suffixes that identify compressed
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,35,"* versions of those file types. For example: from "".tar"" to "".tgz""."
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,37,"private final Map<String, String> compressSuffix ="
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,38,"new HashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,41,* Map from common filename suffixes of compressed files to the
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,42,* corresponding suffixes of uncompressed files. For example: from
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,43,"* "".tgz"" to "".tar""."
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,44,* <p>
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,45,"* This map also contains format-specific suffixes like "".gz"" and ""-z""."
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,46,"* These suffixes are mapped to the empty string, as they should simply"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,47,* be removed from the filename when the file is uncompressed.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,49,"private final Map<String, String> uncompressSuffix;"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,52,* Length of the longest compressed suffix.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,54,private final int longestCompressedSuffix;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,57,* Length of the shortest compressed suffix.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,59,private final int shortestCompressedSuffix;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,62,* Length of the longest uncompressed suffix.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,64,private final int longestUncompressedSuffix;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,67,* Length of the shortest uncompressed suffix longer than the
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,68,* empty string.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,70,private final int shortestUncompressedSuffix;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,73,* The format's default extension.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,75,private final String defaultExtension;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,78,* sets up the utility with a map of known compressed to
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,79,* uncompressed suffix mappings and the default extension of the
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,80,* format.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,82,* @param uncompressSuffix Map from common filename suffixes of
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,83,* compressed files to the corresponding suffixes of uncompressed
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,84,"* files. For example: from "".tgz"" to "".tar"".  This map also"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,85,"* contains format-specific suffixes like "".gz"" and ""-z"".  These"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,86,"* suffixes are mapped to the empty string, as they should simply"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,87,* be removed from the filename when the file is uncompressed.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,89,"* @param defaultExtension the format's default extension like "".gz"""
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,91,"public FileNameUtil(Map<String, String> uncompressSuffix,"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,92,String defaultExtension) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,93,this.uncompressSuffix = Collections.unmodifiableMap(uncompressSuffix);
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,94,"int lc = Integer.MIN_VALUE, sc = Integer.MAX_VALUE;"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,95,"int lu = Integer.MIN_VALUE, su = Integer.MAX_VALUE;"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,96,"for (Map.Entry<String, String> ent : uncompressSuffix.entrySet()) {"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,97,int cl = ent.getKey().length();
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,98,if (cl > lc) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,99,lc = cl;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,101,if (cl < sc) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,102,sc = cl;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,105,String u = ent.getValue();
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,106,int ul = u.length();
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,107,if (ul > 0) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,108,if (!compressSuffix.containsKey(u)) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,109,"compressSuffix.put(u, ent.getKey());"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,111,if (ul > lu) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,112,lu = ul;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,114,if (ul < su) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,115,su = ul;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,119,longestCompressedSuffix = lc;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,120,longestUncompressedSuffix = lu;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,121,shortestCompressedSuffix = sc;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,122,shortestUncompressedSuffix = su;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,123,this.defaultExtension = defaultExtension;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,127,* Detects common format suffixes in the given filename.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,129,* @param filename name of a file
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,130,"* @return <code>true</code> if the filename has a common format suffix,"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,131,*         <code>false</code> otherwise
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,133,public boolean isCompressedFilename(String filename) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,134,final String lower = filename.toLowerCase(Locale.ENGLISH);
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,135,final int n = lower.length();
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,136,for (int i = shortestCompressedSuffix;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,137,i <= longestCompressedSuffix && i < n; i++) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,138,if (uncompressSuffix.containsKey(lower.substring(n - i))) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,139,return true;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,142,return false;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,146,* Maps the given name of a compressed file to the name that the
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,147,* file should have after uncompression. Commonly used file type specific
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,148,"* suffixes like "".tgz"" or "".svgz"" are automatically detected and"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,149,"* correctly mapped. For example the name ""package.tgz"" is mapped to"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,150,"* ""package.tar"". And any filenames with the generic "".gz"" suffix"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,151,* (or any other generic gzip suffix) is mapped to a name without that
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,152,"* suffix. If no format suffix is detected, then the filename is returned"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,153,* unmapped.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,155,* @param filename name of a file
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,156,* @return name of the corresponding uncompressed file
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,158,public String getUncompressedFilename(String filename) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,159,final String lower = filename.toLowerCase(Locale.ENGLISH);
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,160,final int n = lower.length();
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,161,for (int i = shortestCompressedSuffix;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,162,i <= longestCompressedSuffix && i < n; i++) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,163,String suffix = uncompressSuffix.get(lower.substring(n - i));
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,164,if (suffix != null) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,165,"return filename.substring(0, n - i) + suffix;"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,168,return filename;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,172,* Maps the given filename to the name that the file should have after
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,173,* compressio. Common file types with custom suffixes for
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,174,* compressed versions are automatically detected and correctly mapped.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,175,"* For example the name ""package.tar"" is mapped to ""package.tgz"". If no"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,176,"* custom mapping is applicable, then the default "".gz"" suffix is appended"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,177,* to the filename.
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,179,* @param filename name of a file
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,180,* @return name of the corresponding compressed file
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,182,public String getCompressedFilename(String filename) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,183,final String lower = filename.toLowerCase(Locale.ENGLISH);
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,184,final int n = lower.length();
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,185,for (int i = shortestUncompressedSuffix;
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,186,i <= longestUncompressedSuffix && i < n; i++) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,187,String suffix = compressSuffix.get(lower.substring(n - i));
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,188,if (suffix != null) {
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,189,"return filename.substring(0, n - i) + suffix;"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,192,"// No custom suffix found, just append the default"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,193,return filename + defaultExtension;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,21,mport java.util.HashMap;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,22,mport java.util.Locale;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,21,import java.util.LinkedHashMap;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,23,import org.apache.commons.compress.compressors.FileNameUtil;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,33, Map from common filename suffixes of bzip2ed files to the corresponding
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,34," suffixes of uncompressed files. For example: from "".tbz2"" to "".tar""."
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,35, <p>
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,36," This map also contains bzip2-specific suffixes like "".bz2"". These"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,37," suffixes are mapped to the empty string, as they should simply be"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,38, removed from the filename when the file is uncompressed.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,40,"rivate static final Map<String, String> uncompressSuffix ="
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,41,"ew HashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,32,private static final FileNameUtil fileNameUtil;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,35,"Map<String, String> uncompressSuffix ="
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,36,"new LinkedHashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,37,// backwards compatibilty: BZip2Utils never created the short
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,38,"// tbz form, so .tar.bz2 has to be added explicitly"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,39,"uncompressSuffix.put("".tar.bz2"", "".tar"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,44,"fileNameUtil = new FileNameUtil(uncompressSuffix, "".bz2"");"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,49,"/ N.B. if any shorter or longer keys are added, ensure the for loop limits are changed"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,63,tring lower = filename.toLowerCase(Locale.ENGLISH);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,64,nt n = lower.length();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,65,"/ Shortest suffix is three letters (.bz), longest is five (.tbz2)"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,66,or (int i = 3; i <= 5 && i < n; i++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,67,f (uncompressSuffix.containsKey(lower.substring(n - i))) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,68,eturn true;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,71,eturn false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,59,return fileNameUtil.isCompressedFilename(filename);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,88,tring lower = filename.toLowerCase(Locale.ENGLISH);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,89,nt n = lower.length();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,90,"/ Shortest suffix is three letters (.bz), longest is five (.tbz2)"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,91,or (int i = 3; i <= 5 && i < n; i++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,92,bject suffix = uncompressSuffix.get(lower.substring(n - i));
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,93,f (suffix != null) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,94,"eturn filename.substring(0, n - i) + suffix;"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,97,eturn filename;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,76,return fileNameUtil.getUncompressedFilename(filename);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,111,"eturn filename + "".bz2"";"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,90,return fileNameUtil.getCompressedFilename(filename);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,21,mport java.util.HashMap;
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,22,mport java.util.Locale;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,21,import java.util.LinkedHashMap;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,23,import org.apache.commons.compress.compressors.FileNameUtil;
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,32, Map from common filename suffixes to the suffixes that identify gzipped
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,33," versions of those file types. For example: from "".tar"" to "".tgz""."
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,35,"rivate static final Map<String, String> compressSuffix ="
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,36,"ew HashMap<String, String>();"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,39, Map from common filename suffixes of gzipped files to the corresponding
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,40," suffixes of uncompressed files. For example: from "".tgz"" to "".tar""."
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,41, <p>
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,42," This map also contains gzip-specific suffixes like "".gz"" and ""-z""."
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,43," These suffixes are mapped to the empty string, as they should simply"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,44, be removed from the filename when the file is uncompressed.
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,46,"rivate static final Map<String, String> uncompressSuffix ="
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,47,"ew HashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,31,private static final FileNameUtil fileNameUtil;
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,50,"ompressSuffix.put("".tar"", "".tgz"");"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,51,"ompressSuffix.put("".svg"", "".svgz"");"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,52,"ompressSuffix.put("".cpio"", "".cpgz"");"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,53,"ompressSuffix.put("".wmf"", "".wmz"");"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,54,"ompressSuffix.put("".emf"", "".emz"");"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,34,// using LinkedHashMap so .tgz is preferred over .taz as
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,35,// compressed extension of .tar as FileNameUtil will use the
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,36,// first one found
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,37,"Map<String, String> uncompressSuffix ="
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,38,"new LinkedHashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,50,"fileNameUtil = new FileNameUtil(uncompressSuffix, "".gz"");"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,68,"/ N.B. if any shorter or longer keys are added, ensure the for loop limits are changed"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,82,tring lower = filename.toLowerCase(Locale.ENGLISH);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,83,nt n = lower.length();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,84,"/ Shortest suffix is two letters (_z), longest is five (.svgz)"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,85,or (int i = 2; i <= 5 && i < n; i++) {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,86,f (uncompressSuffix.containsKey(lower.substring(n - i))) {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,87,eturn true;
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,90,eturn false;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,65,return fileNameUtil.isCompressedFilename(filename);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,107,tring lower = filename.toLowerCase(Locale.ENGLISH);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,108,nt n = lower.length();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,109,"/ Shortest suffix is two letters (_z), longest is five (.svgz)"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,110,or (int i = 2; i <= 5 && i < n; i++) {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,111,bject suffix = uncompressSuffix.get(lower.substring(n - i));
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,112,f (suffix != null) {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,113,"eturn filename.substring(0, n - i) + suffix;"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,116,eturn filename;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,82,return fileNameUtil.getUncompressedFilename(filename);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,131,tring lower = filename.toLowerCase(Locale.ENGLISH);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,132,nt n = lower.length();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,133,"/ Shortest suffix is four letters (.svg), longest is five (.cpio)"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,134,or (int i = 4; i <= 5 && i < n; i++) {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,135,bject suffix = compressSuffix.get(lower.substring(n - i));
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,136,f (suffix != null) {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,137,"eturn filename.substring(0, n - i) + suffix;"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,140,"/ No custom suffix found, just append the default .gz"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,141,"eturn filename + "".gz"";"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,97,return fileNameUtil.getCompressedFilename(filename);
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,22,mport java.util.Locale;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,23,import org.apache.commons.compress.compressors.FileNameUtil;
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,33, Map from common filename suffixes to the suffixes that identify xzped
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,34," versions of those file types. For example: from "".tar"" to "".txz""."
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,36,"rivate static final Map<String, String> compressSuffix ="
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,37,"ew HashMap<String, String>();"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,40, Map from common filename suffixes of xzped files to the corresponding
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,41," suffixes of uncompressed files. For example: from "".tgz"" to "".tar""."
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,42, <p>
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,43," This map also contains xz-specific suffixes like "".gz"" and ""-z""."
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,44," These suffixes are mapped to the empty string, as they should simply"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,45, be removed from the filename when the file is uncompressed.
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,47,"rivate static final Map<String, String> uncompressSuffix ="
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,48,"ew HashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,32,private static final FileNameUtil fileNameUtil;
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,51,"ompressSuffix.put("".tar"", "".txz"");"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,35,"Map<String, String> uncompressSuffix = new HashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,39,"fileNameUtil = new FileNameUtil(uncompressSuffix, "".xz"");"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,57,"/ N.B. if any shorter or longer keys are added, ensure the for loop limits are changed"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,71,tring lower = filename.toLowerCase(Locale.ENGLISH);
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,72,nt n = lower.length();
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,73,"/ Shortest suffix is three letters (.xz), longest is four (.txz)"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,74,or (int i = 3; i <= 4 && i < n; i++) {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,75,f (uncompressSuffix.containsKey(lower.substring(n - i))) {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,76,eturn true;
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,79,eturn false;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,54,return fileNameUtil.isCompressedFilename(filename);
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,96,tring lower = filename.toLowerCase(Locale.ENGLISH);
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,97,nt n = lower.length();
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,98,"/ Shortest suffix is three letters (.xz), longest is four (.txz)"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,99,or (int i = 3; i <= 4 && i < n; i++) {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,100,bject suffix = uncompressSuffix.get(lower.substring(n - i));
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,101,f (suffix != null) {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,102,"eturn filename.substring(0, n - i) + suffix;"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,105,eturn filename;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,71,return fileNameUtil.getUncompressedFilename(filename);
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,120,tring lower = filename.toLowerCase(Locale.ENGLISH);
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,121,nt n = lower.length();
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,122,"/ Shortest suffix is three letters (.xz), longest is four (.txz)"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,123,or (int i = 3; i <= 4 && i < n; i++) {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,124,bject suffix = compressSuffix.get(lower.substring(n - i));
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,125,f (suffix != null) {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,126,"eturn filename.substring(0, n - i) + suffix;"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,129,"/ No custom suffix found, just append the default .gz"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,130,"eturn filename + "".xz"";"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,86,return fileNameUtil.getCompressedFilename(filename);
False,src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java,72,"ssertEquals(""x.TAR.bz2"", BZip2Utils.getCompressedFilename(""x.TAR""));"
True,src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java,72,"assertEquals(""x.tar.bz2"", BZip2Utils.getCompressedFilename(""x.TAR""));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,18,package org.apache.commons.math;
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,20,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,23,* Error thrown when a numerical computation exceeds its allowed
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,24,* number of functions evaluations.
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,27,* @since 2.0
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,29,public class MaxEvaluationsExceededException extends ConvergenceException {
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,31,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,32,private static final long serialVersionUID = -5921271447220129118L;
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,34,/** Maximal number of evaluations allowed. */
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,35,private final int maxEvaluations;
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,38,* Constructs an exception with specified formatted detail message.
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,39,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,40,* @param maxEvaluations maximal number of evaluations allowed
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,42,public MaxEvaluationsExceededException(final int maxEvaluations) {
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,43,"super(""Maximal number of evaluations ({0}) exceeded"", maxEvaluations);"
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,44,this.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,48,* Constructs an exception with specified formatted detail message.
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,49,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,50,* @param maxEvaluations the exceeded maximal number of evaluations
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,51,* @param pattern format specifier
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,52,* @param arguments format arguments
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,54,"public MaxEvaluationsExceededException(final int maxEvaluations,"
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,55,"final String pattern, final Object ... arguments) {"
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,56,"super(pattern, arguments);"
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,57,this.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,60,/** Get the maximal number of evaluations allowed.
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,61,* @return maximal number of evaluations allowed
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,63,public int getMaxEvaluations() {
True,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,src/java/org/apache/commons/math/MaxEvaluationsExceededException.java,64,return maxEvaluations;
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,86,// org.apache.commons.math.MaxEvaluationsExceededException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,87,"{ ""Maximal number of evaluations ({0}) exceeded"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,88,"""Nombre maximal d''\u00e9valuations ({0}) d\u00e9pass\u00e9"" },"
True,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,54,/** Maximal number of evaluations allowed. */
True,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,55,private int maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,135,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,136,public void setMaxEvaluations(int maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,137,this.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,140,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,141,public int getMaxEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,142,return maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,180,optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
False,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,36, @param maxIterations maximal number of function calls
True,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,36,* @param maxIterations maximal number of algorithm iterations
True,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,40,/** Set the maximal number of evaluations of the algorithm.
True,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,41,* @param maxEvaluations maximal number of function calls
True,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java,43,void setMaxEvaluations(int maxEvaluations);
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,26,import org.apache.commons.math.MaxEvaluationsExceededException;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,108,/** Maximal number of evaluations allowed. */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,109,private int maxEvaluations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,125,setMaxEvaluations(Integer.MAX_VALUE);
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,229,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,230,public void setMaxEvaluations(int maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,231,this.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,342,* @exception OptimizationException if the maximal number of evaluations is exceeded
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,334,"hrows FunctionEvaluationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,335,valuations++;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,345,"throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,346,if (++evaluations > maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,347,throw new OptimizationException(new MaxEvaluationsExceededException(maxEvaluations));
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,386,* @exception OptimizationException if the maximal number of evaluations is exceeded
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,375,hrows FunctionEvaluationException {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,389,"throws FunctionEvaluationException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,113,* @exception OptimizationException if the maximal number of evaluations is exceeded
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,117,hrows FunctionEvaluationException {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,118,"throws FunctionEvaluationException, OptimizationException {"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,20,mport junit.framework.Test;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,21,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,22,mport junit.framework.TestSuite;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,20,import static org.junit.Assert.assertEquals;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,21,import static org.junit.Assert.assertNotNull;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,22,import static org.junit.Assert.assertNull;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,23,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,24,import static org.junit.Assert.fail;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,28,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,29,import org.apache.commons.math.MaxEvaluationsExceededException;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,30,import org.apache.commons.math.MaxIterationsExceededException;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,33,import org.apache.commons.math.optimization.OptimizationException;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,36,import org.junit.Test;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,31,ublic class NelderMeadTest
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,32,xtends TestCase {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,34,ublic NelderMeadTest(String name) {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,35,uper(name);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,38,public class NelderMeadTest {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,40,@Test
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,77,@Test
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,@Test
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,136,ultivariateRealFunction rosenbrock =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,ew MultivariateRealFunction() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,138,rivate static final long serialVersionUID = -9044950469615237490L;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,139,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,140,+count;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,141,ouble a = x[1] - x[0] * x[0];
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,142,ouble b = 1.0 - x[0];
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,143,eturn 100 * a * a + b * b;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,147,ount = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,141,Rosenbrock rosenbrock = new Rosenbrock();
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,157,"ssertEquals(count, optimizer.getEvaluations());"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,151,"assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,158,@Test
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,167,ultivariateRealFunction powell =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,168,ew MultivariateRealFunction() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,169,rivate static final long serialVersionUID = -832162886102041840L;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,170,ublic double value(double[] x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,171,+count;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,172,ouble a = x[0] + 10 * x[1];
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,173,ouble b = x[2] - x[3];
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,174,ouble c = x[1] - 2 * x[2];
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,175,ouble d = x[0] - x[3];
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,176,eturn a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,180,ount = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,162,Powell powell = new Powell();
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,186,"ssertEquals(count, optimizer.getEvaluations());"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,168,"assertEquals(powell.getCount(), optimizer.getEvaluations());"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,193,ublic static Test suite() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,194,eturn new TestSuite(NelderMeadTest.class);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,175,@Test(expected = MaxIterationsExceededException.class)
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,176,public void testMaxIterations() throws MathException {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,177,try {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,178,Powell powell = new Powell();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,179,NelderMead optimizer = new NelderMead();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,180,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,181,optimizer.setMaxIterations(20);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,182,"optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,} catch (OptimizationException oe) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,184,if (oe.getCause() instanceof ConvergenceException) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,185,throw (ConvergenceException) oe.getCause();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,187,throw oe;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,197,rivate int count;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,191,@Test(expected = MaxEvaluationsExceededException.class)
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,192,public void testMaxEvaluations() throws MathException {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,193,try {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,194,Powell powell = new Powell();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,195,NelderMead optimizer = new NelderMead();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,196,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,197,optimizer.setMaxEvaluations(20);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,198,"optimizer.optimize(powell, GoalType.MINIMIZE, new double[] { 3.0, -1.0, 0.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,199,} catch (OptimizationException oe) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,200,if (oe.getCause() instanceof ConvergenceException) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,201,throw (ConvergenceException) oe.getCause();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,203,throw oe;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,207,private class Rosenbrock implements MultivariateRealFunction {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,209,private int count;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,211,public Rosenbrock() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,212,count = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,215,public double value(double[] x) throws FunctionEvaluationException {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,216,++count;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,217,double a = x[1] - x[0] * x[0];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,218,double b = 1.0 - x[0];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,219,return 100 * a * a + b * b;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,222,public int getCount() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,223,return count;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,228,private class Powell implements MultivariateRealFunction {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,230,private int count;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,232,public Powell() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,233,count = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,236,public double value(double[] x) throws FunctionEvaluationException {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,237,++count;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,238,double a = x[0] + 10 * x[1];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,239,double b = x[2] - x[3];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,240,double c = x[1] - 2 * x[2];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,241,double d = x[0] - x[3];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,242,return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,245,public int getCount() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,246,return count;

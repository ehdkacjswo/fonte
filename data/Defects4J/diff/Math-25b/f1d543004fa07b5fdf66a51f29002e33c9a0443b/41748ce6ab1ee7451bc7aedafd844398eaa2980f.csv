is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,885,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,886,@Override
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,887,public double walkInDefaultOrder(final RealVectorPreservingVisitor visitor) {
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,888,"visitor.start(data.length, 0, data.length - 1);"
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,889,for (int i = 0; i < data.length; i++) {
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,890,"visitor.visit(i, data[i]);"
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,892,return visitor.end();
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,895,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,896,@Override
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,897,"public double walkInDefaultOrder(final RealVectorPreservingVisitor visitor,"
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,898,"final int start, final int end) {"
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,899,"checkIndices(start, end);"
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,900,"visitor.start(data.length, start, end);"
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,901,for (int i = start; i <= end; i++) {
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,902,"visitor.visit(i, data[i]);"
True,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java,904,return visitor.end();
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,838, Visits (but does not change) all entries of this vector in default order
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,838,* Visits (but does not alter) all entries of this vector in default order
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,856, Visits (and possibly change) some entries of this vector in default order
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,856,* Visits (but does not alter) some entries of this vector in default order
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,868,"nt start, int end) {"
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,868,"int start, int end) {"
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,878, Visits (but does not change) all entries of this vector in optimized
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,878,* Visits (but does not alter) all entries of this vector in optimized
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,893, Visits (and possibly change) some entries of this vector in default order
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,894, (increasing index). The order in which the entries are visited is
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,895, selected so as to lead to the most efficient implementation; it might
False,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,896, depend on the concrete implementation of this abstract class.
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,893,* Visits (but does not alter) some entries of this vector in optimized
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,894,* order. The order in which the entries are visited is selected so as to
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,895,* lead to the most efficient implementation; it might depend on the
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,896,* concrete implementation of this abstract class.
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,912,* Visits (and possibly alters) all entries of this vector in default order
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,913,* (increasing index).
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,915,* @param visitor the visitor to be used to process and modify the entries
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,916,* of this vector
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,917,* @return the value returned by {@link RealVectorChangingVisitor#end()}
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,918,* at the end of the walk
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,920,public double walkInDefaultOrder(final RealVectorChangingVisitor visitor) {
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,921,final int dim = getDimension();
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,922,"visitor.start(dim, 0, dim - 1);"
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,923,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,924,"setEntry(i, visitor.visit(i, getEntry(i)));"
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,926,return visitor.end();
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,930,* Visits (and possibly alters) some entries of this vector in default order
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,931,* (increasing index).
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,933,* @param visitor visitor to be used to process the entries of this vector
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,934,* @param start the index of the first entry to be visited
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,935,* @param end the index of the last entry to be visited (inclusive)
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,936,* @return the value returned by {@link RealVectorChangingVisitor#end()}
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,937,* at the end of the walk
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,938,* @throws org.apache.commons.math3.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,939,* the indices are not valid.
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,941,"public double walkInDefaultOrder(final RealVectorChangingVisitor visitor,"
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,942,"int start, int end) {"
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,943,"checkIndices(start, end);"
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,944,"visitor.start(getDimension(), start, end);"
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,945,for (int i = start; i <= end; i++) {
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,946,"setEntry(i, visitor.visit(i, getEntry(i)));"
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,948,return visitor.end();
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,952,* Visits (and possibly alters) all entries of this vector in optimized
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,953,* order. The order in which the entries are visited is selected so as to
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,954,* lead to the most efficient implementation; it might depend on the
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,955,* concrete implementation of this abstract class.
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,957,* @param visitor the visitor to be used to process the entries of this
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,958,* vector
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,959,* @return the value returned by {@link RealVectorChangingVisitor#end()}
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,960,* at the end of the walk
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,962,public double walkInOptimizedOrder(final RealVectorChangingVisitor visitor) {
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,963,return walkInDefaultOrder(visitor);
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,967,* Visits (and possibly change) some entries of this vector in optimized
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,968,* order. The order in which the entries are visited is selected so as to
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,969,* lead to the most efficient implementation; it might depend on the
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,970,* concrete implementation of this abstract class.
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,972,* @param visitor visitor to be used to process the entries of this vector
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,973,* @param start the index of the first entry to be visited
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,974,* @param end the index of the last entry to be visited (inclusive)
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,975,* @return the value returned by {@link RealVectorChangingVisitor#end()}
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,976,* at the end of the walk
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,977,* @throws org.apache.commons.math3.exception.OutOfRangeException if
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,978,* the indices are not valid.
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,980,"public double walkInOptimizedOrder(final RealVectorChangingVisitor visitor,"
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,981,"int start, int end) {"
True,src/main/java/org/apache/commons/math3/linear/RealVector.java,src/main/java/org/apache/commons/math3/linear/RealVector.java,982,"return walkInDefaultOrder(visitor, start, end);"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,17,package org.apache.commons.math3.linear;
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,20,* This interface defines a visitor for the entries of a vector. Visitors
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,21,* implementing this interface may alter the entries of the vector being
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,22,* visited.
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,25,* @since 3.1
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,27,public interface RealVectorChangingVisitor {
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,29,"* Start visiting a vector. This method is called once, before any entry"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,30,* of the vector is visited.
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,32,* @param dimension the size of the vector
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,33,* @param start the index of the first entry to be visited
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,34,* @param end the index of the last entry to be visited (inclusive)
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,36,"void start(int dimension, int start, int end);"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,39,* Visit one entry of the vector.
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,41,* @param index the index of the entry being visited
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,42,* @param value the value of the entry being visited
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,43,* @return the new value of the entry being visited
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,45,"double visit(int index, double value);"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,48,"* End visiting a vector. This method is called once, after all entries of"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,49,* the vector have been visited.
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,51,* @return the value returned by
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,52,"* {@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor)},"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,53,"* {@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor, int, int)},"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,54,* {@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor)}
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,55,* or
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,56,"* {@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor, int, int)}"
True,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java,58,double end();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,44,eturn 0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,44,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,54,final RealVectorPreservingVisitor visitor;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,55,visitor = new RealVectorPreservingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,57,"public void visit(int index, double value) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,58,// Do nothing
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,61,"public void start(int dimension, int start, int end) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,62,// Do nothing
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,65,public double end() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,66,return 0.0;
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,55,".walkInDefaultOrder(null, -1, 4);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,70,"v.walkInDefaultOrder(visitor, -1, 4);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,61,".walkInDefaultOrder(null, 5, 4);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,76,"v.walkInDefaultOrder(visitor, 5, 4);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,67,".walkInDefaultOrder(null, 0, -1);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,82,"v.walkInDefaultOrder(visitor, 0, -1);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,73,".walkInDefaultOrder(null, 0, 5);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,88,"v.walkInDefaultOrder(visitor, 0, 5);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,79,".walkInDefaultOrder(null, 4, 0);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,94,"v.walkInDefaultOrder(visitor, 4, 0);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,116,eturn 0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,131,return 0.0;
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,152,eturn 0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,167,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,177,final RealVectorPreservingVisitor visitor;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,178,visitor = new RealVectorPreservingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,180,"public void visit(int index, double value) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,181,// Do nothing
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,184,"public void start(int dimension, int start, int end) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,185,// Do nothing
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,188,public double end() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,189,return 0.0;
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,163,".walkInOptimizedOrder(null, -1, 4);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,193,"v.walkInOptimizedOrder(visitor, -1, 4);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,169,".walkInOptimizedOrder(null, 5, 4);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,199,"v.walkInOptimizedOrder(visitor, 5, 4);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,175,".walkInOptimizedOrder(null, 0, -1);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,205,"v.walkInOptimizedOrder(visitor, 0, -1);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,181,".walkInOptimizedOrder(null, 0, 5);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,211,"v.walkInOptimizedOrder(visitor, 0, 5);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,187,".walkInOptimizedOrder(null, 4, 0);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,217,"v.walkInOptimizedOrder(visitor, 4, 0);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,226,eturn 0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,256,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,259,"v.walkInOptimizedOrder(visitor, expectedStart, expectedEnd);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,262,/** The whole vector is visited. */
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,263,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,264,public void testWalkInDefaultOrderChangingVisitor1() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,265,final double[] data = new double[] {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,266,"0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,268,final RealVector v = create(data);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,269,final RealVectorChangingVisitor visitor;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,270,visitor = new RealVectorChangingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,272,private int expectedIndex;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,274,"public double visit(final int actualIndex, final double actualValue) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,275,"Assert.assertEquals(expectedIndex, actualIndex);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,276,"Assert.assertEquals(Integer.toString(actualIndex),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,277,"data[actualIndex], actualValue, 0d);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,278,++expectedIndex;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,279,return actualIndex + actualValue;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,282,"public void start(final int actualSize, final int actualStart,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,283,final int actualEnd) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,284,"Assert.assertEquals(data.length, actualSize);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,285,"Assert.assertEquals(0, actualStart);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,286,"Assert.assertEquals(data.length - 1, actualEnd);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,287,expectedIndex = 0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,290,public double end() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,291,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,294,v.walkInDefaultOrder(visitor);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,295,for (int i = 0; i < data.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,296,"Assert.assertEquals(""entry "" + i, i + data[i], v.getEntry(i), 0.0);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,300,/** Visiting an invalid subvector. */
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,301,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,302,public void testWalkInDefaultOrderChangingVisitor2() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,303,final RealVector v = create(new double[5]);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,304,final RealVectorChangingVisitor visitor;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,305,visitor = new RealVectorChangingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,307,"public double visit(int index, double value) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,308,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,311,"public void start(int dimension, int start, int end) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,312,// Do nothing
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,315,public double end() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,316,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,319,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,320,"v.walkInDefaultOrder(visitor, -1, 4);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,321,Assert.fail();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,322,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,323,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,325,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,326,"v.walkInDefaultOrder(visitor, 5, 4);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,327,Assert.fail();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,328,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,329,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,331,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,332,"v.walkInDefaultOrder(visitor, 0, -1);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,333,Assert.fail();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,334,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,335,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,337,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,338,"v.walkInDefaultOrder(visitor, 0, 5);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,339,Assert.fail();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,340,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,341,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,343,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,344,"v.walkInDefaultOrder(visitor, 4, 0);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,345,Assert.fail();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,346,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,347,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,351,/** Visiting a valid subvector. */
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,352,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,353,public void testWalkInDefaultOrderChangingVisitor3() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,354,final double[] data = new double[] {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,355,"0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,357,final int expectedStart = 2;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,358,final int expectedEnd = 7;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,359,final RealVector v = create(data);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,360,final RealVectorChangingVisitor visitor;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,361,visitor = new RealVectorChangingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,363,private int expectedIndex;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,365,"public double visit(final int actualIndex, final double actualValue) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,366,"Assert.assertEquals(expectedIndex, actualIndex);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,367,"Assert.assertEquals(Integer.toString(actualIndex),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,368,"data[actualIndex], actualValue, 0d);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,369,++expectedIndex;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,370,return actualIndex + actualValue;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,373,"public void start(final int actualSize, final int actualStart,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,374,final int actualEnd) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,375,"Assert.assertEquals(data.length, actualSize);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,376,"Assert.assertEquals(expectedStart, actualStart);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,377,"Assert.assertEquals(expectedEnd, actualEnd);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,378,expectedIndex = expectedStart;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,381,public double end() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,382,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,385,"v.walkInDefaultOrder(visitor, expectedStart, expectedEnd);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,386,for (int i = expectedStart; i <= expectedEnd; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,387,"Assert.assertEquals(""entry "" + i, i + data[i], v.getEntry(i), 0.0);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,391,/** The whole vector is visited. */
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,392,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,393,public void testWalkInOptimizedOrderChangingVisitor1() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,394,final double[] data = new double[] {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,395,"0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,397,final RealVector v = create(data);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,398,final RealVectorChangingVisitor visitor;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,399,visitor = new RealVectorChangingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,400,private final boolean[] visited = new boolean[data.length];
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,402,"public double visit(final int actualIndex, final double actualValue) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,403,visited[actualIndex] = true;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,404,"Assert.assertEquals(Integer.toString(actualIndex),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,405,"data[actualIndex], actualValue, 0d);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,406,return actualIndex + actualValue;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,409,"public void start(final int actualSize, final int actualStart,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,410,final int actualEnd) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,411,"Assert.assertEquals(data.length, actualSize);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,412,"Assert.assertEquals(0, actualStart);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,413,"Assert.assertEquals(data.length - 1, actualEnd);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,414,"Arrays.fill(visited, false);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,417,public double end() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,418,for (int i = 0; i < data.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,419,"Assert.assertTrue(""entry "" + i + ""has not been visited"","
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,420,visited[i]);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,422,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,425,v.walkInOptimizedOrder(visitor);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,426,for (int i = 0; i < data.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,427,"Assert.assertEquals(""entry "" + i, i + data[i], v.getEntry(i), 0.0);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,431,/** Visiting an invalid subvector. */
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,432,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,433,public void testWalkInOptimizedOrderChangingVisitor2() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,434,final RealVector v = create(new double[5]);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,435,final RealVectorChangingVisitor visitor;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,436,visitor = new RealVectorChangingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,438,"public double visit(int index, double value) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,439,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,442,"public void start(int dimension, int start, int end) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,443,// Do nothing
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,446,public double end() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,447,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,450,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,451,"v.walkInOptimizedOrder(visitor, -1, 4);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,452,Assert.fail();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,453,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,454,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,456,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,457,"v.walkInOptimizedOrder(visitor, 5, 4);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,458,Assert.fail();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,459,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,460,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,462,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,463,"v.walkInOptimizedOrder(visitor, 0, -1);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,464,Assert.fail();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,465,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,466,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,468,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,469,"v.walkInOptimizedOrder(visitor, 0, 5);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,470,Assert.fail();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,471,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,472,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,474,try {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,475,"v.walkInOptimizedOrder(visitor, 4, 0);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,476,Assert.fail();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,477,} catch (NumberIsTooSmallException e) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,478,// Expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,482,/** Visiting a valid subvector. */
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,483,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,484,public void testWalkInOptimizedOrderChangingVisitor3() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,485,final double[] data = new double[] {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,486,"0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,488,final int expectedStart = 2;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,489,final int expectedEnd = 7;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,490,final RealVector v = create(data);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,491,final RealVectorChangingVisitor visitor;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,492,visitor = new RealVectorChangingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,493,private final boolean[] visited = new boolean[data.length];
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,495,"public double visit(final int actualIndex, final double actualValue) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,496,"Assert.assertEquals(Integer.toString(actualIndex),"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,497,"data[actualIndex], actualValue, 0d);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,498,visited[actualIndex] = true;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,499,return actualIndex + actualValue;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,502,"public void start(final int actualSize, final int actualStart,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,503,final int actualEnd) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,504,"Assert.assertEquals(data.length, actualSize);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,505,"Assert.assertEquals(expectedStart, actualStart);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,506,"Assert.assertEquals(expectedEnd, actualEnd);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,507,"Arrays.fill(visited, true);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,510,public double end() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,511,for (int i = expectedStart; i <= expectedEnd; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,512,"Assert.assertTrue(""entry "" + i + ""has not been visited"","
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,513,visited[i]);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,515,return 0.0;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,519,for (int i = expectedStart; i <= expectedEnd; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,520,"Assert.assertEquals(""entry "" + i, i + data[i], v.getEntry(i), 0.0);"

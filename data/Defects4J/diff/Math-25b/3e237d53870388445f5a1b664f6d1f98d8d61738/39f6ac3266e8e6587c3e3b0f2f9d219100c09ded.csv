is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,3,* Copyright (c) 2004 The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,5,"* Licensed under the Apache License, Version 2.0 (the ""License""); you may not"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,6,* use this file except in compliance with the License. You may obtain a copy
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,7,* of the License at
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,9,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,13,"* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,14,* License for the specific language governing permissions and limitations
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,15,* under the License.
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,18,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,20,import java.util.Arrays;
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,23,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,26,* Tests the PolynomialSplineFunction implementation.
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,28,* @version $Revision: 1.1 $
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,30,public class PolynomialSplineFunctionTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,32,/** Error tolerance for tests */
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,33,protected double tolerance = 1.0e-12;
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,36,* Quadratic polynomials used in tests:
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,38,"* x^2 + x            [-1, 0)"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,39,"* x^2 + x + 2        [0, 1)"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,40,"* x^2 + x + 4        [1, 2)"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,42,* Defined so that evaluation using PolynomialSplineFunction evaluation
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,43,* algorithm agrees at knot point boundaries.
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,45,protected PolynomialFunction[] polynomials = {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,46,"new PolynomialFunction(new double[] {0d, 1d, 1d}),"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,47,"new PolynomialFunction(new double[] {2d, 1d, 1d}),"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,48,"new PolynomialFunction(new double[] {4d, 1d, 1d})"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,51,/** Knot points  */
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,52,"protected double[] knots = {-1, 0, 1, 2};"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,54,/** Derivative of test polynomials -- 2x + 1  */
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,55,protected PolynomialFunction dp =
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,56,"new PolynomialFunction(new double[] {1d, 2d});"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,59,public void testConstructor() {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,60,PolynomialSplineFunction spline =
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,61,"new PolynomialSplineFunction(knots, polynomials);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,62,"assertTrue(Arrays.equals(knots, spline.getKnots()));"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,63,"assertEquals(1d, spline.getPolynomials()[0].getCoefficients()[2], 0);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,65,try { // too few knots
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,66,spline =
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,67,"new PolynomialSplineFunction(new double[] {0}, polynomials);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,68,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,69,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,70,// expected
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,73,try { // too many knots
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,74,spline =
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,75,"new PolynomialSplineFunction(new double[] {0,1,2,3,4}, polynomials);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,76,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,77,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,78,// expected
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,81,try { // knots not increasing
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,82,spline =
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,83,"new PolynomialSplineFunction(new double[] {0,1, 3, 2}, polynomials);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,84,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,85,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,86,// expected
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,90,public void testValues() throws Exception {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,91,PolynomialSplineFunction spline =
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,92,"new PolynomialSplineFunction(knots, polynomials);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,93,UnivariateRealFunction dSpline = spline.derivative();
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,96,* interior points -- spline value at x should equal p(x - knot)
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,97,* where knot is the largest knot point less than or equal to x and p
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,98,* is the polynomial defined over the knot segment to which x belongs.
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,100,double x = -1;
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,101,int index = 0;
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,102,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,103,x+=0.25;
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,104,"index = findKnot(knots, x);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,105,"assertEquals(""spline function evaluation failed for x="" + x,"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,106,"polynomials[index].value(x - knots[index]), spline.value(x), tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,107,"assertEquals(""spline derivative evaluation failed for x="" + x,"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,108,"dp.value(x - knots[index]), dSpline.value(x), tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,111,// knot points -- centering should zero arguments
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,112,for (int i = 0; i < 3; i++) {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,113,"assertEquals(""spline function evaluation failed for knot="" + knots[i],"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,114,"polynomials[i].value(0), spline.value(knots[i]), tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,115,"assertEquals(""spline function evaluation failed for knot="" + knots[i],"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,116,"dp.value(0), dSpline.value(knots[i]), tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,119,try { //outside of domain -- under min
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,120,x = spline.value(-1.5);
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,121,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,122,} catch (FunctionEvaluationException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,123,// expected
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,126,try { //outside of domain -- over max
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,127,x = spline.value(2.5);
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,128,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,129,} catch (FunctionEvaluationException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,130,// expected
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,135,*  Do linear search to find largest knot point less than or equal to x.
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,136,*  Implementation does binary search.
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,138,"protected int findKnot(double[] knots, double x) {"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,139,if (x < knots[0] || x >= knots[knots.length -1]) {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,140,"throw new IllegalArgumentException(""x is out of range"");"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,142,for (int i = 0; i < knots.length; i++) {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,143,if (knots[i] > x) {
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,144,return i -1;
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,147,"throw new IllegalArgumentException(""x is out of range"");"

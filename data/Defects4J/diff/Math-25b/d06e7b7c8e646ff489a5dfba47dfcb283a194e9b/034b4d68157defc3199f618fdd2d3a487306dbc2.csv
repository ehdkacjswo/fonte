is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,247,inal double[] scale;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,248,f (vecAbsoluteTolerance != null) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,249,cale = vecAbsoluteTolerance;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,250, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,251,cale = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,252,"rrays.fill(scale, scalAbsoluteTolerance);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,245,final double[] scale = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,246,if (vecAbsoluteTolerance == null) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,247,for (int i = 0; i < scale.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,248,scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,250,} else {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,251,for (int i = 0; i < scale.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,252,scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,148,ssertTrue(integ.getEvaluations() > 150);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,148,assertTrue(integ.getEvaluations() > 140);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,150,ssertTrue(integ.getEvaluations() < 100);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,150,assertTrue(integ.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,150,ssertTrue(handler.getLastError() < 8.0e-8);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,151,ssertTrue(handler.getMaximalValueError() < 2.0e-7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,150,assertTrue(handler.getLastError() < 8.1e-8);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,151,assertTrue(handler.getMaximalValueError() < 1.1e-7);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,390,ssertTrue(maxError < 4e-11);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,390,assertTrue(maxError < 4.2e-11);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,52,"tepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,52,"StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.1e-10);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,19,import org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,20,import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,21,import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,22,import org.apache.commons.math.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,25,* Implements a linear function for interpolation of real univariate functions.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,27,public class LinearInterpolator implements UnivariateRealInterpolator {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,29,* Computes a linear interpolating function for the data set.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,30,* @param x the arguments for the interpolation points
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,31,* @param y the values for the interpolation points
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,32,* @return a function which interpolates the data set
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,34,"public PolynomialSplineFunction interpolate(double x[], double y[]) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,35,if (x.length != y.length) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,36,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,37,"LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, x.length, y.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,40,if (x.length < 2) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,41,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,42,"LocalizedFormats.WRONG_NUMBER_OF_POINTS, 2, x.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,45,// Number of intervals.  The number of data points is n + 1.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,46,int n = x.length - 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,48,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,49,if (x[i] >= x[i + 1]) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,50,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,51,"LocalizedFormats.NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,52,"i, i+1, x[i], x[i+1]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,56,// Slope of the lines between the datapoints.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,57,final double m[] = new double[n];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,58,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,59,m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,62,PolynomialFunction polynomials[] = new PolynomialFunction[n];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,63,final double coefficients[] = new double[2];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,64,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,65,coefficients[0] = y[i];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,66,coefficients[1] = m[i];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,67,polynomials[i] = new PolynomialFunction(coefficients);
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,70,"return new PolynomialSplineFunction(x, polynomials);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,74,f (x[i]  >= x[i + 1]) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,74,if (x[i] >= x[i + 1]) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,19,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,20,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,21,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,22,import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,23,import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,28,* Test the LinearInterpolator.
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,30,public class LinearInterpolatorTest {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,32,/** error tolerance for spline interpolator value at knot points */
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,33,protected double knotTolerance = 1E-12;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,35,/** error tolerance for interpolating polynomial coefficients */
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,36,protected double coefficientTolerance = 1E-6;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,38,/** error tolerance for interpolated values */
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,39,protected double interpolationTolerance = 1E-12;
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,41,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,42,public void testInterpolateLinearDegenerateTwoSegment()
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,43,throws Exception {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,44,"double x[] = { 0.0, 0.5, 1.0 };"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,45,"double y[] = { 0.0, 0.5, 1.0 };"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,46,UnivariateRealInterpolator i = new LinearInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,47,"UnivariateRealFunction f = i.interpolate(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,48,"verifyInterpolation(f, x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,50,// Verify coefficients using analytical values
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,51,PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,52,"double target[] = {y[0], 1d};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,53,"TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,54,"target = new double[]{y[1], 1d};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,55,"TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,57,// Check interpolation
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,58,"Assert.assertEquals(0.0,f.value(0.0), interpolationTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,59,"Assert.assertEquals(0.4,f.value(0.4), interpolationTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,60,"Assert.assertEquals(1.0,f.value(1.0), interpolationTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,63,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,64,public void testInterpolateLinearDegenerateThreeSegment()
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,65,throws Exception {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,66,"double x[] = { 0.0, 0.5, 1.0, 1.5 };"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,67,"double y[] = { 0.0, 0.5, 1.0, 1.5 };"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,68,UnivariateRealInterpolator i = new LinearInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,69,"UnivariateRealFunction f = i.interpolate(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,70,"verifyInterpolation(f, x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,72,// Verify coefficients using analytical values
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,73,PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,74,"double target[] = {y[0], 1d};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,75,"TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,76,"target = new double[]{y[1], 1d};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,77,"TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,78,"target = new double[]{y[2], 1d};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,79,"TestUtils.assertEquals(polynomials[2].getCoefficients(), target, coefficientTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,81,// Check interpolation
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,82,"Assert.assertEquals(0,f.value(0), interpolationTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,83,"Assert.assertEquals(1.4,f.value(1.4), interpolationTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,84,"Assert.assertEquals(1.5,f.value(1.5), interpolationTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,87,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,88,public void testInterpolateLinear() throws Exception {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,89,"double x[] = { 0.0, 0.5, 1.0 };"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,90,"double y[] = { 0.0, 0.5, 0.0 };"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,91,UnivariateRealInterpolator i = new LinearInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,92,"UnivariateRealFunction f = i.interpolate(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,93,"verifyInterpolation(f, x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,95,// Verify coefficients using analytical values
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,96,PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,97,"double target[] = {y[0], 1d};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,98,"TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,99,"target = new double[]{y[1], -1d};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,100,"TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,103,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,104,public void testIllegalArguments() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,105,// Data set arrays of different size.
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,106,UnivariateRealInterpolator i = new LinearInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,107,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,108,"double xval[] = { 0.0, 1.0 };"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,109,"double yval[] = { 0.0, 1.0, 2.0 };"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,110,"i.interpolate(xval, yval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,111,"Assert.fail(""Failed to detect data set array with different sizes."");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,112,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,113,// Expected.
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,115,// X values not sorted.
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,116,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,117,"double xval[] = { 0.0, 1.0, 0.5 };"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,118,"double yval[] = { 0.0, 1.0, 2.0 };"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,119,"i.interpolate(xval, yval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,120,"Assert.fail(""Failed to detect unsorted arguments."");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,121,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,122,// Expected.
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,127,* verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,129,"protected void verifyInterpolation(UnivariateRealFunction f, double x[], double y[])"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,130,throws Exception{
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,131,for (int i = 0; i < x.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LinearInterpolatorTest.java,132,"Assert.assertEquals(f.value(x[i]), y[i], knotTolerance);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,82,* <p>
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,83,* This constructor need a non-empty {@code d} array to retrieve
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,84,* the field from its first element. This implies it cannot build
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,85,"* 0 length vectors. To build vectors from any size, one should"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,86,"* use the {@link #ArrayFieldVector(Field, FieldElement[])} constructor."
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,87,* </p>
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,90,"* @see #ArrayFieldVector(Field, FieldElement[])"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,104,"* Construct a vector from an array, copying the input array."
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,105,* @param field field to which the elements belong
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,106,* @param d array of Ts.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,107,* @see #ArrayFieldVector(FieldElement[])
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,109,"public ArrayFieldVector(Field<T> field, T[] d) {"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,110,this.field = field;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,111,data = d.clone();
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,121,* <p>
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,122,* This constructor need a non-empty {@code d} array to retrieve
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,123,* the field from its first element. This implies it cannot build
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,124,"* 0 length vectors. To build vectors from any size, one should"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,125,"* use the {@link #ArrayFieldVector(Field, FieldElement[], boolean)} constructor."
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,126,* </p>
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,133,"* @see #ArrayFieldVector(Field, FieldElement[], boolean)"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,112,ry {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,113,ield = d[0].getField();
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,114,ata = copyArray ? d.clone() :  d;
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,115, catch (ArrayIndexOutOfBoundsException e) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,137,if (d.length == 0) {
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,117,ocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,139,LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,141,field = d[0].getField();
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,142,data = copyArray ? d.clone() :  d;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,146,* Create a new ArrayFieldVector using the input array as the underlying
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,147,* data array.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,148,* <p>If an array is built specially in order to be embedded in a
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,149,"* ArrayFieldVector and not used directly, the <code>copyArray</code> may be"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,150,* set to <code>false</code. This will prevent the copying and improve
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,151,* performance as no new array will be built and no data will be copied.</p>
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,152,* @param field field to which the elements belong
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,153,* @param d data for new vector
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,154,"* @param copyArray if true, the input array will be copied, otherwise"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,155,* it will be referenced
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,156,"* @see #ArrayFieldVector(FieldElement[], boolean)"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,158,"public ArrayFieldVector(Field<T> field, T[] d, boolean copyArray) {"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,159,this.field = field;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,160,data = copyArray ? d.clone() :  d;
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,249,* <p>
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,250,* This constructor need at least one non-empty array to retrieve
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,251,* the field from its first element. This implies it cannot build
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,252,"* 0 length vectors. To build vectors from any size, one should"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,253,"* use the {@link #ArrayFieldVector(Field, FieldElement[], FieldElement[])} constructor."
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,254,* </p>
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,258,"* @see #ArrayFieldVector(Field, FieldElement[], FieldElement[])"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,273,* Construct a vector by appending one vector to another vector.
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,274,* @param field field to which the elements belong
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,275,* @param v1 first vector (will be put in front of the new vector)
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,276,* @param v2 second vector (will be put at back of the new vector)
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,277,"* @see #ArrayFieldVector(FieldElement[], FieldElement[])"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,279,"public ArrayFieldVector(Field<T> field, T[] v1, T[] v2) {"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,280,if (v1.length + v2.length == 0) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,281,throw MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,282,LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,284,data = buildArray(v1.length + v2.length);
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,285,"System.arraycopy(v1, 0, data, 0, v1.length);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,286,"System.arraycopy(v2, 0, data, v1.length, v2.length);"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,287,this.field = data[0].getField();
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,94, @throws IllegalArgumentException if <code>d</code> is empty
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,95, @throws NullPointerException if <code>d</code> is null
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,98,"ublic ArrayRealVector(double[] d, boolean copyArray)"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,99,"hrows NullPointerException, IllegalArgumentException {"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,100,f (d == null) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,101,hrow new NullPointerException();
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,103,f (d.length == 0) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,104,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,96,"public ArrayRealVector(double[] d, boolean copyArray) {"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,593,public void testZeroVectors() {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,595,"// when the field is not specified, array cannot be empty"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,596,try {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,597,new ArrayFieldVector<Fraction>(new Fraction[0]);
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,598,"fail(""IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,599,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,600,// expected behavior
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,602,try {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,603,"new ArrayFieldVector<Fraction>(new Fraction[0], true);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,604,"fail(""IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,605,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,606,// expected behavior
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,608,try {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,609,"new ArrayFieldVector<Fraction>(new Fraction[0], false);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,610,"fail(""IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,611,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,612,// expected behavior
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,615,"// when the field is specified, array can be empty"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,616,"assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0]).getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,617,"assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0], true).getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,618,"assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0], false).getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,27,import org.apache.commons.math.fraction.Fraction;
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,28,import org.apache.commons.math.fraction.FractionField;
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,610,ry {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,611,"ew ArrayRealVector((double[]) null, false);"
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,612,"ail(""expected exception"");"
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,613, catch (NullPointerException npe) {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,614,/ expected
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,617,ry {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,618,"ew ArrayRealVector(new double[0], false);"
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,619,"ail(""expected exception"");"
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,620, catch (IllegalArgumentException iae) {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,621,/ expected
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1271,public void testZeroVectors() {
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1272,"assertEquals(0, new ArrayRealVector(new double[0]).getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1273,"assertEquals(0, new ArrayRealVector(new double[0], true).getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1274,"assertEquals(0, new ArrayRealVector(new double[0], false).getDimension());"

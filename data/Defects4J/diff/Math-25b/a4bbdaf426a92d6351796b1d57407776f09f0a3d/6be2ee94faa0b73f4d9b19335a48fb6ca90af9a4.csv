is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,20,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,29,ublic class ConvergenceExceptionTest extends TestCase {
True,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,30,public class ConvergenceExceptionTest {
True,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,32,@Test
False,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,33,ssertNull(ex.getCause());
False,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,34,ssertNotNull(ex.getMessage());
False,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,35,ssertNotNull(ex.getMessage(Locale.FRENCH));
False,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,36,ssertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
True,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,35,Assert.assertNull(ex.getCause());
True,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,36,Assert.assertNotNull(ex.getMessage());
True,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,37,Assert.assertNotNull(ex.getMessage(Locale.FRENCH));
True,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,38,Assert.assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));
True,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,41,@Test
False,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,43,"ssertEquals(cause, ex.getCause());"
True,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,src/test/java/org/apache/commons/math/ConvergenceExceptionTest.java,46,"Assert.assertEquals(cause, ex.getCause());"
False,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,20,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,24,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,24,import org.junit.Test;
False,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,29,ublic class MathConfigurationExceptionTest extends TestCase {
True,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,29,public class MathConfigurationExceptionTest {
True,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,31,@Test
False,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,33,ssertNull(ex.getCause());
False,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,34,"ssertEquals("""", ex.getMessage());"
False,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,35,"ssertEquals("""", ex.getMessage(Locale.FRENCH));"
True,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,34,Assert.assertNull(ex.getCause());
True,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,35,"Assert.assertEquals("""", ex.getMessage());"
True,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,36,"Assert.assertEquals("""", ex.getMessage(Locale.FRENCH));"
True,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,39,@Test
False,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,42,"ssertEquals(cause, ex.getCause());"
True,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java,44,"Assert.assertEquals(cause, ex.getCause());"
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,20,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,29,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,28,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,29,import org.junit.Test;
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,34,ublic class MathExceptionTest extends TestCase {
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,34,public class MathExceptionTest {
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,36,@Test
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,38,ssertNull(ex.getCause());
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,39,"ssertEquals("""", ex.getMessage());"
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,40,"ssertEquals("""", ex.getMessage(Locale.FRENCH));"
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,39,Assert.assertNull(ex.getCause());
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,40,"Assert.assertEquals("""", ex.getMessage());"
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,41,"Assert.assertEquals("""", ex.getMessage(Locale.FRENCH));"
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,44,@Test
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,47,"ssertEquals(cause, ex.getCause());"
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,49,"Assert.assertEquals(cause, ex.getCause());"
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,55,@Test
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,65,ssertTrue(stack.startsWith(outerMsg));
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,66,ssertTrue(stack.indexOf(innerMsg) > 0);
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,68,Assert.assertTrue(stack.startsWith(outerMsg));
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,69,Assert.assertTrue(stack.indexOf(innerMsg) > 0);
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,71,ssertTrue(stack.startsWith(outerMsg));
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,72,ssertTrue(stack.indexOf(innerMsg) > 0);
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,74,Assert.assertTrue(stack.startsWith(outerMsg));
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,75,Assert.assertTrue(stack.indexOf(innerMsg) > 0);
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,81,@Test
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,106,"ssertEquals(stack, stack2);"
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,110,"Assert.assertEquals(stack, stack2);"
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,108,ssertTrue(stack2.indexOf(inMsg.getSourceString()) != -1);
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,109,"ssertTrue(stack2.indexOf(""MathConfigurationException"") != -1);"
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,112,Assert.assertTrue(stack2.indexOf(inMsg.getSourceString()) != -1);
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,113,"Assert.assertTrue(stack2.indexOf(""MathConfigurationException"") != -1);"
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,20,mport junit.framework.AssertionFailedError;
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,21,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,24, A TestCase that retries tests when assertions fail.
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,25, <p>
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,26," If one or more tests throw an AssertionFailedError, all tests are"
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,27, repeated one time.
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,28, <p>
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,29, Errors or exceptions other than AssertionFailedError do not lead to retries.
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,22,* A Test case that retries tests when assertions fail.
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,33,ublic abstract class RetryTestCase extends TestCase {
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,35,ublic RetryTestCase() {
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,36,uper();
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,25,public abstract class RetryTestCase {
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,39,ublic RetryTestCase(String arg0) {
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,40,uper(arg0);
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,27,// TODO implement retry policy using Junit 4  API
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,44,  Override runTest() to catch AssertionFailedError and retry
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,46,Override
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,47,rotected void runTest() throws Throwable {
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,48,ry {
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,49,uper.runTest();
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,50, catch (AssertionFailedError err) {
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,51,"/ System.out.println(""Retrying "" + this.getName());"
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,52,uper.runTest();
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,30,//     *  Override runTest() to catch AssertionFailedError and retry
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,32,//    @Override
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,33,//    protected void runTest() throws Throwable {
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,34,//        try {
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,35,//            super.runTest();
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,36,//        } catch (AssertionFailedError err) {
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,37,"//            // System.out.println(""Retrying "" + this.getName());"
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,38,//            super.runTest();
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,27,mport junit.framework.Assert;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,28,mport junit.framework.AssertionFailedError;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,36,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,37,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,55,"ssertEquals(null, expected, actual, delta);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,55,"Assert.assertEquals(null, expected, actual, delta);"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,77,"ssertEquals(expected, actual, 0);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,77,"Assert.assertEquals(expected, actual, 0);"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,94,"ssertEquals(expected.getReal(), actual.getReal(), delta);"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,95,"ssertEquals(expected.getImaginary(), actual.getImaginary(), delta);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,94,"Assert.assertEquals(expected.getReal(), actual.getReal(), delta);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,95,"Assert.assertEquals(expected.getImaginary(), actual.getImaginary(), delta);"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,192,nt i = 0;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,193,oolean found = false;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,194,hile (!found && i < values.length) {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,195,ry {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,196,"ssertEquals(values[i], z, epsilon);"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,197,ound = true;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,198, catch (AssertionFailedError er) {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,199,/ no match
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,192,for (Complex value : values) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,193,"if (MathUtils.equals(value.getReal(), z.getReal(), epsilon) &&"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,194,"MathUtils.equals(value.getImaginary(), z.getImaginary(), epsilon)) {"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,195,return;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,201,++;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,203,f (!found) {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,204,ssert.fail(msg +
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,205," Unable to find "" + (new ComplexFormat()).format(z));"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,198,"Assert.fail(msg + "" Unable to find "" + (new ComplexFormat()).format(z));"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,231,nt i = 0;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,232,oolean found = false;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,233,hile (!found && i < values.length) {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,234,ry {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,235,"ssertEquals(values[i], x, epsilon);"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,236,ound = true;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,237, catch (AssertionFailedError er) {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,238,/ no match
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,223,for (double value : values) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,224,"if (MathUtils.equals(value, x, epsilon)) {"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,225,return;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,240,++;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,242,f (!found) {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,243,"ssert.fail(msg + "" Unable to find"" + x);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,228,"Assert.fail(msg + "" Unable to find "" + x);"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,260,"ublic static void assertEquals(String msg, RealMatrix expected, RealMatrix observed,"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,261,ouble tolerance) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,244,"public static void assertEquals(String msg, RealMatrix expected, RealMatrix observed, double tolerance) {"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,313,"ublic static void assertEquals(String msg, double[] expected, double[] observed,"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,314,ouble tolerance) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,296,"public static void assertEquals(String msg, double[] expected, double[] observed, double tolerance) {"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,326,ry {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,327,"ssertEquals(expected[i], observed[i], tolerance);"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,328, catch (AssertionFailedError ex) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,308,"if (!MathUtils.equalsIncludingNaN(expected[i], observed[i], tolerance)) {"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,381,ry {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,382,/ Fail if we can reject null hypothesis that distributions are the same
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,383,"ssert.assertFalse(chiSquareTest.chiSquareTest(expected, observed, alpha));"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,384, catch (AssertionFailedError ex) {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,362,// Fail if we can reject null hypothesis that distributions are the same
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,363,"if (chiSquareTest.chiSquareTest(expected, observed, alpha)) {"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,30,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,30,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,32,ublic class LegendreGaussIntegratorTest
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,33,xtends TestCase {
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,35,ublic LegendreGaussIntegratorTest(String name) {
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,36,uper(name);
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,33,public class LegendreGaussIntegratorTest {
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,35,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,52,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,49,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,58,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,55,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,58,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,68,"ssertEquals(expected, result, 1.0e-16);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,66,"Assert.assertEquals(expected, result, 1.0e-16);"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,72,"ssertEquals(expected, result, 1.0e-16);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,70,"Assert.assertEquals(expected, result, 1.0e-16);"
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,76,"ssertEquals(expected, result, 1.0e-16);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,74,"Assert.assertEquals(expected, result, 1.0e-16);"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,77,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,96,"ssertEquals(n + "" "" + degree + "" "" + i, reference, result, 1.0e-12 * (1.0 + FastMath.abs(reference)));"
True,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java,95,"Assert.assertEquals(n + "" "" + degree + "" "" + i, reference, result, 1.0e-12 * (1.0 + FastMath.abs(reference)));"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,28, Testcase for Romberg integrator.
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,29,* Test case for Romberg integrator.
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,36,ublic final class RombergIntegratorTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,37,public final class RombergIntegratorTest {
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,42,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,49,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,51,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,54,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,56,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,62,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,68,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,71,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,73,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,76,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,78,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,81,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,87,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,91,"ail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,95,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,100,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,104,"Assert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,109,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,113,"Assert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,28, Testcase for Simpson integrator.
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,29,* Test case for Simpson integrator.
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,35,ublic final class SimpsonIntegratorTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,36,public final class SimpsonIntegratorTest {
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,41,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,48,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,50,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,53,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,55,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,61,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,67,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,70,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,72,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,75,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,77,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,80,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,86,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,90,"ail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,94,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,99,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,103,"Assert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,108,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,112,"Assert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,28, Testcase for trapezoid integrator.
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,29,* Test case for trapezoid integrator.
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,35,ublic final class TrapezoidIntegratorTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,36,public final class TrapezoidIntegratorTest {
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,41,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,48,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,50,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,53,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,55,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,61,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,67,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,70,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,72,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,75,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,77,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,80,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,86,@Test
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,90,"ail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,94,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,99,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,103,"Assert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,108,"ail(""Expecting IllegalArgumentException - bad iteration limits"");"
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,112,"Assert.fail(""Expecting IllegalArgumentException - bad iteration limits"");"
False,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,26, Testcase for the bicubic function.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java,26,* Test case for the bicubic function.
False,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,26, Testcase for the bicubic interpolator.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,26,* Test case for the bicubic interpolator.
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,28, Testcase for Divided Difference interpolator.
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,29,* Test case for Divided Difference interpolator.
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,41,ublic final class DividedDifferenceInterpolatorTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,42,public final class DividedDifferenceInterpolatorTest {
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,49,@Test
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,67,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,69,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,71,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,73,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,81,@Test
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,98,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,101,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,102,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,105,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,106,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,109,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,115,@Test
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,121,"ail(""Expecting NonMonotonousSequenceException - bad abscissas array"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,125,"Assert.fail(""Expecting NonMonotonousSequenceException - bad abscissas array"");"
False,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,25," Testcase for the ""microsphere projection"" interpolator."
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,25,"* Test case for the ""microsphere projection"" interpolator."
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,28, Testcase for Neville interpolator.
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,29,* Test case for Neville interpolator.
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,41,ublic final class NevilleInterpolatorTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,42,public final class NevilleInterpolatorTest {
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,49,@Test
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,67,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,69,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,71,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,73,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,81,@Test
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,98,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,101,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,102,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,105,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,106,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,109,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,115,@Test
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,121,"ail(""Expecting NonMonotonousSequenceException - bad abscissas array"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,125,"Assert.fail(""Expecting NonMonotonousSequenceException - bad abscissas array"");"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,27, Testcase for the smoothing bicubic interpolator.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,27,* Test case for the smoothing bicubic interpolator.
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,27, Testcase for the bicubic function.
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,27,* Test case for the bicubic function.
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,27, Testcase for the tricubic interpolator.
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,27,* Test case for the tricubic interpolator.
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,21,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,23, Testcase for Lagrange form of polynomial function.
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,24,* Test case for Lagrange form of polynomial function.
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,31,ublic final class PolynomialFunctionLagrangeFormTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,32,public final class PolynomialFunctionLagrangeFormTest {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,37,@Test
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,46,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,48,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,49,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,51,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,52,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,54,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,54,"ssertEquals(1, p.degree());"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,56,"Assert.assertEquals(1, p.degree());"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,57,"ssertEquals(2, c.length);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,58,"ssertEquals(-4.0, c[0], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,59,"ssertEquals(1.5, c[1], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,59,"Assert.assertEquals(2, c.length);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,60,"Assert.assertEquals(-4.0, c[0], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,61,"Assert.assertEquals(1.5, c[1], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,67,@Test
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,75,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,78,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,78,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,81,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,81,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,84,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,83,"ssertEquals(2, p.degree());"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,86,"Assert.assertEquals(2, p.degree());"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,86,"ssertEquals(3, c.length);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,87,"ssertEquals(-3.0, c[0], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,88,"ssertEquals(5.0, c[1], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,89,"ssertEquals(2.0, c[2], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,89,"Assert.assertEquals(3, c.length);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,90,"Assert.assertEquals(-3.0, c[0], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,91,"Assert.assertEquals(5.0, c[1], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,92,"Assert.assertEquals(2.0, c[2], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,98,@Test
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,105,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,109,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,108,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,112,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,111,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,115,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,113,"ssertEquals(5, p.degree());"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,117,"Assert.assertEquals(5, p.degree());"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,116,"ssertEquals(6, c.length);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,117,"ssertEquals(0.0, c[0], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,118,"ssertEquals(6.0, c[1], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,119,"ssertEquals(1.0, c[2], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,120,"ssertEquals(-7.0, c[3], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,121,"ssertEquals(-1.0, c[4], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,122,"ssertEquals(1.0, c[5], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,120,"Assert.assertEquals(6, c.length);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,121,"Assert.assertEquals(0.0, c[0], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,122,"Assert.assertEquals(6.0, c[1], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,123,"Assert.assertEquals(1.0, c[2], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,124,"Assert.assertEquals(-7.0, c[3], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,125,"Assert.assertEquals(-1.0, c[4], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,126,"Assert.assertEquals(1.0, c[5], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,132,@Test
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,135,"ail(""Expecting MathIllegalArgumentException - bad input array length"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,140,"Assert.fail(""Expecting MathIllegalArgumentException - bad input array length"");"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,144,"ail(""Expecting MathIllegalArgumentException - mismatch input arrays"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,149,"Assert.fail(""Expecting MathIllegalArgumentException - mismatch input arrays"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,21,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,21,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,24, Testcase for Newton form of polynomial function.
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,25,* Test case for Newton form of polynomial function.
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,30,ublic final class PolynomialFunctionNewtonFormTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,31,public final class PolynomialFunctionNewtonFormTest {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,36,@Test
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,45,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,47,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,48,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,50,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,51,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,53,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,53,"ssertEquals(1, p.degree());"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,55,"Assert.assertEquals(1, p.degree());"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,56,"ssertEquals(2, coefficients.length);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,57,"ssertEquals(-4.0, coefficients[0], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,58,"ssertEquals(1.5, coefficients[1], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,58,"Assert.assertEquals(2, coefficients.length);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,59,"Assert.assertEquals(-4.0, coefficients[0], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,60,"Assert.assertEquals(1.5, coefficients[1], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,66,@Test
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,74,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,77,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,77,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,80,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,80,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,83,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,82,"ssertEquals(2, p.degree());"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,85,"Assert.assertEquals(2, p.degree());"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,85,"ssertEquals(3, coefficients.length);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,86,"ssertEquals(-3.0, coefficients[0], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,87,"ssertEquals(5.0, coefficients[1], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,88,"ssertEquals(2.0, coefficients[2], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,88,"Assert.assertEquals(3, coefficients.length);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,89,"Assert.assertEquals(-3.0, coefficients[0], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,90,"Assert.assertEquals(5.0, coefficients[1], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,91,"Assert.assertEquals(2.0, coefficients[2], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,97,@Test
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,105,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,109,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,108,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,112,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,111,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,115,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,113,"ssertEquals(5, p.degree());"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,117,"Assert.assertEquals(5, p.degree());"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,116,"ssertEquals(6, coefficients.length);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,117,"ssertEquals(0.0, coefficients[0], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,118,"ssertEquals(6.0, coefficients[1], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,119,"ssertEquals(1.0, coefficients[2], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,120,"ssertEquals(-7.0, coefficients[3], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,121,"ssertEquals(-1.0, coefficients[4], tolerance);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,122,"ssertEquals(1.0, coefficients[5], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,120,"Assert.assertEquals(6, coefficients.length);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,121,"Assert.assertEquals(0.0, coefficients[0], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,122,"Assert.assertEquals(6.0, coefficients[1], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,123,"Assert.assertEquals(1.0, coefficients[2], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,124,"Assert.assertEquals(-7.0, coefficients[3], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,125,"Assert.assertEquals(-1.0, coefficients[4], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,126,"Assert.assertEquals(1.0, coefficients[5], tolerance);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,132,@Test
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,135,"ail(""Expecting MathIllegalArgumentException - bad input array length"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,140,"Assert.fail(""Expecting MathIllegalArgumentException - bad input array length"");"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,144,"ail(""Expecting MathIllegalArgumentException - mismatch input arrays"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,149,"Assert.fail(""Expecting MathIllegalArgumentException - mismatch input arrays"");"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,20,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,32,ublic class PolynomialSplineFunctionTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,33,public class PolynomialSplineFunctionTest {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,62,@Test
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,64,"ssertTrue(Arrays.equals(knots, spline.getKnots()));"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,65,"ssertEquals(1d, spline.getPolynomials()[0].getCoefficients()[2], 0);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,66,"ssertEquals(3, spline.getN());"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,66,"Assert.assertTrue(Arrays.equals(knots, spline.getKnots()));"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,67,"Assert.assertEquals(1d, spline.getPolynomials()[0].getCoefficients()[2], 0);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,68,"Assert.assertEquals(3, spline.getN());"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,70,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,72,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,77,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,79,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,84,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,86,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,92,@Test
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,105,"ssertEquals(""spline function evaluation failed for x="" + x,"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,108,"Assert.assertEquals(""spline function evaluation failed for x="" + x,"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,107,"ssertEquals(""spline derivative evaluation failed for x="" + x,"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,110,"Assert.assertEquals(""spline derivative evaluation failed for x="" + x,"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,113,"ssertEquals(""spline function evaluation failed for knot="" + knots[i],"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,116,"Assert.assertEquals(""spline function evaluation failed for knot="" + knots[i],"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,115,"ssertEquals(""spline function evaluation failed for knot="" + knots[i],"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,118,"Assert.assertEquals(""spline function evaluation failed for knot="" + knots[i],"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,121,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,124,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,128,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,131,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,90,@Test
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,131,@Test
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,31, Testcase for {@link BrentSolver Brent} solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,31,* Test case for {@link BrentSolver Brent} solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,27, Testcase for Laguerre solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,27,* Test case for Laguerre solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,30, Testcase for {@link MullerSolver2 Muller} solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,30,* Test case for {@link MullerSolver2 Muller} solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,30, Testcase for {@link MullerSolver Muller} solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,30,* Test case for {@link MullerSolver Muller} solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,30, Testcase for {@link RiddersSolver Ridders} solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,30,* Test case for {@link RiddersSolver Ridders} solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,29, Testcase for {@link SecantSolver}.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,29,* Test case for {@link SecantSolver}.
False,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,19,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,20,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,29,"ssertEquals(Complex.ZERO, ComplexField.getInstance().getZero());"
True,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,27,"Assert.assertEquals(Complex.ZERO, ComplexField.getInstance().getZero());"
False,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,34,"ssertEquals(Complex.ONE, ComplexField.getInstance().getOne());"
True,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,32,"Assert.assertEquals(Complex.ONE, ComplexField.getInstance().getOne());"
False,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,41,ssertTrue(field == TestUtils.serializeAndRecover(field));
True,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,src/test/java/org/apache/commons/math/complex/ComplexFieldTest.java,39,Assert.assertTrue(field == TestUtils.serializeAndRecover(field));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,30,ublic class ComplexTest extends TestCase {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,31,public class ComplexTest {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,57,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,58,"ssertEquals(3.0, z.getReal(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,59,"ssertEquals(4.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,60,"Assert.assertEquals(3.0, z.getReal(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,61,"Assert.assertEquals(4.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,64,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,64,ssertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,67,Assert.assertTrue(z.isNaN());
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,67,ssertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,70,Assert.assertTrue(z.isNaN());
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,70,ssertFalse(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,73,Assert.assertFalse(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,76,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,75,"ssertEquals(5.0, z.abs(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,79,"Assert.assertEquals(5.0, z.abs(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,82,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,79,ssertTrue(Double.isNaN(Complex.NaN.abs()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,84,Assert.assertTrue(Double.isNaN(Complex.NaN.abs()));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,81,ssertTrue(Double.isNaN(z.abs()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,86,Assert.assertTrue(Double.isNaN(z.abs()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,89,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,86,"ssertEquals(inf, z.abs(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,92,"Assert.assertEquals(inf, z.abs(), 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,88,"ssertEquals(inf, z.abs(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,94,"Assert.assertEquals(inf, z.abs(), 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,90,"ssertEquals(inf, z.abs(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,96,"Assert.assertEquals(inf, z.abs(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,99,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,97,"ssertEquals(8.0, z.getReal(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,98,"ssertEquals(10.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,104,"Assert.assertEquals(8.0, z.getReal(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,105,"Assert.assertEquals(10.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,108,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,104,ssertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,112,Assert.assertTrue(z.isNaN());
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,107,"ssertEquals(w.getReal(), 4.0, 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,108,ssertTrue(Double.isNaN(w.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,115,"Assert.assertEquals(w.getReal(), 4.0, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,116,Assert.assertTrue(Double.isNaN(w.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,119,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,115,"ssertEquals(w.getImaginary(), 1, 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,116,"ssertEquals(inf, w.getReal(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,124,"Assert.assertEquals(w.getImaginary(), 1, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,125,"Assert.assertEquals(inf, w.getReal(), 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,119,ssertTrue(Double.isNaN(x.add(z).getReal()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,128,Assert.assertTrue(Double.isNaN(x.add(z).getReal()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,131,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,125,"ssertEquals(3.0, z.getReal(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,126,"ssertEquals(-4.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,135,"Assert.assertEquals(3.0, z.getReal(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,136,"Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,139,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,131,ssertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,142,Assert.assertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,145,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,136,"ssertEquals(neginf, z.conjugate().getImaginary(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,148,"Assert.assertEquals(neginf, z.conjugate().getImaginary(), 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,138,"ssertEquals(inf, z.conjugate().getImaginary(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,150,"Assert.assertEquals(inf, z.conjugate().getImaginary(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,153,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,145,"ssertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,146,"ssertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,158,"Assert.assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,159,"Assert.assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,162,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,152,"ssertEquals(new Complex(1d, 1.5), x.divide(y));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,166,"Assert.assertEquals(new Complex(1d, 1.5), x.divide(y));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,170,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,159,"ssertEquals(new Complex(1.5d, -1d), x.divide(y));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,174,"Assert.assertEquals(new Complex(1.5d, -1d), x.divide(y));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,177,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,165,ssertTrue(x.divide(w).equals(Complex.ZERO));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,181,Assert.assertTrue(x.divide(w).equals(Complex.ZERO));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,168,ssertTrue(Double.isNaN(z.getReal()));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,169,"ssertEquals(inf, z.getImaginary(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,184,Assert.assertTrue(Double.isNaN(z.getReal()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,185,"Assert.assertEquals(inf, z.getImaginary(), 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,173,ssertTrue(Double.isNaN(z.getImaginary()));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,174,"ssertEquals(inf, z.getReal(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,189,Assert.assertTrue(Double.isNaN(z.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,190,"Assert.assertEquals(inf, z.getReal(), 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,178,ssertTrue(Double.isNaN(z.getReal()));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,179,ssertTrue(Double.isNaN(z.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,194,Assert.assertTrue(Double.isNaN(z.getReal()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,195,Assert.assertTrue(Double.isNaN(z.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,198,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,185,"ssertEquals(z, Complex.NaN);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,202,"Assert.assertEquals(z, Complex.NaN);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,205,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,191,ssertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,209,Assert.assertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,212,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,196,ssertTrue(Double.isNaN(z.getReal()));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,197,"ssertEquals(inf, z.getImaginary(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,215,Assert.assertTrue(Double.isNaN(z.getReal()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,216,"Assert.assertEquals(inf, z.getImaginary(), 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,200,ssertTrue(Double.isNaN(z.getReal()));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,201,ssertTrue(Double.isNaN(z.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,219,Assert.assertTrue(Double.isNaN(z.getReal()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,220,Assert.assertTrue(Double.isNaN(z.getImaginary()));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,204,ssertTrue(Double.isNaN(z.getReal()));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,205,ssertTrue(Double.isNaN(z.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,223,Assert.assertTrue(Double.isNaN(z.getReal()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,224,Assert.assertTrue(Double.isNaN(z.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,227,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,212,"ssertEquals(-9.0, z.getReal(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,213,"ssertEquals(38.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,232,"Assert.assertEquals(-9.0, z.getReal(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,233,"Assert.assertEquals(38.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,236,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,219,ssertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,240,Assert.assertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,243,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,225,"ssertEquals(w.getReal(), inf, 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,226,"ssertEquals(w.getImaginary(), inf, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,247,"Assert.assertEquals(w.getReal(), inf, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,248,"Assert.assertEquals(w.getImaginary(), inf, 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,229,"ssertTrue(new Complex( 1,0).multiply(infInf).equals(Complex.INF));"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,230,"ssertTrue(new Complex(-1,0).multiply(infInf).equals(Complex.INF));"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,231,"ssertTrue(new Complex( 1,0).multiply(negInfZero).equals(Complex.INF));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,251,"Assert.assertTrue(new Complex( 1,0).multiply(infInf).equals(Complex.INF));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,252,"Assert.assertTrue(new Complex(-1,0).multiply(infInf).equals(Complex.INF));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,253,"Assert.assertTrue(new Complex( 1,0).multiply(negInfZero).equals(Complex.INF));"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,234,"ssertEquals(w.getReal(), inf, 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,235,"ssertEquals(w.getImaginary(), inf, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,256,"Assert.assertEquals(w.getReal(), inf, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,257,"Assert.assertEquals(w.getImaginary(), inf, 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,238,ssertTrue(Double.isNaN(w.getReal()));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,239,ssertTrue(Double.isNaN(w.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,260,Assert.assertTrue(Double.isNaN(w.getReal()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,261,Assert.assertTrue(Double.isNaN(w.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,264,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,246,"ssertEquals(6.0, z.getReal(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,247,"ssertEquals(8.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,269,"Assert.assertEquals(6.0, z.getReal(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,270,"Assert.assertEquals(8.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,273,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,253,ssertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,277,Assert.assertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,280,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,259,"ssertEquals(w.getReal(), inf, 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,260,"ssertEquals(w.getImaginary(), inf, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,284,"Assert.assertEquals(w.getReal(), inf, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,285,"Assert.assertEquals(w.getImaginary(), inf, 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,263,"ssertEquals(w.getReal(), inf, 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,264,"ssertEquals(w.getImaginary(), inf, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,288,"Assert.assertEquals(w.getReal(), inf, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,289,"Assert.assertEquals(w.getImaginary(), inf, 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,292,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,270,"ssertEquals(-3.0, z.getReal(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,271,"ssertEquals(-4.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,296,"Assert.assertEquals(-3.0, z.getReal(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,297,"Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,300,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,276,ssertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,303,Assert.assertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,306,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,283,"ssertEquals(-2.0, z.getReal(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,284,"ssertEquals(-2.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,311,"Assert.assertEquals(-2.0, z.getReal(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,312,"Assert.assertEquals(-2.0, z.getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,315,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,290,ssertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,319,Assert.assertTrue(z.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,322,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,295,ssertFalse(x.equals(null));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,325,Assert.assertFalse(x.equals(null));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,328,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,300,ssertFalse(x.equals(this));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,331,Assert.assertFalse(x.equals(this));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,334,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,305,ssertTrue(x.equals(x));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,337,Assert.assertTrue(x.equals(x));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,340,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,311,ssertTrue(x.equals(y));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,344,Assert.assertTrue(x.equals(y));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,347,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,317,ssertFalse(x.equals(y));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,351,Assert.assertFalse(x.equals(y));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,354,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,323,ssertFalse(x.equals(y));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,358,Assert.assertFalse(x.equals(y));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,361,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,330,ssertTrue(realNaN.equals(imaginaryNaN));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,331,ssertTrue(imaginaryNaN.equals(complexNaN));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,332,ssertTrue(realNaN.equals(complexNaN));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,366,Assert.assertTrue(realNaN.equals(imaginaryNaN));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,367,Assert.assertTrue(imaginaryNaN.equals(complexNaN));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,368,Assert.assertTrue(realNaN.equals(complexNaN));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,371,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,338,ssertFalse(x.hashCode()==y.hashCode());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,375,Assert.assertFalse(x.hashCode()==y.hashCode());
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,340,ssertFalse(x.hashCode()==y.hashCode());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,377,Assert.assertFalse(x.hashCode()==y.hashCode());
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,343,"ssertEquals(realNaN.hashCode(), imaginaryNaN.hashCode());"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,344,"ssertEquals(imaginaryNaN.hashCode(), Complex.NaN.hashCode());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,380,"Assert.assertEquals(realNaN.hashCode(), imaginaryNaN.hashCode());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,381,"Assert.assertEquals(imaginaryNaN.hashCode(), Complex.NaN.hashCode());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,384,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,393,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,405,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,367,ssertTrue(Complex.NaN.acos().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,407,Assert.assertTrue(Complex.NaN.acos().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,410,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,417,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,377,ssertTrue(Complex.NaN.asin().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,419,Assert.assertTrue(Complex.NaN.asin().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,422,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,435,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,442,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,454,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,410,ssertTrue(Complex.NaN.atan().isNaN());
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,411,ssertTrue(Complex.I.atan().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,456,Assert.assertTrue(Complex.NaN.atan().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,457,Assert.assertTrue(Complex.I.atan().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,460,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,467,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,421,ssertTrue(Complex.NaN.cos().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,469,Assert.assertTrue(Complex.NaN.cos().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,472,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,484,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,491,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,442,ssertTrue(Complex.NaN.cosh().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,493,Assert.assertTrue(Complex.NaN.cosh().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,496,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,508,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,520,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,468,ssertTrue(Complex.NaN.exp().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,522,Assert.assertTrue(Complex.NaN.exp().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,525,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,537,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,544,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,489,ssertTrue(Complex.NaN.log().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,546,Assert.assertTrue(Complex.NaN.log().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,549,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,568,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,573,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,581,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,523,ssertTrue(Complex.NaN.pow(x).isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,584,Assert.assertTrue(Complex.NaN.pow(x).isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,587,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,528,ssertTrue(x.pow(Complex.NaN).isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,590,Assert.assertTrue(x.pow(Complex.NaN).isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,593,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,619,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,635,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,574,"ail(""Expecting NullPointerException"");"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,639,"Assert.fail(""Expecting NullPointerException"");"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,645,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,652,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,664,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,598,ssertTrue(Complex.NaN.sin().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,666,Assert.assertTrue(Complex.NaN.sin().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,669,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,676,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,608,ssertTrue(Complex.NaN.sinh().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,678,Assert.assertTrue(Complex.NaN.sinh().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,681,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,693,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,700,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,707,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,714,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,721,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,728,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,743,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,667,ssertTrue(Complex.NaN.sqrt().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,745,Assert.assertTrue(Complex.NaN.sqrt().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,748,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,760,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,767,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,688,ssertTrue(Complex.NaN.sqrt1z().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,769,Assert.assertTrue(Complex.NaN.sqrt1z().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,772,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,779,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,698,ssertTrue(Complex.NaN.tan().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,781,Assert.assertTrue(Complex.NaN.tan().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,784,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,796,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,802,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,809,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,724,ssertTrue(Complex.NaN.tanh().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,811,Assert.assertTrue(Complex.NaN.tanh().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,814,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,826,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,832,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,744,"ssertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,834,"Assert.assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,848,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,764,"ssertEquals(3, thirdRootsOfZ.length);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,855,"Assert.assertEquals(3, thirdRootsOfZ.length);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,766,"ssertEquals(1.0,                  thirdRootsOfZ[0].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,767,"ssertEquals(1.0,                  thirdRootsOfZ[0].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,857,"Assert.assertEquals(1.0,                  thirdRootsOfZ[0].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,858,"Assert.assertEquals(1.0,                  thirdRootsOfZ[0].getImaginary(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,769,"ssertEquals(-1.3660254037844386,  thirdRootsOfZ[1].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,770,"ssertEquals(0.36602540378443843,  thirdRootsOfZ[1].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,860,"Assert.assertEquals(-1.3660254037844386,  thirdRootsOfZ[1].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,861,"Assert.assertEquals(0.36602540378443843,  thirdRootsOfZ[1].getImaginary(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,772,"ssertEquals(0.366025403784439,    thirdRootsOfZ[2].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,773,"ssertEquals(-1.3660254037844384,  thirdRootsOfZ[2].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,863,"Assert.assertEquals(0.366025403784439,    thirdRootsOfZ[2].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,864,"Assert.assertEquals(-1.3660254037844384,  thirdRootsOfZ[2].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,880,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,795,"ssertEquals(4, fourthRootsOfZ.length);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,887,"Assert.assertEquals(4, fourthRootsOfZ.length);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,797,"ssertEquals(1.5164629308487783,     fourthRootsOfZ[0].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,798,"ssertEquals(-0.14469266210702247,   fourthRootsOfZ[0].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,889,"Assert.assertEquals(1.5164629308487783,     fourthRootsOfZ[0].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,890,"Assert.assertEquals(-0.14469266210702247,   fourthRootsOfZ[0].getImaginary(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,800,"ssertEquals(0.14469266210702256,    fourthRootsOfZ[1].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,801,"ssertEquals(1.5164629308487783,     fourthRootsOfZ[1].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,892,"Assert.assertEquals(0.14469266210702256,    fourthRootsOfZ[1].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,893,"Assert.assertEquals(1.5164629308487783,     fourthRootsOfZ[1].getImaginary(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,803,"ssertEquals(-1.5164629308487783,    fourthRootsOfZ[2].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,804,"ssertEquals(0.14469266210702267,    fourthRootsOfZ[2].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,895,"Assert.assertEquals(-1.5164629308487783,    fourthRootsOfZ[2].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,896,"Assert.assertEquals(0.14469266210702267,    fourthRootsOfZ[2].getImaginary(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,806,"ssertEquals(-0.14469266210702275,   fourthRootsOfZ[3].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,807,"ssertEquals(-1.5164629308487783,    fourthRootsOfZ[3].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,898,"Assert.assertEquals(-0.14469266210702275,   fourthRootsOfZ[3].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,899,"Assert.assertEquals(-1.5164629308487783,    fourthRootsOfZ[3].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,913,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,828,"ssertEquals(3, thirdRootsOfZ.length);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,921,"Assert.assertEquals(3, thirdRootsOfZ.length);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,830,"ssertEquals(2.0,                thirdRootsOfZ[0].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,831,"ssertEquals(0.0,                thirdRootsOfZ[0].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,923,"Assert.assertEquals(2.0,                thirdRootsOfZ[0].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,924,"Assert.assertEquals(0.0,                thirdRootsOfZ[0].getImaginary(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,833,"ssertEquals(-1.0,               thirdRootsOfZ[1].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,834,"ssertEquals(1.7320508075688774, thirdRootsOfZ[1].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,926,"Assert.assertEquals(-1.0,               thirdRootsOfZ[1].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,927,"Assert.assertEquals(1.7320508075688774, thirdRootsOfZ[1].getImaginary(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,836,"ssertEquals(-1.0,               thirdRootsOfZ[2].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,837,"ssertEquals(-1.732050807568877, thirdRootsOfZ[2].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,929,"Assert.assertEquals(-1.0,               thirdRootsOfZ[2].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,930,"Assert.assertEquals(-1.732050807568877, thirdRootsOfZ[2].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,945,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,858,"ssertEquals(3, thirdRootsOfZ.length);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,952,"Assert.assertEquals(3, thirdRootsOfZ.length);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,860,"ssertEquals(1.0911236359717216,      thirdRootsOfZ[0].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,861,"ssertEquals(0.6299605249474365,      thirdRootsOfZ[0].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,954,"Assert.assertEquals(1.0911236359717216,      thirdRootsOfZ[0].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,955,"Assert.assertEquals(0.6299605249474365,      thirdRootsOfZ[0].getImaginary(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,863,"ssertEquals(-1.0911236359717216,     thirdRootsOfZ[1].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,864,"ssertEquals(0.6299605249474365,      thirdRootsOfZ[1].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,957,"Assert.assertEquals(-1.0911236359717216,     thirdRootsOfZ[1].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,958,"Assert.assertEquals(0.6299605249474365,      thirdRootsOfZ[1].getImaginary(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,866,"ssertEquals(-2.3144374213981936E-16, thirdRootsOfZ[2].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,867,"ssertEquals(-1.2599210498948732,     thirdRootsOfZ[2].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,960,"Assert.assertEquals(-2.3144374213981936E-16, thirdRootsOfZ[2].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,961,"Assert.assertEquals(-1.2599210498948732,     thirdRootsOfZ[2].getImaginary(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,967,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,876,"ssertEquals(1,roots.size());"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,877,"ssertEquals(Complex.NaN, roots.get(0));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,971,"Assert.assertEquals(1,roots.size());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,972,"Assert.assertEquals(Complex.NaN, roots.get(0));"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,880,"ssertEquals(1,roots.size());"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,881,"ssertEquals(Complex.NaN, roots.get(0));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,975,"Assert.assertEquals(1,roots.size());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,976,"Assert.assertEquals(Complex.NaN, roots.get(0));"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,885,"ssertEquals(1,roots.size());"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,886,"ssertEquals(Complex.NaN, roots.get(0));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,980,"Assert.assertEquals(1,roots.size());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,981,"Assert.assertEquals(Complex.NaN, roots.get(0));"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,890,"ssertEquals(1,roots.size());"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,891,"ssertEquals(Complex.INF, roots.get(0));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,985,"Assert.assertEquals(1,roots.size());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,986,"Assert.assertEquals(Complex.INF, roots.get(0));"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,895,"ssertEquals(1,roots.size());"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,896,"ssertEquals(Complex.INF, roots.get(0));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,990,"Assert.assertEquals(1,roots.size());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,991,"Assert.assertEquals(Complex.INF, roots.get(0));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,997,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,904,"ssertEquals(0.0, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1000,"Assert.assertEquals(0.0, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,907,"ssertEquals(FastMath.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1003,"Assert.assertEquals(FastMath.PI/4, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,910,"ssertEquals(FastMath.PI/2, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1006,"Assert.assertEquals(FastMath.PI/2, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,913,"ssertEquals(3 * FastMath.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1009,"Assert.assertEquals(3 * FastMath.PI/4, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,916,"ssertEquals(FastMath.PI, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1012,"Assert.assertEquals(FastMath.PI, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,919,"ssertEquals(-3 * FastMath.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1015,"Assert.assertEquals(-3 * FastMath.PI/4, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,922,"ssertEquals(-FastMath.PI/2, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1018,"Assert.assertEquals(-FastMath.PI/2, z.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,925,"ssertEquals(-FastMath.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1021,"Assert.assertEquals(-FastMath.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1028,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,933,"ssertEquals(FastMath.PI/4, infInf.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,934,"ssertEquals(FastMath.PI/2, oneInf.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,935,"ssertEquals(0.0, infOne.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,936,"ssertEquals(FastMath.PI/2, zeroInf.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,937,"ssertEquals(0.0, infZero.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,938,"ssertEquals(FastMath.PI, negInfOne.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,939,"ssertEquals(-3.0*FastMath.PI/4, negInfNegInf.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,940,"ssertEquals(-FastMath.PI/2, oneNegInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1030,"Assert.assertEquals(FastMath.PI/4, infInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1031,"Assert.assertEquals(FastMath.PI/2, oneInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1032,"Assert.assertEquals(0.0, infOne.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1033,"Assert.assertEquals(FastMath.PI/2, zeroInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1034,"Assert.assertEquals(0.0, infZero.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1035,"Assert.assertEquals(FastMath.PI, negInfOne.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1036,"Assert.assertEquals(-3.0*FastMath.PI/4, negInfNegInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1037,"Assert.assertEquals(-FastMath.PI/2, oneNegInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1043,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,947,"ssertEquals(nan, nanZero.getArgument());"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,948,"ssertEquals(nan, zeroNaN.getArgument());"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,949,"ssertEquals(nan, Complex.NaN.getArgument());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1045,Assert.assertTrue(Double.isNaN(nanZero.getArgument()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1046,Assert.assertTrue(Double.isNaN(zeroNaN.getArgument()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1047,Assert.assertTrue(Double.isNaN(Complex.NaN.getArgument()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1050,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,954,"ssertEquals(z, TestUtils.serializeAndRecover(z));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1053,"Assert.assertEquals(z, TestUtils.serializeAndRecover(z));"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,956,"ssertEquals(nanZero, ncmplx);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,957,ssertTrue(ncmplx.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1055,"Assert.assertEquals(nanZero, ncmplx);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1056,Assert.assertTrue(ncmplx.isNaN());
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,959,"ssertEquals(infInf, infcmplx);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,960,ssertTrue(infcmplx.isInfinite());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1058,"Assert.assertEquals(infInf, infcmplx);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1059,Assert.assertTrue(infcmplx.isInfinite());
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,962,"ssertEquals(tz, TestUtils.serializeAndRecover(tz));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1061,"Assert.assertEquals(tz, TestUtils.serializeAndRecover(tz));"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,964,"ssertEquals(nanZero, ntcmplx);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,965,ssertTrue(ntcmplx.isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1063,"Assert.assertEquals(nanZero, ntcmplx);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1064,Assert.assertTrue(ntcmplx.isNaN());
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,967,"ssertEquals(infInf, inftcmplx);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,968,ssertTrue(inftcmplx.isInfinite());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1066,"Assert.assertEquals(infInf, inftcmplx);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,1067,Assert.assertTrue(inftcmplx.isInfinite());
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,23,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,28,ublic class ComplexUtilsTest extends TestCase {
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,29,public class ComplexUtilsTest {
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,42,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,76,@Test
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,77,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,80,"Assert.fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,86,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,94,@Test
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,21,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,22,ublic class BetaDistributionTest extends TestCase {
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,23,public class BetaDistributionTest {
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,24,@Test
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,145,"ssertEquals(cumes[i], d.cumulativeProbability(x[i]), 1e-8);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,147,"Assert.assertEquals(cumes[i], d.cumulativeProbability(x[i]), 1e-8);"
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,149,"ssertEquals(x[i], d.inverseCumulativeProbability(cumes[i]), 1e-5);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,151,"Assert.assertEquals(x[i], d.inverseCumulativeProbability(cumes[i]), 1e-5);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,155,@Test
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,286,"ssertEquals(String.format(""density at x=%.1f for alpha=%.1f, beta=%.1f"", x[i], alpha, beta), expected[i], d.density(x[i]), 1e-5);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,289,"Assert.assertEquals(String.format(""density at x=%.1f for alpha=%.1f, beta=%.1f"", x[i], alpha, beta), expected[i], d.density(x[i]), 1e-5);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,293,@Test
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,295,"ssertEquals(dist.getNumericalMean(), 0.5, tol);"
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,296,"ssertEquals(dist.getNumericalVariance(), 1.0 / 12.0, tol);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,299,"Assert.assertEquals(dist.getNumericalMean(), 0.5, tol);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,300,"Assert.assertEquals(dist.getNumericalVariance(), 1.0 / 12.0, tol);"
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,299,"ssertEquals(dist.getNumericalMean(), 2.0 / 7.0, tol);"
False,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,300,"ssertEquals(dist.getNumericalVariance(), 10.0 / (49.0 * 8.0), tol);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,303,"Assert.assertEquals(dist.getNumericalMean(), 2.0 / 7.0, tol);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,304,"Assert.assertEquals(dist.getNumericalVariance(), 10.0 / (49.0 * 8.0), tol);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,16,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,17,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,26, Constructor for BinomialDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,28, @param name
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,30,ublic BinomialDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,31,uper(name);
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,83,@Test
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,98,@Test
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,112,@Test
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,121,"ssertEquals(dist.getNumericalMean(), 10d * 0.5d, tol);"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,122,"ssertEquals(dist.getNumericalVariance(), 10d * 0.5d * 0.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,118,"Assert.assertEquals(dist.getNumericalMean(), 10d * 0.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,119,"Assert.assertEquals(dist.getNumericalVariance(), 10d * 0.5d * 0.5d, tol);"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,125,"ssertEquals(dist.getNumericalMean(), 30d * 0.3d, tol);"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,126,"ssertEquals(dist.getNumericalVariance(), 30d * 0.3d * (1d - 0.3d), tol);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,122,"Assert.assertEquals(dist.getNumericalMean(), 30d * 0.3d, tol);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,123,"Assert.assertEquals(dist.getNumericalVariance(), 30d * 0.3d * (1d - 0.3d), tol);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,32, Constructor for CauchyDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,33, @param arg0
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,35,ublic CauchyDistributionTest(String arg0) {
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,36,uper(arg0);
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,42,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,36,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,73,@Test
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,81,@Test
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,88,"ssertEquals(1.2, distribution.getMedian(), 0.0);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,84,"Assert.assertEquals(1.2, distribution.getMedian(), 0.0);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,87,@Test
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,93,"ssertEquals(2.1, distribution.getScale(), 0.0);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,90,"Assert.assertEquals(2.1, distribution.getScale(), 0.0);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,93,@Test
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,99,"ail(""Cannot have zero scale"");"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,97,"Assert.fail(""Cannot have zero scale"");"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,105,"ail(""Cannot have negative scale"");"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,103,"Assert.fail(""Cannot have negative scale"");"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,109,@Test
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,115,ssertTrue(Double.isNaN(dist.getNumericalMean()));
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,116,ssertTrue(Double.isNaN(dist.getNumericalVariance()));
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,114,Assert.assertTrue(Double.isNaN(dist.getNumericalMean()));
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,115,Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,119,ssertTrue(Double.isNaN(dist.getNumericalMean()));
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,120,ssertTrue(Double.isNaN(dist.getNumericalVariance()));
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,118,Assert.assertTrue(Double.isNaN(dist.getNumericalMean()));
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,119,Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,21,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,30, Constructor for ChiSquareDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,31, @param name
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,33,ublic ChiSquareDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,34,uper(name);
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,83,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,78,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,85,@Test
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,99,@Test
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,105,"ssertEquals(5d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,102,"Assert.assertEquals(5d, distribution.getDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,105,@Test
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,123,"ssertEquals(expected[i], d.density(x[i]), 1e-5);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,121,"Assert.assertEquals(expected[i], d.density(x[i]), 1e-5);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,125,@Test
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,132,"ssertEquals(dist.getNumericalMean(), 1500, tol);"
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,133,"ssertEquals(dist.getNumericalVariance(), 3000, tol);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,131,"Assert.assertEquals(dist.getNumericalMean(), 1500, tol);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,132,"Assert.assertEquals(dist.getNumericalVariance(), 3000, tol);"
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,136,"ssertEquals(dist.getNumericalMean(), 1.12, tol);"
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,137,"ssertEquals(dist.getNumericalVariance(), 2.24, tol);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,135,"Assert.assertEquals(dist.getNumericalMean(), 1.12, tol);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,136,"Assert.assertEquals(dist.getNumericalVariance(), 2.24, tol);"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,23,import org.junit.After;
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,25,import org.junit.Before;
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,59,ublic abstract class ContinuousDistributionAbstractTest extends TestCase {
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,62,public abstract class ContinuousDistributionAbstractTest {
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,86, Constructor for ContinuousDistributionAbstractTest.
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,87, @param name
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,89,ublic ContinuousDistributionAbstractTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,90,uper(name);
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,124,Override
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,125,rotected void setUp() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,126,uper.setUp();
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,117,@Before
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,118,public void setUp() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,138,Override
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,139,rotected void tearDown() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,140,uper.tearDown();
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,130,@After
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,131,public void tearDown() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,187,@Test
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,196,@Test
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,205,@Test
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,213,@Test
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,236,@Test
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,244,"ail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,240,"Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,250,"ail(""Expecting MathIllegalArgumentException for p = -1"");"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,246,"Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,256,"ail(""Expecting MathIllegalArgumentException for p = 2"");"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,252,"Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,261,@Test
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,20,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,32, Constructor for ExponentialDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,33, @param name
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,35,ublic ExponentialDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,36,uper(name);
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,41,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,36,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,73,@Test
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,80,@Test
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,87,@Test
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,92,"ssertEquals(0.0905214, actual, 10e-4);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,90,"Assert.assertEquals(0.0905214, actual, 10e-4);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,93,@Test
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,97,"ssertEquals(0.0, d1.density(-1e-9));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,98,"ssertEquals(1.0, d1.density(0.0));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,99,"ssertEquals(0.0, d1.density(1000.0));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,100,"ssertEquals(FastMath.exp(-1), d1.density(1.0));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,101,"ssertEquals(FastMath.exp(-2), d1.density(2.0));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,96,"Assert.assertTrue(MathUtils.equals(0.0, d1.density(-1e-9), 1));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,97,"Assert.assertTrue(MathUtils.equals(1.0, d1.density(0.0), 1));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,98,"Assert.assertTrue(MathUtils.equals(0.0, d1.density(1000.0), 1));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,99,"Assert.assertTrue(MathUtils.equals(FastMath.exp(-1), d1.density(1.0), 1));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,100,"Assert.assertTrue(MathUtils.equals(FastMath.exp(-2), d1.density(2.0), 1));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,104,"ssertEquals(1/3.0, d2.density(0.0));"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,103,"Assert.assertTrue(MathUtils.equals(1/3.0, d2.density(0.0), 1));"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,106,"ssertEquals(0.2388437702, d2.density(1.0), 1e-8);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,105,"Assert.assertEquals(0.2388437702, d2.density(1.0), 1e-8);"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,109,"ssertEquals(0.1711390397, d2.density(2.0), 1e-8);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,108,"Assert.assertEquals(0.1711390397, d2.density(2.0), 1e-8);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,111,@Test
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,114,"ssertEquals(5d, distribution.getMean(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,114,"Assert.assertEquals(5d, distribution.getMean(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,117,@Test
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,120,"ail(""Should have generated NotStrictlyPositiveException"");"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,121,"Assert.fail(""Should have generated NotStrictlyPositiveException"");"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,127,@Test
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,131,"ssertEquals(dist.getNumericalMean(), 11d, tol);"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,132,"ssertEquals(dist.getNumericalVariance(), 11d * 11d, tol);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,133,"Assert.assertEquals(dist.getNumericalMean(), 11d, tol);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,134,"Assert.assertEquals(dist.getNumericalVariance(), 11d * 11d, tol);"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,135,"ssertEquals(dist.getNumericalMean(), 10.5d, tol);"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,136,"ssertEquals(dist.getNumericalVariance(), 10.5d * 10.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,137,"Assert.assertEquals(dist.getNumericalMean(), 10.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,138,"Assert.assertEquals(dist.getNumericalVariance(), 10.5d * 10.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,21,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,31, Constructor for FDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,32, @param name
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,34,ublic FDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,35,uper(name);
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,69,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,63,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,70,@Test
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,77,@Test
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,84,@Test
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,90,"ssertEquals(5d, dist.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,91,"ssertEquals(6d, dist.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,87,"Assert.assertEquals(5d, dist.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,88,"Assert.assertEquals(6d, dist.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,91,@Test
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,97,"ail(""Expecting NotStrictlyPositiveException for df = 0"");"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,95,"Assert.fail(""Expecting NotStrictlyPositiveException for df = 0"");"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,103,"ail(""Expecting NotStrictlyPositiveException for df = 0"");"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,101,"Assert.fail(""Expecting NotStrictlyPositiveException for df = 0"");"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,107,@Test
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,113,"ssertEquals(.999, x, 1.0e-5);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,112,"Assert.assertEquals(.999, x, 1.0e-5);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,115,@Test
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,120,"ssertEquals(0.975, x, 1.0e-5);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,120,"Assert.assertEquals(0.975, x, 1.0e-5);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,125,"ssertEquals(0.975, x, 1.0e-5);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,125,"Assert.assertEquals(0.975, x, 1.0e-5);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,128,@Test
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,133,ssertTrue(Double.isNaN(dist.getNumericalMean()));
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,134,ssertTrue(Double.isNaN(dist.getNumericalVariance()));
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,134,Assert.assertTrue(Double.isNaN(dist.getNumericalMean()));
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,135,Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,137,"ssertEquals(dist.getNumericalMean(), 3d / (3d - 2d), tol);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,138,ssertTrue(Double.isNaN(dist.getNumericalVariance()));
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,138,"Assert.assertEquals(dist.getNumericalMean(), 3d / (3d - 2d), tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,139,Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,141,"ssertEquals(dist.getNumericalMean(), 5d / (5d - 2d), tol);"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,142,"ssertEquals(dist.getNumericalVariance(), (2d * 5d * 5d * 4d) / 9d, tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,142,"Assert.assertEquals(dist.getNumericalMean(), 5d / (5d - 2d), tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,143,"Assert.assertEquals(dist.getNumericalVariance(), (2d * 5d * 5d * 4d) / 9d, tol);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,32, Constructor for GammaDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,33, @param name
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,35,ublic GammaDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,36,uper(name);
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,70,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,64,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,70,@Test
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,78,"ssertEquals(4d, distribution.getAlpha(), 0);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,79,"ssertEquals(2d, distribution.getBeta(), 0);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,73,"Assert.assertEquals(4d, distribution.getAlpha(), 0);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,74,"Assert.assertEquals(2d, distribution.getBeta(), 0);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,77,@Test
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,85,"ail(""Expecting NotStrictlyPositiveException for alpha = 0"");"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,81,"Assert.fail(""Expecting NotStrictlyPositiveException for alpha = 0"");"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,91,"ail(""Expecting NotStrictlyPositiveException for alpha = 0"");"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,87,"Assert.fail(""Expecting NotStrictlyPositiveException for alpha = 0"");"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,93,@Test
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,102,@Test
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,115,"ssertEquals(""probability for "" + x, expected, actual, 10e-4);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,113,"Assert.assertEquals(""probability for "" + x, expected, actual, 10e-4);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,121,"ssertEquals(""critical value for "" + p, expected, actual, 10e-4);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,119,"Assert.assertEquals(""critical value for "" + p, expected, actual, 10e-4);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,122,@Test
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,147,"ssertEquals(expected[i], d.density(x[i]), 1e-5);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,146,"Assert.assertEquals(expected[i], d.density(x[i]), 1e-5);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,150,@Test
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,157,@Test
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,162,"ssertEquals(dist.getNumericalMean(), 2, tol);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,163,"ssertEquals(dist.getNumericalVariance(), 4, tol);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,163,"Assert.assertEquals(dist.getNumericalMean(), 2, tol);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,164,"Assert.assertEquals(dist.getNumericalVariance(), 4, tol);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,166,"ssertEquals(dist.getNumericalMean(), 1.1d * 4.2d, tol);"
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,167,"ssertEquals(dist.getNumericalVariance(), 1.1d * 4.2d * 4.2d, tol);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,167,"Assert.assertEquals(dist.getNumericalMean(), 1.1d * 4.2d, tol);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,168,"Assert.assertEquals(dist.getNumericalVariance(), 1.1d * 4.2d * 4.2d, tol);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,35, Constructor for ChiSquareDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,36, @param name
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,38,ublic HypergeometricDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,39,uper(name);
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,86,@Test
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,101,@Test
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,116,@Test
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,130,@Test
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,136,"ail(""negative population size. NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,134,"Assert.fail(""negative population size. NotStrictlyPositiveException expected"");"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,142,"ail(""negative number of successes. NotPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,140,"Assert.fail(""negative number of successes. NotPositiveException expected"");"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,148,"ail(""negative sample size. NotPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,146,"Assert.fail(""negative sample size. NotPositiveException expected"");"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,154,"ail(""numberOfSuccesses > populationSize. NumberIsTooLargeException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,152,"Assert.fail(""numberOfSuccesses > populationSize. NumberIsTooLargeException expected"");"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,160,"ail(""sampleSize > populationSize. NumberIsTooLargeException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,158,"Assert.fail(""sampleSize > populationSize. NumberIsTooLargeException expected"");"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,164,@Test
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,168,"ssertEquals(5, dist.getPopulationSize());"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,169,"ssertEquals(3, dist.getNumberOfSuccesses());"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,170,"ssertEquals(4, dist.getSampleSize());"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,167,"Assert.assertEquals(5, dist.getPopulationSize());"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,168,"Assert.assertEquals(3, dist.getNumberOfSuccesses());"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,169,"Assert.assertEquals(4, dist.getSampleSize());"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,172,@Test
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,219,@Test
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,247,@Test
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,251,"ssertEquals(dist.getNumericalMean(), 40d * 100d / 1500d, tol);"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,252,"ssertEquals(dist.getNumericalVariance(), ( 100d * 40d * (1500d - 100d) * (1500d - 40d) ) / ( (1500d * 1500d * 1499d) ), tol);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,253,"Assert.assertEquals(dist.getNumericalMean(), 40d * 100d / 1500d, tol);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,254,"Assert.assertEquals(dist.getNumericalVariance(), ( 100d * 40d * (1500d - 100d) * (1500d - 40d) ) / ( (1500d * 1500d * 1499d) ), tol);"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,255,"ssertEquals(dist.getNumericalMean(), 55d * 200d / 3000d, tol);"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,256,"ssertEquals(dist.getNumericalVariance(), ( 200d * 55d * (3000d - 200d) * (3000d - 55d) ) / ( (3000d * 3000d * 2999d) ), tol);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,257,"Assert.assertEquals(dist.getNumericalMean(), 55d * 200d / 3000d, tol);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,258,"Assert.assertEquals(dist.getNumericalVariance(), ( 200d * 55d * (3000d - 200d) * (3000d - 55d) ) / ( (3000d * 3000d * 2999d) ), tol);"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,22,import org.junit.After;
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,24,import org.junit.Before;
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,23,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,47,ublic abstract class IntegerDistributionAbstractTest extends TestCase {
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,50,public abstract class IntegerDistributionAbstractTest {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,77, Constructor for IntegerDistributionAbstractTest.
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,78, @param name
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,80,ublic IntegerDistributionAbstractTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,81,uper(name);
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,112,Override
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,113,rotected void setUp() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,114,uper.setUp();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,105,@Before
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,106,public void setUp() {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,127,Override
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,128,rotected void tearDown() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,129,uper.tearDown();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,119,@After
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,120,public void tearDown() {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,147,"ssertEquals(""Incorrect density value returned for "" + densityTestPoints[i],"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,138,"Assert.assertEquals(""Incorrect density value returned for "" + densityTestPoints[i],"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,159,"ssertEquals(""Incorrect cumulative probability value returned for "" + cumulativeTestPoints[i],"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,150,"Assert.assertEquals(""Incorrect cumulative probability value returned for "" + cumulativeTestPoints[i],"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,172,"ssertEquals(""Incorrect inverse cumulative probability value returned for """
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,163,"Assert.assertEquals(""Incorrect inverse cumulative probability value returned for """
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,175,@Test
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,184,@Test
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,194,@Test
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,204,ssertEquals(
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,198,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,211,"ssertEquals(""Inconsistent probability for discrete range "" +"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,205,"Assert.assertEquals(""Inconsistent probability for discrete range "" +"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,219,"ssertEquals(""Inconsistent probability for discrete range "" +"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,213,"Assert.assertEquals(""Inconsistent probability for discrete range "" +"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,233,"ssertEquals(distribution.cumulativeProbability(one, two),"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,227,"Assert.assertEquals(distribution.cumulativeProbability(one, two),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,235,"ssertEquals(distribution.cumulativeProbability(one, two),"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,229,"Assert.assertEquals(distribution.cumulativeProbability(one, two),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,238,"ssertEquals(distribution.cumulativeProbability(two, ten),"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,232,"Assert.assertEquals(distribution.cumulativeProbability(two, ten),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,240,"ssertEquals(distribution.cumulativeProbability(two, ten),"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,234,"Assert.assertEquals(distribution.cumulativeProbability(two, ten),"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,243,@Test
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,251,@Test
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,259,"ail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,255,"Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,265,"ail(""Expecting MathIllegalArgumentException for p = -1"");"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,261,"Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,271,"ail(""Expecting MathIllegalArgumentException for p = 2"");"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,267,"Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,276,@Test
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,33, Constructor for NormalDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,34, @param arg0
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,36,ublic NormalDistributionTest(String arg0) {
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,37,uper(arg0);
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,73,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,67,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,87,@Test
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,107,@Test
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,115,@Test
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,121,"ssertEquals(2.1, distribution.getMean(), 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,118,"Assert.assertEquals(2.1, distribution.getMean(), 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,121,@Test
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,126,"ssertEquals(1.4, distribution.getStandardDeviation(), 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,124,"Assert.assertEquals(1.4, distribution.getStandardDeviation(), 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,127,@Test
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,132,"ail(""Should have generated NotStrictlyPositiveException"");"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,131,"Assert.fail(""Should have generated NotStrictlyPositiveException"");"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,137,@Test
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,149,"ssertEquals(expected[i], d.density(x[i]), 1e-9);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,149,"Assert.assertEquals(expected[i], d.density(x[i]), 1e-9);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,157,@Test
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,165,ssertTrue(lowerTail > 0.0d);
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,166,ssertTrue(upperTail < 1.0d);
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,166,Assert.assertTrue(lowerTail > 0.0d);
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,167,Assert.assertTrue(upperTail < 1.0d);
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,169,ssertTrue(lowerTail < 0.00001);
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,170,ssertTrue(upperTail > 0.99999);
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,170,Assert.assertTrue(lowerTail < 0.00001);
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,171,Assert.assertTrue(upperTail > 0.99999);
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,174,"ssertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,175,"ssertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,176,"ssertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,177,"ssertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,175,"Assert.assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,176,"Assert.assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,177,"Assert.assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,178,"Assert.assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,182,@Test
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,184,"ssertEquals(3.0, result, defaultTolerance);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,186,"Assert.assertEquals(3.0, result, defaultTolerance);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,186,"ssertEquals(1.0, result, defaultTolerance);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,188,"Assert.assertEquals(1.0, result, defaultTolerance);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,188,"ssertEquals(4.0, result, defaultTolerance);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,190,"Assert.assertEquals(4.0, result, defaultTolerance);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,190,"ssertEquals(2.0, result, defaultTolerance);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,192,"Assert.assertEquals(2.0, result, defaultTolerance);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,195,@Test
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,198,"ssertEquals(dist.getNumericalMean(), 0, tol);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,199,"ssertEquals(dist.getNumericalVariance(), 1, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,201,"Assert.assertEquals(dist.getNumericalMean(), 0, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,202,"Assert.assertEquals(dist.getNumericalVariance(), 1, tol);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,202,"ssertEquals(dist.getNumericalMean(), 2.2, tol);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,203,"ssertEquals(dist.getNumericalVariance(), 1.4 * 1.4, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,205,"Assert.assertEquals(dist.getNumericalMean(), 2.2, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,206,"Assert.assertEquals(dist.getNumericalVariance(), 1.4 * 1.4, tol);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,206,"ssertEquals(dist.getNumericalMean(), -2000.9, tol);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,207,"ssertEquals(dist.getNumericalVariance(), 10.4 * 10.4, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,209,"Assert.assertEquals(dist.getNumericalMean(), -2000.9, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,210,"Assert.assertEquals(dist.getNumericalVariance(), 10.4 * 10.4, tol);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,19,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,20,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,29, Constructor for PascalDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,30, @param name
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,32,ublic PascalDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,33,uper(name);
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,39,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,34,public void setUp() {
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,91,@Test
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,106,@Test
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,120,@Test
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,128,"ssertEquals(dist.getNumericalMean(), ( 10d * 0.5d ) / 0.5d, tol);"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,129,"ssertEquals(dist.getNumericalVariance(), ( 10d * 0.5d ) / (0.5d * 0.5d), tol);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,126,"Assert.assertEquals(dist.getNumericalMean(), ( 10d * 0.5d ) / 0.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,127,"Assert.assertEquals(dist.getNumericalVariance(), ( 10d * 0.5d ) / (0.5d * 0.5d), tol);"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,132,"ssertEquals(dist.getNumericalMean(), ( 25d * 0.3d ) / 0.7d, tol);"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,133,"ssertEquals(dist.getNumericalVariance(), ( 25d * 0.3d ) / (0.7d * 0.7d), tol);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,130,"Assert.assertEquals(dist.getNumericalMean(), ( 25d * 0.3d ) / 0.7d, tol);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,131,"Assert.assertEquals(dist.getNumericalVariance(), ( 25d * 0.3d ) / (0.7d * 0.7d), tol);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,39,ublic PoissonDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,40,uper(name);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,41,public PoissonDistributionTest() {
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,116,@Test
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,119,"ssertEquals(0.706281887248, result, 1E-10);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,121,"Assert.assertEquals(0.706281887248, result, 1E-10);"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,124,"ssertEquals(0.820070051552, result, 1E-10);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,126,"Assert.assertEquals(0.820070051552, result, 1E-10);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,133,@Test
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,133,"ssertEquals(Integer.MAX_VALUE, dist.inverseCumulativeProbability(1.0d));"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,134,"ssertEquals(-1, dist.inverseCumulativeProbability(0d));"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,136,"Assert.assertEquals(Integer.MAX_VALUE, dist.inverseCumulativeProbability(1.0d));"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,137,"Assert.assertEquals(-1, dist.inverseCumulativeProbability(0d));"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,140,@Test
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,141,"ail(""negative mean: NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,145,"Assert.fail(""negative mean: NotStrictlyPositiveException expected"");"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,147,"ssertEquals(10.0, dist.getMean(), 0.0);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,151,"Assert.assertEquals(10.0, dist.getMean(), 0.0);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,154,@Test
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,162,"ssertFalse(""NaN cumulative probability returned for mean = "" +"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,167,"Assert.assertFalse(""NaN cumulative probability returned for mean = "" +"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,165,"ssertTrue(""Zero cum probaility returned for mean = "" +"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,170,"Assert.assertTrue(""Zero cum probaility returned for mean = "" +"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,169,"ail(""mean of "" + mean + "" and x of "" + x + "" caused "" + ex.getMessage());"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,174,"Assert.fail(""mean of "" + mean + "" and x of "" + x + "" caused "" + ex.getMessage());"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,186,@Test
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,194,"ssertFalse(""NaN cumulative probability returned for mean = "" +"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,200,"Assert.assertFalse(""NaN cumulative probability returned for mean = "" +"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,196,"ssertTrue(""Zero cum probability returned for mean = "" +"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,202,"Assert.assertTrue(""Zero cum probability returned for mean = "" +"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,206,@Test
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,211,ssertTrue(p >= dist.cumulativeProbability(ret));
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,212,ssertTrue(p < dist.cumulativeProbability(ret + 1));
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,218,Assert.assertTrue(p >= dist.cumulativeProbability(ret));
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,219,Assert.assertTrue(p < dist.cumulativeProbability(ret + 1));
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,214,"ail(""mean of "" + mean + "" and p of "" + p + "" caused "" + ex.getMessage());"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,221,"Assert.fail(""mean of "" + mean + "" and p of "" + p + "" caused "" + ex.getMessage());"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,229,@Test
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,227,"ssertEquals(dist.getNumericalMean(), 1, tol);"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,228,"ssertEquals(dist.getNumericalVariance(), 1, tol);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,235,"Assert.assertEquals(dist.getNumericalMean(), 1, tol);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,236,"Assert.assertEquals(dist.getNumericalVariance(), 1, tol);"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,231,"ssertEquals(dist.getNumericalMean(), 11.23, tol);"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,232,"ssertEquals(dist.getNumericalVariance(), 11.23, tol);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,239,"Assert.assertEquals(dist.getNumericalMean(), 11.23, tol);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,240,"Assert.assertEquals(dist.getNumericalVariance(), 11.23, tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,21,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,31, Constructor for TDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,32, @param name
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,34,ublic TDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,35,uper(name);
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,70,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,64,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,74,@Test
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,81,@Test
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,97,@Test
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,105,@Test
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,110,"ssertEquals(5d, dist.getDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,108,"Assert.assertEquals(5d, dist.getDegreesOfFreedom(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,111,@Test
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,116,"ail(""Expecting NotStrictlyPositiveException for df = 0"");"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,115,"Assert.fail(""Expecting NotStrictlyPositiveException for df = 0"");"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,121,@Test
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,127,ssertTrue(Double.isNaN(dist.getNumericalMean()));
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,128,ssertTrue(Double.isNaN(dist.getNumericalVariance()));
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,127,Assert.assertTrue(Double.isNaN(dist.getNumericalMean()));
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,128,Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,131,"ssertEquals(dist.getNumericalMean(), 0, tol);"
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,132,ssertTrue(Double.isInfinite(dist.getNumericalVariance()));
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,131,"Assert.assertEquals(dist.getNumericalMean(), 0, tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,132,Assert.assertTrue(Double.isInfinite(dist.getNumericalVariance()));
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,135,"ssertEquals(dist.getNumericalMean(), 0, tol);"
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,136,"ssertEquals(dist.getNumericalVariance(), 5d / (5d - 2d), tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,135,"Assert.assertEquals(dist.getNumericalMean(), 0, tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,136,"Assert.assertEquals(dist.getNumericalVariance(), 5d / (5d - 2d), tol);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,24,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,34, Constructor for CauchyDistributionTest.
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,35, @param arg0
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,37,ublic WeibullDistributionTest(String arg0) {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,38,uper(arg0);
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,66,@Test
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,74,@Test
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,81,"ssertEquals(1, dist.getShape(), 0);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,77,"Assert.assertEquals(1, dist.getShape(), 0);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,84,"ail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,80,"Assert.fail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,86,@Test
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,92,"ssertEquals(2, dist.getScale(), 0);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,89,"Assert.assertEquals(2, dist.getScale(), 0);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,95,"ail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,92,"Assert.fail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,98,@Test
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,107,"ssertEquals(dist.getNumericalMean(), 3.5 * FastMath.exp(Gamma.logGamma(1 + (1 / 2.5))), tol);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,108,"ssertEquals(dist.getNumericalVariance(), (3.5 * 3.5) *"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,105,"Assert.assertEquals(dist.getNumericalMean(), 3.5 * FastMath.exp(Gamma.logGamma(1 + (1 / 2.5))), tol);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,106,"Assert.assertEquals(dist.getNumericalVariance(), (3.5 * 3.5) *"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,113,"ssertEquals(dist.getNumericalMean(), 2.222 * FastMath.exp(Gamma.logGamma(1 + (1 / 10.4))), tol);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,114,"ssertEquals(dist.getNumericalVariance(), (2.222 * 2.222) *"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,111,"Assert.assertEquals(dist.getNumericalMean(), 2.222 * FastMath.exp(Gamma.logGamma(1 + (1 / 10.4))), tol);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,112,"Assert.assertEquals(dist.getNumericalVariance(), (2.222 * 2.222) *"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,24,import org.junit.Test;
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,32,ublic ZipfDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,33,uper(name);
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,35,@Test
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,39,"ail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,39,"Assert.fail(""NotStrictlyPositiveException expected"");"
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,45,"ail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,45,"Assert.fail(""NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,98,@Test
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,103,"ssertEquals(dist.getNumericalMean(), FastMath.sqrt(2), tol);"
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,104,"ssertEquals(dist.getNumericalVariance(), 0.24264068711928521, tol);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,104,"Assert.assertEquals(dist.getNumericalMean(), FastMath.sqrt(2), tol);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,105,"Assert.assertEquals(dist.getNumericalVariance(), 0.24264068711928521, tol);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,19,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,21,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,29,"ssertEquals(BigFraction.ZERO, BigFractionField.getInstance().getZero());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,28,"Assert.assertEquals(BigFraction.ZERO, BigFractionField.getInstance().getZero());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,34,"ssertEquals(BigFraction.ONE, BigFractionField.getInstance().getOne());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,33,"Assert.assertEquals(BigFraction.ONE, BigFractionField.getInstance().getOne());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,41,ssertTrue(field == TestUtils.serializeAndRecover(field));
True,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFieldTest.java,40,Assert.assertTrue(field == TestUtils.serializeAndRecover(field));
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,28,import org.junit.Before;
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,29,import org.junit.Test;
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,28,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,30,ublic class BigFractionFormatTest extends TestCase {
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,32,public class BigFractionFormatTest {
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,39,Override
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,40,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,41,@Before
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,42,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,47,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,50,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,53,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,53,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,56,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,59,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,61,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,65,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,64,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,68,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,71,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,72,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,77,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,75,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,80,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,83,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,82,"ssertEquals(""1 2 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,88,"Assert.assertEquals(""1 2 / 3"", actual);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,85,"ssertEquals(""5 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,91,"Assert.assertEquals(""5 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,94,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,92,"ssertEquals(""-1 2 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,99,"Assert.assertEquals(""-1 2 / 3"", actual);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,95,"ssertEquals(""-5 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,102,"Assert.assertEquals(""-5 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,105,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,103,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,104,"ssertEquals(BigInteger.ONE, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,105,"ssertEquals(BigInteger.valueOf(2l), c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,111,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,112,"Assert.assertEquals(BigInteger.ONE, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,113,"Assert.assertEquals(BigInteger.valueOf(2l), c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,108,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,109,"ssertEquals(BigInteger.ONE, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,110,"ssertEquals(BigInteger.valueOf(2l), c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,116,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,117,"Assert.assertEquals(BigInteger.ONE, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,118,"Assert.assertEquals(BigInteger.valueOf(2l), c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,112,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,120,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,124,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,120,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,121,"ssertEquals(BigInteger.TEN, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,122,"ssertEquals(BigInteger.ONE, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,129,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,130,"Assert.assertEquals(BigInteger.TEN, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,131,"Assert.assertEquals(BigInteger.ONE, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,124,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,133,Assert.fail(ex.getMessage());
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,128,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,129,"ssertEquals(BigInteger.TEN, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,130,"ssertEquals(BigInteger.ONE, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,137,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,138,"Assert.assertEquals(BigInteger.TEN, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,139,"Assert.assertEquals(BigInteger.ONE, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,132,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,141,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,145,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,141,ail(msg);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,151,Assert.fail(msg);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,147,ail(msg);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,157,Assert.fail(msg);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,163,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,158,ail(msg);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,169,Assert.fail(msg);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,164,ail(msg);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,175,Assert.fail(msg);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,181,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,175,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,176,"ssertEquals(-1, c.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,177,"ssertEquals(2, c.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,187,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,188,"Assert.assertEquals(-1, c.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,189,"Assert.assertEquals(2, c.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,180,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,181,"ssertEquals(-1, c.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,182,"ssertEquals(2, c.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,192,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,193,"Assert.assertEquals(-1, c.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,194,"Assert.assertEquals(2, c.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,186,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,187,"ssertEquals(-1, c.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,188,"ssertEquals(2, c.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,198,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,199,"Assert.assertEquals(-1, c.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,200,"Assert.assertEquals(2, c.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,191,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,192,"ssertEquals(-1, c.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,193,"ssertEquals(2, c.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,203,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,204,"Assert.assertEquals(-1, c.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,205,"Assert.assertEquals(2, c.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,195,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,207,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,211,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,204,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,205,"ssertEquals(5, c.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,206,"ssertEquals(3, c.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,217,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,218,"Assert.assertEquals(5, c.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,219,"Assert.assertEquals(3, c.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,208,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,221,Assert.fail(ex.getMessage());
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,213,"ail(""invalid improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,226,"Assert.fail(""invalid improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,232,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,223,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,224,"ssertEquals(-5, c.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,225,"ssertEquals(3, c.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,237,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,238,"Assert.assertEquals(-5, c.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,239,"Assert.assertEquals(3, c.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,227,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,241,Assert.fail(ex.getMessage());
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,232,"ail(""invalid improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,246,"Assert.fail(""invalid improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,252,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,242,"ail(""invalid minus in improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,257,"Assert.fail(""invalid minus in improper fraction."");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,249,"ail(""invalid minus in improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,264,"Assert.fail(""invalid minus in improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,270,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,260,"ssertEquals(FastMath.PI, f1.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,276,"Assert.assertEquals(FastMath.PI, f1.doubleValue(), 0.0);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,266,"ssertEquals(FastMath.PI, f2.doubleValue(), 0.0);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,267,"ssertEquals(f1, f2);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,282,"Assert.assertEquals(FastMath.PI, f2.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,283,"Assert.assertEquals(f1, f2);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,270,"ssertEquals(pi, f1.bigDecimalValue(99, BigDecimal.ROUND_HALF_EVEN));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,286,"Assert.assertEquals(pi, f1.bigDecimalValue(99, BigDecimal.ROUND_HALF_EVEN));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,289,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,278,"ssertEquals(nf, properFormat.getNumeratorFormat());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,295,"Assert.assertEquals(nf, properFormat.getNumeratorFormat());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,285,"ssertEquals(nf, improperFormat.getNumeratorFormat());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,302,"Assert.assertEquals(nf, improperFormat.getNumeratorFormat());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,306,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,294,"ssertEquals(nf, properFormat.getDenominatorFormat());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,312,"Assert.assertEquals(nf, properFormat.getDenominatorFormat());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,301,"ssertEquals(nf, improperFormat.getDenominatorFormat());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,319,"Assert.assertEquals(nf, improperFormat.getDenominatorFormat());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,323,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,312,"ssertEquals(nf, format.getWholeFormat());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,331,"Assert.assertEquals(nf, format.getWholeFormat());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,335,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,317,"ssertEquals(""10 / 1"", improperFormat.format(10l));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,337,"Assert.assertEquals(""10 / 1"", improperFormat.format(10l));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,340,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,321,"ssertEquals(""1 / 16"", improperFormat.format(0.0625));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,342,"Assert.assertEquals(""1 / 16"", improperFormat.format(0.0625));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,27,import org.junit.Test;
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,27,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,29,ublic class BigFractionTest extends TestCase {
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,30,public class BigFractionTest {
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,32,"ssertEquals(expectedNumerator, actual.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,33,"ssertEquals(expectedDenominator, actual.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,33,"Assert.assertEquals(expectedNumerator, actual.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,34,"Assert.assertEquals(expectedDenominator, actual.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,37,"ssertEquals(expectedNumerator, actual.getNumeratorAsLong());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,38,"ssertEquals(expectedDenominator, actual.getDenominatorAsLong());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,38,"Assert.assertEquals(expectedNumerator, actual.getNumeratorAsLong());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,39,"Assert.assertEquals(expectedDenominator, actual.getDenominatorAsLong());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,42,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,59,"ssertEquals(0.00000000000001, new BigFraction(0.00000000000001).doubleValue(), 0.0);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,60,"ssertEquals(0.40000000000001, new BigFraction(0.40000000000001).doubleValue(), 0.0);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,61,"ssertEquals(15.0000000000001, new BigFraction(15.0000000000001).doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,61,"Assert.assertEquals(0.00000000000001, new BigFraction(0.00000000000001).doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,62,"Assert.assertEquals(0.40000000000001, new BigFraction(0.40000000000001).doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,63,"Assert.assertEquals(15.0000000000001, new BigFraction(15.0000000000001).doubleValue(), 0.0);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,66,"ail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,68,"Assert.fail(""Expecting NullArgumentException"");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,72,"ail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,74,"Assert.fail(""Expecting NullArgumentException"");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,78,"ail(""Expecting ArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,80,"Assert.fail(""Expecting ArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,84,"ail(""Expecting FractionConversionException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,86,"Assert.fail(""Expecting FractionConversionException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,92,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,95,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,98,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,105,@Test
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,151,@Test
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,163,@Test
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,175,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,174,"ssertEquals(0, first.compareTo(first));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,175,"ssertEquals(0, first.compareTo(third));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,176,"ssertEquals(1, first.compareTo(second));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,177,"ssertEquals(-1, second.compareTo(first));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,181,"Assert.assertEquals(0, first.compareTo(first));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,182,"Assert.assertEquals(0, first.compareTo(third));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,183,"Assert.assertEquals(1, first.compareTo(second));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,184,"Assert.assertEquals(-1, second.compareTo(first));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,184,"ssertEquals(-1, pi1.compareTo(pi2));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,185,"ssertEquals( 1, pi2.compareTo(pi1));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,186,"ssertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,191,"Assert.assertEquals(-1, pi1.compareTo(pi2));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,192,"Assert.assertEquals( 1, pi2.compareTo(pi1));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,193,"Assert.assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,197,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,194,"ssertEquals(0.5, first.doubleValue(), 0.0);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,195,"ssertEquals(1.0 / 3.0, second.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,202,"Assert.assertEquals(0.5, first.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,203,"Assert.assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,206,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,202,"ssertEquals(0.5f, first.floatValue(), 0.0f);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,203,"ssertEquals((float) (1.0 / 3.0), second.floatValue(), 0.0f);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,211,"Assert.assertEquals(0.5f, first.floatValue(), 0.0f);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,212,"Assert.assertEquals((float) (1.0 / 3.0), second.floatValue(), 0.0f);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,215,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,210,"ssertEquals(0, first.intValue());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,211,"ssertEquals(1, second.intValue());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,220,"Assert.assertEquals(0, first.intValue());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,221,"Assert.assertEquals(1, second.intValue());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,224,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,218,"ssertEquals(0L, first.longValue());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,219,"ssertEquals(1L, second.longValue());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,229,"Assert.assertEquals(0L, first.longValue());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,230,"Assert.assertEquals(1L, second.longValue());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,233,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,234,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,246,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,239,"ssertEquals(1l, new BigFraction(Double.MAX_VALUE).getDenominatorAsLong());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,240,"ssertEquals(1l, new BigFraction(Double.longBitsToDouble(0x0010000000000000L)).getNumeratorAsLong());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,241,"ssertEquals(1l, new BigFraction(Double.MIN_VALUE).getNumeratorAsLong());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,251,"Assert.assertEquals(1l, new BigFraction(Double.MAX_VALUE).getDenominatorAsLong());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,252,"Assert.assertEquals(1l, new BigFraction(Double.longBitsToDouble(0x0010000000000000L)).getNumeratorAsLong());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,253,"Assert.assertEquals(1l, new BigFraction(Double.MIN_VALUE).getNumeratorAsLong());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,256,@Test
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,267,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,259,"ssertEquals(3, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,260,"ssertEquals(2, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,273,"Assert.assertEquals(3, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,274,"Assert.assertEquals(2, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,264,"ssertEquals(3, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,265,"ssertEquals(4, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,278,"Assert.assertEquals(3, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,279,"Assert.assertEquals(4, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,269,"ssertEquals(-47, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,270,"ssertEquals(15, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,283,"Assert.assertEquals(-47, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,284,"Assert.assertEquals(15, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,275,"ail(""expecting ArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,289,"Assert.fail(""expecting ArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,282,"ssertEquals(1, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,283,"ssertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,296,"Assert.assertEquals(1, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,297,"Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,300,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,291,"ssertEquals(-2, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,292,"ssertEquals(3, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,306,"Assert.assertEquals(-2, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,307,"Assert.assertEquals(3, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,296,"ssertEquals(2, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,297,"ssertEquals(3, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,311,"Assert.assertEquals(2, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,312,"Assert.assertEquals(3, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,302,"ssertEquals(Integer.MIN_VALUE + 2, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,303,"ssertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,317,"Assert.assertEquals(Integer.MIN_VALUE + 2, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,318,"Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,322,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,319,"ssertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,320,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,335,"Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,336,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,325,"ssertEquals(13 * 13 * 17 * 2 * 2, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,326,"ssertEquals(-17 - 2 * 13 * 2, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,341,"Assert.assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,342,"Assert.assertEquals(-17 - 2 * 13 * 2, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,330,"ail(""expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,346,"Assert.fail(""expecting NullArgumentException"");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,339,"ssertEquals(52451, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,340,"ssertEquals(1934917632, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,355,"Assert.assertEquals(52451, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,356,"Assert.assertEquals(1934917632, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,345,"ssertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,346,"ssertEquals(3, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,361,"Assert.assertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,362,"Assert.assertEquals(3, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,350,"ssertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,351,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,366,"Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,367,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,354,"ssertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,355,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,370,"Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,371,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,359,"ssertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,360,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,375,"Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,376,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,363,"ssertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,364,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,379,"Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,380,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,368,"ssertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,369,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,384,"Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,385,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,372,"ssertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,373,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,388,"Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,389,"Assert.assertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,393,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,390,"ail(""expecting ArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,407,"Assert.fail(""expecting ArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,397,"ssertSame(BigFraction.ZERO, f);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,414,"Assert.assertSame(BigFraction.ZERO, f);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,402,"ssertEquals(2, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,403,"ssertEquals(7, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,419,"Assert.assertEquals(2, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,420,"Assert.assertEquals(7, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,407,"ssertEquals(1, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,408,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,424,"Assert.assertEquals(1, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,425,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,413,"ssertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,414,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,430,"Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,431,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,418,"ail(""expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,435,"Assert.fail(""expecting NullArgumentException"");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,424,"ssertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,425,"ssertEquals(1, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,441,"Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,442,"Assert.assertEquals(1, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,429,"ssertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,430,"ssertEquals(1, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,446,"Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,447,"Assert.assertEquals(1, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,434,"ssertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,435,"ssertEquals(1, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,451,"Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,452,"Assert.assertEquals(1, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,456,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,451,"ssertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,452,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,469,"Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,470,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,455,"ssertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,456,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,473,"Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,474,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,459,"ssertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,460,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,477,"Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,478,"Assert.assertEquals(1, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,464,"ail(""expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,482,"Assert.fail(""expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,488,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,482,"ail(""expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,501,"Assert.fail(""expecting NullArgumentException"");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,491,"ssertEquals(-13085, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,492,"ssertEquals(1934917632, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,510,"Assert.assertEquals(-13085, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,511,"Assert.assertEquals(1934917632, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,497,"ssertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,498,"ssertEquals(3, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,516,"Assert.assertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,517,"Assert.assertEquals(3, f.getDenominatorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,503,"ssertEquals(Integer.MAX_VALUE - 1, f.getNumeratorAsInt());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,504,"ssertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,522,"Assert.assertEquals(Integer.MAX_VALUE - 1, f.getNumeratorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,523,"Assert.assertEquals(1, f.getDenominatorAsInt());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,527,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,509,"ssertEquals(new BigDecimal(0.5), new BigFraction(1, 2).bigDecimalValue());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,510,"ssertEquals(new BigDecimal(""0.0003""), new BigFraction(3, 10000).bigDecimalValue());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,511,"ssertEquals(new BigDecimal(""0""), new BigFraction(1, 3).bigDecimalValue(BigDecimal.ROUND_DOWN));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,512,"ssertEquals(new BigDecimal(""0.333""), new BigFraction(1, 3).bigDecimalValue(3, BigDecimal.ROUND_DOWN));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,529,"Assert.assertEquals(new BigDecimal(0.5), new BigFraction(1, 2).bigDecimalValue());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,530,"Assert.assertEquals(new BigDecimal(""0.0003""), new BigFraction(3, 10000).bigDecimalValue());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,531,"Assert.assertEquals(new BigDecimal(""0""), new BigFraction(1, 3).bigDecimalValue(BigDecimal.ROUND_DOWN));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,532,"Assert.assertEquals(new BigDecimal(""0.333""), new BigFraction(1, 3).bigDecimalValue(3, BigDecimal.ROUND_DOWN));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,535,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,518,ssertTrue(zero.equals(zero));
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,519,ssertFalse(zero.equals(nullFraction));
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,520,ssertFalse(zero.equals(Double.valueOf(0)));
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,539,Assert.assertTrue(zero.equals(zero));
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,540,Assert.assertFalse(zero.equals(nullFraction));
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,541,Assert.assertFalse(zero.equals(Double.valueOf(0)));
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,522,ssertTrue(zero.equals(zero2));
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,523,"ssertEquals(zero.hashCode(), zero2.hashCode());"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,543,Assert.assertTrue(zero.equals(zero2));
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,544,"Assert.assertEquals(zero.hashCode(), zero2.hashCode());"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,525,ssertFalse((one.equals(zero) || zero.equals(one)));
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,526,ssertTrue(one.equals(BigFraction.ONE));
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,546,Assert.assertFalse((one.equals(zero) || zero.equals(one)));
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,547,Assert.assertTrue(one.equals(BigFraction.ONE));
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,550,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,531,"ssertTrue(threeFourths.equals(BigFraction.getReducedFraction(6, 8)));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,532,"ssertTrue(BigFraction.ZERO.equals(BigFraction.getReducedFraction(0, -1)));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,553,"Assert.assertTrue(threeFourths.equals(BigFraction.getReducedFraction(6, 8)));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,554,"Assert.assertTrue(BigFraction.ZERO.equals(BigFraction.getReducedFraction(0, -1)));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,535,"ail(""expecting ArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,557,"Assert.fail(""expecting ArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,539,"ssertEquals(BigFraction.getReducedFraction(2, Integer.MIN_VALUE).getNumeratorAsInt(), -1);"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,540,"ssertEquals(BigFraction.getReducedFraction(1, -1).getNumeratorAsInt(), -1);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,561,"Assert.assertEquals(BigFraction.getReducedFraction(2, Integer.MIN_VALUE).getNumeratorAsInt(), -1);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,562,"Assert.assertEquals(BigFraction.getReducedFraction(1, -1).getNumeratorAsInt(), -1);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,565,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,544,"ssertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,545,"ssertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13l));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,546,"ssertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(BigInteger.valueOf(13l)));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,547,"ssertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,548,"ssertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0l));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,549,"ssertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(BigInteger.valueOf(0l)));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,550,"ssertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,551,"ssertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13l));"
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,552,"ssertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(BigInteger.valueOf(-13l)));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,567,"Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,568,"Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13l));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,569,"Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(BigInteger.valueOf(13l)));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,570,"Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,571,"Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0l));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,572,"Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(BigInteger.valueOf(0l)));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,573,"Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,574,"Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13l));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,575,"Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(BigInteger.valueOf(-13l)));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,578,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,561,"ssertEquals(correctResult, errorResult);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,585,"Assert.assertEquals(correctResult, errorResult);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,588,@Test
False,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,571,"ssertEquals(fraction, TestUtils.serializeAndRecover(fraction));"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,596,"Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction));"
False,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,19,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,21,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,29,"ssertEquals(Fraction.ZERO, FractionField.getInstance().getZero());"
True,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,28,"Assert.assertEquals(Fraction.ZERO, FractionField.getInstance().getZero());"
False,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,34,"ssertEquals(Fraction.ONE, FractionField.getInstance().getOne());"
True,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,33,"Assert.assertEquals(Fraction.ONE, FractionField.getInstance().getOne());"
False,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,41,ssertTrue(field == TestUtils.serializeAndRecover(field));
True,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,src/test/java/org/apache/commons/math/fraction/FractionFieldTest.java,40,Assert.assertTrue(field == TestUtils.serializeAndRecover(field));
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,26,import org.junit.Before;
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,27,import org.junit.Test;
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,26,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,28,ublic class FractionFormatTest extends TestCase {
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,30,public class FractionFormatTest {
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,37,Override
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,38,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,39,@Before
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,40,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,45,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,48,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,51,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,51,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,54,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,57,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,59,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,63,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,62,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,66,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,69,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,70,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,75,"Assert.assertEquals(expected, actual);"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,73,"ssertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,78,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,81,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,80,"ssertEquals(""1 2 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,86,"Assert.assertEquals(""1 2 / 3"", actual);"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,83,"ssertEquals(""5 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,89,"Assert.assertEquals(""5 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,92,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,90,"ssertEquals(""-1 2 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,97,"Assert.assertEquals(""-1 2 / 3"", actual);"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,93,"ssertEquals(""-5 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,100,"Assert.assertEquals(""-5 / 3"", actual);"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,103,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,101,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,102,"ssertEquals(1, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,103,"ssertEquals(2, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,109,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,110,"Assert.assertEquals(1, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,111,"Assert.assertEquals(2, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,106,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,107,"ssertEquals(1, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,108,"ssertEquals(2, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,114,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,115,"Assert.assertEquals(1, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,116,"Assert.assertEquals(2, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,110,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,118,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,122,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,118,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,119,"ssertEquals(10, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,120,"ssertEquals(1, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,127,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,128,"Assert.assertEquals(10, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,129,"Assert.assertEquals(1, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,122,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,131,Assert.fail(ex.getMessage());
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,126,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,127,"ssertEquals(10, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,128,"ssertEquals(1, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,135,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,136,"Assert.assertEquals(10, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,137,"Assert.assertEquals(1, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,130,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,139,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,143,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,139,ail(msg);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,149,Assert.fail(msg);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,145,ail(msg);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,155,Assert.fail(msg);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,161,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,156,ail(msg);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,167,Assert.fail(msg);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,162,ail(msg);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,173,Assert.fail(msg);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,179,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,173,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,174,"ssertEquals(-1, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,175,"ssertEquals(2, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,185,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,186,"Assert.assertEquals(-1, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,187,"Assert.assertEquals(2, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,178,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,179,"ssertEquals(-1, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,180,"ssertEquals(2, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,190,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,191,"Assert.assertEquals(-1, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,192,"Assert.assertEquals(2, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,184,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,185,"ssertEquals(-1, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,186,"ssertEquals(2, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,196,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,197,"Assert.assertEquals(-1, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,198,"Assert.assertEquals(2, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,189,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,190,"ssertEquals(-1, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,191,"ssertEquals(2, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,201,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,202,"Assert.assertEquals(-1, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,203,"Assert.assertEquals(2, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,193,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,205,Assert.fail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,209,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,202,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,203,"ssertEquals(5, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,204,"ssertEquals(3, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,215,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,216,"Assert.assertEquals(5, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,217,"Assert.assertEquals(3, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,206,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,219,Assert.fail(ex.getMessage());
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,211,"ail(""invalid improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,224,"Assert.fail(""invalid improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,230,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,221,ssertNotNull(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,222,"ssertEquals(-5, c.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,223,"ssertEquals(3, c.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,235,Assert.assertNotNull(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,236,"Assert.assertEquals(-5, c.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,237,"Assert.assertEquals(3, c.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,225,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,239,Assert.fail(ex.getMessage());
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,230,"ail(""invalid improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,244,"Assert.fail(""invalid improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,250,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,240,"ail(""invalid minus in improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,255,"Assert.fail(""invalid minus in improper fraction."");"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,247,"ail(""invalid minus in improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,262,"Assert.fail(""invalid minus in improper fraction."");"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,268,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,258,"ssertEquals(nf, properFormat.getNumeratorFormat());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,274,"Assert.assertEquals(nf, properFormat.getNumeratorFormat());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,265,"ssertEquals(nf, improperFormat.getNumeratorFormat());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,281,"Assert.assertEquals(nf, improperFormat.getNumeratorFormat());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,285,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,274,"ssertEquals(nf, properFormat.getDenominatorFormat());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,291,"Assert.assertEquals(nf, properFormat.getDenominatorFormat());"
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,281,"ssertEquals(nf, improperFormat.getDenominatorFormat());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,298,"Assert.assertEquals(nf, improperFormat.getDenominatorFormat());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,302,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,292,"ssertEquals(nf, format.getWholeFormat());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,310,"Assert.assertEquals(nf, format.getWholeFormat());"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,314,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,297,"ssertEquals(""10 / 1"", improperFormat.format(10l));"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,316,"Assert.assertEquals(""10 / 1"", improperFormat.format(10l));"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,319,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,301,"ssertEquals(""355 / 113"", improperFormat.format(FastMath.PI));"
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,321,"Assert.assertEquals(""355 / 113"", improperFormat.format(FastMath.PI));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,30,ublic class FractionTest extends TestCase {
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,31,public class FractionTest {
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,33,"ssertEquals(expectedNumerator, actual.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,34,"ssertEquals(expectedDenominator, actual.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,34,"Assert.assertEquals(expectedNumerator, actual.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,35,"Assert.assertEquals(expectedDenominator, actual.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,38,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,51,ail();
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,53,Assert.fail();
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,57,ail();
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,59,Assert.fail();
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,68,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,70,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,73,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,80,@Test
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,126,@Test
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,138,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,141,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,147,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,153,@Test
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,165,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,163,"ssertEquals(0, first.compareTo(first));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,164,"ssertEquals(0, first.compareTo(third));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,165,"ssertEquals(1, first.compareTo(second));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,166,"ssertEquals(-1, second.compareTo(first));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,171,"Assert.assertEquals(0, first.compareTo(first));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,172,"Assert.assertEquals(0, first.compareTo(third));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,173,"Assert.assertEquals(1, first.compareTo(second));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,174,"Assert.assertEquals(-1, second.compareTo(first));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,173,"ssertEquals(-1, pi1.compareTo(pi2));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,174,"ssertEquals( 1, pi2.compareTo(pi1));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,175,"ssertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,181,"Assert.assertEquals(-1, pi1.compareTo(pi2));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,182,"Assert.assertEquals( 1, pi2.compareTo(pi1));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,183,"Assert.assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,186,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,182,"ssertEquals(0.5, first.doubleValue(), 0.0);"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,183,"ssertEquals(1.0 / 3.0, second.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,191,"Assert.assertEquals(0.5, first.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,192,"Assert.assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,195,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,190,"ssertEquals(0.5f, first.floatValue(), 0.0f);"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,191,"ssertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,200,"Assert.assertEquals(0.5f, first.floatValue(), 0.0f);"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,201,"Assert.assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,204,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,198,"ssertEquals(0, first.intValue());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,199,"ssertEquals(1, second.intValue());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,209,"Assert.assertEquals(0, first.intValue());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,210,"Assert.assertEquals(1, second.intValue());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,213,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,206,"ssertEquals(0L, first.longValue());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,207,"ssertEquals(1L, second.longValue());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,218,"Assert.assertEquals(0L, first.longValue());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,219,"Assert.assertEquals(1L, second.longValue());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,222,@Test
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,234,@Test
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,245,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,236,"ssertEquals(3, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,237,"ssertEquals(2, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,251,"Assert.assertEquals(3, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,252,"Assert.assertEquals(2, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,241,"ssertEquals(3, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,242,"ssertEquals(4, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,256,"Assert.assertEquals(3, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,257,"Assert.assertEquals(4, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,246,"ssertEquals(-47, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,247,"ssertEquals(15, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,261,"Assert.assertEquals(-47, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,262,"Assert.assertEquals(15, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,252,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,267,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,258,"ssertEquals(1, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,259,"ssertEquals(Integer.MAX_VALUE, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,273,"Assert.assertEquals(1, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,274,"Assert.assertEquals(Integer.MAX_VALUE, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,277,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,267,"ssertEquals(-2, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,268,"ssertEquals(3, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,283,"Assert.assertEquals(-2, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,284,"Assert.assertEquals(3, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,272,"ssertEquals(2, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,273,"ssertEquals(3, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,288,"Assert.assertEquals(2, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,289,"Assert.assertEquals(3, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,278,"ssertEquals(Integer.MIN_VALUE+2, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,279,"ssertEquals(Integer.MAX_VALUE, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,294,"Assert.assertEquals(Integer.MIN_VALUE+2, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,295,"Assert.assertEquals(Integer.MAX_VALUE, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,284,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,300,"Assert.fail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,304,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,300,"ssertEquals(Integer.MAX_VALUE, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,301,"ssertEquals(1, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,317,"Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,318,"Assert.assertEquals(1, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,303,"ssertEquals(Integer.MAX_VALUE, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,304,"ssertEquals(1, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,320,"Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,321,"Assert.assertEquals(1, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,309,"ssertEquals(13*13*17*2*2, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,310,"ssertEquals(-17 - 2*13*2, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,326,"Assert.assertEquals(13*13*17*2*2, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,327,"Assert.assertEquals(-17 - 2*13*2, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,314,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,331,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,322,"ssertEquals(52451, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,323,"ssertEquals(1934917632, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,339,"Assert.assertEquals(52451, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,340,"Assert.assertEquals(1934917632, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,328,"ssertEquals(Integer.MIN_VALUE+1, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,329,"ssertEquals(3, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,345,"Assert.assertEquals(Integer.MIN_VALUE+1, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,346,"Assert.assertEquals(3, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,334,"ssertEquals(Integer.MAX_VALUE, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,335,"ssertEquals(1, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,351,"Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,352,"Assert.assertEquals(1, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,339,"ail(""expecting MathArithmeticException but got: "" + f.toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,356,"Assert.fail(""expecting MathArithmeticException but got: "" + f.toString());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,347,"ail(""expecting MathArithmeticException but got: "" + f.toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,364,"Assert.fail(""expecting MathArithmeticException but got: "" + f.toString());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,353,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,370,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,359,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,376,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,366,"ail(""expecting MathArithmeticException but got: "" + f.toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,383,"Assert.fail(""expecting MathArithmeticException but got: "" + f.toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,387,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,383,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,401,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,389,"ssertSame(Fraction.ZERO, f);"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,407,"Assert.assertSame(Fraction.ZERO, f);"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,394,"ssertEquals(2, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,395,"ssertEquals(7, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,412,"Assert.assertEquals(2, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,413,"Assert.assertEquals(7, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,399,"ssertEquals(1, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,400,"ssertEquals(1, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,417,"Assert.assertEquals(1, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,418,"Assert.assertEquals(1, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,405,"ssertEquals(Integer.MIN_VALUE, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,406,"ssertEquals(1, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,423,"Assert.assertEquals(Integer.MIN_VALUE, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,424,"Assert.assertEquals(1, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,410,"ail(""MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,428,"Assert.fail(""MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,416,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,434,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,421,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,439,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,426,"ssertEquals(2, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,427,"ssertEquals(175, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,444,"Assert.assertEquals(2, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,445,"Assert.assertEquals(175, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,449,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,443,"ssertEquals(Integer.MIN_VALUE, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,444,"ssertEquals(1, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,462,"Assert.assertEquals(Integer.MIN_VALUE, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,463,"Assert.assertEquals(1, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,448,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,467,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,453,"ssertEquals(18, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,454,"ssertEquals(7, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,472,"Assert.assertEquals(18, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,473,"Assert.assertEquals(7, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,476,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,469,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,489,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,477,"ssertEquals(-13085, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,478,"ssertEquals(1934917632, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,497,"Assert.assertEquals(-13085, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,498,"Assert.assertEquals(1934917632, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,483,"ssertEquals(Integer.MIN_VALUE+1, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,484,"ssertEquals(3, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,503,"Assert.assertEquals(Integer.MIN_VALUE+1, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,504,"Assert.assertEquals(3, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,489,"ssertEquals(Integer.MAX_VALUE-1, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,490,"ssertEquals(1, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,509,"Assert.assertEquals(Integer.MAX_VALUE-1, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,510,"Assert.assertEquals(1, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,492,"ssertEquals(Integer.MAX_VALUE-1, f.getNumerator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,493,"ssertEquals(1, f.getDenominator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,512,"Assert.assertEquals(Integer.MAX_VALUE-1, f.getNumerator());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,513,"Assert.assertEquals(1, f.getDenominator());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,499,"ail(""expecting MathArithmeticException"");  //should overflow"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,519,"Assert.fail(""expecting MathArithmeticException"");  //should overflow"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,507,"ail(""expecting MathArithmeticException but got: "" + f.toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,527,"Assert.fail(""expecting MathArithmeticException but got: "" + f.toString());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,513,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,533,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,519,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,539,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,526,"ail(""expecting MathArithmeticException but got: "" + f.toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,546,"Assert.fail(""expecting MathArithmeticException but got: "" + f.toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,550,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,533,ssertTrue( zero.equals(zero));
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,534,ssertFalse(zero.equals(nullFraction));
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,535,ssertFalse(zero.equals(Double.valueOf(0)));
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,554,Assert.assertTrue( zero.equals(zero));
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,555,Assert.assertFalse(zero.equals(nullFraction));
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,556,Assert.assertFalse(zero.equals(Double.valueOf(0)));
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,537,ssertTrue(zero.equals(zero2));
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,538,"ssertEquals(zero.hashCode(), zero2.hashCode());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,558,Assert.assertTrue(zero.equals(zero2));
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,559,"Assert.assertEquals(zero.hashCode(), zero2.hashCode());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,540,ssertFalse((one.equals(zero) ||zero.equals(one)));
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,561,Assert.assertFalse((one.equals(zero) ||zero.equals(one)));
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,564,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,545,"ssertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,546,"ssertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,567,"Assert.assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,568,"Assert.assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,549,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,571,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,553,ssertEquals(Fraction.getReducedFraction
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,575,Assert.assertEquals(Fraction.getReducedFraction
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,555,ssertEquals(Fraction.getReducedFraction
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,577,Assert.assertEquals(Fraction.getReducedFraction
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,581,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,560,"ssertEquals(""0"", new Fraction(0, 3).toString());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,561,"ssertEquals(""3"", new Fraction(6, 2).toString());"
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,562,"ssertEquals(""2 / 3"", new Fraction(18, 27).toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,583,"Assert.assertEquals(""0"", new Fraction(0, 3).toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,584,"Assert.assertEquals(""3"", new Fraction(6, 2).toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,585,"Assert.assertEquals(""2 / 3"", new Fraction(18, 27).toString());"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,588,@Test
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,572,"ssertEquals(fraction, TestUtils.serializeAndRecover(fraction));"
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,596,"Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction));"
False,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,19,mport static org.junit.Assert.assertFalse;
False,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,20,mport static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,21,mport static org.junit.Assert.fail;
True,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,20,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,37,"ail(""Exception not caught"");"
True,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,35,"Assert.fail(""Exception not caught"");"
False,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,60,ssertFalse(c1.isSame(c2));
False,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,61,ssertFalse(c1.isSame(c3));
False,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,62,ssertFalse(c1.isSame(c4));
False,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,63,ssertFalse(c1.isSame(c5));
False,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,64,ssertTrue(c1.isSame(c6));
True,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,58,Assert.assertFalse(c1.isSame(c2));
True,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,59,Assert.assertFalse(c1.isSame(c3));
True,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,60,Assert.assertFalse(c1.isSame(c4));
True,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,61,Assert.assertFalse(c1.isSame(c5));
True,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,62,Assert.assertTrue(c1.isSame(c6));
False,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,20,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,40,"ssertEquals(1, numDifferent);"
True,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,40,"Assert.assertEquals(1, numDifferent);"
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,23,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,46,ssertTrue(c1.compareTo(c2) < 0);
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,47,ssertTrue(c2.compareTo(c1) > 0);
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,48,"ssertEquals(0,c3.compareTo(c2));"
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,49,"ssertEquals(0,c2.compareTo(c3));"
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,46,Assert.assertTrue(c1.compareTo(c2) < 0);
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,47,Assert.assertTrue(c2.compareTo(c1) > 0);
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,48,"Assert.assertEquals(0,c3.compareTo(c2));"
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,49,"Assert.assertEquals(0,c2.compareTo(c3));"
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,103,ssertNull(c5.findSameChromosome(pop));
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,104,"ssertEquals(c1, c4.findSameChromosome(pop));"
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,103,Assert.assertNull(c5.findSameChromosome(pop));
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,104,"Assert.assertEquals(c1, c4.findSameChromosome(pop));"
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,107,"ssertEquals(1, c4.getFitness(),0);"
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,107,"Assert.assertEquals(1, c4.getFitness(),0);"
False,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,20,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,37,"ssertEquals(20, nextGeneration.getPopulationSize());"
True,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,37,"Assert.assertEquals(20, nextGeneration.getPopulationSize());"
False,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,23,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,65,ssertTrue(fitnessCalls <= neededCalls); // some chromosomes after crossover may be the same os old ones
True,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,66,Assert.assertTrue(fitnessCalls <= neededCalls); // some chromosomes after crossover may be the same os old ones
False,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,22,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,58,hile (!fgc.isSatisfied(pop))
True,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,58,while (!fgc.isSatisfied(pop)) {
False,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,60,"ssertEquals(20, cnt);"
True,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,src/test/java/org/apache/commons/math/genetics/FixedGenerationCountTest.java,61,"Assert.assertEquals(20, cnt);"
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,23,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,52,"ssertEquals(0, ga.getGenerationsEvolved());"
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,53,"Assert.assertEquals(0, ga.getGenerationsEvolved());"
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,71,ssertTrue(bestFinal.compareTo(bestInitial) > 0);
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,72,"ssertEquals(NUM_GENERATIONS, ga.getGenerationsEvolved());"
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,72,Assert.assertTrue(bestFinal.compareTo(bestInitial) > 0);
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,73,"Assert.assertEquals(NUM_GENERATIONS, ga.getGenerationsEvolved());"
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,19,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,24,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,82,ssertTrue(bestFinal.compareTo(bestInitial) > 0);
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,82,Assert.assertTrue(bestFinal.compareTo(bestInitial) > 0);
False,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,22,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,58,"ssertEquals(c3, population.getFittestChromosome());"
True,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,58,"Assert.assertEquals(c3, population.getFittestChromosome());"
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,19,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,45,"ssertEquals((int) p1[0], (int) c1[0]);"
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,46,"ssertEquals((int) p2[0], (int) c2[0]);"
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,47,"ssertEquals((int) p1[p1.length-1], (int) c1[c1.length-1]);"
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,48,"ssertEquals((int) p2[p2.length-1], (int) c2[c2.length-1]);"
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,45,"Assert.assertEquals((int) p1[0], (int) c1[0]);"
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,46,"Assert.assertEquals((int) p2[0], (int) c2[0]);"
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,47,"Assert.assertEquals((int) p1[p1.length-1], (int) c1[c1.length-1]);"
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,48,"Assert.assertEquals((int) p2[p2.length-1], (int) c2[c2.length-1]);"
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,50,"ssertEquals((int) p1[2], (int) c1[2]);"
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,51,"ssertEquals((int) p2[2], (int) c2[2]);"
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,52,"ssertEquals((int) p1[3], (int) c1[3]);"
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,53,"ssertEquals((int) p2[3], (int) c2[3]);"
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,54,"ssertEquals((int) p1[7], (int) c1[7]);"
False,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,55,"ssertEquals((int) p2[7], (int) c2[7]);"
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,50,"Assert.assertEquals((int) p1[2], (int) c1[2]);"
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,51,"Assert.assertEquals((int) p2[2], (int) c2[2]);"
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,52,"Assert.assertEquals((int) p1[3], (int) c1[3]);"
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,53,"Assert.assertEquals((int) p2[3], (int) c2[3]);"
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,54,"Assert.assertEquals((int) p1[7], (int) c1[7]);"
True,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,src/test/java/org/apache/commons/math/genetics/OnePointCrossoverTest.java,55,"Assert.assertEquals((int) p2[7], (int) c2[7]);"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyMutationTest.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyMutationTest.java,20,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyMutationTest.java,40,"ssertEquals(1,changes);"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyMutationTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyMutationTest.java,40,"Assert.assertEquals(1,changes);"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,24,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,47,ssertTrue(drk1.isSame(drk2));
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,48,ssertTrue(drk2.isSame(drk3));
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,49,ssertFalse(drk3.isSame(drk4));
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,50,ssertFalse(drk4.isSame(drk5));
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,47,Assert.assertTrue(drk1.isSame(drk2));
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,48,Assert.assertTrue(drk2.isSame(drk3));
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,49,Assert.assertFalse(drk3.isSame(drk4));
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,50,Assert.assertFalse(drk4.isSame(drk5));
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,58,"ssertEquals(""b"", decoded.get(0));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,59,"ssertEquals(""e"", decoded.get(1));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,60,"ssertEquals(""a"", decoded.get(2));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,61,"ssertEquals(""c"", decoded.get(3));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,62,"ssertEquals(""d"", decoded.get(4));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,58,"Assert.assertEquals(""b"", decoded.get(0));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,59,"Assert.assertEquals(""e"", decoded.get(1));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,60,"Assert.assertEquals(""a"", decoded.get(2));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,61,"Assert.assertEquals(""c"", decoded.get(3));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,62,"Assert.assertEquals(""d"", decoded.get(4));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,70,ssertNotNull(drk);
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,70,Assert.assertNotNull(drk);
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,79,"ssertEquals(""a"", decoded.get(0));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,80,"ssertEquals(""b"", decoded.get(1));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,81,"ssertEquals(""c"", decoded.get(2));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,82,"ssertEquals(""d"", decoded.get(3));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,83,"ssertEquals(""e"", decoded.get(4));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,79,"Assert.assertEquals(""a"", decoded.get(0));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,80,"Assert.assertEquals(""b"", decoded.get(1));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,81,"Assert.assertEquals(""c"", decoded.get(2));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,82,"Assert.assertEquals(""d"", decoded.get(3));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,83,"Assert.assertEquals(""e"", decoded.get(4));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,97,"ssertArrayEquals(new Double[] {0.6,0.0,0.4,0.8,0.2}, permArr);"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,97,"Assert.assertArrayEquals(new Double[] {0.6,0.0,0.4,0.8,0.2}, permArr);"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,99,"ssertEquals(""b"", decodedData.get(0));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,100,"ssertEquals(""b"", decodedData.get(1));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,101,"ssertEquals(""c"", decodedData.get(2));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,102,"ssertEquals(""x"", decodedData.get(3));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,103,"ssertEquals(""z"", decodedData.get(4));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,99,"Assert.assertEquals(""b"", decodedData.get(0));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,100,"Assert.assertEquals(""b"", decodedData.get(1));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,101,"Assert.assertEquals(""c"", decodedData.get(2));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,102,"Assert.assertEquals(""x"", decodedData.get(3));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,103,"Assert.assertEquals(""z"", decodedData.get(4));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,112,"ssertArrayEquals(new Double[] {0.2,0.6,0.4,0.0,0.8}, permArr);"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,112,"Assert.assertArrayEquals(new Double[] {0.2,0.6,0.4,0.0,0.8}, permArr);"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,114,"ssertEquals(""z"", decodedData.get(0));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,115,"ssertEquals(""x"", decodedData.get(1));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,116,"ssertEquals(""c"", decodedData.get(2));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,117,"ssertEquals(""b"", decodedData.get(3));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,118,"ssertEquals(""b"", decodedData.get(4));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,114,"Assert.assertEquals(""z"", decodedData.get(0));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,115,"Assert.assertEquals(""x"", decodedData.get(1));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,116,"Assert.assertEquals(""c"", decodedData.get(2));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,117,"Assert.assertEquals(""b"", decodedData.get(3));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,118,"Assert.assertEquals(""b"", decodedData.get(4));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,129,"ssertEquals(""d"", decoded.get(0));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,130,"ssertEquals(""b"", decoded.get(1));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,131,"ssertEquals(""c"", decoded.get(2));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,132,"ssertEquals(""a"", decoded.get(3));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,133,"ssertEquals(""d"", decoded.get(4));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,129,"Assert.assertEquals(""d"", decoded.get(0));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,130,"Assert.assertEquals(""b"", decoded.get(1));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,131,"Assert.assertEquals(""c"", decoded.get(2));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,132,"Assert.assertEquals(""a"", decoded.get(3));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,133,"Assert.assertEquals(""d"", decoded.get(4));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,140,"ail(""Uncaught exception"");"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,140,"Assert.fail(""Uncaught exception"");"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,149,"ail(""Uncaught exception"");"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,149,"Assert.fail(""Uncaught exception"");"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,159,"ssertEquals(""a"", decodedData.get(0));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,160,"ssertEquals(""b"", decodedData.get(1));"
False,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,161,"ssertEquals(""c"", decodedData.get(2));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,159,"Assert.assertEquals(""a"", decodedData.get(0));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,160,"Assert.assertEquals(""b"", decodedData.get(1));"
True,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/java/org/apache/commons/math/genetics/RandomKeyTest.java,161,"Assert.assertEquals(""c"", decodedData.get(2));"
False,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,19,mport static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,19,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,38,ssertTrue(pair.getFirst().getFitness() > 0);
False,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,39,ssertTrue(pair.getSecond().getFitness() > 0);
True,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,38,Assert.assertTrue(pair.getFirst().getFitness() > 0);
True,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,39,Assert.assertTrue(pair.getSecond().getFitness() > 0);
True,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,24,import org.junit.Test;
False,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,24,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,26,ublic class RotationOrderTest
False,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,27,xtends TestCase {
False,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,29,ublic RotationOrderTest(String name) {
False,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,30,uper(name);
True,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,27,public class RotationOrderTest {
True,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,29,@Test
False,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,43,"ssertEquals(getFieldName(orders[i]), orders[i].toString());"
True,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/java/org/apache/commons/math/geometry/RotationOrderTest.java,40,"Assert.assertEquals(getFieldName(orders[i]), orders[i].toString());"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,28,import org.junit.Test;
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,28,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,30,ublic class RotationTest
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,31,xtends TestCase {
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,33,ublic RotationTest(String name) {
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,34,uper(name);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,31,public class RotationTest {
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,33,@Test
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,56,@Test
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,71,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,69,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,85,@Test
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,92,"ssertEquals(r.getAngle(), reverted.getAngle(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,93,"ssertEquals(-1, Vector3D.dotProduct(r.getAxis(), reverted.getAxis()), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,91,"Assert.assertEquals(r.getAngle(), reverted.getAngle(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,92,"Assert.assertEquals(-1, Vector3D.dotProduct(r.getAxis(), reverted.getAxis()), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,95,@Test
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,107,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,107,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,114,@Test
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,146,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,147,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,154,@Test
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,161,"ail(""Expecting NotARotationMatrixException"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,163,"Assert.fail(""Expecting NotARotationMatrixException"");"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,172,"ail(""Expecting NotARotationMatrixException"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,174,"Assert.fail(""Expecting NotARotationMatrixException"");"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,183,"ail(""Expecting NotARotationMatrixException"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,185,"Assert.fail(""Expecting NotARotationMatrixException"");"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,240,ssertTrue(FastMath.abs(d00) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,241,ssertTrue(FastMath.abs(d01) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,242,ssertTrue(FastMath.abs(d02) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,243,ssertTrue(FastMath.abs(d10) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,244,ssertTrue(FastMath.abs(d11) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,245,ssertTrue(FastMath.abs(d12) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,246,ssertTrue(FastMath.abs(d20) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,247,ssertTrue(FastMath.abs(d21) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,248,ssertTrue(FastMath.abs(d22) < 6.0e-6);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,250,ssertTrue(FastMath.abs(d00) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,251,ssertTrue(FastMath.abs(d01) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,252,ssertTrue(FastMath.abs(d02) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,253,ssertTrue(FastMath.abs(d10) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,254,ssertTrue(FastMath.abs(d11) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,255,ssertTrue(FastMath.abs(d12) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,256,ssertTrue(FastMath.abs(d20) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,257,ssertTrue(FastMath.abs(d21) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,258,ssertTrue(FastMath.abs(d22) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,242,Assert.assertTrue(FastMath.abs(d00) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,243,Assert.assertTrue(FastMath.abs(d01) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,244,Assert.assertTrue(FastMath.abs(d02) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,245,Assert.assertTrue(FastMath.abs(d10) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,246,Assert.assertTrue(FastMath.abs(d11) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,247,Assert.assertTrue(FastMath.abs(d12) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,248,Assert.assertTrue(FastMath.abs(d20) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,249,Assert.assertTrue(FastMath.abs(d21) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,250,Assert.assertTrue(FastMath.abs(d22) < 6.0e-6);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,252,Assert.assertTrue(FastMath.abs(d00) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,253,Assert.assertTrue(FastMath.abs(d01) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,254,Assert.assertTrue(FastMath.abs(d02) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,255,Assert.assertTrue(FastMath.abs(d10) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,256,Assert.assertTrue(FastMath.abs(d11) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,257,Assert.assertTrue(FastMath.abs(d12) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,258,Assert.assertTrue(FastMath.abs(d20) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,259,Assert.assertTrue(FastMath.abs(d21) > 4.0e-7);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,260,Assert.assertTrue(FastMath.abs(d22) > 4.0e-7);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,266,ssertTrue(FastMath.abs(m3tm3 - 1.0) < 1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,268,Assert.assertTrue(FastMath.abs(m3tm3 - 1.0) < 1.0e-10);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,268,ssertTrue(FastMath.abs(m3tm3) < 1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,270,Assert.assertTrue(FastMath.abs(m3tm3) < 1.0e-10);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,291,"ail(""got "" + r + "", should have caught an exception"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,293,"Assert.fail(""got "" + r + "", should have caught an exception"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,300,@Test
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,345,@Test
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,355,"ail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,359,"Assert.fail(""an exception should have been caught"");"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,373,"ail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,377,"Assert.fail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,387,@Test
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,409,@Test
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,427,@Test
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,445,@Test
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,477,ssertTrue(v1.subtract(v2).getNorm() < 1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,485,Assert.assertTrue(v1.subtract(v2).getNorm() < 1.0e-10);
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,481,"ssertEquals(a1, MathUtils.normalizeAngle(a2, a1), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,489,"Assert.assertEquals(a1, MathUtils.normalizeAngle(a2, a1), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,485,"ssertEquals(0, Rotation.distance(r, new Rotation(q0, q1, q2, q3, false)), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/RotationTest.java,src/test/java/org/apache/commons/math/geometry/RotationTest.java,493,"Assert.assertEquals(0, Rotation.distance(r, new Rotation(q0, q1, q2, q3, false)), 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,167,"rivate static void assertEquals(double[] d1, double[] d2) {"
False,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,168,"ssert.assertEquals(d1.length, d2.length);"
False,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,169,"or(int i=0; i<d1.length; i++) Assert.assertEquals(d1[i], d2[i], 0);"
False,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,177,"ssertEquals(vec1Squared, w.getData());"
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,172,double[] d2 = w.getData();
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,173,"Assert.assertEquals(vec1Squared.length, d2.length);"
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,174,for(int i=0; i<vec1Squared.length; i++) {
True,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java,175,"Assert.assertEquals(vec1Squared[i], d2[i], 0);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,25,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,26,import org.apache.commons.math.exception.OutOfRangeException;
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,29,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,30,mport org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,30,import org.junit.Test;
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,37,ublic class ArrayFieldVectorTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,37,public class ArrayFieldVectorTest {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,257,@Test
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,260,"ssertEquals(0, v0.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,261,"Assert.assertEquals(0, v0.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,263,"ssertEquals(7, v1.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,264,"ssertEquals(new Fraction(0), v1.getEntry(6));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,264,"Assert.assertEquals(7, v1.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,265,"Assert.assertEquals(new Fraction(0), v1.getEntry(6));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,267,"ssertEquals(5, v2.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,268,"ssertEquals(new Fraction(123, 100), v2.getEntry(4));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,268,"Assert.assertEquals(5, v2.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,269,"Assert.assertEquals(new Fraction(123, 100), v2.getEntry(4));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,271,"ssertEquals(3, v3.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,272,"ssertEquals(new Fraction(2), v3.getEntry(1));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,272,"Assert.assertEquals(3, v3.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,273,"Assert.assertEquals(new Fraction(2), v3.getEntry(1));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,275,"ssertEquals(2, v4.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,276,"ssertEquals(new Fraction(4), v4.getEntry(0));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,276,"Assert.assertEquals(2, v4.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,277,"Assert.assertEquals(new Fraction(4), v4.getEntry(0));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,279,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,280,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,285,"ssertEquals(9, v5_i.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,286,"ssertEquals(new Fraction(9), v5_i.getEntry(8));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,286,"Assert.assertEquals(9, v5_i.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,287,"Assert.assertEquals(new Fraction(9), v5_i.getEntry(8));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,289,"ssertEquals(9, v5.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,290,"ssertEquals(new Fraction(9), v5.getEntry(8));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,290,"Assert.assertEquals(9, v5.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,291,"Assert.assertEquals(new Fraction(9), v5.getEntry(8));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,293,"ssertEquals(2, v6.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,294,"ssertEquals(new Fraction(4), v6.getEntry(0));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,294,"Assert.assertEquals(2, v6.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,295,"Assert.assertEquals(new Fraction(4), v6.getEntry(0));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,297,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,298,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,303,"ssertEquals(7, v7.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,304,"ssertEquals(new Fraction(0), v7.getEntry(6));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,304,"Assert.assertEquals(7, v7.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,305,"Assert.assertEquals(new Fraction(0), v7.getEntry(6));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,309,"ssertEquals(3, v7_2.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,310,"ssertEquals(new Fraction(2), v7_2.getEntry(1));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,310,"Assert.assertEquals(3, v7_2.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,311,"Assert.assertEquals(new Fraction(2), v7_2.getEntry(1));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,313,"ssertEquals(7, v8.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,314,"ssertEquals(new Fraction(0), v8.getEntry(6));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,315,"ssertNotSame(""testData not same object "", v1.data, v8.data);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,314,"Assert.assertEquals(7, v8.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,315,"Assert.assertEquals(new Fraction(0), v8.getEntry(6));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,316,"Assert.assertNotSame(""testData not same object "", v1.data, v8.data);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,318,"ssertEquals(7, v8_2.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,319,"ssertEquals(new Fraction(0), v8_2.getEntry(6));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,320,"ssertEquals(v1.data, v8_2.data);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,319,"Assert.assertEquals(7, v8_2.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,320,"Assert.assertEquals(new Fraction(0), v8_2.getEntry(6));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,321,"Assert.assertArrayEquals(v1.data, v8_2.data);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,323,"ssertEquals(10, v9.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,324,"ssertEquals(new Fraction(1), v9.getEntry(7));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,324,"Assert.assertEquals(10, v9.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,325,"Assert.assertEquals(new Fraction(1), v9.getEntry(7));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,329,@Test
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,336,"ssertEquals(6, v_append_1.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,337,"ssertEquals(new Fraction(4), v_append_1.getEntry(3));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,338,"Assert.assertEquals(6, v_append_1.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,339,"Assert.assertEquals(new Fraction(4), v_append_1.getEntry(3));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,340,"ssertEquals(4, v_append_2.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,341,"ssertEquals(new Fraction(2), v_append_2.getEntry(3));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,342,"Assert.assertEquals(4, v_append_2.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,343,"Assert.assertEquals(new Fraction(2), v_append_2.getEntry(3));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,344,"ssertEquals(6, v_append_3.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,345,"ssertEquals(new Fraction(4), v_append_3.getEntry(3));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,346,"Assert.assertEquals(6, v_append_3.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,347,"Assert.assertEquals(new Fraction(4), v_append_3.getEntry(3));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,348,"ssertEquals(6, v_append_4.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,349,"ssertEquals(new Fraction(4), v_append_4.getEntry(3));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,350,"Assert.assertEquals(6, v_append_4.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,351,"Assert.assertEquals(new Fraction(4), v_append_4.getEntry(3));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,352,"ssertEquals(3, v_copy.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,353,"ssertNotSame(""testData not same object "", v1.data, v_copy.getData());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,354,"Assert.assertEquals(3, v_copy.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,355,"Assert.assertNotSame(""testData not same object "", v1.data, v_copy.getData());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,356,"ssertEquals(3, a_frac.length);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,357,"ssertNotSame(""testData not same object "", v1.data, a_frac);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,358,"Assert.assertEquals(3, a_frac.length);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,359,"Assert.assertNotSame(""testData not same object "", v1.data, a_frac);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,361,"/      assertEquals(3, vout4.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,362,"/      assertEquals(v1.data, vout4.data);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,363,"//      Assert.assertEquals(3, vout4.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,364,"//      Assert.assertEquals(v1.data, vout4.data);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,366,"ssertEquals(3, vout5.getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,367,"ssertEquals(new Fraction(5), vout5.getEntry(1));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,368,"Assert.assertEquals(3, vout5.getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,369,"Assert.assertEquals(new Fraction(5), vout5.getEntry(1));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,370,"ail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,372,"Assert.fail(""OutOfRangeException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,377,"ssertEquals(new Fraction(11), v_set1.getEntry(1));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,379,"Assert.assertEquals(new Fraction(11), v_set1.getEntry(1));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,380,"ail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,382,"Assert.fail(""OutOfRangeException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,387,"ssertEquals(new Fraction(1), v_set2.getEntry(3));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,388,"ssertEquals(new Fraction(7), v_set2.getEntry(6));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,389,"Assert.assertEquals(new Fraction(1), v_set2.getEntry(3));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,390,"Assert.assertEquals(new Fraction(7), v_set2.getEntry(6));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,391,"ail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,393,"Assert.fail(""OutOfRangeException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,398,"ssertEquals(new Fraction(13), v_set3.getEntry(2));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,400,"Assert.assertEquals(new Fraction(13), v_set3.getEntry(2));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,402,"ail(""ArrayIndexOutOfBoundsException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,404,"Assert.fail(""ArrayIndexOutOfBoundsException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,409,"ssertEquals(new Fraction(4), v_set4.getEntry(3));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,410,"ssertEquals(new Fraction(7), v_set4.getEntry(6));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,411,"Assert.assertEquals(new Fraction(4), v_set4.getEntry(3));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,412,"Assert.assertEquals(new Fraction(7), v_set4.getEntry(6));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,413,"ail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,415,"Assert.fail(""OutOfRangeException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,421,"ssertEquals(vout10, vout10_2);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,423,"Assert.assertEquals(vout10, vout10_2);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,423,"ssertNotSame(vout10, vout10_2);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,425,"Assert.assertNotSame(vout10, vout10_2);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,429,@Test
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,490,@Test
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,533,"ssertEquals(""compare val "",new Fraction(32), dot);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,537,"Assert.assertEquals(""compare val "",new Fraction(32), dot);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,537,"ssertEquals(""compare val "",new Fraction(32), dot_2);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,541,"Assert.assertEquals(""compare val "",new Fraction(32), dot_2);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,540,"ssertEquals(""compare val "",new Fraction(4), m_outerProduct.getEntry(0,0));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,544,"Assert.assertEquals(""compare val "",new Fraction(4), m_outerProduct.getEntry(0,0));"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,543,"ssertEquals(""compare val "",new Fraction(4), m_outerProduct_2.getEntry(0,0));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,547,"Assert.assertEquals(""compare val "",new Fraction(4), m_outerProduct_2.getEntry(0,0));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,559,@Test
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,561,"ssertTrue(""some output "",  out1.length()!=0);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,566,"Assert.assertTrue(""some output "",  out1.length()!=0);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,564,"ssertEquals(3, dout1.length);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,569,"Assert.assertEquals(3, dout1.length);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,569,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,574,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,576,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,581,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,583,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,588,"Assert.fail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,595,@Test
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,592,"ssertEquals(v,TestUtils.serializeAndRecover(v));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,598,"Assert.assertEquals(v,TestUtils.serializeAndRecover(v));"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,601,@Test
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,600,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,607,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,606,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,613,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,612,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,619,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,618,"ssertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0]).getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,619,"ssertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0], true).getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,620,"ssertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0], false).getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,625,"Assert.assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0]).getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,626,"Assert.assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0], true).getDimension());"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,627,"Assert.assertEquals(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), new Fraction[0], false).getDimension());"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,627,"ail(""vectors have different lengths"");"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,634,"Assert.fail(""vectors have different lengths"");"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,630,"ssertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i]);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,637,"Assert.assertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i]);"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,22,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,24,ublic class CholeskySolverTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,25,public class CholeskySolverTest {
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,34,ublic CholeskySolverTest(String name) {
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,36,@Test
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,45,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,43,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,51,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,49,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,57,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,55,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,62,@Test
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,83,"ssertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,82,"Assert.assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,87,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,86,"Assert.assertEquals(0,"
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,94,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,93,"Assert.assertEquals(0,"
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,103,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,102,"Assert.assertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,110,@Test
False,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,112,"ssertEquals(7290000.0, getDeterminant(MatrixUtils.createRealMatrix(testData)), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/java/org/apache/commons/math/linear/CholeskySolverTest.java,112,"Assert.assertEquals(7290000.0, getDeterminant(MatrixUtils.createRealMatrix(testData)), 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,23,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,26,import org.junit.After;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,28,import org.junit.Before;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,29,import org.junit.Test;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,28,ublic class EigenDecompositionImplTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,31,public class EigenDecompositionImplTest {
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,33,ublic EigenDecompositionImplTest(String name) {
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,34,uper(name);
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,36,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,41,"ssertEquals(1.5, ed.getRealEigenvalue(0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,41,"Assert.assertEquals(1.5, ed.getRealEigenvalue(0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,44,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,51,"ssertEquals(75.0, ed.getRealEigenvalue(0), 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,52,"ssertEquals(50.0, ed.getRealEigenvalue(1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,52,"Assert.assertEquals(75.0, ed.getRealEigenvalue(0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,53,"Assert.assertEquals(50.0, ed.getRealEigenvalue(1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,56,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,63,"ssertEquals(50000.0, ed.getRealEigenvalue(0), 3.0e-11);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,64,"ssertEquals(12500.0, ed.getRealEigenvalue(1), 3.0e-11);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,65,"ssertEquals( 3125.0, ed.getRealEigenvalue(2), 3.0e-11);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,65,"Assert.assertEquals(50000.0, ed.getRealEigenvalue(0), 3.0e-11);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,66,"Assert.assertEquals(12500.0, ed.getRealEigenvalue(1), 3.0e-11);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,67,"Assert.assertEquals( 3125.0, ed.getRealEigenvalue(2), 3.0e-11);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,70,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,76,"ssertEquals(70.0, ed.getRealEigenvalue(0), 3.0e-11);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,77,"ssertEquals(0.0,  ed.getRealEigenvalue(1), 3.0e-11);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,78,"ssertEquals(0.0,  ed.getRealEigenvalue(2), 3.0e-11);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,79,"Assert.assertEquals(70.0, ed.getRealEigenvalue(0), 3.0e-11);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,80,"Assert.assertEquals(0.0,  ed.getRealEigenvalue(1), 3.0e-11);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,81,"Assert.assertEquals(0.0,  ed.getRealEigenvalue(2), 3.0e-11);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,84,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,90,"ssertEquals(1.0, ed.getRealEigenvalue(0), 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,91,"ssertEquals(0.4, ed.getRealEigenvalue(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,92,"ssertEquals(0.2, ed.getRealEigenvalue(2), 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,93,"ssertEquals(0.1, ed.getRealEigenvalue(3), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,94,"Assert.assertEquals(1.0, ed.getRealEigenvalue(0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,95,"Assert.assertEquals(0.4, ed.getRealEigenvalue(1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,96,"Assert.assertEquals(0.2, ed.getRealEigenvalue(2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,97,"Assert.assertEquals(0.1, ed.getRealEigenvalue(3), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,100,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,105,"ssertEquals(1.0, ed.getRealEigenvalue(0), 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,106,"ssertEquals(0.4, ed.getRealEigenvalue(1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,107,"ssertEquals(0.2, ed.getRealEigenvalue(2), 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,108,"ssertEquals(0.1, ed.getRealEigenvalue(3), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,110,"Assert.assertEquals(1.0, ed.getRealEigenvalue(0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,111,"Assert.assertEquals(0.4, ed.getRealEigenvalue(1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,112,"Assert.assertEquals(0.2, ed.getRealEigenvalue(2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,113,"Assert.assertEquals(0.1, ed.getRealEigenvalue(3), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,117,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,139,"ssertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,140,"ssertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,145,"Assert.assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,146,"Assert.assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,151,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,181,"ssertEquals(refEigenValues[i], eigenValues[i], 1.0e-3);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,188,"Assert.assertEquals(refEigenValues[i], eigenValues[i], 1.0e-3);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,183,"ssertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,190,"Assert.assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,185,"ssertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,192,"Assert.assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,198,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,225,"ssertEquals(refEigenValues[i], eigenValues[i], 1.0e-4);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,233,"Assert.assertEquals(refEigenValues[i], eigenValues[i], 1.0e-4);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,227,"ssertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,235,"Assert.assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,229,"ssertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,237,"Assert.assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,244,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,254,"ssertEquals(ref.length, eigenValues.length);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,263,"Assert.assertEquals(ref.length, eigenValues.length);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,256,"ssertEquals(ref[ref.length - i - 1], eigenValues[i], 2.0e-14);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,265,"Assert.assertEquals(ref[ref.length - i - 1], eigenValues[i], 2.0e-14);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,271,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,265,"ssertEquals(m, ed.getV().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,266,"ssertEquals(m, ed.getV().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,267,"ssertEquals(m, ed.getD().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,268,"ssertEquals(m, ed.getD().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,269,"ssertEquals(m, ed.getVT().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,270,"ssertEquals(m, ed.getVT().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,275,"Assert.assertEquals(m, ed.getV().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,276,"Assert.assertEquals(m, ed.getV().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,277,"Assert.assertEquals(m, ed.getD().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,278,"Assert.assertEquals(m, ed.getD().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,279,"Assert.assertEquals(m, ed.getVT().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,280,"Assert.assertEquals(m, ed.getVT().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,284,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,277,"ssertEquals(refValues.length, eigenValues.length);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,288,"Assert.assertEquals(refValues.length, eigenValues.length);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,279,"ssertEquals(refValues[i], eigenValues[i], 3.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,290,"Assert.assertEquals(refValues[i], eigenValues[i], 3.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,295,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,294,"ssertEquals(bigValues.length, eigenValues.length);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,306,"Assert.assertEquals(bigValues.length, eigenValues.length);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,296,"ssertEquals(bigValues[bigValues.length - i - 1], eigenValues[i], 2.0e-14);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,308,"Assert.assertEquals(bigValues[bigValues.length - i - 1], eigenValues[i], 2.0e-14);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,313,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,307,"ssertEquals(0, mV.subtract(v.mapMultiplyToSelf(lambda)).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,320,"Assert.assertEquals(0, mV.subtract(v.mapMultiplyToSelf(lambda)).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,325,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,318,"ssertEquals(0, norm, 6.0e-13);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,332,"Assert.assertEquals(0, norm, 6.0e-13);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,336,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,326,"ssertEquals(0, vTv.subtract(id).getNorm(), 2.0e-13);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,341,"Assert.assertEquals(0, vTv.subtract(id).getNorm(), 2.0e-13);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,345,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,334,"ssertEquals(diagonal[0], ed.getRealEigenvalue(3), 2.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,335,"ssertEquals(diagonal[1], ed.getRealEigenvalue(2), 2.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,336,"ssertEquals(diagonal[2], ed.getRealEigenvalue(1), 2.0e-15);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,337,"ssertEquals(diagonal[3], ed.getRealEigenvalue(0), 2.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,350,"Assert.assertEquals(diagonal[0], ed.getRealEigenvalue(3), 2.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,351,"Assert.assertEquals(diagonal[1], ed.getRealEigenvalue(2), 2.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,352,"Assert.assertEquals(diagonal[2], ed.getRealEigenvalue(1), 2.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,353,"Assert.assertEquals(diagonal[3], ed.getRealEigenvalue(0), 2.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,359,@Test
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,374,@Test
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,391,@Test
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,397,"ssertTrue(isIncludedValue(observed[i], targetValues, tolerance));"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,398,"ssertTrue(isIncludedValue(targetValues[i], observed, tolerance));"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,416,"Assert.assertTrue(isIncludedValue(observed[i], targetValues, tolerance));"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,417,"Assert.assertTrue(isIncludedValue(targetValues[i], observed, tolerance));"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,427,"ssertTrue(isIncludedColumn(eigenVector, ed.getV(), tolerance));"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,446,"Assert.assertTrue(isIncludedColumn(eigenVector, ed.getV(), tolerance));"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,460,Override
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,479,@Before
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,468,Override
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,487,@After
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,21,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,30,import org.junit.Test;
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,37,ublic final class MatrixUtilsTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,38,public final class MatrixUtilsTest {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,67,ublic MatrixUtilsTest(String name) {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,68,uper(name);
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,68,@Test
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,73,"ssertEquals(new BlockRealMatrix(testData),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,70,"Assert.assertEquals(new BlockRealMatrix(testData),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,77,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,74,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,83,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,80,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,89,"ail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,86,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,92,@Test
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,96,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(asFraction(testData)),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,94,"Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(asFraction(testData)),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,98,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(fractionColMatrix),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,96,"Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(fractionColMatrix),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,102,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,100,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,108,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,106,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,114,"ail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,112,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,118,@Test
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,121,"ssertEquals(MatrixUtils.createRowRealMatrix(row),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,120,"Assert.assertEquals(MatrixUtils.createRowRealMatrix(row),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,125,"ail(""Expecting NotStrictlyPositiveException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,124,"Assert.fail(""Expecting NotStrictlyPositiveException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,131,"ail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,130,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,136,@Test
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,138,"ssertEquals(MatrixUtils.createRowFieldMatrix(asFraction(row)),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,138,"Assert.assertEquals(MatrixUtils.createRowFieldMatrix(asFraction(row)),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,140,"ssertEquals(MatrixUtils.createRowFieldMatrix(fractionRow),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,140,"Assert.assertEquals(MatrixUtils.createRowFieldMatrix(fractionRow),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,144,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,144,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,150,"ail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,150,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,156,@Test
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,157,"ssertEquals(MatrixUtils.createColumnRealMatrix(col),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,158,"Assert.assertEquals(MatrixUtils.createColumnRealMatrix(col),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,161,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,162,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,167,"ail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,168,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,174,@Test
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,174,"ssertEquals(MatrixUtils.createColumnFieldMatrix(asFraction(col)),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,176,"Assert.assertEquals(MatrixUtils.createColumnFieldMatrix(asFraction(col)),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,176,"ssertEquals(MatrixUtils.createColumnFieldMatrix(fractionCol),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,178,"Assert.assertEquals(MatrixUtils.createColumnFieldMatrix(fractionCol),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,181,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,183,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,187,"ail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,189,"Assert.fail(""Expecting NullArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,200,"ssertEquals(m.getEntry(i, j), 1d, 0);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,202,"Assert.assertEquals(m.getEntry(i, j), 1d, 0);"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,202,"ssertEquals(m.getEntry(i, j), 0d, 0);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,204,"Assert.assertEquals(m.getEntry(i, j), 0d, 0);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,210,@Test
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,214,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,217,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,227,"ssertEquals(m.getEntry(i, j), Fraction.ONE);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,230,"Assert.assertEquals(m.getEntry(i, j), Fraction.ONE);"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,229,"ssertEquals(m.getEntry(i, j), Fraction.ZERO);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,232,"Assert.assertEquals(m.getEntry(i, j), Fraction.ZERO);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,238,@Test
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,241,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,245,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,251,@Test
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,256,"ssertEquals(0.0, converted.subtract(reference).getNorm(), 0.0);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,261,"Assert.assertEquals(0.0, converted.subtract(reference).getNorm(), 0.0);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,264,@Test
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,268,"ssertEquals(0.0, converted.subtract(reference).getNorm(), 0.0);"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,274,"Assert.assertEquals(0.0, converted.subtract(reference).getNorm(), 0.0);"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,283,ail(fce.getMessage());
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,289,Assert.fail(fce.getMessage());
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,295,ail(fce.getMessage());
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,301,Assert.fail(fce.getMessage());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,24,import org.junit.Test;
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,24,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,26,ublic class QRDecompositionImplTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,27,public class QRDecompositionImplTest {
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,52,ublic QRDecompositionImplTest(String name) {
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,53,uper(name);
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,55,@Test
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,77,"ssertEquals(rows,    qr.getQ().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,78,"ssertEquals(rows,    qr.getQ().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,79,"ssertEquals(rows,    qr.getR().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,80,"ssertEquals(columns, qr.getR().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,75,"Assert.assertEquals(rows,    qr.getQ().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,76,"Assert.assertEquals(rows,    qr.getQ().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,77,"Assert.assertEquals(rows,    qr.getR().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,78,"Assert.assertEquals(columns, qr.getR().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,83,@Test
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,106,"ssertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,105,"Assert.assertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,110,@Test
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,133,"ssertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,133,"Assert.assertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,137,@Test
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,166,"ssertEquals(0.0, value, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,167,"Assert.assertEquals(0.0, value, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,175,@Test
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,203,"ssertEquals(0.0, value, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,205,"Assert.assertEquals(0.0, value, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,211,@Test
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,230,"ssertEquals(0, q.subtract(qRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,233,"Assert.assertEquals(0, q.subtract(qRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,232,"ssertEquals(0, qT.subtract(qRef.transpose()).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,235,"Assert.assertEquals(0, qT.subtract(qRef.transpose()).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,234,"ssertEquals(0, r.subtract(rRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,237,"Assert.assertEquals(0, r.subtract(rRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,236,"ssertEquals(0, h.subtract(hRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,239,"Assert.assertEquals(0, h.subtract(hRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,239,ssertTrue(q == qr.getQ());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,240,ssertTrue(r == qr.getR());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,241,ssertTrue(h == qr.getH());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,242,Assert.assertTrue(q == qr.getQ());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,243,Assert.assertTrue(r == qr.getR());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,244,Assert.assertTrue(h == qr.getH());
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,24,ublic class SingularValueDecompositionImplTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,26,public class SingularValueDecompositionImplTest {
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,40,ublic SingularValueDecompositionImplTest(String name) {
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,41,uper(name);
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,42,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,52,"ssertEquals(singularValues.length, computedSV.length);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,51,"Assert.assertEquals(singularValues.length, computedSV.length);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,54,"ssertEquals(singularValues[i], computedSV[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,53,"Assert.assertEquals(singularValues[i], computedSV[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,57,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,66,"ssertEquals(singularValues.length, computedSV.length);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,66,"Assert.assertEquals(singularValues.length, computedSV.length);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,68,"ssertEquals(singularValues[i], computedSV[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,68,"Assert.assertEquals(singularValues[i], computedSV[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,73,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,78,"ssertEquals(m, svd.getU().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,79,"ssertEquals(m, svd.getU().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,80,"ssertEquals(m, svd.getS().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,81,"ssertEquals(n, svd.getS().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,82,"ssertEquals(n, svd.getV().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,83,"ssertEquals(n, svd.getV().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,79,"Assert.assertEquals(m, svd.getU().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,80,"Assert.assertEquals(m, svd.getU().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,81,"Assert.assertEquals(m, svd.getS().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,82,"Assert.assertEquals(n, svd.getS().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,83,"Assert.assertEquals(n, svd.getV().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,84,"Assert.assertEquals(n, svd.getV().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,89,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,96,"ssertEquals(16.0, svd.getSingularValues()[0], 1.0e-14);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,97,"ssertEquals( 8.0, svd.getSingularValues()[1], 1.0e-14);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,98,"ssertEquals( 4.0, svd.getSingularValues()[2], 1.0e-14);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,99,"ssertEquals( 2.0, svd.getSingularValues()[3], 1.0e-14);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,98,"Assert.assertEquals(16.0, svd.getSingularValues()[0], 1.0e-14);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,99,"Assert.assertEquals( 8.0, svd.getSingularValues()[1], 1.0e-14);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,100,"Assert.assertEquals( 4.0, svd.getSingularValues()[2], 1.0e-14);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,101,"Assert.assertEquals( 2.0, svd.getSingularValues()[3], 1.0e-14);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,107,"ssertEquals(0.0,"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,109,"Assert.assertEquals(0.0,"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,117,"ssertEquals(0.0,"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,119,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,126,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,136,"ssertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,139,"Assert.assertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,144,@Test
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,152,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,157,"ssertEquals(0, mTm.subtract(id).getNorm(), normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,162,"Assert.assertEquals(0, mTm.subtract(id).getNorm(), normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,166,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,179,"ssertEquals(0, u.subtract(uRef).getNorm(), normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,185,"Assert.assertEquals(0, u.subtract(uRef).getNorm(), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,181,"ssertEquals(0, s.subtract(sRef).getNorm(), normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,187,"Assert.assertEquals(0, s.subtract(sRef).getNorm(), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,183,"ssertEquals(0, v.subtract(vRef).getNorm(), normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,189,"Assert.assertEquals(0, v.subtract(vRef).getNorm(), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,186,ssertTrue(u == svd.getU());
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,187,ssertTrue(s == svd.getS());
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,188,ssertTrue(v == svd.getV());
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,192,Assert.assertTrue(u == svd.getU());
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,193,Assert.assertTrue(s == svd.getS());
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,194,Assert.assertTrue(v == svd.getV());
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,218,"ssertEquals(0, u.subtract(uRef).getNorm(), normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,224,"Assert.assertEquals(0, u.subtract(uRef).getNorm(), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,220,"ssertEquals(0, s.subtract(sRef).getNorm(), normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,226,"Assert.assertEquals(0, s.subtract(sRef).getNorm(), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,222,"ssertEquals(0, v.subtract(vRef).getNorm(), normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,228,"Assert.assertEquals(0, v.subtract(vRef).getNorm(), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,225,ssertTrue(u == svd.getU());
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,226,ssertTrue(s == svd.getS());
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,227,ssertTrue(v == svd.getV());
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,231,Assert.assertTrue(u == svd.getU());
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,232,Assert.assertTrue(s == svd.getS());
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,233,Assert.assertTrue(v == svd.getV());
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,238,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,236,"ssertEquals(3.0, svd.getConditionNumber(), 1.5e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,243,"Assert.assertEquals(3.0, svd.getConditionNumber(), 1.5e-15);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,582,@Test
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,32,ublic class SparseFieldVectorTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,33,public class SparseFieldVectorTest {
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,51,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,56,"ssertEquals(""compare vectors"" ,result_mapAdd,v_mapAdd.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,58,"Assert.assertEquals(""compare vectors"" ,result_mapAdd,v_mapAdd.getData());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,62,"ssertEquals(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,64,"Assert.assertEquals(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.getData());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,67,"ssertEquals(""compare vectors"" ,result_mapSubtract,v_mapSubtract.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,69,"Assert.assertEquals(""compare vectors"" ,result_mapSubtract,v_mapSubtract.getData());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,73,"ssertEquals(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,75,"Assert.assertEquals(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,78,"ssertEquals(""compare vectors"" ,result_mapMultiply,v_mapMultiply.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,80,"Assert.assertEquals(""compare vectors"" ,result_mapMultiply,v_mapMultiply.getData());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,84,"ssertEquals(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,86,"Assert.assertEquals(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,89,"ssertEquals(""compare vectors"" ,result_mapDivide,v_mapDivide.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,91,"Assert.assertEquals(""compare vectors"" ,result_mapDivide,v_mapDivide.getData());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,95,"ssertEquals(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,97,"Assert.assertEquals(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.getData());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,100,"ssertEquals(""compare vectors"" ,result_mapInv,v_mapInv.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,102,"Assert.assertEquals(""compare vectors"" ,result_mapInv,v_mapInv.getData());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,106,"ssertEquals(""compare vectors"" ,result_mapInvToSelf,v_mapInvToSelf.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,108,"Assert.assertEquals(""compare vectors"" ,result_mapInvToSelf,v_mapInvToSelf.getData());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,113,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,120,"ssertEquals(""compare vect"" ,v_add.getData(),result_add);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,123,"Assert.assertEquals(""compare vect"" ,v_add.getData(),result_add);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,125,"ssertEquals(""compare vect"" ,v_add_i.getData(),result_add_i);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,128,"Assert.assertEquals(""compare vect"" ,v_add_i.getData(),result_add_i);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,156,"ssertEquals(""compare val "",new Fraction(32), dot);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,159,"Assert.assertEquals(""compare val "",new Fraction(32), dot);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,160,"ssertEquals(""compare val "",new Fraction(32), dot_2);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,163,"Assert.assertEquals(""compare val "",new Fraction(32), dot_2);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,163,"ssertEquals(""compare val "",new Fraction(4), m_outerProduct.getEntry(0,0));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,166,"Assert.assertEquals(""compare val "",new Fraction(4), m_outerProduct.getEntry(0,0));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,166,"ssertEquals(""compare val "",new Fraction(4), m_outerProduct_2.getEntry(0,0));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,169,"Assert.assertEquals(""compare val "",new Fraction(4), m_outerProduct_2.getEntry(0,0));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,174,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,175,"ssertTrue(""some output "",  out1.length()!=0);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,179,"Assert.assertTrue(""some output "",  out1.length()!=0);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,178,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,182,"Assert.fail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,190,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,191,"ssertEquals(v, new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2) }));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,192,"ssertNotSame(v, new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2), new Fraction(3) }));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,196,"Assert.assertEquals(v, new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2) }));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,197,"Assert.assertNotSame(v, new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2), new Fraction(3) }));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,199,"ail(""vectors have different lengths"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,204,"Assert.fail(""vectors have different lengths"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,202,"ssertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i]);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,207,"Assert.assertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i]);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,209,"ail(""vectors have different lengths"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,214,"Assert.fail(""vectors have different lengths"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,212,"ssertEquals(msg + "" "" +  i + "" elements differ"", m[i].doubleValue(),n[i].doubleValue(), tolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,217,"Assert.assertEquals(msg + "" "" +  i + "" elements differ"", m[i].doubleValue(),n[i].doubleValue(), tolerance);"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,20,mport junit.framework.*;
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,31,import org.junit.After;
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,32,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,33,import org.junit.Before;
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,34,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,33,ublic class ContinuousOutputModelTest
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,34,xtends TestCase {
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,36,public class ContinuousOutputModelTest {
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,36,ublic ContinuousOutputModelTest(String name) {
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,37,uper(name);
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,38,public ContinuousOutputModelTest() {
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,43,@Test
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,56,@Test
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,79,ssertTrue(maxError < 1.0e-9);
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,82,Assert.assertTrue(maxError < 1.0e-9);
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,86,@Test
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,123,"ssertEquals(2.0 * FastMath.PI, cm.getInitialTime(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,124,"ssertEquals(0, cm.getFinalTime(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,125,"ssertEquals(cm.getFinalTime(), cm.getInterpolatedTime(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,127,"Assert.assertEquals(2.0 * FastMath.PI, cm.getInitialTime(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,128,"Assert.assertEquals(0, cm.getFinalTime(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,129,"Assert.assertEquals(cm.getFinalTime(), cm.getInterpolatedTime(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,129,"ssertEquals(FastMath.cos(t), y[0], 1.0e-7);"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,130,"ssertEquals(FastMath.sin(t), y[1], 1.0e-7);"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,133,"Assert.assertEquals(FastMath.cos(t), y[0], 1.0e-7);"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,134,"Assert.assertEquals(FastMath.sin(t), y[1], 1.0e-7);"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,139,@Test
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,142,"ssertTrue(checkAppendError(cm, 1.0, new double[] { 0.0, 1.0 }, 2.0));"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,147,"Assert.assertTrue(checkAppendError(cm, 1.0, new double[] { 0.0, 1.0 }, 2.0));"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,145,"ssertTrue(checkAppendError(cm, 10.0, new double[] { 0.0, 1.0, -2.0 }, 20.0));"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,150,"Assert.assertTrue(checkAppendError(cm, 10.0, new double[] { 0.0, 1.0, -2.0 }, 20.0));"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,148,"ssertTrue(checkAppendError(cm, 1.0, new double[] { 0.0, 1.0, -2.0 }, 0.0));"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,153,"Assert.assertTrue(checkAppendError(cm, 1.0, new double[] { 0.0, 1.0, -2.0 }, 0.0));"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,151,"ssertFalse(checkAppendError(cm, 1.0, new double[] { 0.0, 1.0, -2.0 }, 2.0));"
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,156,"Assert.assertFalse(checkAppendError(cm, 1.0, new double[] { 0.0, 1.0, -2.0 }, 2.0));"
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,177,ssertTrue(FastMath.abs(value - reference) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,182,Assert.assertTrue(FastMath.abs(value - reference) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,180,Override
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,185,@Before
False,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,188,Override
True,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java,193,@After
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,27,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,27,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,29,ublic class FirstOrderConverterTest
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,30,xtends TestCase {
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,32,ublic FirstOrderConverterTest(String name) {
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,33,uper(name);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,30,public class FirstOrderConverterTest {
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,32,@Test
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,40,ssertTrue(eqn1.getDimension() == (2 * eqn2.getDimension()));
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,37,Assert.assertTrue(eqn1.getDimension() == (2 * eqn2.getDimension()));
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,41,@Test
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,54,ssertTrue(FastMath.abs(error) < FastMath.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,52,Assert.assertTrue(FastMath.abs(error) < FastMath.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,59,@Test
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,65,ssertTrue(FastMath.abs(error) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,64,Assert.assertTrue(FastMath.abs(error) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,67,@Test
False,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,72,ssertTrue(FastMath.abs(error) > 0.1);
True,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java,72,Assert.assertTrue(FastMath.abs(error) > 0.1);
False,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,20,mport junit.framework.Assert;
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,25,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,29,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,89,ssertTrue(handler.getMaximalValueError() > (31.0 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,90,ssertTrue(handler.getMaximalValueError() < (36.0 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,91,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,88,Assert.assertTrue(handler.getMaximalValueError() > (31.0 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,89,Assert.assertTrue(handler.getMaximalValueError() < (36.0 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,90,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,94,"ssertEquals(integ.getEvaluations(), calls);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,95,ssertTrue(calls <= previousCalls);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,93,"Assert.assertEquals(integ.getEvaluations(), calls);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,94,Assert.assertTrue(calls <= previousCalls);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,130,ssertTrue(handler.getLastError() < 1.0e-8);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,131,ssertTrue(handler.getMaximalValueError() < 1.0e-8);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,132,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,133,"ssertEquals(""Adams-Bashforth"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,129,Assert.assertTrue(handler.getLastError() < 1.0e-8);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,130,Assert.assertTrue(handler.getMaximalValueError() < 1.0e-8);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,131,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,132,"Assert.assertEquals(""Adams-Bashforth"", integ.getName());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,149,ssertTrue(integ.getEvaluations() > 150);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,148,Assert.assertTrue(integ.getEvaluations() > 150);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,151,ssertTrue(integ.getEvaluations() < 70);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,150,Assert.assertTrue(integ.getEvaluations() < 70);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,29,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,89,ssertTrue(handler.getMaximalValueError() > (0.15 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,90,ssertTrue(handler.getMaximalValueError() < (3.0 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,91,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,88,Assert.assertTrue(handler.getMaximalValueError() > (0.15 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,89,Assert.assertTrue(handler.getMaximalValueError() < (3.0 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,90,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,94,"ssertEquals(integ.getEvaluations(), calls);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,95,ssertTrue(calls <= previousCalls);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,93,"Assert.assertEquals(integ.getEvaluations(), calls);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,94,Assert.assertTrue(calls <= previousCalls);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,130,ssertTrue(handler.getLastError() < 1.0e-9);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,131,ssertTrue(handler.getMaximalValueError() < 1.0e-9);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,132,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,133,"ssertEquals(""Adams-Moulton"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,129,Assert.assertTrue(handler.getLastError() < 1.0e-9);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,130,Assert.assertTrue(handler.getMaximalValueError() < 1.0e-9);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,131,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,132,"Assert.assertEquals(""Adams-Moulton"", integ.getName());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,149,ssertTrue(integ.getEvaluations() > 140);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,148,Assert.assertTrue(integ.getEvaluations() > 140);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,151,ssertTrue(integ.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,150,Assert.assertTrue(integ.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,20,mport junit.framework.*;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,36,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,37,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,38,ublic class ClassicalRungeKuttaIntegratorTest
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,39,xtends TestCase {
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,41,ublic ClassicalRungeKuttaIntegratorTest(String name) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,42,uper(name);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,39,public class ClassicalRungeKuttaIntegratorTest {
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,41,@Test
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,95,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,104,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,102,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,106,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,104,"Assert.fail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,114,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,112,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,116,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,114,"Assert.fail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,124,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,122,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,126,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,124,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,129,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,152,"ssertEquals(functions.length, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,151,"Assert.assertEquals(functions.length, integ.getEventHandlers().size());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,156,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,155,"Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,161,ssertTrue(error < FastMath.abs(previousValueError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,160,Assert.assertTrue(error < FastMath.abs(previousValueError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,167,ssertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,166,Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,172,"ssertEquals(0, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,171,"Assert.assertEquals(0, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,178,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,191,ssertTrue(handler.getLastError() < 2.0e-13);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,192,ssertTrue(handler.getMaximalValueError() < 4.0e-12);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,193,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,194,"ssertEquals(""classical Runge-Kutta"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,191,Assert.assertTrue(handler.getLastError() < 2.0e-13);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,192,Assert.assertTrue(handler.getMaximalValueError() < 4.0e-12);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,193,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,194,"Assert.assertEquals(""classical Runge-Kutta"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,197,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,209,ssertTrue(handler.getLastError() > 0.0004);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,210,ssertTrue(handler.getMaximalValueError() > 0.005);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,211,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,210,Assert.assertTrue(handler.getLastError() > 0.0004);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,211,Assert.assertTrue(handler.getMaximalValueError() > 0.005);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,212,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,216,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,227,ssertTrue(handler.getLastError() < 5.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,228,ssertTrue(handler.getMaximalValueError() < 7.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,229,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,230,"ssertEquals(""classical Runge-Kutta"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,229,Assert.assertTrue(handler.getLastError() < 5.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,230,Assert.assertTrue(handler.getMaximalValueError() < 7.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,231,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,232,"Assert.assertEquals(""classical Runge-Kutta"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,235,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,272,ssertTrue(maxError > 0.005);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,275,Assert.assertTrue(maxError > 0.005);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,282,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,286,"ssertEquals(step,"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,290,"Assert.assertEquals(step,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,34,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,67,ssertTrue(bos.size () > 753000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,68,ssertTrue(bos.size () < 754000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,67,Assert.assertTrue(bos.size () > 753000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,68,Assert.assertTrue(bos.size () < 754000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,90,ssertTrue(maxError > 0.005);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,90,Assert.assertTrue(maxError > 0.005);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,35,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,36,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,36,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,38,ublic class DormandPrince54IntegratorTest
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,39,xtends TestCase {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,41,ublic DormandPrince54IntegratorTest(String name) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,42,uper(name);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,39,public class DormandPrince54IntegratorTest {
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,41,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,53,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,50,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,55,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,52,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,57,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,77,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,75,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,79,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,77,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,83,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,105,ssertTrue(handler.wasLastSeen());
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,106,"ssertEquals(""Dormand-Prince 5(4)"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,104,Assert.assertTrue(handler.wasLastSeen());
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,105,"Assert.assertEquals(""Dormand-Prince 5(4)"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,109,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,127,ssertTrue(handler.getLastError() < 2.0e-7);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,128,ssertTrue(handler.getMaximalValueError() < 2.0e-7);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,129,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,130,"ssertEquals(""Dormand-Prince 5(4)"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,127,Assert.assertTrue(handler.getLastError() < 2.0e-7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,128,Assert.assertTrue(handler.getMaximalValueError() < 2.0e-7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,129,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,130,"Assert.assertEquals(""Dormand-Prince 5(4)"", integ.getName());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,151,ssertTrue(FastMath.abs(h) < minStep);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,151,Assert.assertTrue(FastMath.abs(h) < minStep);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,164,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,186,"ssertEquals(0.8, integ.getSafety(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,187,"ssertEquals(5.0, integ.getMaxGrowth(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,188,"ssertEquals(0.3, integ.getMinReduction(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,187,"Assert.assertEquals(0.8, integ.getSafety(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,188,"Assert.assertEquals(5.0, integ.getMaxGrowth(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,189,"Assert.assertEquals(0.3, integ.getMinReduction(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,193,ssertTrue(handler.getMaximalValueError() < (0.7 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,194,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,194,Assert.assertTrue(handler.getMaximalValueError() < (0.7 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,195,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,197,"ssertEquals(integ.getEvaluations(), calls);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,198,ssertTrue(calls <= previousCalls);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,198,"Assert.assertEquals(integ.getEvaluations(), calls);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,199,Assert.assertTrue(calls <= previousCalls);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,206,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,225,"ssertEquals(functions.length, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,227,"Assert.assertEquals(functions.length, integ.getEventHandlers().size());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,230,ssertTrue(handler.getMaximalValueError() < 5.0e-6);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,231,"ssertEquals(0, handler.getMaximalTimeError(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,232,"ssertEquals(12.0, handler.getLastTime(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,232,Assert.assertTrue(handler.getMaximalValueError() < 5.0e-6);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,233,"Assert.assertEquals(0, handler.getMaximalTimeError(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,234,"Assert.assertEquals(12.0, handler.getLastTime(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,234,"ssertEquals(0, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,236,"Assert.assertEquals(0, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,240,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,255,"ssertEquals(integ.getEvaluations(), pb.getCalls());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,256,ssertTrue(pb.getCalls() < 2800);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,258,"Assert.assertEquals(integ.getEvaluations(), pb.getCalls());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,259,Assert.assertTrue(pb.getCalls() < 2800);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,263,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,275,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,279,"Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,312,ssertTrue(maxError < 7.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,313,ssertTrue(nbSteps < 400);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,316,Assert.assertTrue(maxError < 7.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,317,Assert.assertTrue(nbSteps < 400);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,354,ssertTrue(minStep < (1.0 / 450.0));
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,355,ssertTrue(maxStep > (1.0 / 4.2));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,358,Assert.assertTrue(minStep < (1.0 / 450.0));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,359,Assert.assertTrue(maxStep > (1.0 / 4.2));
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,36,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,80,ssertTrue(bos.size () > 126000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,81,ssertTrue(bos.size () < 127000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,79,Assert.assertTrue(bos.size () > 126000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,80,Assert.assertTrue(bos.size () < 127000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,103,ssertTrue(maxError < 7.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,102,Assert.assertTrue(maxError < 7.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,125,"ssertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,126,"ssertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,124,"Assert.assertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,125,"Assert.assertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,130,ssertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,129,Assert.assertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,132,"ssertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,131,"Assert.assertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,136,"ssertEquals(referenceState[j], cloneState[j], 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,135,"Assert.assertEquals(referenceState[j], cloneState[j], 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,35,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,36,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,36,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,38,ublic class DormandPrince853IntegratorTest
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,39,xtends TestCase {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,41,ublic DormandPrince853IntegratorTest(String name) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,42,uper(name);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,39,public class DormandPrince853IntegratorTest {
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,41,@Test
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,98,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,109,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,107,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,111,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,109,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,114,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,124,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,123,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,126,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,125,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,130,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,148,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,148,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,150,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,150,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,156,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,179,ssertTrue(handler.getMaximalValueError() < (1.3 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,180,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,180,Assert.assertTrue(handler.getMaximalValueError() < (1.3 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,181,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,183,"ssertEquals(integ.getEvaluations(), calls);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,184,ssertTrue(calls <= previousCalls);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,184,"Assert.assertEquals(integ.getEvaluations(), calls);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,185,Assert.assertTrue(calls <= previousCalls);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,192,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,208,ssertTrue(handler.getLastError() < 1.1e-7);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,209,ssertTrue(handler.getMaximalValueError() < 1.1e-7);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,210,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,211,"ssertEquals(""Dormand-Prince 8 (5, 3)"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,210,Assert.assertTrue(handler.getLastError() < 1.1e-7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,211,Assert.assertTrue(handler.getMaximalValueError() < 1.1e-7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,212,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,213,"Assert.assertEquals(""Dormand-Prince 8 (5, 3)"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,216,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,234,"ssertEquals(functions.length, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,237,"Assert.assertEquals(functions.length, integ.getEventHandlers().size());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,239,"ssertEquals(0, handler.getMaximalValueError(), 1.1e-7);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,240,"ssertEquals(0, handler.getMaximalTimeError(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,241,"ssertEquals(12.0, handler.getLastTime(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,242,"Assert.assertEquals(0, handler.getMaximalValueError(), 1.1e-7);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,243,"Assert.assertEquals(0, handler.getMaximalTimeError(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,244,"Assert.assertEquals(12.0, handler.getLastTime(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,243,"ssertEquals(0, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,246,"Assert.assertEquals(0, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,250,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,264,"ssertEquals(integ.getEvaluations(), pb.getCalls());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,265,ssertTrue(pb.getCalls() < 3300);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,268,"Assert.assertEquals(integ.getEvaluations(), pb.getCalls());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,269,Assert.assertTrue(pb.getCalls() < 3300);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,273,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,285,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,286,"ssertEquals(""Dormand-Prince 8 (5, 3)"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,290,"Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,291,"Assert.assertEquals(""Dormand-Prince 8 (5, 3)"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,294,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,306,"ssertEquals(integ.getEvaluations(), callsWithoutDenseOutput);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,312,"Assert.assertEquals(integ.getEvaluations(), callsWithoutDenseOutput);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,313,"ssertEquals(integ.getEvaluations(), callsWithDenseOutput);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,319,"Assert.assertEquals(integ.getEvaluations(), callsWithDenseOutput);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,315,ssertTrue(callsWithDenseOutput > callsWithoutDenseOutput);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,321,Assert.assertTrue(callsWithDenseOutput > callsWithoutDenseOutput);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,325,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,327,"ssertEquals(8.0, y[0], 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,334,"Assert.assertEquals(8.0, y[0], 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,364,ssertTrue(maxError < 2.4e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,365,ssertTrue(nbSteps < 150);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,371,Assert.assertTrue(maxError < 2.4e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,372,Assert.assertTrue(nbSteps < 150);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,404,ssertTrue(minStep < (1.0 / 100.0));
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,405,ssertTrue(maxStep > (1.0 / 2.0));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,411,Assert.assertTrue(minStep < (1.0 / 100.0));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,412,Assert.assertTrue(maxStep > (1.0 / 2.0));
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,36,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,80,ssertTrue(bos.size () > 88000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,81,ssertTrue(bos.size () < 89000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,79,Assert.assertTrue(bos.size () > 88000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,80,Assert.assertTrue(bos.size () < 89000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,103,ssertTrue(maxError < 2.4e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,102,Assert.assertTrue(maxError < 2.4e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,125,"ssertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,126,"ssertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,124,"Assert.assertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,125,"Assert.assertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,130,ssertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,129,Assert.assertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,132,"ssertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,131,"Assert.assertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,136,"ssertEquals(referenceState[j], cloneState[j], 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,135,"Assert.assertEquals(referenceState[j], cloneState[j], 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,20,mport junit.framework.*;
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,35,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,36,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,37,ublic class EulerIntegratorTest
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,38,xtends TestCase {
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,40,ublic EulerIntegratorTest(String name) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,41,uper(name);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,38,public class EulerIntegratorTest {
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,40,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,50,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,47,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,52,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,49,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,54,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,81,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,79,"Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,86,ssertTrue(valueError < FastMath.abs(previousValueError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,84,Assert.assertTrue(valueError < FastMath.abs(previousValueError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,92,ssertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,90,Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,100,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,115,ssertTrue(handler.getLastError() < 2.0e-4);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,116,ssertTrue(handler.getMaximalValueError() < 1.0e-3);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,117,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,118,"ssertEquals(""Euler"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,114,Assert.assertTrue(handler.getLastError() < 2.0e-4);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,115,Assert.assertTrue(handler.getMaximalValueError() < 1.0e-3);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,116,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,117,"Assert.assertEquals(""Euler"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,121,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,135,ssertTrue(handler.getLastError() > 0.01);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,136,ssertTrue(handler.getMaximalValueError() > 0.2);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,137,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,135,Assert.assertTrue(handler.getLastError() > 0.01);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,136,Assert.assertTrue(handler.getMaximalValueError() > 0.2);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,137,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,141,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,153,ssertTrue(handler.getLastError() < 0.45);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,154,ssertTrue(handler.getMaximalValueError() < 0.45);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,155,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,156,"ssertEquals(""Euler"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,154,Assert.assertTrue(handler.getLastError() < 0.45);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,155,Assert.assertTrue(handler.getMaximalValueError() < 0.45);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,156,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,157,"Assert.assertEquals(""Euler"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,160,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,166,"ssertEquals(step,"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,168,"Assert.assertEquals(step,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,36,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,54,ssertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,54,Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,85,ssertTrue(FastMath.abs(result[i] - y0[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,85,Assert.assertTrue(FastMath.abs(result[i] - y0[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,91,ssertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,91,Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,110,ssertTrue(FastMath.abs(result[0] - 0.1) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,111,ssertTrue(FastMath.abs(result[1] - 1.2) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,112,ssertTrue(FastMath.abs(result[2] + 2.2) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,110,Assert.assertTrue(FastMath.abs(result[0] - 0.1) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,111,Assert.assertTrue(FastMath.abs(result[1] - 1.2) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,112,Assert.assertTrue(FastMath.abs(result[2] + 2.2) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,116,ssertTrue(FastMath.abs(result[0] - 0.5) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,117,ssertTrue(FastMath.abs(result[1] - 2.0) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,118,ssertTrue(FastMath.abs(result[2] + 3.0) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,116,Assert.assertTrue(FastMath.abs(result[0] - 0.5) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,117,Assert.assertTrue(FastMath.abs(result[1] - 2.0) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,118,Assert.assertTrue(FastMath.abs(result[2] + 3.0) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,169,ssertTrue(maxError < 0.001);
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,169,Assert.assertTrue(maxError < 0.001);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,20,mport junit.framework.*;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,36,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,37,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,38,ublic class GillIntegratorTest
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,39,xtends TestCase {
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,41,ublic GillIntegratorTest(String name) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,42,uper(name);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,39,public class GillIntegratorTest {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,41,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,51,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,48,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,53,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,50,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,55,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,82,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,80,"Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,87,ssertTrue(valueError < FastMath.abs(previousValueError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,85,Assert.assertTrue(valueError < FastMath.abs(previousValueError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,93,ssertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,91,Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,101,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,115,ssertTrue(handler.getLastError() < 2.0e-13);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,116,ssertTrue(handler.getMaximalValueError() < 4.0e-12);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,117,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,118,"ssertEquals(""Gill"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,114,Assert.assertTrue(handler.getLastError() < 2.0e-13);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,115,Assert.assertTrue(handler.getMaximalValueError() < 4.0e-12);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,116,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,117,"Assert.assertEquals(""Gill"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,121,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,134,ssertTrue(handler.getLastError() > 0.0004);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,135,ssertTrue(handler.getMaximalValueError() > 0.005);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,136,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,134,Assert.assertTrue(handler.getLastError() > 0.0004);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,135,Assert.assertTrue(handler.getMaximalValueError() > 0.005);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,136,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,140,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,152,ssertTrue(handler.getLastError() < 5.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,153,ssertTrue(handler.getMaximalValueError() < 7.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,154,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,155,"ssertEquals(""Gill"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,153,Assert.assertTrue(handler.getLastError() < 5.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,154,Assert.assertTrue(handler.getMaximalValueError() < 7.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,155,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,156,"Assert.assertEquals(""Gill"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,159,@Test
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,173,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,178,"ssertEquals(8.0, y[0], 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,181,"Assert.assertEquals(8.0, y[0], 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,207,ssertTrue(maxError > 0.001);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,210,Assert.assertTrue(maxError > 0.001);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,217,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,221,"ssertEquals(step,"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,225,"Assert.assertEquals(step,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,35,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,68,ssertTrue(bos.size () > 753000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,69,ssertTrue(bos.size () < 754000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,68,Assert.assertTrue(bos.size () > 753000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,69,Assert.assertTrue(bos.size () < 754000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,91,ssertTrue(maxError < 0.003);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,91,Assert.assertTrue(maxError < 0.003);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,34,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,35,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,35,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,37,ublic class GraggBulirschStoerIntegratorTest
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,38,xtends TestCase {
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,40,ublic GraggBulirschStoerIntegratorTest(String name) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,41,uper(name);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,38,public class GraggBulirschStoerIntegratorTest {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,40,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,52,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,49,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,54,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,51,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,56,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,67,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,65,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,69,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,67,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,72,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,91,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,90,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,93,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,92,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,98,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,116,ssertTrue(handler.getLastError() < 7.5e-9);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,117,ssertTrue(handler.getMaximalValueError() < 8.1e-9);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,118,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,119,"ssertEquals(""Gragg-Bulirsch-Stoer"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,116,Assert.assertTrue(handler.getLastError() < 7.5e-9);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,117,Assert.assertTrue(handler.getMaximalValueError() < 8.1e-9);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,118,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,119,"Assert.assertEquals(""Gragg-Bulirsch-Stoer"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,122,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,146,ssertTrue(ratio < 2.4);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,147,ssertTrue(ratio > 0.02);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,148,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,147,Assert.assertTrue(ratio < 2.4);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,148,Assert.assertTrue(ratio > 0.02);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,149,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,151,"ssertEquals(integ.getEvaluations(), calls);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,152,ssertTrue(calls <= previousCalls);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,152,"Assert.assertEquals(integ.getEvaluations(), calls);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,153,Assert.assertTrue(calls <= previousCalls);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,160,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,171,"ssertTrue(errorWithDefaultSettings < getMaxError(integ, pb));"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,173,"Assert.assertTrue(errorWithDefaultSettings < getMaxError(integ, pb));"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,175,"ssertTrue(errorWithDefaultSettings < getMaxError(integ, pb));"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,177,"Assert.assertTrue(errorWithDefaultSettings < getMaxError(integ, pb));"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,179,"ssertTrue(errorWithDefaultSettings < getMaxError(integ, pb));"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,181,"Assert.assertTrue(errorWithDefaultSettings < getMaxError(integ, pb));"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,183,"ssertTrue(errorWithDefaultSettings < getMaxError(integ, pb));"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,185,"Assert.assertTrue(errorWithDefaultSettings < getMaxError(integ, pb));"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,200,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,217,"ssertEquals(functions.length, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,220,"Assert.assertEquals(functions.length, integ.getEventHandlers().size());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,222,ssertTrue(handler.getMaximalValueError() < 5.0e-8);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,223,"ssertEquals(0, handler.getMaximalTimeError(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,224,"ssertEquals(12.0, handler.getLastTime(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,225,Assert.assertTrue(handler.getMaximalValueError() < 5.0e-8);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,226,"Assert.assertEquals(0, handler.getMaximalTimeError(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,227,"Assert.assertEquals(12.0, handler.getLastTime(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,226,"ssertEquals(0, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,229,"Assert.assertEquals(0, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,233,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,247,"ssertEquals(integ.getEvaluations(), pb.getCalls());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,248,ssertTrue(pb.getCalls() < 2150);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,251,"Assert.assertEquals(integ.getEvaluations(), pb.getCalls());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,252,Assert.assertTrue(pb.getCalls() < 2150);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,256,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,267,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,268,"ssertEquals(""Gragg-Bulirsch-Stoer"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,272,"Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,273,"Assert.assertEquals(""Gragg-Bulirsch-Stoer"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,276,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,279,"ssertEquals(8.0, y[0], 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,285,"Assert.assertEquals(8.0, y[0], 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,316,ssertTrue(maxError < 2.7e-6);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,317,ssertTrue(nbSteps < 80);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,322,Assert.assertTrue(maxError < 2.7e-6);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,323,Assert.assertTrue(nbSteps < 80);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,356,ssertTrue(minStep < 8.2e-3);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,357,ssertTrue(maxStep > 1.7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,362,Assert.assertTrue(minStep < 8.2e-3);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,363,Assert.assertTrue(maxStep > 1.7);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,36,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,82,ssertTrue(bos.size () > 34000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,83,ssertTrue(bos.size () < 35000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,81,Assert.assertTrue(bos.size () > 34000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,82,Assert.assertTrue(bos.size () < 35000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,105,ssertTrue(maxError < 5.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,104,Assert.assertTrue(maxError < 5.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,127,"ssertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,128,"ssertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,126,"Assert.assertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,127,"Assert.assertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,132,ssertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,131,Assert.assertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,134,"ssertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,133,"Assert.assertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,138,"ssertEquals(referenceState[j], cloneState[j], 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,137,"Assert.assertEquals(referenceState[j], cloneState[j], 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,20,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,35,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,36,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,37,ublic class HighamHall54IntegratorTest
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,38,xtends TestCase {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,40,ublic HighamHall54IntegratorTest(String name) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,41,uper(name);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,38,public class HighamHall54IntegratorTest {
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,40,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,65,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,62,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,72,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,69,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,76,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,96,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,94,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,98,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,96,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,102,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,127,ssertTrue(handler.getMaximalValueError() < (1.3 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,128,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,126,Assert.assertTrue(handler.getMaximalValueError() < (1.3 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,127,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,131,"ssertEquals(integ.getEvaluations(), calls);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,132,ssertTrue(calls <= previousCalls);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,130,"Assert.assertEquals(integ.getEvaluations(), calls);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,131,Assert.assertTrue(calls <= previousCalls);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,138,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,156,ssertTrue(handler.getLastError() < 5.0e-7);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,157,ssertTrue(handler.getMaximalValueError() < 5.0e-7);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,158,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,159,"ssertEquals(""Higham-Hall 5(4)"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,156,Assert.assertTrue(handler.getLastError() < 5.0e-7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,157,Assert.assertTrue(handler.getMaximalValueError() < 5.0e-7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,158,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,159,"Assert.assertEquals(""Higham-Hall 5(4)"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,162,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,182,"ssertEquals(functions.length, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,183,"Assert.assertEquals(functions.length, integ.getEventHandlers().size());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,187,ssertTrue(handler.getMaximalValueError() < 1.0e-7);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,188,"ssertEquals(0, handler.getMaximalTimeError(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,189,"ssertEquals(12.0, handler.getLastTime(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,188,Assert.assertTrue(handler.getMaximalValueError() < 1.0e-7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,189,"Assert.assertEquals(0, handler.getMaximalTimeError(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,190,"Assert.assertEquals(12.0, handler.getLastTime(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,191,"ssertEquals(0, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,192,"Assert.assertEquals(0, integ.getEventHandlers().size());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,196,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,230,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,232,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,239,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,269,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,272,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,279,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,286,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,290,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,296,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,300,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,306,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,310,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,316,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,320,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,326,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,330,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,337,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,350,"ssertEquals(0.0, handler.getMaximalValueError(), 1.5e-4);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,351,"ssertEquals(""Higham-Hall 5(4)"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,355,"Assert.assertEquals(0.0, handler.getMaximalValueError(), 1.5e-4);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,356,"Assert.assertEquals(""Higham-Hall 5(4)"", integ.getName());"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,36,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,80,ssertTrue(bos.size () > 167000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,81,ssertTrue(bos.size () < 168000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,79,Assert.assertTrue(bos.size () > 167000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,80,Assert.assertTrue(bos.size () < 168000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,103,ssertTrue(maxError < 1.6e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,102,Assert.assertTrue(maxError < 1.6e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,125,"ssertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,126,"ssertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,124,"Assert.assertEquals(interpolator.getPreviousTime(), tA, 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,125,"Assert.assertEquals(interpolator.getCurrentTime(), tB, 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,130,ssertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,129,Assert.assertTrue(FastMath.abs(cloned.getInterpolatedTime() - t) > (halfStep / 10));
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,132,"ssertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,131,"Assert.assertEquals(t, cloned.getInterpolatedTime(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,136,"ssertEquals(referenceState[j], cloneState[j], 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,135,"Assert.assertEquals(referenceState[j], cloneState[j], 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,20,mport junit.framework.*;
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,35,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,36,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,37,ublic class MidpointIntegratorTest
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,38,xtends TestCase {
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,40,ublic MidpointIntegratorTest(String name) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,41,uper(name);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,38,public class MidpointIntegratorTest {
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,40,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,50,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,47,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,52,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,49,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,54,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,81,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,79,"Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,86,ssertTrue(valueError < FastMath.abs(previousValueError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,84,Assert.assertTrue(valueError < FastMath.abs(previousValueError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,92,ssertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,90,Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,100,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,115,ssertTrue(handler.getLastError() < 2.0e-7);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,116,ssertTrue(handler.getMaximalValueError() < 1.0e-6);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,117,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,118,"ssertEquals(""midpoint"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,114,Assert.assertTrue(handler.getLastError() < 2.0e-7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,115,Assert.assertTrue(handler.getMaximalValueError() < 1.0e-6);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,116,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,117,"Assert.assertEquals(""midpoint"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,121,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,135,ssertTrue(handler.getLastError() > 0.01);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,136,ssertTrue(handler.getMaximalValueError() > 0.05);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,137,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,135,Assert.assertTrue(handler.getLastError() > 0.01);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,136,Assert.assertTrue(handler.getMaximalValueError() > 0.05);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,137,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,141,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,153,ssertTrue(handler.getLastError() < 6.0e-4);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,154,ssertTrue(handler.getMaximalValueError() < 6.0e-4);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,155,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,156,"ssertEquals(""midpoint"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,154,Assert.assertTrue(handler.getLastError() < 6.0e-4);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,155,Assert.assertTrue(handler.getMaximalValueError() < 6.0e-4);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,156,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,157,"Assert.assertEquals(""midpoint"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,160,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,166,"ssertEquals(step,"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,168,"Assert.assertEquals(step,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,35,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,68,ssertTrue(bos.size () > 114000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,69,ssertTrue(bos.size () < 115000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,68,Assert.assertTrue(bos.size () > 114000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,69,Assert.assertTrue(bos.size () < 115000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,91,ssertTrue(maxError < 1.0e-6);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,91,Assert.assertTrue(maxError < 1.0e-6);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,20,mport junit.framework.*;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,36,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,37,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,38,ublic class ThreeEighthesIntegratorTest
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,39,xtends TestCase {
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,41,ublic ThreeEighthesIntegratorTest(String name) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,42,uper(name);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,39,public class ThreeEighthesIntegratorTest {
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,41,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,51,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,48,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,53,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,50,"Assert.fail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,55,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,82,"ssertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,80,"Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,87,ssertTrue(error < FastMath.abs(previousValueError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,85,Assert.assertTrue(error < FastMath.abs(previousValueError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,93,ssertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,91,Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,101,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,115,ssertTrue(handler.getLastError() < 2.0e-13);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,116,ssertTrue(handler.getMaximalValueError() < 4.0e-12);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,117,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,118,"ssertEquals(""3/8"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,114,Assert.assertTrue(handler.getLastError() < 2.0e-13);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,115,Assert.assertTrue(handler.getMaximalValueError() < 4.0e-12);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,116,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,117,"Assert.assertEquals(""3/8"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,121,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,134,ssertTrue(handler.getLastError() > 0.0004);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,135,ssertTrue(handler.getMaximalValueError() > 0.005);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,136,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,134,Assert.assertTrue(handler.getLastError() > 0.0004);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,135,Assert.assertTrue(handler.getMaximalValueError() > 0.005);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,136,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,140,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,152,ssertTrue(handler.getLastError() < 5.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,153,ssertTrue(handler.getMaximalValueError() < 7.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,154,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,155,"ssertEquals(""3/8"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,153,Assert.assertTrue(handler.getLastError() < 5.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,154,Assert.assertTrue(handler.getMaximalValueError() < 7.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,155,"Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,156,"Assert.assertEquals(""3/8"", integ.getName());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,159,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,201,ssertTrue(maxError > 0.005);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,203,Assert.assertTrue(maxError > 0.005);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,212,@Test
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,217,"ssertEquals(step,"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,220,"Assert.assertEquals(step,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,34,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,67,ssertTrue(bos.size () > 753000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,68,ssertTrue(bos.size () < 754000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,67,Assert.assertTrue(bos.size () > 753000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,68,Assert.assertTrue(bos.size () < 754000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,90,ssertTrue(maxError > 0.005);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,90,Assert.assertTrue(maxError > 0.005);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,21,mport static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,22,mport static org.junit.Assert.fail;
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,33,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,51,ssertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,49,Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,69,ssertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,67,Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,75,ssertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,73,Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,94,ssertTrue(bos.size () > 200);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,95,ssertTrue(bos.size () < 300);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,92,Assert.assertTrue(bos.size () > 200);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,93,Assert.assertTrue(bos.size () < 300);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,104,ssertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,102,Assert.assertTrue(FastMath.abs(result[i] - y[i]) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,123,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,121,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,126,"ssertEquals(0, ioe.getMessage().length());"
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,124,"Assert.assertEquals(0, ioe.getMessage().length());"
False,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,34,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,65,ssertTrue(bos.size () >  25500);
False,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,66,ssertTrue(bos.size () <  26500);
True,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,65,Assert.assertTrue(bos.size () >  25500);
True,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,66,Assert.assertTrue(bos.size () <  26500);
False,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,88,ssertTrue(maxError < 1.0e-6);
True,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,88,Assert.assertTrue(maxError < 1.0e-6);
False,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,19,mport static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,25,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,74,"ssertEquals(approYDot, yDot[i], threshold);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java,74,"Assert.assertEquals(approYDot, yDot[i], threshold);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,28,import org.junit.After;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,30,import org.junit.Before;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,31,import org.junit.Test;
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,29,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,31,ublic class StepNormalizerTest
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,32,xtends TestCase {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,34,public class StepNormalizerTest {
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,34,ublic StepNormalizerTest(String name) {
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,36,public StepNormalizerTest() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,41,@Test
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,65,ssertTrue(lastSeen);
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,67,Assert.assertTrue(lastSeen);
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,70,@Test
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,89,ssertTrue(lastSeen);
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,92,Assert.assertTrue(lastSeen);
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,93,ssertTrue(FastMath.abs(value - reference) < 1.0e-10);
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,96,Assert.assertTrue(FastMath.abs(value - reference) < 1.0e-10);
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,100,Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,103,@Before
False,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,109,Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java,112,@After
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,34,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,61,"ssertEquals(200, optimizer.getMaxEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,60,"Assert.assertEquals(200, optimizer.getMaxEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,65,"ssertEquals(69.960161753, circle.getRadius(center), 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,66,"ssertEquals(96.075902096, center.x, 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,67,"ssertEquals(48.135167894, center.y, 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,64,"Assert.assertEquals(69.960161753, circle.getRadius(center), 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,65,"Assert.assertEquals(96.075902096, center.x, 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,66,"Assert.assertEquals(48.135167894, center.y, 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,69,ssertTrue(optimizer.getEvaluations() > 70);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,70,ssertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,71,"ssertEquals(3.1267527, optimum.getValue(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,68,Assert.assertTrue(optimizer.getEvaluations() > 70);
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,69,Assert.assertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java,70,"Assert.assertEquals(3.1267527, optimum.getValue(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,21,mport static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,22,mport static org.junit.Assert.fail;
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,34,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,121,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,119,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,127,"ssertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,128,"ssertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,125,"Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,126,"Assert.assertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,130,"ssertEquals(10, optima.length);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,128,"Assert.assertEquals(10, optima.length);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,132,"ssertEquals(1.5, optima[i].getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,133,"ssertEquals(3.0, optima[i].getValue()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,130,"Assert.assertEquals(1.5, optima[i].getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,131,"Assert.assertEquals(3.0, optima[i].getValue()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,135,ssertTrue(optimizer.getEvaluations() > 20);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,136,ssertTrue(optimizer.getEvaluations() < 50);
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,137,"ssertEquals(100, optimizer.getMaxEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,133,Assert.assertTrue(optimizer.getEvaluations() > 20);
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,134,Assert.assertTrue(optimizer.getEvaluations() < 50);
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,135,"Assert.assertEquals(100, optimizer.getMaxEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,29,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,52,"ssertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,53,ssertTrue(optimizer.getEvaluations() > 900);
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,54,ssertTrue(optimizer.getEvaluations() < 1200);
False,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,55,ssertTrue(optimum.getValue() < 8.0e-4);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,51,"Assert.assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,52,Assert.assertTrue(optimizer.getEvaluations() > 900);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,53,Assert.assertTrue(optimizer.getEvaluations() < 1200);
True,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,54,Assert.assertTrue(optimum.getValue() < 8.0e-4);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,29,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,62,"ssertEquals(xM,        optimum.getPoint()[0], 2e-7);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,63,"ssertEquals(yP,        optimum.getPoint()[1], 2e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,64,"ssertEquals(valueXmYp, optimum.getValue(),    6e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,65,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,66,ssertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,61,"Assert.assertEquals(xM,        optimum.getPoint()[0], 2e-7);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,62,"Assert.assertEquals(yP,        optimum.getPoint()[1], 2e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,63,"Assert.assertEquals(valueXmYp, optimum.getValue(),    6e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,64,Assert.assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,65,Assert.assertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,69,"ssertEquals(xP,        optimum.getPoint()[0], 5e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,70,"ssertEquals(yM,        optimum.getPoint()[1], 6e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,71,"ssertEquals(valueXpYm, optimum.getValue(),    1e-11);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,72,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,73,ssertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,68,"Assert.assertEquals(xP,        optimum.getPoint()[0], 5e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,69,"Assert.assertEquals(yM,        optimum.getPoint()[1], 6e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,70,"Assert.assertEquals(valueXpYm, optimum.getValue(),    1e-11);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,71,Assert.assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,72,Assert.assertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,77,"ssertEquals(xM,        optimum.getPoint()[0], 1e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,78,"ssertEquals(yM,        optimum.getPoint()[1], 3e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,79,"ssertEquals(valueXmYm, optimum.getValue(),    3e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,80,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,81,ssertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,76,"Assert.assertEquals(xM,        optimum.getPoint()[0], 1e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,77,"Assert.assertEquals(yM,        optimum.getPoint()[1], 3e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,78,"Assert.assertEquals(valueXmYm, optimum.getValue(),    3e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,79,Assert.assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,80,Assert.assertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,84,"ssertEquals(xP,        optimum.getPoint()[0], 4e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,85,"ssertEquals(yP,        optimum.getPoint()[1], 5e-6);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,86,"ssertEquals(valueXpYp, optimum.getValue(),    7e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,87,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,88,ssertTrue(optimizer.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,83,"Assert.assertEquals(xP,        optimum.getPoint()[0], 4e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,84,"Assert.assertEquals(yP,        optimum.getPoint()[1], 5e-6);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,85,"Assert.assertEquals(valueXpYp, optimum.getValue(),    7e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,86,Assert.assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,87,Assert.assertTrue(optimizer.getEvaluations() < 90);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,102,"ssertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,103,ssertTrue(optimizer.getEvaluations() > 40);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,104,ssertTrue(optimizer.getEvaluations() < 50);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,105,ssertTrue(optimum.getValue() < 8e-4);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,101,"Assert.assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,102,Assert.assertTrue(optimizer.getEvaluations() > 40);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,103,Assert.assertTrue(optimizer.getEvaluations() < 50);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,104,Assert.assertTrue(optimum.getValue() < 8e-4);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,116,"ssertEquals(powell.getCount(), optimizer.getEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,117,ssertTrue(optimizer.getEvaluations() > 110);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,118,ssertTrue(optimizer.getEvaluations() < 130);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,119,ssertTrue(optimum.getValue() < 2e-3);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,115,"Assert.assertEquals(powell.getCount(), optimizer.getEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,116,Assert.assertTrue(optimizer.getEvaluations() > 110);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,117,Assert.assertTrue(optimizer.getEvaluations() < 130);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,118,Assert.assertTrue(optimum.getValue() < 2e-3);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,139,"ssertEquals( 2, optimum.getPointRef()[0], 3e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,140,"ssertEquals(-3, optimum.getPointRef()[1], 4e-4);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,141,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,142,ssertTrue(optimizer.getEvaluations() < 80);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,143,ssertTrue(optimum.getValue() < 1.0e-6);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,138,"Assert.assertEquals( 2, optimum.getPointRef()[0], 3e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,139,"Assert.assertEquals(-3, optimum.getPointRef()[1], 4e-4);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,140,Assert.assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,141,Assert.assertTrue(optimizer.getEvaluations() < 80);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,142,Assert.assertTrue(optimum.getValue() < 1.0e-6);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,163,"ssertEquals( 2, optimum.getPointRef()[0], 5e-5);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,164,"ssertEquals(-3, optimum.getPointRef()[1], 8e-4);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,165,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,166,ssertTrue(optimizer.getEvaluations() < 80);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,167,ssertTrue(optimum.getValue() < 1e-6);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,162,"Assert.assertEquals( 2, optimum.getPointRef()[0], 5e-5);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,163,"Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,164,Assert.assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,165,Assert.assertTrue(optimizer.getEvaluations() < 80);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,166,Assert.assertTrue(optimum.getValue() < 1e-6);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,189,"ssertEquals( 2, optimum.getPointRef()[0], 2e-3);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,190,"ssertEquals(-3, optimum.getPointRef()[1], 8e-4);"
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,191,ssertTrue(optimizer.getEvaluations() > 60);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,192,ssertTrue(optimizer.getEvaluations() < 80);
False,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,193,ssertTrue(optimum.getValue() < 1e-6);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,188,"Assert.assertEquals( 2, optimum.getPointRef()[0], 2e-3);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,189,"Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4);"
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,190,Assert.assertTrue(optimizer.getEvaluations() > 60);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,191,Assert.assertTrue(optimizer.getEvaluations() < 80);
True,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java,192,Assert.assertTrue(optimum.getValue() < 1e-6);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,24,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,37,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,38,import org.junit.Test;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,101,ublic class GaussNewtonOptimizerTest
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,102,xtends TestCase {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,104,ublic GaussNewtonOptimizerTest(String name) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,105,uper(name);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,102,public class GaussNewtonOptimizerTest {
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,104,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,115,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,116,"ssertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,117,"ssertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,112,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,113,"Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,114,"Assert.assertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,117,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,130,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,131,"ssertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,132,"ssertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,133,"ssertEquals(4.0, optimum.getValue()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,134,"ssertEquals(6.0, optimum.getValue()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,135,"ssertEquals(1.0, optimum.getValue()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,128,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,129,"Assert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,130,"Assert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,131,"Assert.assertEquals(4.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,132,"Assert.assertEquals(6.0, optimum.getValue()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,133,"Assert.assertEquals(1.0, optimum.getValue()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,137,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,153,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,152,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,155,"ssertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,154,"Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,158,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,170,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,171,"ssertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,172,"ssertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,173,"ssertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,170,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,171,"Assert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,172,"Assert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,173,"Assert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,177,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,193,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,194,"ssertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,195,"ssertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,196,"ssertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,197,"ssertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,198,"ssertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,199,"ssertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,194,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,195,"Assert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,196,"Assert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,197,"Assert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,198,"Assert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,199,"Assert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,200,"Assert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,204,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,214,"ail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,216,"Assert.fail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,222,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,232,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,233,"ssertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,234,"ssertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,235,"ssertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,236,"ssertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,235,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,236,"Assert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,237,"Assert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,238,"Assert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,239,"Assert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,247,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,248,"ssertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,249,"ssertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,250,"ssertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,251,"ssertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,250,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,251,"Assert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,252,"Assert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,253,"Assert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,254,"Assert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,258,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,268,"ail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,272,"Assert.fail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,278,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,287,"ail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,292,"Assert.fail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,298,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,305,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,306,"ssertEquals(2.0, optimum.getPoint()[0], 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,307,"ssertEquals(1.0, optimum.getPoint()[1], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,311,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,312,"Assert.assertEquals(2.0, optimum.getPoint()[0], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,313,"Assert.assertEquals(1.0, optimum.getPoint()[1], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,317,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,321,ssertTrue(optimizer.getRMS() > 0.1);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,328,Assert.assertTrue(optimizer.getRMS() > 0.1);
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,332,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,333,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,334,"ssertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,335,"ssertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,341,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,342,"Assert.assertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,343,"Assert.assertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,341,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,349,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,350,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,358,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,365,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,370,"ail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,379,"Assert.fail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,385,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,389,"ssertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * optimizer.getRMS(),  1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,399,"Assert.assertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * optimizer.getRMS(),  1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,391,"ssertEquals(69.96016175359975, circle.getRadius(center), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,392,"ssertEquals(96.07590209601095, center.x, 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,393,"ssertEquals(48.135167894714,   center.y, 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,401,"Assert.assertEquals(69.96016175359975, circle.getRadius(center), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,402,"Assert.assertEquals(96.07590209601095, center.x, 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,403,"Assert.assertEquals(48.135167894714,   center.y, 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,406,@Test
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,440,"ail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,451,"Assert.fail(""an exception should have been caught"");"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,447,"ssertEquals(-0.1517383071957963, optimum.getPointRef()[0], 1.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,448,"ssertEquals(0.2074999736353867,  optimum.getPointRef()[1], 1.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,449,"ssertEquals(0.04268731682389561, optimizer.getRMS(),       1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,458,"Assert.assertEquals(-0.1517383071957963, optimum.getPointRef()[0], 1.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,459,"Assert.assertEquals(0.2074999736353867,  optimum.getPointRef()[1], 1.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,460,"Assert.assertEquals(0.04268731682389561, optimizer.getRMS(),       1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,26,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,40,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,41,import org.junit.Test;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,104,ublic class LevenbergMarquardtOptimizerTest
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,105,xtends TestCase {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,107,ublic LevenbergMarquardtOptimizerTest(String name) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,108,uper(name);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,105,public class LevenbergMarquardtOptimizerTest {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,107,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,117,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,114,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,120,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,117,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,124,"ssertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,125,"ssertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,121,"Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,122,"Assert.assertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,125,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,137,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,138,"ssertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,139,"ssertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,140,"ssertEquals(4.0, optimum.getValue()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,141,"ssertEquals(6.0, optimum.getValue()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,142,"ssertEquals(1.0, optimum.getValue()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,135,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,136,"Assert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,137,"Assert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,138,"Assert.assertEquals(4.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,139,"Assert.assertEquals(6.0, optimum.getValue()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,140,"Assert.assertEquals(1.0, optimum.getValue()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,143,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,158,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,157,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,160,"ssertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,159,"Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,163,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,174,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,175,"ssertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,176,"ssertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,177,"ssertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,174,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,175,"Assert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,176,"Assert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,177,"Assert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,180,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,195,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,196,"ssertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,197,"ssertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,198,"ssertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,199,"ssertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,200,"ssertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,201,"ssertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,196,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,197,"Assert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,198,"Assert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,199,"Assert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,200,"Assert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,201,"Assert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,202,"Assert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,205,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,214,ssertTrue(FastMath.sqrt(problem.target.length) * optimizer.getRMS() > 0.6);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,216,Assert.assertTrue(FastMath.sqrt(problem.target.length) * optimizer.getRMS() > 0.6);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,217,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,219,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,225,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,234,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,235,"ssertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,236,"ssertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,237,"ssertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,238,"ssertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,237,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,238,"Assert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,239,"Assert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,240,"Assert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,241,"Assert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,249,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,250,"ssertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,251,"ssertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,252,"ssertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,253,"ssertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,252,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,253,"Assert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,254,"Assert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,255,"Assert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,256,"Assert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,259,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,267,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,271,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,274,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,283,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,284,"ssertEquals(3.0, optimum.getPointRef()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,285,"ssertEquals(4.0, optimum.getPointRef()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,286,"ssertEquals(5.0, optimum.getPointRef()[4], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,287,"ssertEquals(6.0, optimum.getPointRef()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,288,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,289,"Assert.assertEquals(3.0, optimum.getPointRef()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,290,"Assert.assertEquals(4.0, optimum.getPointRef()[3], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,291,"Assert.assertEquals(5.0, optimum.getPointRef()[4], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,292,"Assert.assertEquals(6.0, optimum.getPointRef()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,295,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,301,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,302,"ssertEquals(2.0, optimum.getPointRef()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,303,"ssertEquals(1.0, optimum.getPointRef()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,307,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,308,"Assert.assertEquals(2.0, optimum.getPointRef()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,309,"Assert.assertEquals(1.0, optimum.getPointRef()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,312,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,315,ssertTrue(optimizer.getRMS() > 0.1);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,322,Assert.assertTrue(optimizer.getRMS() > 0.1);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,325,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,325,"ssertEquals(0, optimizer.getRMS(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,326,"ssertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,327,"ssertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,333,"Assert.assertEquals(0, optimizer.getRMS(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,334,"Assert.assertEquals(-1, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,335,"Assert.assertEquals(+1, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,333,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,341,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,342,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,350,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,356,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,376,ssertTrue(!shouldFail);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,385,Assert.assertTrue(!shouldFail);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,378,ssertTrue(shouldFail);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,387,Assert.assertTrue(shouldFail);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,380,ssertTrue(shouldFail);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,389,Assert.assertTrue(shouldFail);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,393,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,395,ssertTrue(optimizer.getEvaluations() < 10);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,396,ssertTrue(optimizer.getJacobianEvaluations() < 10);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,405,Assert.assertTrue(optimizer.getEvaluations() < 10);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,406,Assert.assertTrue(optimizer.getJacobianEvaluations() < 10);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,398,"ssertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * rms,  1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,408,"Assert.assertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * rms,  1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,400,"ssertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,401,"ssertEquals(96.07590211815305, center.x,      1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,402,"ssertEquals(48.13516790438953, center.y,      1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,410,"Assert.assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,411,"Assert.assertEquals(96.07590211815305, center.x,      1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,412,"Assert.assertEquals(48.13516790438953, center.y,      1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,404,"ssertEquals(1.839, cov[0][0], 0.001);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,405,"ssertEquals(0.731, cov[0][1], 0.001);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,406,"ssertEquals(cov[0][1], cov[1][0], 1.0e-14);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,407,"ssertEquals(0.786, cov[1][1], 0.001);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,414,"Assert.assertEquals(1.839, cov[0][0], 0.001);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,415,"Assert.assertEquals(0.731, cov[0][1], 0.001);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,416,"Assert.assertEquals(cov[0][1], cov[1][0], 1.0e-14);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,417,"Assert.assertEquals(0.786, cov[1][1], 0.001);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,409,"ssertEquals(1.384, errors[0], 0.001);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,410,"ssertEquals(0.905, errors[1], 0.001);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,419,"Assert.assertEquals(1.384, errors[0], 0.001);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,420,"Assert.assertEquals(0.905, errors[1], 0.001);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,423,"ssertEquals(0.0016, cov[0][0], 0.001);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,424,"ssertEquals(3.2e-7, cov[0][1], 1.0e-9);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,425,"ssertEquals(cov[0][1], cov[1][0], 1.0e-14);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,426,"ssertEquals(0.0016, cov[1][1], 0.001);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,433,"Assert.assertEquals(0.0016, cov[0][0], 0.001);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,434,"Assert.assertEquals(3.2e-7, cov[0][1], 1.0e-9);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,435,"Assert.assertEquals(cov[0][1], cov[1][0], 1.0e-14);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,436,"Assert.assertEquals(0.0016, cov[1][1], 0.001);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,428,"ssertEquals(0.004, errors[0], 0.001);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,429,"ssertEquals(0.004, errors[1], 0.001);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,438,"Assert.assertEquals(0.004, errors[0], 0.001);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,439,"Assert.assertEquals(0.004, errors[1], 0.001);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,442,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,477,ssertTrue(optimizer.getEvaluations() < 25);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,478,ssertTrue(optimizer.getJacobianEvaluations() < 20);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,479,"ssertEquals( 0.043, optimizer.getRMS(), 1.0e-3);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,480,"ssertEquals( 0.292235,  circle.getRadius(center), 1.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,481,"ssertEquals(-0.151738,  center.x,      1.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,482,"ssertEquals( 0.2075001, center.y,      1.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,488,Assert.assertTrue(optimizer.getEvaluations() < 25);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,489,Assert.assertTrue(optimizer.getJacobianEvaluations() < 20);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,490,"Assert.assertEquals( 0.043, optimizer.getRMS(), 1.0e-3);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,491,"Assert.assertEquals( 0.292235,  circle.getRadius(center), 1.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,492,"Assert.assertEquals(-0.151738,  center.x,      1.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,493,"Assert.assertEquals( 0.2075001, center.y,      1.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,496,@Test
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,499,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,511,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,23,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,30,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,31,import org.junit.Test;
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,94,ublic class MinpackTest extends TestCase {
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,96,ublic MinpackTest(String name) {
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,97,uper(name);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,95,public class MinpackTest {
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,97,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,105,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,113,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,119,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,129,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,139,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,149,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,171,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,193,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,224,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,242,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,328,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,334,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,344,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,369,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,408,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,477,@Test
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,488,@Test
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,496,/      assertTrue(function.checkTheoreticalStartCost(optimizer.getRMS()));
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,511,//      Assert.assertTrue(function.checkTheoreticalStartCost(optimizer.getRMS()));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,502,ssertFalse(exceptionExpected);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,517,Assert.assertFalse(exceptionExpected);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,506,ssertTrue(exceptionExpected);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,521,Assert.assertTrue(exceptionExpected);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,508,ssertTrue(exceptionExpected);
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,523,Assert.assertTrue(exceptionExpected);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,567,"ssertEquals(theoreticalMinCost, FastMath.sqrt(m) * rms, threshold);"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,582,"Assert.assertEquals(theoreticalMinCost, FastMath.sqrt(m) * rms, threshold);"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,576,"ssertEquals(mi, vi, paramsAccuracy * (1.0 + FastMath.abs(mi)));"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,591,"Assert.assertEquals(mi, vi, paramsAccuracy * (1.0 + FastMath.abs(mi)));"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,19,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,20,mport static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,21,mport static org.junit.Assert.fail;
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,26,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,40,"ssertEquals(3 * Math.PI / 2, optimizer.optimize(200, f, GoalType.MINIMIZE, 4, 5).getPoint(),1e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,41,ssertTrue(optimizer.getEvaluations() <= 50);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,42,"ssertEquals(200, optimizer.getMaxEvaluations());"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,43,"ssertEquals(3 * Math.PI / 2, optimizer.optimize(200, f, GoalType.MINIMIZE, 1, 5).getPoint(), 1e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,44,ssertTrue(optimizer.getEvaluations() <= 100);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,45,ssertTrue(optimizer.getEvaluations() >= 15);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,38,"Assert.assertEquals(3 * Math.PI / 2, optimizer.optimize(200, f, GoalType.MINIMIZE, 4, 5).getPoint(),1e-8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,39,Assert.assertTrue(optimizer.getEvaluations() <= 50);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,40,"Assert.assertEquals(200, optimizer.getMaxEvaluations());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,41,"Assert.assertEquals(3 * Math.PI / 2, optimizer.optimize(200, f, GoalType.MINIMIZE, 1, 5).getPoint(), 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,42,Assert.assertTrue(optimizer.getEvaluations() <= 100);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,43,Assert.assertTrue(optimizer.getEvaluations() >= 15);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,48,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,46,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,59,"ssertEquals(-0.27195613, optimizer.optimize(200, f, GoalType.MINIMIZE, -0.3, -0.2).getPoint(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,60,"ssertEquals( 0.82221643, optimizer.optimize(200, f, GoalType.MINIMIZE,  0.3,  0.9).getPoint(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,61,ssertTrue(optimizer.getEvaluations() <= 50);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,57,"Assert.assertEquals(-0.27195613, optimizer.optimize(200, f, GoalType.MINIMIZE, -0.3, -0.2).getPoint(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,58,"Assert.assertEquals( 0.82221643, optimizer.optimize(200, f, GoalType.MINIMIZE,  0.3,  0.9).getPoint(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,59,Assert.assertTrue(optimizer.getEvaluations() <= 50);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,64,"ssertEquals(-0.27195613, optimizer.optimize(200, f, GoalType.MINIMIZE, -1.0, 0.2).getPoint(), 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,65,ssertTrue(optimizer.getEvaluations() <= 50);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,62,"Assert.assertEquals(-0.27195613, optimizer.optimize(200, f, GoalType.MINIMIZE, -1.0, 0.2).getPoint(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,63,Assert.assertTrue(optimizer.getEvaluations() <= 50);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,91,ssertTrue(meanOptValue > -0.2719561281);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,92,ssertTrue(meanOptValue < -0.2719561280);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,93,"ssertEquals(23, (int) medianEval);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,89,Assert.assertTrue(meanOptValue > -0.2719561281);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,90,Assert.assertTrue(meanOptValue < -0.2719561280);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,91,"Assert.assertEquals(23, (int) medianEval);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,102,"ssertEquals(0.27195613, optimizer.optimize(100, f, GoalType.MAXIMIZE, 0.2, 0.3).getPoint(), 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,100,"Assert.assertEquals(0.27195613, optimizer.optimize(100, f, GoalType.MAXIMIZE, 0.2, 0.3).getPoint(), 1e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,105,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,103,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,118,"ssertEquals(3 * Math.PI / 2, result, 1e-6);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,116,"Assert.assertEquals(3 * Math.PI / 2, result, 1e-6);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,121,"ssertEquals(3 * Math.PI / 2, result, 1e-6);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,119,"Assert.assertEquals(3 * Math.PI / 2, result, 1e-6);"
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,21,mport static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,47,ssertTrue (FastMath.abs(d - FastMath.rint(d)) < 1.0e-8);
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,48,"ssertEquals(-1.0, f.value(optima[i].getPoint()), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,49,"ssertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,45,Assert.assertTrue(FastMath.abs(d - FastMath.rint(d)) < 1.0e-8);
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,46,"Assert.assertEquals(-1.0, f.value(optima[i].getPoint()), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,47,"Assert.assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,51,ssertTrue(optimizer.getEvaluations() > 200);
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,52,ssertTrue(optimizer.getEvaluations() < 300);
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,49,Assert.assertTrue(optimizer.getEvaluations() > 200);
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,50,Assert.assertTrue(optimizer.getEvaluations() < 300);
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,68,"ssertEquals(-0.2719561293, optimum.getPoint(), 1e-9);"
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,69,"ssertEquals(-0.0443342695, optimum.getValue(), 1e-9);"
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,66,"Assert.assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);"
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,67,"Assert.assertEquals(-0.0443342695, optimum.getValue(), 1e-9);"
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,73,"ssertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);"
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,71,"Assert.assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);"
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,75,ssertTrue(optimizer.getEvaluations() >= 50);
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,76,ssertTrue(optimizer.getEvaluations() <= 100);
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,73,Assert.assertTrue(optimizer.getEvaluations() >= 50);
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,74,Assert.assertTrue(optimizer.getEvaluations() <= 100);
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,32,ublic AbstractRandomGeneratorTest(String name) {
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,33,uper(name);
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,34,public AbstractRandomGeneratorTest() {
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,39,@Test
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,41,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,43,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,49,"ssertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,51,"Assert.assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,60,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,62,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,67,@Test
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,94,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,97,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,101,@Test
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,112,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,116,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,120,@Test
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,141,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,146,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,30,import org.junit.Before;
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,31,import org.junit.Test;
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,44,ublic EmpiricalDistributionTest(String name) {
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,45,uper(name);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,48,Override
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,47,@Before
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,77,@Test
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,82,"ssertEquals(empiricalDistribution.getSampleStats().getN(),1000,10E-7);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,82,"Assert.assertEquals(empiricalDistribution.getSampleStats().getN(),1000,10E-7);"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,84,ssertEquals
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,85,"empiricalDistribution.getSampleStats().getMean(),"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,84,"Assert.assertEquals(empiricalDistribution.getSampleStats().getMean(),"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,87,ssertEquals
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,88,"empiricalDistribution.getSampleStats().getStandardDeviation(),"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,86,"Assert.assertEquals(empiricalDistribution.getSampleStats().getStandardDeviation(),"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,96,@Test
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,102,"ssertEquals(empiricalDistribution2.getSampleStats().getN(),1000,10E-7);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,101,"Assert.assertEquals(empiricalDistribution2.getSampleStats().getN(),1000,10E-7);"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,104,ssertEquals
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,105,"empiricalDistribution2.getSampleStats().getMean(),"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,103,"Assert.assertEquals(empiricalDistribution2.getSampleStats().getMean(),"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,107,ssertEquals
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,108,"empiricalDistribution2.getSampleStats().getStandardDeviation(),"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,105,"Assert.assertEquals(empiricalDistribution2.getSampleStats().getStandardDeviation(),"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,112,"ssertEquals(bounds.length, 100);"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,113,"ssertEquals(bounds[99], 1.0, 10e-12);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,109,"Assert.assertEquals(bounds.length, 100);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,110,"Assert.assertEquals(bounds[99], 1.0, 10e-12);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,119,@Test
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,129,@Test
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,135,"ail(""Expecting IllegalStateException"");"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,134,"Assert.fail(""Expecting IllegalStateException"");"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,143,@Test
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,154,@Test
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,166,@Test
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,172,@Test
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,185,@Test
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,186,"ail(""load((double[]) null) expected NullPointerException"");"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,190,"Assert.fail(""load((double[]) null) expected NullPointerException"");"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,196,@Test
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,196,"ail(""load((URL) null) expected NullPointerException"");"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,201,"Assert.fail(""load((URL) null) expected NullPointerException"");"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,207,@Test
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,206,"ail(""load((File) null) expected NullPointerException"");"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,212,"Assert.fail(""load((File) null) expected NullPointerException"");"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,221,@Test
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,227,"ssertEquals(d1.isLoaded(), d2.isLoaded());"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,228,"ssertEquals(d1.getBinCount(), d2.getBinCount());"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,229,"ssertEquals(d1.getSampleStats(), d2.getSampleStats());"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,234,"Assert.assertEquals(d1.isLoaded(), d2.isLoaded());"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,235,"Assert.assertEquals(d1.getBinCount(), d2.getBinCount());"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,236,"Assert.assertEquals(d1.getSampleStats(), d2.getSampleStats());"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,232,"ssertEquals(d1.getUpperBounds()[i], d2.getUpperBounds()[i], 0);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,239,"Assert.assertEquals(d1.getUpperBounds()[i], d2.getUpperBounds()[i], 0);"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,234,"ssertEquals(d1.getBinStats(), d2.getBinStats());"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,241,"Assert.assertEquals(d1.getBinStats(), d2.getBinStats());"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,244,"ssertEquals(""mean"", stats.getMean(),5.069831575018909,tolerance);"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,245,ssertEquals
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,246,"""std dev"", stats.getStandardDeviation(),1.0173699343977738,tolerance);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,251,"Assert.assertEquals(""mean"", stats.getMean(),5.069831575018909,tolerance);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,252,"Assert.assertEquals(""std dev"", stats.getStandardDeviation(),1.0173699343977738,tolerance);"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,255,"ssertEquals(""mean"", stats.getMean(),5.069831575018909,tolerance);"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,256,ssertEquals
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,257,"""std dev"", stats.getStandardDeviation(),1.0173699343977738,tolerance);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,261,"Assert.assertEquals(""mean"", stats.getMean(),5.069831575018909,tolerance);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,262,"Assert.assertEquals(""std dev"", stats.getStandardDeviation(),1.0173699343977738,tolerance);"
True,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,22,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,24,ublic class GaussianRandomGeneratorTest
False,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,25,xtends TestCase {
False,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,27,ublic GaussianRandomGeneratorTest(String name) {
False,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,28,uper(name);
True,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,25,public class GaussianRandomGeneratorTest {
True,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,27,@Test
False,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,39,"ssertEquals(0.0, StatUtils.mean(sample), 0.012);"
False,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,40,"ssertEquals(1.0, StatUtils.variance(sample), 0.01);"
True,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,36,"Assert.assertEquals(0.0, StatUtils.mean(sample), 0.012);"
True,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/GaussianRandomGeneratorTest.java,37,"Assert.assertEquals(1.0, StatUtils.variance(sample), 0.01);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,19,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,24,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,37,"ssertEquals(0.0, sample.getMean(), 0.005);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,38,"ssertEquals(1.0, sample.getStandardDeviation(), 0.025);"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,36,"Assert.assertEquals(0.0, sample.getMean(), 0.005);"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,37,"Assert.assertEquals(1.0, sample.getStandardDeviation(), 0.025);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,48,"ssertEquals(0.5, sample.getMean(), 0.02);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,49,"ssertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,47,"Assert.assertEquals(0.5, sample.getMean(), 0.02);"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,48,"Assert.assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,61,"ssertEquals(0.5, sample.getMean(), 0.01);"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,62,"ssertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,60,"Assert.assertEquals(0.5, sample.getMean(), 0.01);"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,61,"Assert.assertEquals(1.0 / (2.0 * FastMath.sqrt(3.0)),"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,80,ssertTrue(l >= 0);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,81,ssertTrue(l <  n);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,79,Assert.assertTrue(l >= 0);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,80,Assert.assertTrue(l <  n);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,84,ssertTrue(n * count[i] >  8600);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,85,ssertTrue(n * count[i] < 11200);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,83,Assert.assertTrue(n * count[i] >  8600);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,84,Assert.assertTrue(n * count[i] < 11200);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,101,ssertTrue(FastMath.abs(walk) < 120);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,100,Assert.assertTrue(FastMath.abs(walk) < 120);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,115,ssertTrue(FastMath.abs(walk) < 50);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,114,Assert.assertTrue(FastMath.abs(walk) < 50);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,129,ssertTrue(FastMath.abs(walk) < 250);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,128,Assert.assertTrue(FastMath.abs(walk) < 250);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,150,ssertTrue((expected - 200) < min);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,151,ssertTrue(max < (expected + 200));
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,149,Assert.assertTrue((expected - 200) < min);
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,150,Assert.assertTrue(max < (expected + 200));
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,414,"ssertEquals(refInt[i], (r & 0x7fffffffl) | ((r < 0) ? 0x80000000l : 0x0l));"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,413,"Assert.assertEquals(refInt[i], (r & 0x7fffffffl) | ((r < 0) ? 0x80000000l : 0x0l));"
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,419,"ssertEquals(refDouble[i],"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,418,"Assert.assertEquals(refDouble[i],"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,29,ublic RandomAdaptorTest(String name) {
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,30,uper(name);
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,32,@Test
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,44,"ssertEquals(0, bytes[0]);"
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,45,"ssertEquals(false, random.nextBoolean());"
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,46,"ssertEquals(0, random.nextDouble(), 0);"
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,47,"ssertEquals(0, random.nextFloat(), 0);"
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,48,"ssertEquals(0, random.nextGaussian(), 0);"
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,49,"ssertEquals(0, random.nextInt());"
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,50,"ssertEquals(0, random.nextInt(1));"
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,51,"ssertEquals(0, random.nextLong());"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,44,"Assert.assertEquals(0, bytes[0]);"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,45,"Assert.assertEquals(false, random.nextBoolean());"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,46,"Assert.assertEquals(0, random.nextDouble(), 0);"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,47,"Assert.assertEquals(0, random.nextFloat(), 0);"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,48,"Assert.assertEquals(0, random.nextGaussian(), 0);"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,49,"Assert.assertEquals(0, random.nextInt());"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,50,"Assert.assertEquals(0, random.nextInt(1));"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,51,"Assert.assertEquals(0, random.nextLong());"
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,53,"ssertEquals(0, random.nextDouble(), 0);"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,53,"Assert.assertEquals(0, random.nextDouble(), 0);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,24,mport junit.framework.AssertionFailedError;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,50,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,51,import org.junit.Test;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,61,ublic RandomDataTest(String name) {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,62,uper(name);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,62,public RandomDataTest() {
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,74,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,77,ssertFalse(x == y);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,78,Assert.assertFalse(x == y);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,81,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,83,ssertFalse(x == y);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,85,Assert.assertFalse(x == y);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,89,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,90,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,93,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,98,"ssertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,101,"Assert.assertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,110,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,113,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,118,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,118,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,122,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,126,"ssertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,130,"Assert.assertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,138,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,142,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,147,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,146,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,151,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,154,"ssertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,159,"Assert.assertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,166,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,171,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,176,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,174,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,180,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,182,"ssertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,188,"Assert.assertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,194,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,200,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,210,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,207,"ail(""zero mean -- expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,214,"Assert.fail(""zero mean -- expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,220,"ssertEquals(""cum Poisson(4)"", cumPct, 0.7851, 0.2);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,227,"Assert.assertEquals(""cum Poisson(4)"", cumPct, 0.7851, 0.2);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,223,"ail(""negative mean supplied -- MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,230,"Assert.fail(""negative mean supplied -- MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,229,"ail(""0 mean supplied -- MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,236,"Assert.fail(""0 mean supplied -- MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,243,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,355,ry {
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,357,"ssertFalse(chiSquareTest.chiSquareTest(expected, observed, alpha));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,358, catch (AssertionFailedError ex) {
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,364,"if (chiSquareTest.chiSquareTest(expected, observed, alpha)) {"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,384,ail(msgBuffer.toString());
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,390,Assert.fail(msgBuffer.toString());
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,395,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,392,"ail(""negative length supplied -- MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,399,"Assert.fail(""negative length supplied -- MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,398,"ail(""zero length supplied -- MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,405,"Assert.fail(""zero length supplied -- MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,404,"ail(""incorrect length for generated string"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,411,"Assert.fail(""incorrect length for generated string"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,408,"ail(""incorrect length for generated string"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,415,"Assert.fail(""incorrect length for generated string"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,412,"ail(""zero length requested -- expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,419,"Assert.fail(""zero length requested -- expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,417,"ail(""incorrect length for generated string"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,424,"Assert.fail(""incorrect length for generated string"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,423,"ail(""incorrect length for generated string"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,430,"Assert.fail(""incorrect length for generated string"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,439,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,446,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,451,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,447,"ail(""negative length -- MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,455,"Assert.fail(""negative length -- MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,453,"ail(""zero length -- MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,461,"Assert.fail(""zero length -- MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,459,"ail(""incorrect length for generated string"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,467,"Assert.fail(""incorrect length for generated string"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,463,"ail(""incorrect length for generated string"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,471,"Assert.fail(""incorrect length for generated string"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,467,"ail(""zero length requested -- expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,475,"Assert.fail(""zero length requested -- expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,472,"ail(""incorrect length for generated string"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,480,"Assert.fail(""incorrect length for generated string"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,478,"ail(""incorrect length for generated string"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,486,"Assert.fail(""incorrect length for generated string"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,494,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,502,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,507,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,502,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,511,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,508,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,517,"Assert.fail(""MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,521,"ail(""generated value equal to an endpoint: "" + result);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,530,"Assert.fail(""generated value equal to an endpoint: "" + result);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,533,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,542,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,547,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,541,ssertTrue(u > 0.99 && u < 1);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,551,Assert.assertTrue(u > 0.99 && u < 1);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,556,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,549,"ail(""zero sigma -- MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,560,"Assert.fail(""zero sigma -- MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,564,ssertTrue(FastMath.abs(xbar) / (s / FastMath.sqrt(n)) < 3.29);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,575,Assert.assertTrue(FastMath.abs(xbar) / (s / FastMath.sqrt(n)) < 3.29);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,579,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,571,"ail(""negative mean -- expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,583,"Assert.fail(""negative mean -- expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,577,"ail(""zero mean -- expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,589,"Assert.fail(""zero mean -- expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,585,"ssertTrue(""exponential deviate postive"", v > 0);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,597,"Assert.assertTrue(""exponential deviate postive"", v > 0);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,594,"ssertEquals(""exponential cumulative distribution"", (double) cumFreq"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,606,"Assert.assertEquals(""exponential cumulative distribution"", (double) cumFreq"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,611,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,603,"ssertTrue(""different seeds"", Math"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,616,"Assert.assertTrue(""different seeds"", Math"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,606,"ssertEquals(""same seeds"", v, randomData.nextUniform(0, 1), 10E-12);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,619,"Assert.assertEquals(""same seeds"", v, randomData.nextUniform(0, 1), 10E-12);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,610,"ssertTrue(""different seeds"", !hex.equals(randomData"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,623,"Assert.assertTrue(""different seeds"", !hex.equals(randomData"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,613,"ssertTrue(""same seeds"", !hex"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,626,"Assert.assertTrue(""same seeds"", !hex"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,620," (NoSuchProviderException ex) { ; } assertTrue(""different seeds"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,633,"* (NoSuchProviderException ex) { ; } Assert.assertTrue(""different seeds"","
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,623," fail(""expecting NoSuchAlgorithmException""); } catch"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,636,"* Assert.fail(""expecting NoSuchAlgorithmException""); } catch"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,628," fail(""expecting NoSuchProviderException""); } catch"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,641,"* Assert.fail(""expecting NoSuchProviderException""); } catch"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,661,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,677,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,691,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,686,"ail(""bad sample for set size = 1, sample size = 1"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,700,"Assert.fail(""bad sample for set size = 1, sample size = 1"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,692,"ail(""sample size > set size, expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,706,"Assert.fail(""sample size > set size, expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,701,"ail(""n = k = 0, expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,715,"Assert.fail(""n = k = 0, expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,719,"ail(""sample not found:{"" + samp[0] + "","" + samp[1] + ""}"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,733,"Assert.fail(""sample not found:{"" + samp[0] + "","" + samp[1] + ""}"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,738,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,739,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,754,"Assert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,745,"ail(""bad permutation for n = 1, sample k = 1"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,760,"Assert.fail(""bad permutation for n = 1, sample k = 1"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,750,"ail(""permutation k > n, expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,765,"Assert.fail(""permutation k > n, expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,758,"ail(""permutation k = n = 0, expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,773,"Assert.fail(""permutation k = n = 0, expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,766,"ail(""permutation k < n < 0, expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,781,"Assert.fail(""permutation k < n < 0, expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,776,"/    assertEquals(randomData, TestUtils.serializeAndRecover(randomData));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,791,"//    Assert.assertEquals(randomData, TestUtils.serializeAndRecover(randomData));"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,791,"ail(""permutation not found"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,806,"Assert.fail(""permutation not found"");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,810,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,812,"ssertEquals(betaDistribution.cumulativeProbability(value), quantiles[i], 10E-9);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,828,"Assert.assertEquals(betaDistribution.cumulativeProbability(value), quantiles[i], 10E-9);"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,832,@Test
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,844,@Test
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,856,@Test
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,868,@Test
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,880,@Test
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,892,@Test
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,904,@Test
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,916,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,894,"inomialDistributionTest testInstance = new BinomialDistributionTest("""");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,918,BinomialDistributionTest testInstance = new BinomialDistributionTest();
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,942,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,919,"ypergeometricDistributionTest testInstance = new HypergeometricDistributionTest("""");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,944,HypergeometricDistributionTest testInstance = new HypergeometricDistributionTest();
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,968,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,944,"ascalDistributionTest testInstance = new PascalDistributionTest("""");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,970,PascalDistributionTest testInstance = new PascalDistributionTest();
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,993,@Test
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,968,"ipfDistributionTest testInstance = new ZipfDistributionTest("""");"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,995,ZipfDistributionTest testInstance = new ZipfDistributionTest();
True,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,22,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,24,ublic class UniformRandomGeneratorTest
False,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,25,xtends TestCase {
False,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,27,ublic UniformRandomGeneratorTest(String name) {
False,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,28,uper(name);
True,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,25,public class UniformRandomGeneratorTest {
True,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,27,@Test
False,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,39,"ssertEquals(0.0, StatUtils.mean(sample), 0.07);"
False,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,40,"ssertEquals(1.0, StatUtils.variance(sample), 0.02);"
True,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,36,"Assert.assertEquals(0.0, StatUtils.mean(sample), 0.07);"
True,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/UniformRandomGeneratorTest.java,37,"Assert.assertEquals(1.0, StatUtils.variance(sample), 0.02);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,25,import org.junit.Before;
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,35,ublic ValueServerTest(String name) {
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,36,uper(name);
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,39,Override
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,38,@Before
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,50,@Test
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,55,"ssertTrue(""empirical distribution property"","
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,55,"Assert.assertTrue(""empirical distribution property"","
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,62,"ssertEquals(""mean"", 5.069831575018909, stats.getMean(), tolerance);"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,63,ssertEquals
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,64,"""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,62,"Assert.assertEquals(""mean"", 5.069831575018909, stats.getMean(), tolerance);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,63,"Assert.assertEquals(""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,73,"ssertEquals(""mean"", 5.069831575018909, stats.getMean(), tolerance);"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,74,ssertEquals
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,75,"""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,72,"Assert.assertEquals(""mean"", 5.069831575018909, stats.getMean(), tolerance);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,73,"Assert.assertEquals(""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,82,@Test
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,87,"ail(""Expecting IllegalStateException"");"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,86,"Assert.fail(""Expecting IllegalStateException"");"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,90,@Test
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,97,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,97,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,103,@Test
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,109,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,110,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,121,@Test
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,128,"ssertEquals(compareValue,firstDataValue,tolerance);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,130,"Assert.assertEquals(compareValue,firstDataValue,tolerance);"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,130,"ssertEquals(compareValue,secondDataValue,tolerance);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,132,"Assert.assertEquals(compareValue,secondDataValue,tolerance);"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,135,"ssertEquals(compareValue,firstDataValue,tolerance);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,137,"Assert.assertEquals(compareValue,firstDataValue,tolerance);"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,137,"ssertEquals(compareValue,secondDataValue,tolerance);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,139,"Assert.assertEquals(compareValue,secondDataValue,tolerance);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,148,@Test
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,149,"ssertEquals(""constant mode test"",vs.getMu(),vs.getNext(),Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,152,"Assert.assertEquals(""constant mode test"",vs.getMu(),vs.getNext(),Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,153,ssertTrue(val > 0 && val < 4);
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,156,Assert.assertTrue(val > 0 && val < 4);
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,157,"ssertTrue(""gaussian value close enough to mean"","
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,160,"Assert.assertTrue(""gaussian value close enough to mean"","
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,161,ssertTrue(val > 0);
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,164,Assert.assertTrue(val > 0);
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,165,"ail(""bad mode, expecting IllegalStateException"");"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,168,"Assert.fail(""bad mode, expecting IllegalStateException"");"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,177,@Test
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,180,"ssertEquals(""fill test in place"",2,val[i],Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,184,"Assert.assertEquals(""fill test in place"",2,val[i],Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,184,"ssertEquals(""fill test in place"",2,v2[i],Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,188,"Assert.assertEquals(""fill test in place"",2,v2[i],Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,195,@Test
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,193,"ssertEquals(""mode test"",ValueServer.CONSTANT_MODE,vs.getMode());"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,198,"Assert.assertEquals(""mode test"",ValueServer.CONSTANT_MODE,vs.getMode());"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,196,"ssertEquals(""valuesFileURL test"",""http://www.apache.org"",url.toString());"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,201,"Assert.assertEquals(""valuesFileURL test"",""http://www.apache.org"",url.toString());"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,31,ublic class CertifiedDataTest extends TestCase  {
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,32,public class CertifiedDataTest {
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,38, Certified Data Test Constructor
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,39, @param name
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,41,ublic CertifiedDataTest(String name) {
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,42,uper(name);
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,42,@Test
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,52,"ssertEquals(""PiDigits: std"", std, u.getStandardDeviation(), 1E-13);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,53,"ssertEquals(""PiDigits: mean"", mean, u.getMean(), 1E-13);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,46,"Assert.assertEquals(""PiDigits: std"", std, u.getStandardDeviation(), 1E-13);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,47,"Assert.assertEquals(""PiDigits: mean"", mean, u.getMean(), 1E-13);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,56,"ssertEquals(""Mavro: std"", std, u.getStandardDeviation(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,57,"ssertEquals(""Mavro: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,50,"Assert.assertEquals(""Mavro: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,51,"Assert.assertEquals(""Mavro: mean"", mean, u.getMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,60,"ssertEquals(""Michelso: std"", std, u.getStandardDeviation(), 1E-13);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,61,"ssertEquals(""Michelso: mean"", mean, u.getMean(), 1E-13);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,54,"Assert.assertEquals(""Michelso: std"", std, u.getStandardDeviation(), 1E-13);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,55,"Assert.assertEquals(""Michelso: mean"", mean, u.getMean(), 1E-13);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,64,"ssertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,65,"ssertEquals(""NumAcc1: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,58,"Assert.assertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,59,"Assert.assertEquals(""NumAcc1: mean"", mean, u.getMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,68,"ssertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,69,"ssertEquals(""NumAcc2: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,62,"Assert.assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,63,"Assert.assertEquals(""NumAcc2: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,70,@Test
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,81,"ssertEquals(""PiDigits: std"", std, u.getStandardDeviation(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,82,"ssertEquals(""PiDigits: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,76,"Assert.assertEquals(""PiDigits: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,77,"Assert.assertEquals(""PiDigits: mean"", mean, u.getMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,85,"ssertEquals(""Mavro: std"", std, u.getStandardDeviation(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,86,"ssertEquals(""Mavro: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,80,"Assert.assertEquals(""Mavro: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,81,"Assert.assertEquals(""Mavro: mean"", mean, u.getMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,89,"ssertEquals(""Michelso: std"", std, u.getStandardDeviation(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,90,"ssertEquals(""Michelso: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,84,"Assert.assertEquals(""Michelso: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,85,"Assert.assertEquals(""Michelso: mean"", mean, u.getMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,93,"ssertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,94,"ssertEquals(""NumAcc1: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,88,"Assert.assertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,89,"Assert.assertEquals(""NumAcc1: mean"", mean, u.getMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,97,"ssertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,98,"ssertEquals(""NumAcc2: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,92,"Assert.assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,93,"Assert.assertEquals(""NumAcc2: mean"", mean, u.getMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,23,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,26,import org.junit.Before;
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,27,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,33,ublic final class FrequencyTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,35,public final class FrequencyTest {
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,43,ublic FrequencyTest(String name) {
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,44,uper(name);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,47,Override
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,45,@Before
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,51,@Test
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,54,"ssertEquals(""total count"",0,f.getSumFreq());"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,53,"Assert.assertEquals(""total count"",0,f.getSumFreq());"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,59,"ssertEquals(""one frequency count"",3,f.getCount(1));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,60,"ssertEquals(""two frequency count"",1,f.getCount(2));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,61,"ssertEquals(""three frequency count"",0,f.getCount(3));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,62,"ssertEquals(""total count"",4,f.getSumFreq());"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,63,"ssertEquals(""zero cumulative frequency"", 0, f.getCumFreq(0));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,64,"ssertEquals(""one cumulative frequency"", 3,  f.getCumFreq(1));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,65,"ssertEquals(""two cumulative frequency"", 4,  f.getCumFreq(2));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,66,"ssertEquals(""Integer argument cum freq"",4, f.getCumFreq(Integer.valueOf(2)));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,67,"ssertEquals(""five cumulative frequency"", 4,  f.getCumFreq(5));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,68,"ssertEquals(""foo cumulative frequency"", 0,  f.getCumFreq(""foo""));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,58,"Assert.assertEquals(""one frequency count"",3,f.getCount(1));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,59,"Assert.assertEquals(""two frequency count"",1,f.getCount(2));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,60,"Assert.assertEquals(""three frequency count"",0,f.getCount(3));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,61,"Assert.assertEquals(""total count"",4,f.getSumFreq());"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,62,"Assert.assertEquals(""zero cumulative frequency"", 0, f.getCumFreq(0));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,63,"Assert.assertEquals(""one cumulative frequency"", 3,  f.getCumFreq(1));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,64,"Assert.assertEquals(""two cumulative frequency"", 4,  f.getCumFreq(2));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,65,"Assert.assertEquals(""Integer argument cum freq"",4, f.getCumFreq(Integer.valueOf(2)));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,66,"Assert.assertEquals(""five cumulative frequency"", 4,  f.getCumFreq(5));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,67,"Assert.assertEquals(""foo cumulative frequency"", 0,  f.getCumFreq(""foo""));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,71,"ssertEquals(""total count"",0,f.getSumFreq());"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,70,"Assert.assertEquals(""total count"",0,f.getSumFreq());"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,78,"ssertEquals(""one cumulative frequency"", 1 ,  f.getCount(""one""));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,79,"ssertEquals(""Z cumulative pct"", 0.5,  f.getCumPct(""Z""), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,80,"ssertEquals(""z cumulative pct"", 1.0,  f.getCumPct(""z""), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,81,"ssertEquals(""Ot cumulative pct"", 0.25,  f.getCumPct(""Ot""), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,77,"Assert.assertEquals(""one cumulative frequency"", 1 ,  f.getCount(""one""));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,78,"Assert.assertEquals(""Z cumulative pct"", 0.5,  f.getCumPct(""Z""), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,79,"Assert.assertEquals(""z cumulative pct"", 1.0,  f.getCumPct(""z""), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,80,"Assert.assertEquals(""Ot cumulative pct"", 0.25,  f.getCumPct(""Ot""), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,91,"ssertEquals(""1 count"", 3, f.getCount(1));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,92,"ssertEquals(""1 count"", 3, f.getCount(Integer.valueOf(1)));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,93,"ssertEquals(""0 cum pct"", 0.2, f.getCumPct(0), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,94,"ssertEquals(""1 pct"", 0.6, f.getPct(Integer.valueOf(1)), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,95,"ssertEquals(""-2 cum pct"", 0, f.getCumPct(-2), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,96,"ssertEquals(""10 cum pct"", 1, f.getCumPct(10), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,90,"Assert.assertEquals(""1 count"", 3, f.getCount(1));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,91,"Assert.assertEquals(""1 count"", 3, f.getCount(Integer.valueOf(1)));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,92,"Assert.assertEquals(""0 cum pct"", 0.2, f.getCumPct(0), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,93,"Assert.assertEquals(""1 pct"", 0.6, f.getPct(Integer.valueOf(1)), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,94,"Assert.assertEquals(""-2 cum pct"", 0, f.getCumPct(-2), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,95,"Assert.assertEquals(""10 cum pct"", 1, f.getCumPct(10), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,104,"ssertEquals(""one count"", 3 ,  f.getCount(""one""));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,105,"ssertEquals(""Z cumulative pct -- case insensitive"", 1 ,  f.getCumPct(""Z""), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,106,"ssertEquals(""z cumulative pct -- case insensitive"", 1 ,  f.getCumPct(""z""), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,103,"Assert.assertEquals(""one count"", 3 ,  f.getCount(""one""));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,104,"Assert.assertEquals(""Z cumulative pct -- case insensitive"", 1 ,  f.getCumPct(""Z""), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,105,"Assert.assertEquals(""z cumulative pct -- case insensitive"", 1 ,  f.getCumPct(""z""), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,110,"ssertEquals(0L, f.getCount('a'));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,111,"ssertEquals(0L, f.getCumFreq('b'));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,109,"Assert.assertEquals(0L, f.getCount('a'));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,110,"Assert.assertEquals(0L, f.getCumFreq('b'));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,118,"ssertEquals(1L, f.getCount('a'));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,119,"ssertEquals(2L, f.getCumFreq('b'));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,120,"ssertEquals(0.25, f.getPct('a'), 0.0);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,121,"ssertEquals(0.5, f.getCumPct('b'), 0.0);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,122,"ssertEquals(1.0, f.getCumPct('e'), 0.0);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,117,"Assert.assertEquals(1L, f.getCount('a'));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,118,"Assert.assertEquals(2L, f.getCumFreq('b'));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,119,"Assert.assertEquals(0.25, f.getPct('a'), 0.0);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,120,"Assert.assertEquals(0.5, f.getCumPct('b'), 0.0);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,121,"Assert.assertEquals(1.0, f.getCumPct('e'), 0.0);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,125,@Test
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,135,"ssertEquals(""one pct"",0.25,f.getPct(1),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,136,"ssertEquals(""two pct"",0.25,f.getPct(Long.valueOf(2)),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,137,"ssertEquals(""three pct"",0.5,f.getPct(threeL),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,138,"ssertEquals(""five pct"",0,f.getPct(5),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,139,"ssertEquals(""foo pct"",0,f.getPct(""foo""),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,140,"ssertEquals(""one cum pct"",0.25,f.getCumPct(1),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,141,"ssertEquals(""two cum pct"",0.50,f.getCumPct(Long.valueOf(2)),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,142,"ssertEquals(""Integer argument"",0.50,f.getCumPct(Integer.valueOf(2)),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,143,"ssertEquals(""three cum pct"",1.0,f.getCumPct(threeL),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,144,"ssertEquals(""five cum pct"",1.0,f.getCumPct(5),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,145,"ssertEquals(""zero cum pct"",0.0,f.getCumPct(0),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,146,"ssertEquals(""foo cum pct"",0,f.getCumPct(""foo""),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,135,"Assert.assertEquals(""one pct"",0.25,f.getPct(1),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,136,"Assert.assertEquals(""two pct"",0.25,f.getPct(Long.valueOf(2)),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,137,"Assert.assertEquals(""three pct"",0.5,f.getPct(threeL),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,138,"Assert.assertEquals(""five pct"",0,f.getPct(5),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,139,"Assert.assertEquals(""foo pct"",0,f.getPct(""foo""),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,140,"Assert.assertEquals(""one cum pct"",0.25,f.getCumPct(1),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,141,"Assert.assertEquals(""two cum pct"",0.50,f.getCumPct(Long.valueOf(2)),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,142,"Assert.assertEquals(""Integer argument"",0.50,f.getCumPct(Integer.valueOf(2)),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,143,"Assert.assertEquals(""three cum pct"",1.0,f.getCumPct(threeL),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,144,"Assert.assertEquals(""five cum pct"",1.0,f.getCumPct(5),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,145,"Assert.assertEquals(""zero cum pct"",0.0,f.getCumPct(0),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,146,"Assert.assertEquals(""foo cum pct"",0,f.getCumPct(""foo""),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,150,@Test
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,158,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,159,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,164,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,165,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,168,"ssertEquals(""a pct"",0.5,f.getPct(aChar),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,169,"ssertEquals(""b cum pct"",1.0,f.getCumPct(bChar),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,170,"ssertEquals(""a string pct"",0.0,f.getPct(aString),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,171,"ssertEquals(""a string cum pct"",0.0,f.getCumPct(aString),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,169,"Assert.assertEquals(""a pct"",0.5,f.getPct(aChar),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,170,"Assert.assertEquals(""b cum pct"",1.0,f.getCumPct(bChar),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,171,"Assert.assertEquals(""a string pct"",0.0,f.getPct(aString),tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,172,"Assert.assertEquals(""a string cum pct"",0.0,f.getCumPct(aString),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,177,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,178,"Assert.fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,185,@Test
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,185,"ssertEquals(""freq sum, empty table"", 0, f.getSumFreq());"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,186,"ssertEquals(""count, empty table"", 0, f.getCount(0));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,187,"ssertEquals(""count, empty table"",0, f.getCount(Integer.valueOf(0)));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,188,"ssertEquals(""cum freq, empty table"", 0, f.getCumFreq(0));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,189,"ssertEquals(""cum freq, empty table"", 0, f.getCumFreq(""x""));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,190,"ssertTrue(""pct, empty table"", Double.isNaN(f.getPct(0)));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,191,"ssertTrue(""pct, empty table"", Double.isNaN(f.getPct(Integer.valueOf(0))));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,192,"ssertTrue(""cum pct, empty table"", Double.isNaN(f.getCumPct(0)));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,193,"ssertTrue(""cum pct, empty table"", Double.isNaN(f.getCumPct(Integer.valueOf(0))));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,187,"Assert.assertEquals(""freq sum, empty table"", 0, f.getSumFreq());"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,188,"Assert.assertEquals(""count, empty table"", 0, f.getCount(0));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,189,"Assert.assertEquals(""count, empty table"",0, f.getCount(Integer.valueOf(0)));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,190,"Assert.assertEquals(""cum freq, empty table"", 0, f.getCumFreq(0));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,191,"Assert.assertEquals(""cum freq, empty table"", 0, f.getCumFreq(""x""));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,192,"Assert.assertTrue(""pct, empty table"", Double.isNaN(f.getPct(0)));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,193,"Assert.assertTrue(""pct, empty table"", Double.isNaN(f.getPct(Integer.valueOf(0))));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,194,"Assert.assertTrue(""cum pct, empty table"", Double.isNaN(f.getCumPct(0)));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,195,"Assert.assertTrue(""cum pct, empty table"", Double.isNaN(f.getCumPct(Integer.valueOf(0))));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,201,@Test
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,207,ssertNotNull(s);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,210,Assert.assertNotNull(s);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,210,ssertNotNull(line);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,213,Assert.assertNotNull(line);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,213,ssertNotNull(line);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,216,Assert.assertNotNull(line);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,216,ssertNotNull(line);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,219,Assert.assertNotNull(line);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,219,ssertNull(line);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,222,Assert.assertNull(line);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,225,@Test
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,230,"ssertEquals(""Integer 1 count"", 2, f.getCount(1));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,231,"ssertEquals(""Integer 1 count"", 2, f.getCount(Integer.valueOf(1)));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,232,"ssertEquals(""Integer 1 count"", 2, f.getCount(Long.valueOf(1)));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,233,"ssertEquals(""Integer 1 cumPct"", 0.5, f.getCumPct(1), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,234,"ssertEquals(""Integer 1 cumPct"", 0.5, f.getCumPct(Long.valueOf(1)), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,235,"ssertEquals(""Integer 1 cumPct"", 0.5, f.getCumPct(Integer.valueOf(1)), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,234,"Assert.assertEquals(""Integer 1 count"", 2, f.getCount(1));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,235,"Assert.assertEquals(""Integer 1 count"", 2, f.getCount(Integer.valueOf(1)));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,236,"Assert.assertEquals(""Integer 1 count"", 2, f.getCount(Long.valueOf(1)));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,237,"Assert.assertEquals(""Integer 1 cumPct"", 0.5, f.getCumPct(1), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,238,"Assert.assertEquals(""Integer 1 cumPct"", 0.5, f.getCumPct(Long.valueOf(1)), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,239,"Assert.assertEquals(""Integer 1 cumPct"", 0.5, f.getCumPct(Integer.valueOf(1)), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,238,ssertTrue(it.next() instanceof Long);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,242,Assert.assertTrue(it.next() instanceof Long);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,246,@Test
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,247,"ssertEquals(f, TestUtils.serializeAndRecover(f));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,252,"Assert.assertEquals(f, TestUtils.serializeAndRecover(f));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,255,@Test
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,251,"ssertEquals(0, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,257,"Assert.assertEquals(0, f.getUniqueCount());"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,253,"ssertEquals(1, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,259,"Assert.assertEquals(1, f.getUniqueCount());"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,255,"ssertEquals(1, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,261,"Assert.assertEquals(1, f.getUniqueCount());"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,257,"ssertEquals(2, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,263,"Assert.assertEquals(2, f.getUniqueCount());"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,23,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,31,ublic final class StatUtilsTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,33,public final class StatUtilsTest {
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,45,ublic StatUtilsTest(String name) {
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,46,uper(name);
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,48,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,52,"ssertEquals(""sum"", sum, StatUtils.sum(values), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,53,"ssertEquals(""sumsq"", sumSq, StatUtils.sumSq(values), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,54,"ssertEquals(""var"", var, StatUtils.variance(values), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,55,"ssertEquals(""var with mean"", var, StatUtils.variance(values, mean), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,56,"ssertEquals(""mean"", mean, StatUtils.mean(values), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,57,"ssertEquals(""min"", min, StatUtils.min(values), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,58,"ssertEquals(""max"", max, StatUtils.max(values), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,51,"Assert.assertEquals(""sum"", sum, StatUtils.sum(values), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,52,"Assert.assertEquals(""sumsq"", sumSq, StatUtils.sumSq(values), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,53,"Assert.assertEquals(""var"", var, StatUtils.variance(values), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,54,"Assert.assertEquals(""var with mean"", var, StatUtils.variance(values, mean), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,55,"Assert.assertEquals(""mean"", mean, StatUtils.mean(values), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,56,"Assert.assertEquals(""min"", min, StatUtils.min(values), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,57,"Assert.assertEquals(""max"", max, StatUtils.max(values), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,60,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,64,ssertTrue(
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,64,Assert.assertTrue(
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,67,ssertTrue(
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,67,Assert.assertTrue(
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,73,ssertTrue(
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,73,Assert.assertTrue(
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,76,ssertTrue(
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,76,Assert.assertTrue(
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,81,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,84,ssertEquals(
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,85,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,89,ssertEquals(
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,90,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,94,ssertEquals(
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,95,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,102,"ail(""Expected RuntimeException"");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,103,"Assert.fail(""Expected RuntimeException"");"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,109,"ail(""Expected RuntimeException"");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,110,"Assert.fail(""Expected RuntimeException"");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,117,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,122,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,124,"Assert.fail(""null is not a valid data array."");"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,129,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,131,"Assert.fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,152,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,156,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,159,"Assert.fail(""null is not a valid data array."");"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,163,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,166,"Assert.fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,187,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,190,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,194,"Assert.fail(""null is not a valid data array."");"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,197,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,201,"Assert.fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,222,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,223,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,228,"Assert.fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,246,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,246,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,252,"Assert.fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,274,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,273,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,280,"Assert.fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,314,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,312,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,320,"Assert.fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,354,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,352,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,361,"Assert.fail(""null is not a valid data array."");"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,359,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,368,"Assert.fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,389,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,386,"ssertEquals(StatUtils.sumDifference(sample1, sample2), StatUtils.sum(diff), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,387,"ssertEquals(meanDifference, StatUtils.mean(diff), tolerance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,388,"ssertEquals(StatUtils.varianceDifference(sample1, sample2, meanDifference),"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,396,"Assert.assertEquals(StatUtils.sumDifference(sample1, sample2), StatUtils.sum(diff), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,397,"Assert.assertEquals(meanDifference, StatUtils.mean(diff), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,398,"Assert.assertEquals(StatUtils.varianceDifference(sample1, sample2, meanDifference),"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,392,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,402,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,398,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,408,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,405,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,415,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,421,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,415,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,426,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,420,"ssertEquals(FastMath.exp(0.25d * StatUtils.sumLog(test)),"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,431,"Assert.assertEquals(FastMath.exp(0.25d * StatUtils.sumLog(test)),"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,422,"ssertEquals(FastMath.exp(0.5 * StatUtils.sumLog(test, 0, 2)),"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,433,"Assert.assertEquals(FastMath.exp(0.5 * StatUtils.sumLog(test, 0, 2)),"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,442,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,436,"ssertEquals(out[i], expectedSample[i]);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,448,"Assert.assertTrue(MathUtils.equals(out[i], expectedSample[i], 1));"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,458,@Test
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,464,"ssertEquals(0.0, stats.getMean(), distance);"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,465,"ssertEquals(1.0, stats.getStandardDeviation(), distance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,477,"Assert.assertEquals(0.0, stats.getMean(), distance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,478,"Assert.assertEquals(1.0, stats.getStandardDeviation(), distance);"
False,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,26,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,35,ssertTrue(array == new EuclideanIntegerPoint(array).getPoint());
True,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,34,Assert.assertTrue(array == new EuclideanIntegerPoint(array).getPoint());
False,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,42,"ssertEquals(FastMath.sqrt(21.0), e1.distanceFrom(e2), 1.0e-15);"
False,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,43,"ssertEquals(0.0, e1.distanceFrom(e1), 1.0e-15);"
False,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,44,"ssertEquals(0.0, e2.distanceFrom(e2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,41,"Assert.assertEquals(FastMath.sqrt(21.0), e1.distanceFrom(e2), 1.0e-15);"
True,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,42,"Assert.assertEquals(0.0, e1.distanceFrom(e1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,43,"Assert.assertEquals(0.0, e2.distanceFrom(e2), 1.0e-15);"
False,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,55,"ssertEquals(2, c.getPoint()[0]);"
False,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,56,"ssertEquals(3, c.getPoint()[1]);"
True,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,54,"Assert.assertEquals(2, c.getPoint()[0]);"
True,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,55,"Assert.assertEquals(3, c.getPoint()[1]);"
False,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,62,"ssertEquals(p, TestUtils.serializeAndRecover(p));"
True,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java,61,"Assert.assertEquals(p, TestUtils.serializeAndRecover(p));"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,21,mport static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,71,"ssertEquals(3, clusters.size());"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,69,"Assert.assertEquals(3, clusters.size());"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,79,"ssertEquals(8, cluster.getPoints().size());"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,80,"ssertEquals(-14, center[0]);"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,81,"ssertEquals( 4, center[1]);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,77,"Assert.assertEquals(8, cluster.getPoints().size());"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,78,"Assert.assertEquals(-14, center[0]);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,79,"Assert.assertEquals( 4, center[1]);"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,84,"ssertEquals(5, cluster.getPoints().size());"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,85,"ssertEquals( 0, center[0]);"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,86,"ssertEquals(-1, center[1]);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,82,"Assert.assertEquals(5, cluster.getPoints().size());"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,83,"Assert.assertEquals( 0, center[0]);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,84,"Assert.assertEquals(-1, center[1]);"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,89,"ssertEquals(8, cluster.getPoints().size());"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,90,"ssertEquals(15, center[0]);"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,91,"ssertEquals(5, center[1]);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,87,"Assert.assertEquals(8, cluster.getPoints().size());"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,88,"Assert.assertEquals(15, center[0]);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,89,"Assert.assertEquals(5, center[1]);"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,94,ssertTrue(cluster1Found);
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,95,ssertTrue(cluster2Found);
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,96,ssertTrue(cluster3Found);
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,92,Assert.assertTrue(cluster1Found);
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,93,Assert.assertTrue(cluster2Found);
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,94,Assert.assertTrue(cluster3Found);
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,113,"ssertEquals(1, clusters.size());"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,114,"ssertEquals(2, (clusters.get(0).getPoints().size()));"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,111,"Assert.assertEquals(1, clusters.size());"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,112,"Assert.assertEquals(2, (clusters.get(0).getPoints().size()));"
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,117,ssertTrue(clusters.get(0).getPoints().contains(pt1));
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,118,ssertTrue(clusters.get(0).getPoints().contains(pt2));
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,115,Assert.assertTrue(clusters.get(0).getPoints().contains(pt1));
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,116,Assert.assertTrue(clusters.get(0).getPoints().contains(pt2));
False,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,249,ssertTrue(uniquePointIsCenter);
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,247,Assert.assertTrue(uniquePointIsCenter);
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,24,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,24,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,26,ublic class CovarianceTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,27,public class CovarianceTest {
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,109,@Test
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,138,@Test
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,156,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,156,"ssertEquals(0d, new Covariance().covariance(noVariance, values, true), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,157,"ssertEquals(0d, new Covariance().covariance(noVariance, noVariance, true), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,160,"Assert.assertEquals(0d, new Covariance().covariance(noVariance, values, true), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,161,"Assert.assertEquals(0d, new Covariance().covariance(noVariance, noVariance, true), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,168,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,169,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,174,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,176,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,181,"Assert.fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,191,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,193,"ssertEquals(variance.evaluate(matrix.getColumn(i)), covarianceMatrix.getEntry(i,i), 10E-14);"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,199,"Assert.assertEquals(variance.evaluate(matrix.getColumn(i)), covarianceMatrix.getEntry(i,i), 10E-14);"
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,197,"ssertEquals(covarianceMatrix.getEntry(2, 3),"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,203,"Assert.assertEquals(covarianceMatrix.getEntry(2, 3),"
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,199,"ssertEquals(covarianceMatrix.getEntry(2, 3), covarianceMatrix.getEntry(3, 2), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,205,"Assert.assertEquals(covarianceMatrix.getEntry(2, 3), covarianceMatrix.getEntry(3, 2), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,210,"ssertEquals(columnVariance, repeatedCovarianceMatrix.getEntry(i, j), 10E-14);"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,216,"Assert.assertEquals(columnVariance, repeatedCovarianceMatrix.getEntry(i, j), 10E-14);"
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,223,"ssertEquals(new Covariance().covariance(x, y),"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,229,"Assert.assertEquals(new Covariance().covariance(x, y),"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,26,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,28,ublic class PearsonsCorrelationTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,29,public class PearsonsCorrelationTest {
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,104,@Test
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,143,@Test
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,171,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,182,"ssertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,186,"Assert.assertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,193,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,192,"ssertTrue(Double.isNaN(new PearsonsCorrelation().correlation(noVariance, values)));"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,197,"Assert.assertTrue(Double.isNaN(new PearsonsCorrelation().correlation(noVariance, values)));"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,205,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,205,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,211,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,212,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,218,"Assert.fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,228,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,233,"ssertEquals(p, pValues.getEntry(i, j), 10E-15);"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,240,"Assert.assertEquals(p, pValues.getEntry(i, j), 10E-15);"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,249,@Test
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,273,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,271,"ssertEquals(new PearsonsCorrelation().correlation(x, y),"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,280,"Assert.assertEquals(new PearsonsCorrelation().correlation(x, y),"
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,31,Override
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,32,rotected void setUp() throws Exception {
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,33,uper.setUp();
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,36,Override
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,37,rotected void tearDown() throws Exception {
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,38,uper.tearDown();
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,37,@Test
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,58,@Test
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,77,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,86,"ssertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance, values)));"
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,81,"Assert.assertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance, values)));"
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,88,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,98,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,94,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,105,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,101,"Assert.fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,108,@Test
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,118,"ssertEquals(new SpearmansCorrelation().correlation(x, y),"
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,115,"Assert.assertEquals(new SpearmansCorrelation().correlation(x, y),"
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,123,@Test
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,126,@Test
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,29,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,33,import org.junit.After;
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,34,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,35,import org.junit.Before;
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,36,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,38,ublic abstract class CertifiedDataAbstractTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,41,public abstract class CertifiedDataAbstractTest {
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,46,Override
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,47,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,49,@Before
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,50,public void setUp() throws IOException {
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,101,Override
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,102,rotected void tearDown() throws Exception {
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,104,@After
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,105,public void tearDown() throws Exception {
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,116,@Test
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,145,"ail(""wrong type: "" + meth.getReturnType().getName());"
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,149,"Assert.fail(""wrong type: "" + meth.getReturnType().getName());"
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,150,ail(ite.getMessage());
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,154,Assert.fail(ite.getMessage());
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,152,ail(iae.getMessage());
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,156,Assert.fail(iae.getMessage());
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,29,ublic class AbstractUnivariateStatisticTest extends TestCase {
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,31,ublic AbstractUnivariateStatisticTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,32,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,30,public class AbstractUnivariateStatisticTest {
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,39,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,45,"ssertTrue(testStatistic.test(testArray, 0, i));"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,43,"Assert.assertTrue(testStatistic.test(testArray, 0, i));"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,48,"ssertTrue(testStatistic.test(singletonArray, 0, 1));"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,49,"ssertTrue(testStatistic.test(singletonArray, 0, 0, true));"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,46,"Assert.assertTrue(testStatistic.test(singletonArray, 0, 1));"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,47,"Assert.assertTrue(testStatistic.test(singletonArray, 0, 0, true));"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,50,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,53,"ssertFalse(testStatistic.test(singletonArray, 0, 0));"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,54,"ssertFalse(testStatistic.test(testArray, 0, 0));"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,52,"Assert.assertFalse(testStatistic.test(singletonArray, 0, 0));"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,53,"Assert.assertFalse(testStatistic.test(testArray, 0, 0));"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,57,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,56,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,63,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,62,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,69,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,68,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,75,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,74,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,81,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,80,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,87,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,86,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,93,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,92,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,99,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,98,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,23,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,27,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,28,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,29,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,34,ublic class AggregateSummaryStatisticsTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,36,public class AggregateSummaryStatisticsTest {
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,41,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,44,"ssertNotNull(""The set one contributing stats are null"", setOneStats);"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,45,"ssertNotNull(""The set two contributing stats are null"", setTwoStats);"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,46,"ssertNotSame(""Contributing stats objects are the same"", setOneStats, setTwoStats);"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,47,"Assert.assertNotNull(""The set one contributing stats are null"", setOneStats);"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,48,"Assert.assertNotNull(""The set two contributing stats are null"", setTwoStats);"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,49,"Assert.assertNotSame(""Contributing stats objects are the same"", setOneStats, setTwoStats);"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,53,"ssertEquals(""Wrong number of set one values"", 5, setOneStats.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,54,"ssertEquals(""Wrong sum of set one values"", 28.0, setOneStats.getSum());"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,56,"Assert.assertEquals(""Wrong number of set one values"", 5, setOneStats.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,57,"Assert.assertTrue(""Wrong sum of set one values"", MathUtils.equals(28.0, setOneStats.getSum(), 1));"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,59,"ssertEquals(""Wrong number of set two values"", 3, setTwoStats.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,60,"ssertEquals(""Wrong sum of set two values"", 14.0, setTwoStats.getSum());"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,62,"Assert.assertEquals(""Wrong number of set two values"", 3, setTwoStats.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,63,"Assert.assertTrue(""Wrong sum of set two values"", MathUtils.equals(14.0, setTwoStats.getSum(), 1));"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,62,"ssertEquals(""Wrong number of aggregate values"", 8, aggregate.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,63,"ssertEquals(""Wrong aggregate sum"", 42.0, aggregate.getSum());"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,65,"Assert.assertEquals(""Wrong number of aggregate values"", 8, aggregate.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,66,"Assert.assertTrue(""Wrong aggregate sum"", MathUtils.equals(42.0, aggregate.getSum(), 1));"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,82,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,116,"ssertEquals(totalStats.getSummary(), aggregate.getSummary());"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,120,"Assert.assertEquals(totalStats.getSummary(), aggregate.getSummary());"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,133,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,166,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,195,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,226,"ssertEquals(expected.getN(), observed.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,233,"Assert.assertEquals(expected.getN(), observed.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,18,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,29,ublic class DescriptiveStatisticsTest extends TestCase {
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,31,ublic DescriptiveStatisticsTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,32,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,30,public class DescriptiveStatisticsTest {
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,36,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,43,"ssertEquals(2, stats.getMean(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,41,"Assert.assertEquals(2, stats.getMean(), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,46,"ssertEquals(42, stats.getMean(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,44,"Assert.assertEquals(42, stats.getMean(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,47,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,54,"ssertEquals(2, copy.getMean(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,53,"Assert.assertEquals(2, copy.getMean(), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,58,"ssertEquals(42, copy.getMean(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,57,"Assert.assertEquals(42, copy.getMean(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,60,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,68,"ssertEquals(refSum / 100.0, stats.getMean(), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,69,"ssertEquals(300, stats.getWindowSize());"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,68,"Assert.assertEquals(refSum / 100.0, stats.getMean(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,69,"Assert.assertEquals(300, stats.getWindowSize());"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,72,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,72,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,76,"ssertEquals(300, stats.getWindowSize());"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,76,"Assert.assertEquals(300, stats.getWindowSize());"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,78,"ssertEquals(50, stats.getWindowSize());"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,78,"Assert.assertEquals(50, stats.getWindowSize());"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,80,"ssertEquals(refSum2 / 50.0, stats.getMean(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,80,"Assert.assertEquals(refSum2 / 50.0, stats.getMean(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,83,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,89,"ssertEquals(refSum / 100.0, stats.getMean(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,90,"Assert.assertEquals(refSum / 100.0, stats.getMean(), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,92,"ssertEquals(100.0 - i, v[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,93,"Assert.assertEquals(100.0 - i, v[i], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,96,"ssertEquals(i + 1.0, s[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,97,"Assert.assertEquals(i + 1.0, s[i], 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,98,"ssertEquals(12.0, stats.getElement(88), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,99,"Assert.assertEquals(12.0, stats.getElement(88), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,102,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,108,"ssertEquals(""DescriptiveStatistics:\n"" +"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,110,"Assert.assertEquals(""DescriptiveStatistics:\n"" +"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,122,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,143,"ssertEquals(reference.getMean(),          shuffled.getGeometricMean(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,144,"ssertEquals(reference.getKurtosis(),      shuffled.getMean(),          1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,145,"ssertEquals(reference.getSkewness(),      shuffled.getKurtosis(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,146,"ssertEquals(reference.getVariance(),      shuffled.getSkewness(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,147,"ssertEquals(reference.getMax(),           shuffled.getVariance(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,148,"ssertEquals(reference.getMin(),           shuffled.getMax(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,149,"ssertEquals(reference.getSum(),           shuffled.getMin(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,150,"ssertEquals(reference.getSumsq(),         shuffled.getSum(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,151,"ssertEquals(reference.getGeometricMean(), shuffled.getSumsq(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,146,"Assert.assertEquals(reference.getMean(),          shuffled.getGeometricMean(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,147,"Assert.assertEquals(reference.getKurtosis(),      shuffled.getMean(),          1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,148,"Assert.assertEquals(reference.getSkewness(),      shuffled.getKurtosis(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,149,"Assert.assertEquals(reference.getVariance(),      shuffled.getSkewness(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,150,"Assert.assertEquals(reference.getMax(),           shuffled.getVariance(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,151,"Assert.assertEquals(reference.getMin(),           shuffled.getMax(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,152,"Assert.assertEquals(reference.getSum(),           shuffled.getMin(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,153,"Assert.assertEquals(reference.getSumsq(),         shuffled.getSum(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,154,"Assert.assertEquals(reference.getGeometricMean(), shuffled.getSumsq(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,158,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,160,"ssertEquals(2, stats.getPercentile(50.0), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,164,"Assert.assertEquals(2, stats.getPercentile(50.0), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,164,"ssertEquals(2, stats.getPercentile(50.0), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,168,"Assert.assertEquals(2, stats.getPercentile(50.0), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,168,"ssertEquals(10.0, stats.getPercentile(10.0), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,172,"Assert.assertEquals(10.0, stats.getPercentile(10.0), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,173,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,177,"Assert.fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,183,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,186,"ssertEquals(1, descriptiveStatistics.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,191,"Assert.assertEquals(1, descriptiveStatistics.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,194,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,211,"ssertTrue(MathUtils.equalsIncludingNaN(mean1, dstat.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,217,"Assert.assertTrue(MathUtils.equalsIncludingNaN(mean1, dstat.getMean()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,213,"ssertTrue(MathUtils.equalsIncludingNaN(mean2, dstat.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,219,"Assert.assertTrue(MathUtils.equalsIncludingNaN(mean2, dstat.getMean()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,215,"ssertTrue(MathUtils.equalsIncludingNaN(mean3, dstat.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,221,"Assert.assertTrue(MathUtils.equalsIncludingNaN(mean3, dstat.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,30,ublic class InteractionTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,31,public class InteractionTest {
False,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,64,ublic InteractionTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,65,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,65,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,81,"ssertEquals(mean,m.getResult(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,82,"ssertEquals(var,v.getResult(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,83,"ssertEquals(skew ,s.getResult(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,84,"ssertEquals(kurt,k.getResult(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,78,"Assert.assertEquals(mean,m.getResult(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,79,"Assert.assertEquals(var,v.getResult(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,80,"Assert.assertEquals(skew ,s.getResult(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,src/test/java/org/apache/commons/math/stat/descriptive/InteractionTest.java,81,"Assert.assertEquals(kurt,k.getResult(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,33,ublic final class ListUnivariateImplTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,34,public final class ListUnivariateImplTest {
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,49,ublic ListUnivariateImplTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,50,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,51,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,59,"ssertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,57,"Assert.assertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,64,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,65,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,66,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,67,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,68,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,69,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,70,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,71,"ssertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,62,"Assert.assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,63,"Assert.assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,64,"Assert.assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,65,"Assert.assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,66,"Assert.assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,67,"Assert.assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,68,"Assert.assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,69,"Assert.assertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,73,"ssertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,71,"Assert.assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,74,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,81,"ssertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,82,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,83,"ssertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,80,"Assert.assertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,81,"Assert.assertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,82,"Assert.assertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,87,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,88,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,89,"ssertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,86,"Assert.assertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,87,"Assert.assertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,88,"Assert.assertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,91,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,101,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,102,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,103,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,104,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,101,"Assert.assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,102,"Assert.assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,103,"Assert.assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,104,"Assert.assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,107,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,116,"ssertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,117,"Assert.assertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,125,"ssertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,126,"Assert.assertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,132,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,135,"ssertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,137,"Assert.assertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,144,"ssertEquals(""N"",n,u2.getN(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,145,"ssertEquals(""sum"",sum,u2.getSum(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,146,"ssertEquals(""sumsq"",sumSq,u2.getSumsq(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,147,"ssertEquals(""var"",var,u2.getVariance(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,148,"ssertEquals(""std"",std,u2.getStandardDeviation(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,149,"ssertEquals(""mean"",mean,u2.getMean(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,150,"ssertEquals(""min"",min,u2.getMin(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,151,"ssertEquals(""max"",max,u2.getMax(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,146,"Assert.assertEquals(""N"",n,u2.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,147,"Assert.assertEquals(""sum"",sum,u2.getSum(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,148,"Assert.assertEquals(""sumsq"",sumSq,u2.getSumsq(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,149,"Assert.assertEquals(""var"",var,u2.getVariance(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,150,"Assert.assertEquals(""std"",std,u2.getStandardDeviation(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,151,"Assert.assertEquals(""mean"",mean,u2.getMean(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,152,"Assert.assertEquals(""min"",min,u2.getMin(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,153,"Assert.assertEquals(""max"",max,u2.getMax(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,154,"ssertEquals(""total count"",0,u2.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,156,"Assert.assertEquals(""total count"",0,u2.getN(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,23,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,28,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,35,ublic final class MixedListUnivariateImplTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,36,public final class MixedListUnivariateImplTest {
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,52,ublic MixedListUnivariateImplTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,53,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,53,public MixedListUnivariateImplTest() {
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,63,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,68,"ssertEquals(""total count"", 0, u.getN(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,69,"Assert.assertEquals(""total count"", 0, u.getN(), tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,73,"ssertEquals(""N"", n, u.getN(), tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,74,"ssertEquals(""sum"", sum, u.getSum(), tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,75,"ssertEquals(""sumsq"", sumSq, u.getSumsq(), tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,76,"ssertEquals(""var"", var, u.getVariance(), tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,77,"ssertEquals(""std"", std, u.getStandardDeviation(), tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,78,"ssertEquals(""mean"", mean, u.getMean(), tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,79,"ssertEquals(""min"", min, u.getMin(), tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,80,"ssertEquals(""max"", max, u.getMax(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,74,"Assert.assertEquals(""N"", n, u.getN(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,75,"Assert.assertEquals(""sum"", sum, u.getSum(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,76,"Assert.assertEquals(""sumsq"", sumSq, u.getSumsq(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,77,"Assert.assertEquals(""var"", var, u.getVariance(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,78,"Assert.assertEquals(""std"", std, u.getStandardDeviation(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,79,"Assert.assertEquals(""mean"", mean, u.getMean(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,80,"Assert.assertEquals(""min"", min, u.getMin(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,81,"Assert.assertEquals(""max"", max, u.getMax(), tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,82,"ssertEquals(""total count"", 0, u.getN(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,83,"Assert.assertEquals(""total count"", 0, u.getN(), tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,86,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,88,ssertTrue(
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,90,Assert.assertTrue(
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,91,ssertTrue(
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,93,Assert.assertTrue(
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,94,ssertTrue(
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,96,Assert.assertTrue(
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,100,ssertTrue(
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,102,Assert.assertTrue(
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,104,ssertTrue(
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,106,Assert.assertTrue(
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,108,ssertTrue(
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,110,Assert.assertTrue(
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,115,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,141,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,142,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,143,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,144,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,144,"Assert.assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,145,"Assert.assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,146,"Assert.assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,147,"Assert.assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,150,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,156,ssertEquals(
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,160,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,168,ssertEquals(
True,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,172,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,31,ublic final class StatisticalSummaryValuesTest extends TestCase {
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,34,ublic StatisticalSummaryValuesTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,32,public final class StatisticalSummaryValuesTest {
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,34,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,42,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,48,"ssertTrue(""reflexive"", u.equals(u));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,49,"ssertFalse(""non-null compared to null"", u.equals(t));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,50,"ssertFalse(""wrong type"", u.equals(Double.valueOf(0)));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,46,"Assert.assertTrue(""reflexive"", u.equals(u));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,47,"Assert.assertFalse(""non-null compared to null"", u.equals(t));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,48,"Assert.assertFalse(""wrong type"", u.equals(Double.valueOf(0)));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,52,"ssertTrue(""instances with same data should be equal"", t.equals(u));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,53,"ssertEquals(""hash code"", u.hashCode(), t.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,50,"Assert.assertTrue(""instances with same data should be equal"", t.equals(u));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,51,"Assert.assertEquals(""hash code"", u.hashCode(), t.hashCode());"
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,57,"ssertFalse(""instances based on different data should be different"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,55,"Assert.assertFalse(""instances based on different data should be different"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,62,"ssertEquals(""N"",s.getN(),u.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,60,"Assert.assertEquals(""N"",s.getN(),u.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,69,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,75,"ssertEquals(""StatisticalSummaryValues:\n"" +"
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,74,"Assert.assertEquals(""StatisticalSummaryValues:\n"" +"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,30,ublic StorelessUnivariateStatisticAbstractTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,31,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,46,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,58,"ssertEquals(expectedValue(), statistic.getResult(), getTolerance());"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,59,"ssertEquals(testArray.length, statistic.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,57,"Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,58,"Assert.assertEquals(testArray.length, statistic.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,65,"ssertEquals(expectedValue(), statistic.getResult(), getTolerance());"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,66,"ssertEquals(testArray.length, statistic.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,64,"Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,65,"Assert.assertEquals(testArray.length, statistic.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,72,"ssertEquals(0, statistic.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,71,"Assert.assertEquals(0, statistic.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,77,ssertTrue(Double.isNaN(statistic.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,76,Assert.assertTrue(Double.isNaN(statistic.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,79,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,97,"ssertEquals(expectedValue(), statistic.getResult(), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,97,"Assert.assertEquals(expectedValue(), statistic.getResult(), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,105,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,110,"ssertTrue(""non-null, compared to null"", !statistic.equals(statistic2));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,111,"ssertTrue(""reflexive, non-null"", statistic.equals(statistic));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,111,"Assert.assertTrue(""non-null, compared to null"", !statistic.equals(statistic2));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,112,"Assert.assertTrue(""reflexive, non-null"", statistic.equals(statistic));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,115,"ssertTrue(""empty stats should be equal"", statistic.equals(statistic2));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,116,"ssertEquals(""empty stats should have the same hashcode"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,116,"Assert.assertTrue(""empty stats should be equal"", statistic.equals(statistic2));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,117,"Assert.assertEquals(""empty stats should have the same hashcode"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,120,"ssertTrue(""reflexive, non-empty"", statistic.equals(statistic));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,121,"ssertTrue(""non-empty, compared to empty"", !statistic.equals(statistic2));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,122,"ssertTrue(""non-empty, compared to empty"", !statistic2.equals(statistic));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,123,"ssertTrue(""non-empty stat should have different hashcode from empty stat"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,121,"Assert.assertTrue(""reflexive, non-empty"", statistic.equals(statistic));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,122,"Assert.assertTrue(""non-empty, compared to empty"", !statistic.equals(statistic2));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,123,"Assert.assertTrue(""non-empty, compared to empty"", !statistic2.equals(statistic));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,124,"Assert.assertTrue(""non-empty stat should have different hashcode from empty stat"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,127,"ssertTrue(""stats with same data should be equal"", statistic.equals(statistic2));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,128,"ssertEquals(""stats with same data should have the same hashcode"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,128,"Assert.assertTrue(""stats with same data should be equal"", statistic.equals(statistic2));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,129,"Assert.assertEquals(""stats with same data should have the same hashcode"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,132,"ssertTrue(""stats with different n's should not be equal"", !statistic2.equals(statistic));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,133,"ssertTrue(""stats with different n's should have different hashcodes"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,133,"Assert.assertTrue(""stats with different n's should not be equal"", !statistic2.equals(statistic));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,134,"Assert.assertTrue(""stats with different n's should have different hashcodes"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,137,"ssertTrue(""stats with same data should be equal"", statistic.equals(statistic2));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,138,"ssertEquals(""stats with same data should have the same hashcode"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,138,"Assert.assertTrue(""stats with same data should be equal"", statistic.equals(statistic2));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,139,"Assert.assertEquals(""stats with same data should have the same hashcode"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,143,"ssertTrue(""cleared stats should be equal"", statistic.equals(statistic2));"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,144,"ssertEquals(""cleared stats should have thashcode of empty stat"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,144,"Assert.assertTrue(""cleared stats should be equal"", statistic.equals(statistic2));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,145,"Assert.assertEquals(""cleared stats should have thashcode of empty stat"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,146,"ssertEquals(""cleared stats should have thashcode of empty stat"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,147,"Assert.assertEquals(""cleared stats should have thashcode of empty stat"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,152,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,155,ssertTrue(Double.isNaN(moment.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,157,Assert.assertTrue(Double.isNaN(moment.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,157,"ssertEquals(0d, moment.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,159,"Assert.assertEquals(0d, moment.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,167,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,168,"ssertEquals(stat.getResult(), stat.evaluate(testArray), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,171,"Assert.assertEquals(stat.getResult(), stat.evaluate(testArray), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,186,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,198,ssertTrue(replica.equals(master));
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,199,ssertTrue(master.equals(replica));
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,202,Assert.assertTrue(replica.equals(master));
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,203,Assert.assertTrue(master.equals(replica));
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,206,ssertTrue(replica.equals(master));
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,207,ssertTrue(master.equals(replica));
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,210,Assert.assertTrue(replica.equals(master));
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,211,Assert.assertTrue(master.equals(replica));
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,214,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,213,"ssertEquals(s, TestUtils.serializeAndRecover(s));"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,218,"Assert.assertEquals(s, TestUtils.serializeAndRecover(s));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,31,ublic class SummaryStatisticsTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,32,public class SummaryStatisticsTest {
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,47,ublic SummaryStatisticsTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,48,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,53,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,58,"ssertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,56,"Assert.assertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,63,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,64,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,65,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,66,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,67,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,68,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,69,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,70,"ssertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,61,"Assert.assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,62,"Assert.assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,63,"Assert.assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,64,"Assert.assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,65,"Assert.assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,66,"Assert.assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,67,"Assert.assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,68,"Assert.assertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,72,"ssertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,70,"Assert.assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,73,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,77,"ssertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,76,"Assert.assertTrue(""Mean of n = 0 set should be NaN"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,79,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,78,"Assert.assertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,81,"ssertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,80,"Assert.assertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,86,"ssertTrue(""mean should be one (n = 1)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,85,"Assert.assertTrue(""mean should be one (n = 1)"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,88,"ssertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,87,"Assert.assertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,90,"ssertTrue(""Std should be zero (n = 1)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,89,"Assert.assertTrue(""Std should be zero (n = 1)"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,92,"ssertTrue(""variance should be zero (n = 1)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,91,"Assert.assertTrue(""variance should be zero (n = 1)"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,97,"ssertTrue(""Std should not be zero (n = 2)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,96,"Assert.assertTrue(""Std should not be zero (n = 2)"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,99,"ssertTrue(""variance should not be zero (n = 2)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,98,"Assert.assertTrue(""variance should not be zero (n = 2)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,103,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,111,"ssertEquals( ""Geometric mean not expected"", 2.213364,"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,111,"Assert.assertEquals( ""Geometric mean not expected"", 2.213364,"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,115,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,117,"ssertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,118,"ssertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,119,"ssertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,120,"ssertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,121,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,118,"Assert.assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,119,"Assert.assertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,120,"Assert.assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,121,"Assert.assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,122,"Assert.assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,125,"ssertEquals( ""mean not expected"", 1.0,"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,126,"Assert.assertEquals( ""mean not expected"", 1.0,"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,127,"ssertEquals( ""variance not expected"", 0.0,"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,128,"Assert.assertEquals( ""variance not expected"", 0.0,"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,129,"ssertEquals( ""geometric mean not expected"", 1.0,"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,130,"Assert.assertEquals( ""geometric mean not expected"", 1.0,"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,134,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,135,"Assert.assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,138,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,139,"Assert.assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,144,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,160,@Test
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,184,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,185,"ssertTrue(""reflexive"", u.equals(u));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,186,"ssertFalse(""non-null compared to null"", u.equals(t));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,187,"ssertFalse(""wrong type"", u.equals(Double.valueOf(0)));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,189,"Assert.assertTrue(""reflexive"", u.equals(u));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,190,"Assert.assertFalse(""non-null compared to null"", u.equals(t));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,191,"Assert.assertFalse(""wrong type"", u.equals(Double.valueOf(0)));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,189,"ssertTrue(""empty instances should be equal"", t.equals(u));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,190,"ssertTrue(""empty instances should be equal"", u.equals(t));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,191,"ssertEquals(""empty hash code"", emptyHash, t.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,193,"Assert.assertTrue(""empty instances should be equal"", t.equals(u));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,194,"Assert.assertTrue(""empty instances should be equal"", u.equals(t));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,195,"Assert.assertEquals(""empty hash code"", emptyHash, t.hashCode());"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,198,"ssertFalse(""different n's should make instances not equal"", t.equals(u));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,199,"ssertFalse(""different n's should make instances not equal"", u.equals(t));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,200,"ssertTrue(""different n's should make hashcodes different"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,202,"Assert.assertFalse(""different n's should make instances not equal"", t.equals(u));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,203,"Assert.assertFalse(""different n's should make instances not equal"", u.equals(t));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,204,"Assert.assertTrue(""different n's should make hashcodes different"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,208,"ssertTrue(""summaries based on same data should be equal"", t.equals(u));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,209,"ssertTrue(""summaries based on same data should be equal"", u.equals(t));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,210,"ssertEquals(""summaries based on same data should have same hashcodes"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,212,"Assert.assertTrue(""summaries based on same data should be equal"", t.equals(u));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,213,"Assert.assertTrue(""summaries based on same data should be equal"", u.equals(t));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,214,"Assert.assertEquals(""summaries based on same data should have same hashcodes"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,216,"ssertTrue(""empty instances should be equal"", t.equals(u));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,217,"ssertTrue(""empty instances should be equal"", u.equals(t));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,218,"ssertEquals(""empty hash code"", emptyHash, t.hashCode());"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,219,"ssertEquals(""empty hash code"", emptyHash, u.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,220,"Assert.assertTrue(""empty instances should be equal"", t.equals(u));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,221,"Assert.assertTrue(""empty instances should be equal"", u.equals(t));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,222,"Assert.assertEquals(""empty hash code"", emptyHash, t.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,223,"Assert.assertEquals(""empty hash code"", emptyHash, u.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,226,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,229,"ssertEquals(u, v);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,230,"ssertEquals(v, u);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,231,ssertTrue(v.geoMean == v.getGeoMeanImpl());
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,232,ssertTrue(v.mean == v.getMeanImpl());
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,233,ssertTrue(v.min == v.getMinImpl());
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,234,ssertTrue(v.max == v.getMaxImpl());
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,235,ssertTrue(v.sum == v.getSumImpl());
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,236,ssertTrue(v.sumsq == v.getSumsqImpl());
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,237,ssertTrue(v.sumLog == v.getSumLogImpl());
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,238,ssertTrue(v.variance == v.getVarianceImpl());
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,234,"Assert.assertEquals(u, v);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,235,"Assert.assertEquals(v, u);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,236,Assert.assertTrue(v.geoMean == v.getGeoMeanImpl());
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,237,Assert.assertTrue(v.mean == v.getMeanImpl());
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,238,Assert.assertTrue(v.min == v.getMinImpl());
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,239,Assert.assertTrue(v.max == v.getMaxImpl());
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,240,Assert.assertTrue(v.sum == v.getSumImpl());
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,241,Assert.assertTrue(v.sumsq == v.getSumsqImpl());
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,242,Assert.assertTrue(v.sumLog == v.getSumLogImpl());
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,243,Assert.assertTrue(v.variance == v.getVarianceImpl());
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,249,"ssertEquals(u, v);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,250,"ssertEquals(v, u);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,254,"Assert.assertEquals(u, v);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,255,"Assert.assertEquals(v, u);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,256,"ssertEquals(u.sum, v.sum);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,257,"ssertEquals(u.getSumImpl(), v.getSumImpl());"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,261,"Assert.assertEquals(u.sum, v.sum);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,262,"Assert.assertEquals(u.getSumImpl(), v.getSumImpl());"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,262,"ssertEquals(""N"",s.getN(),u.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,267,"Assert.assertEquals(""N"",s.getN(),u.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,276,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,277,"ssertEquals(4, u.getMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,278,"ssertEquals(4, u.getSumOfLogs(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,279,"ssertEquals(FastMath.exp(2), u.getGeometricMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,283,"Assert.assertEquals(4, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,284,"Assert.assertEquals(4, u.getSumOfLogs(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,285,"Assert.assertEquals(FastMath.exp(2), u.getGeometricMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,283,"ssertEquals(3, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,289,"Assert.assertEquals(3, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,294,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,294,"ail(""Expecting IllegalStateException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,301,"Assert.fail(""Expecting IllegalStateException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java,24,ublic SynchronizedDescriptiveStatisticsTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java,25,uper(name);
False,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,23,ublic SynchronizedSummaryStatisticsTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,24,uper(name);
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,28,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,33,ublic abstract class UnivariateStatisticAbstractTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,34,public abstract class UnivariateStatisticAbstractTest {
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,87,ublic UnivariateStatisticAbstractTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,88,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,95,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,100,ssertEquals(
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,97,Assert.assertEquals(
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,103,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,109,ssertEquals(
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,107,Assert.assertEquals(
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,122,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,176,"ssertEquals(weightedStatistic.evaluate(values, weights, 0, values.length),"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,175,"Assert.assertEquals(weightedStatistic.evaluate(values, weights, 0, values.length),"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java,32, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java,34,ublic FirstMomentTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/FirstMomentTest.java,35,uper(name);
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java,32, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java,34,ublic FourthMomentTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/FourthMomentTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,31, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,33,ublic GeometricMeanTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,34,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,48,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,56,ssertTrue(Double.isNaN(mean.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,52,Assert.assertTrue(Double.isNaN(mean.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,60,ssertFalse(Double.isNaN(mean.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,56,Assert.assertFalse(Double.isNaN(mean.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,64,"ssertEquals(0d, mean.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,60,"Assert.assertEquals(0d, mean.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,68,ssertTrue(Double.isNaN(mean.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,64,Assert.assertTrue(Double.isNaN(mean.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,72,ssertTrue(Double.isNaN(mean.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,68,Assert.assertTrue(Double.isNaN(mean.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,76,"ssertEquals(Double.POSITIVE_INFINITY, mean.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,72,"Assert.assertEquals(Double.POSITIVE_INFINITY, mean.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,80,ssertTrue(Double.isNaN(mean.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/GeometricMeanTest.java,76,Assert.assertTrue(Double.isNaN(mean.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,31, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,33,ublic KurtosisTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,34,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,52,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,59,ssertTrue(Double.isNaN(kurt.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,55,Assert.assertTrue(Double.isNaN(kurt.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,61,ssertTrue(Double.isNaN(kurt.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,57,Assert.assertTrue(Double.isNaN(kurt.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,63,ssertTrue(Double.isNaN(kurt.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,59,Assert.assertTrue(Double.isNaN(kurt.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,65,ssertTrue(Double.isNaN(kurt.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,61,Assert.assertTrue(Double.isNaN(kurt.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,67,ssertFalse(Double.isNaN(kurt.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,63,Assert.assertFalse(Double.isNaN(kurt.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,31, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,33,ublic MeanTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,34,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,53,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,60,ssertTrue(Double.isNaN(mean.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,56,Assert.assertTrue(Double.isNaN(mean.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,62,"ssertEquals(1d, mean.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,58,"Assert.assertEquals(1d, mean.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,61,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,67,"ssertEquals(expectedWeightedValue(), mean.evaluate(testArray, testWeightsArray, 0, testArray.length), getTolerance());"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,68,"ssertEquals(expectedValue(), mean.evaluate(testArray, identicalWeightsArray, 0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,64,"Assert.assertEquals(expectedWeightedValue(), mean.evaluate(testArray, testWeightsArray, 0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/MeanTest.java,65,"Assert.assertEquals(expectedValue(), mean.evaluate(testArray, identicalWeightsArray, 0, testArray.length), getTolerance());"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java,32, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java,34,ublic SecondMomentTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SecondMomentTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,24,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,24,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,26,ublic class SemiVarianceTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,27,public class SemiVarianceTest {
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,29,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,33,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,35,"Assert.fail(""null is not a valid data array."");"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,40,"ail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,42,"Assert.fail(""null is not a valid data array."");"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,44,ssertTrue(Double.isNaN(sv.evaluate(nothing)));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,46,Assert.assertTrue(Double.isNaN(sv.evaluate(nothing)));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,49,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,51,"ssertEquals(0.0d, singletest, 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,54,"Assert.assertEquals(0.0d, singletest, 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,57,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,58,"ssertEquals(0.0d, singletest, 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,62,"Assert.assertEquals(0.0d, singletest, 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,65,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,67,"ssertEquals(TestUtils.sumSquareDev(new double[] {-2d, 2d, 4d, -2d, 3d, 5d}, mean) / (length - 1),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,72,"Assert.assertEquals(TestUtils.sumSquareDev(new double[] {-2d, 2d, 4d, -2d, 3d, 5d}, mean) / (length - 1),"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,72,"ssertEquals(TestUtils.sumSquareDev(new double[] {22d, 11d, 14d}, mean) / (length - 1),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,77,"Assert.assertEquals(TestUtils.sumSquareDev(new double[] {22d, 11d, 14d}, mean) / (length - 1),"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,76,"ssertEquals(StatUtils.variance(values), downsideSemiVariance + upsideSemiVariance, 10e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,81,"Assert.assertEquals(StatUtils.variance(values), downsideSemiVariance + upsideSemiVariance, 10e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,84,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,84,"ssertEquals(19.556d, singletest, 0.01d);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,90,"Assert.assertEquals(19.556d, singletest, 0.01d);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,88,"ssertEquals(36.222d, singletest, 0.01d);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,94,"Assert.assertEquals(36.222d, singletest, 0.01d);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,97,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,96,"ssertEquals(TestUtils.sumSquareDev(new double[] { -2d, -2d }, 1.0d) / values.length,"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,103,"Assert.assertEquals(TestUtils.sumSquareDev(new double[] { -2d, -2d }, 1.0d) / values.length,"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,100,"ssertEquals(TestUtils.sumSquareDev(new double[] { 4d, 22d, 11d, 14d, 5d }, 3.0d) / values.length, singletest,"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,107,"Assert.assertEquals(TestUtils.sumSquareDev(new double[] { 4d, 22d, 11d, 14d, 5d }, 3.0d) / values.length, singletest,"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,115,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,116,"ssertEquals(variance, lower + upper, 10e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,124,"Assert.assertEquals(variance, lower + upper, 10e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,132,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,133,"ssertEquals(totalSumOfSquares / (values.length - 1), lower + upper, 10e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,142,"Assert.assertEquals(totalSumOfSquares / (values.length - 1), lower + upper, 10e-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,145,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,139,"ssertEquals(0, sv.evaluate(values), 10E-12);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,140,"ssertEquals(0, sv.evaluate(values, 100d), 10E-12);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,141,"ssertEquals(0, sv.evaluate(values, 100d, SemiVariance.UPSIDE_VARIANCE, false, 0, values.length), 10E-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,149,"Assert.assertEquals(0, sv.evaluate(values), 10E-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,150,"Assert.assertEquals(0, sv.evaluate(values, 100d), 10E-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SemiVarianceTest.java,151,"Assert.assertEquals(0, sv.evaluate(values, 100d, SemiVariance.UPSIDE_VARIANCE, false, 0, values.length), 10E-12);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,32, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,34,ublic SkewnessTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,53,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,60,ssertTrue(Double.isNaN(skew.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,56,Assert.assertTrue(Double.isNaN(skew.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,62,ssertTrue(Double.isNaN(skew.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,58,Assert.assertTrue(Double.isNaN(skew.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,64,ssertTrue(Double.isNaN(skew.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,60,Assert.assertTrue(Double.isNaN(skew.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,66,ssertFalse(Double.isNaN(skew.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,62,Assert.assertFalse(Double.isNaN(skew.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,33, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,35,ublic StandardDeviationTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,36,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,54,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,61,ssertTrue(Double.isNaN(std.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,57,Assert.assertTrue(Double.isNaN(std.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,63,"ssertEquals(0d, std.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,59,"Assert.assertEquals(0d, std.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,65,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,76,"ssertEquals(sigma, s1.evaluate(values), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,73,"Assert.assertEquals(sigma, s1.evaluate(values), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,78,"ssertEquals(sigma, s1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,75,"Assert.assertEquals(sigma, s1.getResult(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,80,"ssertEquals(sigma, s1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,77,"Assert.assertEquals(sigma, s1.getResult(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,82,"ssertEquals(sigma, s1.evaluate(values), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,79,"Assert.assertEquals(sigma, s1.evaluate(values), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,84,"ssertEquals(sigma, s1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,81,"Assert.assertEquals(sigma, s1.getResult(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java,32, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java,34,ublic ThirdMomentTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/ThirdMomentTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,33, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,35,ublic VarianceTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,36,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,59,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,66,ssertTrue(Double.isNaN(std.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,62,Assert.assertTrue(Double.isNaN(std.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,68,"ssertEquals(0d, std.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,64,"Assert.assertEquals(0d, std.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,70,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,80,"ssertEquals(populationVariance(values), v1.evaluate(values), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,77,"Assert.assertEquals(populationVariance(values), v1.evaluate(values), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,82,"ssertEquals(populationVariance(values), v1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,79,"Assert.assertEquals(populationVariance(values), v1.getResult(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,84,"ssertEquals(populationVariance(values), v1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,81,"Assert.assertEquals(populationVariance(values), v1.getResult(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,86,"ssertEquals(populationVariance(values), v1.evaluate(values), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,83,"Assert.assertEquals(populationVariance(values), v1.evaluate(values), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,88,"ssertEquals(populationVariance(values), v1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,85,"Assert.assertEquals(populationVariance(values), v1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,100,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,105,"ssertEquals(expectedWeightedValue(),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,103,"Assert.assertEquals(expectedWeightedValue(),"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,109,"ssertEquals(expectedValue(),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,107,"Assert.assertEquals(expectedValue(),"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,114,"ssertEquals(expectedValue(),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,112,"Assert.assertEquals(expectedValue(),"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,26,ublic class MaxTest extends StorelessUnivariateStatisticAbstractTest{
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,28,public class MaxTest extends StorelessUnivariateStatisticAbstractTest {
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,31, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,33,ublic MaxTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,34,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,48,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,57,ssertTrue(Double.isNaN(max.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,53,Assert.assertTrue(Double.isNaN(max.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,59,"ssertEquals(0d, max.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,55,"Assert.assertEquals(0d, max.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,61,"ssertEquals(0d, max.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,57,"Assert.assertEquals(0d, max.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,63,"ssertEquals(0d, max.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,59,"Assert.assertEquals(0d, max.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,65,"ssertEquals(Double.POSITIVE_INFINITY, max.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,66,"ssertEquals(Double.POSITIVE_INFINITY, max.evaluate(testArray), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,61,"Assert.assertEquals(Double.POSITIVE_INFINITY, max.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,62,"Assert.assertEquals(Double.POSITIVE_INFINITY, max.evaluate(testArray), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,65,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,72,"ssertEquals(3d, max.evaluate(new double[]{nan, 2d, 3d}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,73,"ssertEquals(3d, max.evaluate(new double[]{1d, nan, 3d}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,74,"ssertEquals(2d, max.evaluate(new double[]{1d, 2d, nan}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,75,"ssertTrue(Double.isNaN(max.evaluate(new double[]{nan, nan, nan})));"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,69,"Assert.assertEquals(3d, max.evaluate(new double[]{nan, 2d, 3d}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,70,"Assert.assertEquals(3d, max.evaluate(new double[]{1d, nan, 3d}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,71,"Assert.assertEquals(2d, max.evaluate(new double[]{1d, 2d, nan}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,72,"Assert.assertTrue(Double.isNaN(max.evaluate(new double[]{nan, nan, nan})));"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,31, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,33,ublic MedianTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,34,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,31, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,33,ublic MinTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,34,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,48,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,57,ssertTrue(Double.isNaN(min.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,53,Assert.assertTrue(Double.isNaN(min.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,59,"ssertEquals(0d, min.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,55,"Assert.assertEquals(0d, min.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,61,"ssertEquals(0d, min.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,57,"Assert.assertEquals(0d, min.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,63,"ssertEquals(0d, min.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,59,"Assert.assertEquals(0d, min.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,65,"ssertEquals(Double.NEGATIVE_INFINITY, min.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,66,"ssertEquals(Double.NEGATIVE_INFINITY, min.evaluate(testArray), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,61,"Assert.assertEquals(Double.NEGATIVE_INFINITY, min.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,62,"Assert.assertEquals(Double.NEGATIVE_INFINITY, min.evaluate(testArray), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,65,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,72,"ssertEquals(2d, min.evaluate(new double[]{nan, 2d, 3d}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,73,"ssertEquals(1d, min.evaluate(new double[]{1d, nan, 3d}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,74,"ssertEquals(1d, min.evaluate(new double[]{1d, 2d, nan}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,75,"ssertTrue(Double.isNaN(min.evaluate(new double[]{nan, nan, nan})));"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,69,"Assert.assertEquals(2d, min.evaluate(new double[]{nan, 2d, 3d}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,70,"Assert.assertEquals(1d, min.evaluate(new double[]{1d, nan, 3d}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,71,"Assert.assertEquals(1d, min.evaluate(new double[]{1d, 2d, nan}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,72,"Assert.assertTrue(Double.isNaN(min.evaluate(new double[]{nan, nan, nan})));"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,32, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,34,ublic PercentileTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,49,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,57,"ssertEquals(3.0, p.evaluate(d), 1.0e-5);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,53,"Assert.assertEquals(3.0, p.evaluate(d), 1.0e-5);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,56,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,63,"ssertEquals(1.5, p.evaluate(d), 1.0e-5);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,60,"Assert.assertEquals(1.5, p.evaluate(d), 1.0e-5);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,65,"ssertEquals(1.25, p.evaluate(d), 1.0e-5);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,62,"Assert.assertEquals(1.25, p.evaluate(d), 1.0e-5);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,67,"ssertEquals(3.75, p.evaluate(d), 1.0e-5);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,64,"Assert.assertEquals(3.75, p.evaluate(d), 1.0e-5);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,69,"ssertEquals(2.5, p.evaluate(d), 1.0e-5);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,66,"Assert.assertEquals(2.5, p.evaluate(d), 1.0e-5);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,74,ail();
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,71,Assert.fail();
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,80,ail();
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,77,Assert.fail();
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,83,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,91,"ssertEquals(95.1981, p.evaluate(d), 1.0e-4);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,92,"ssertEquals(95.1990, p.evaluate(d,0,d.length, 100d), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,89,"Assert.assertEquals(95.1981, p.evaluate(d), 1.0e-4);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,90,"Assert.assertEquals(95.1990, p.evaluate(d,0,d.length, 100d), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,93,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,97,"ssertEquals(this.percentile5, percentile.evaluate(testArray), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,96,"Assert.assertEquals(this.percentile5, percentile.evaluate(testArray), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,99,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,106,"ail(""Expecting MathIllegalArgumentException for null array"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,106,"Assert.fail(""Expecting MathIllegalArgumentException for null array"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,110,ssertTrue(Double.isNaN(percentile.evaluate(emptyArray)));
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,110,Assert.assertTrue(Double.isNaN(percentile.evaluate(emptyArray)));
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,113,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,116,"ssertEquals(1d, percentile.evaluate(singletonArray), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,117,"ssertEquals(1d, percentile.evaluate(singletonArray, 0, 1), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,118,"ssertEquals(1d, percentile.evaluate(singletonArray, 0, 1, 5), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,119,"ssertEquals(1d, percentile.evaluate(singletonArray, 0, 1, 100), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,120,"ssertTrue(Double.isNaN(percentile.evaluate(singletonArray, 0, 0)));"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,117,"Assert.assertEquals(1d, percentile.evaluate(singletonArray), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,118,"Assert.assertEquals(1d, percentile.evaluate(singletonArray, 0, 1), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,119,"Assert.assertEquals(1d, percentile.evaluate(singletonArray, 0, 1, 5), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,120,"Assert.assertEquals(1d, percentile.evaluate(singletonArray, 0, 1, 100), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,121,"Assert.assertTrue(Double.isNaN(percentile.evaluate(singletonArray, 0, 0)));"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,124,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,126,"ssertEquals(2.5d, percentile.evaluate(specialValues), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,128,"Assert.assertEquals(2.5d, percentile.evaluate(specialValues), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,129,"ssertEquals(2.5d, percentile.evaluate(specialValues), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,131,"Assert.assertEquals(2.5d, percentile.evaluate(specialValues), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,132,ssertTrue(Double.isInfinite(percentile.evaluate(specialValues)));
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,134,Assert.assertTrue(Double.isInfinite(percentile.evaluate(specialValues)));
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,135,ssertTrue(Double.isNaN(percentile.evaluate(specialValues)));
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,137,Assert.assertTrue(Double.isNaN(percentile.evaluate(specialValues)));
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,139,ssertTrue(Double.isNaN(percentile.evaluate(specialValues)));
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,141,Assert.assertTrue(Double.isNaN(percentile.evaluate(specialValues)));
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,144,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,145,"ssertEquals(100, percentile.getQuantile(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,148,"Assert.assertEquals(100, percentile.getQuantile(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,148,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,151,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,154,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,157,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,32, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,34,ublic ProductTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,62,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,69,"ssertEquals(1, product.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,65,"Assert.assertEquals(1, product.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,71,"ssertEquals(1, product.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,67,"Assert.assertEquals(1, product.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,73,"ssertEquals(Double.POSITIVE_INFINITY, product.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,69,"Assert.assertEquals(Double.POSITIVE_INFINITY, product.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,75,"ssertEquals(Double.NEGATIVE_INFINITY, product.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,71,"Assert.assertEquals(Double.NEGATIVE_INFINITY, product.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,77,ssertTrue(Double.isNaN(product.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,73,Assert.assertTrue(Double.isNaN(product.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,79,ssertTrue(Double.isNaN(product.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,75,Assert.assertTrue(Double.isNaN(product.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,78,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,84,"ssertEquals(expectedWeightedValue(), product.evaluate(testArray, testWeightsArray, 0, testArray.length),getTolerance());"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,85,"ssertEquals(expectedValue(), product.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,81,"Assert.assertEquals(expectedWeightedValue(), product.evaluate(testArray, testWeightsArray, 0, testArray.length),getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,82,"Assert.assertEquals(expectedValue(), product.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance());"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,90,"ssertEquals(1, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/ProductTest.java,87,"Assert.assertEquals(1, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,32, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,34,ublic SumLogTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,49,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,57,"ssertEquals(0, sum.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,53,"Assert.assertEquals(0, sum.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,61,ssertFalse(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,57,Assert.assertFalse(Double.isNaN(sum.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,65,"ssertEquals(Double.NEGATIVE_INFINITY, sum.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,61,"Assert.assertEquals(Double.NEGATIVE_INFINITY, sum.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,69,ssertTrue(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,65,Assert.assertTrue(Double.isNaN(sum.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,73,"ssertEquals(0, sum.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,69,"Assert.assertEquals(0, sum.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,77,"ssertEquals(Double.POSITIVE_INFINITY, sum.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,73,"Assert.assertEquals(Double.POSITIVE_INFINITY, sum.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,81,ssertTrue(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,77,Assert.assertTrue(Double.isNaN(sum.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,86,"ssertEquals(0, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,82,"Assert.assertEquals(0, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,33, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,35,ublic SumSqTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,36,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,50,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,57,"ssertEquals(0, sumSq.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,53,"Assert.assertEquals(0, sumSq.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,59,"ssertEquals(4d, sumSq.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,55,"Assert.assertEquals(4d, sumSq.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,61,"ssertEquals(Double.POSITIVE_INFINITY, sumSq.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,57,"Assert.assertEquals(Double.POSITIVE_INFINITY, sumSq.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,63,"ssertEquals(Double.POSITIVE_INFINITY, sumSq.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,59,"Assert.assertEquals(Double.POSITIVE_INFINITY, sumSq.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,65,ssertTrue(Double.isNaN(sumSq.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,61,Assert.assertTrue(Double.isNaN(sumSq.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,67,ssertTrue(Double.isNaN(sumSq.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,63,Assert.assertTrue(Double.isNaN(sumSq.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,72,"ssertEquals(0, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,68,"Assert.assertEquals(0, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,32, @param name
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,34,ublic SumTest(String name) {
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,54,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,61,"ssertEquals(0, sum.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,57,"Assert.assertEquals(0, sum.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,63,"ssertEquals(1, sum.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,59,"Assert.assertEquals(1, sum.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,65,"ssertEquals(Double.POSITIVE_INFINITY, sum.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,61,"Assert.assertEquals(Double.POSITIVE_INFINITY, sum.getResult(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,67,ssertTrue(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,63,Assert.assertTrue(Double.isNaN(sum.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,69,ssertTrue(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,65,Assert.assertTrue(Double.isNaN(sum.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,68,@Test
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,74,"ssertEquals(expectedWeightedValue(), sum.evaluate(testArray, testWeightsArray, 0, testArray.length), getTolerance());"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,75,"ssertEquals(expectedValue(), sum.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,71,"Assert.assertEquals(expectedWeightedValue(), sum.evaluate(testArray, testWeightsArray, 0, testArray.length), getTolerance());"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,72,"Assert.assertEquals(expectedValue(), sum.evaluate(testArray, unitWeightsArray, 0, testArray.length), getTolerance());"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,80,"ssertEquals(0, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumTest.java,77,"Assert.assertEquals(0, statistic.getResult(), 0);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,21,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,21,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,29,ublic class ChiSquareTestTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,30,public class ChiSquareTestTest {
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,33,ublic ChiSquareTestTest(String name) {
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,34,uper(name);
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,34,@Test
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,46,"ssertEquals(""chi-square statistic"", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,47,"ssertEquals(""chi-square p-value"", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,44,"Assert.assertEquals(""chi-square statistic"", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,45,"Assert.assertEquals(""chi-square p-value"", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,51,"ssertEquals( ""chi-square test statistic"", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,52,"ssertEquals(""chi-square p-value"", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,53,"ssertTrue(""chi-square test reject"", testStatistic.chiSquareTest(expected1, observed1, 0.08));"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,54,"ssertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(expected1, observed1, 0.05));"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,49,"Assert.assertEquals( ""chi-square test statistic"", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,50,"Assert.assertEquals(""chi-square p-value"", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,51,"Assert.assertTrue(""chi-square test reject"", testStatistic.chiSquareTest(expected1, observed1, 0.08));"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,52,"Assert.assertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(expected1, observed1, 0.05));"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,58,"ail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,56,"Assert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,67,"ail(""arguments too short, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,65,"Assert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,77,"ail(""arrays have different lengths, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,75,"Assert.fail(""arrays have different lengths, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,86,"ail(""bad expected count, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,84,"Assert.fail(""bad expected count, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,96,"ail(""bad expected count, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,94,"Assert.fail(""bad expected count, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,101,@Test
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,108,"ssertEquals( ""chi-square test statistic"", 22.709027688, testStatistic.chiSquare(counts), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,109,"ssertEquals(""chi-square p-value"", 0.000144751460134, testStatistic.chiSquareTest(counts), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,110,"ssertTrue(""chi-square test reject"", testStatistic.chiSquareTest(counts, 0.0002));"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,111,"ssertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(counts, 0.0001));"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,107,"Assert.assertEquals( ""chi-square test statistic"", 22.709027688, testStatistic.chiSquare(counts), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,108,"Assert.assertEquals(""chi-square p-value"", 0.000144751460134, testStatistic.chiSquareTest(counts), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,109,"Assert.assertTrue(""chi-square test reject"", testStatistic.chiSquareTest(counts, 0.0002));"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,110,"Assert.assertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(counts, 0.0001));"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,114,"ssertEquals( ""chi-square test statistic"", 0.168965517241, testStatistic.chiSquare(counts2), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,115,"ssertEquals(""chi-square p-value"",0.918987499852, testStatistic.chiSquareTest(counts2), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,116,"ssertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(counts2, 0.1));"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,113,"Assert.assertEquals( ""chi-square test statistic"", 0.168965517241, testStatistic.chiSquare(counts2), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,114,"Assert.assertEquals(""chi-square p-value"",0.918987499852, testStatistic.chiSquareTest(counts2), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,115,"Assert.assertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(counts2, 0.1));"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,122,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,121,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,131,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,130,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,138,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,137,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,147,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,146,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,155,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,154,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,160,@Test
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,173,"ssertEquals(""chi-square p-value"", 0.0, cst, 1E-3);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,174,"ssertEquals( ""chi-square test statistic"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,173,"Assert.assertEquals(""chi-square p-value"", 0.0, cst, 1E-3);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,174,"Assert.assertEquals( ""chi-square test statistic"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,179,@Test
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,182,"ssertEquals( ""chi-square test statistic"", 9.67444662263,"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,183,"Assert.assertEquals( ""chi-square test statistic"", 9.67444662263,"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,184,"ssertEquals(""chi-square p-value"", 0.0462835770603,"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,185,"Assert.assertEquals(""chi-square p-value"", 0.0462835770603,"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,190,@Test
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,193,"ssertEquals(""chi-square p value"", 0.541096,"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,195,"Assert.assertEquals(""chi-square p value"", 0.541096,"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,196,"ssertEquals(""chi-square test statistic"", 2.153846,"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,198,"Assert.assertEquals(""chi-square test statistic"", 2.153846,"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,199,"ssertFalse(""chi-square test result"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,201,"Assert.assertFalse(""chi-square test result"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,207,@Test
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,209,"ssertEquals(""chi-square p value"", 0.124115,"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,212,"Assert.assertEquals(""chi-square p value"", 0.124115,"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,212,"ssertEquals(""chi-square test statistic"", 7.232189,"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,215,"Assert.assertEquals(""chi-square test statistic"", 7.232189,"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,215,"ssertTrue(""chi-square test result"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,218,"Assert.assertTrue(""chi-square test result"","
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,218,"ssertFalse(""chi-square test result"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,221,"Assert.assertFalse(""chi-square test result"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,226,@Test
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,230,"ail(""Expecting MathIllegalArgumentException - negative count"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,234,"Assert.fail(""Expecting MathIllegalArgumentException - negative count"");"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,239,"ail(""Expecting MathIllegalArgumentException - double 0's"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,243,"Assert.fail(""Expecting MathIllegalArgumentException - double 0's"");"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,248,"ail(""Expecting MathIllegalArgumentException - vanishing counts"");"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,252,"Assert.fail(""Expecting MathIllegalArgumentException - vanishing counts"");"
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,19,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,20,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,27,ublic class MannWhitneyUTestTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,29,public class MannWhitneyUTestTest {
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,31,ublic MannWhitneyUTestTest(String name) {
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,32,uper(name);
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,33,@Test
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,45,"ssertEquals(17, testStatistic.mannWhitneyU(x, y), 1e-10);"
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,46,"ssertEquals(0.08641, testStatistic.mannWhitneyUTest(x, y), 1e-5);"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,44,"Assert.assertEquals(17, testStatistic.mannWhitneyU(x, y), 1e-10);"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,45,"Assert.assertEquals(0.08641, testStatistic.mannWhitneyUTest(x, y), 1e-5);"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,49,@Test
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,55,"ail(""x does not contain samples (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,55,"Assert.fail(""x does not contain samples (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,62,"ail(""y does not contain samples (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,62,"Assert.fail(""y does not contain samples (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,72,"ail(""x and y is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,72,"Assert.fail(""x and y is null (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,79,"ail(""x and y is null (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,79,"Assert.fail(""x and y is null (asymptotic), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,89,"ail(""x is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,89,"Assert.fail(""x is null (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,96,"ail(""y is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,96,"Assert.fail(""y is null (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,30,ublic class OneWayAnovaTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,32,public class OneWayAnovaTest {
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,43,ublic OneWayAnovaTest(String name) {
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,44,uper(name);
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,45,@Test
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,54,"ssertEquals(""ANOVA F-value"",  24.67361709460624,"
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,53,"Assert.assertEquals(""ANOVA F-value"",  24.67361709460624,"
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,61,"ssertEquals(""ANOVA F-value"",  0.0150579150579,"
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,60,"Assert.assertEquals(""ANOVA F-value"",  0.0150579150579,"
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,69,"ail(""empty array for key classX, IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,68,"Assert.fail(""empty array for key classX, IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,78,"ail(""less than two classes, IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,77,"Assert.fail(""less than two classes, IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,84,@Test
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,92,"ssertEquals(""ANOVA P-value"", 6.959446E-06,"
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,92,"Assert.assertEquals(""ANOVA P-value"", 6.959446E-06,"
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,99,"ssertEquals(""ANOVA P-value"",  0.904212960464,"
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,99,"Assert.assertEquals(""ANOVA P-value"",  0.904212960464,"
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,104,@Test
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,111,"ssertTrue(""ANOVA Test P<0.01"", testStatistic.anovaTest(threeClasses, 0.01));"
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,112,"Assert.assertTrue(""ANOVA Test P<0.01"", testStatistic.anovaTest(threeClasses, 0.01));"
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,117,"ssertFalse(""ANOVA Test P>0.01"", testStatistic.anovaTest(twoClasses, 0.01));"
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,118,"Assert.assertFalse(""ANOVA Test P>0.01"", testStatistic.anovaTest(twoClasses, 0.01));"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,23,import org.junit.Before;
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,24,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,29,ublic class TTestTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,31,public class TTestTest {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,38,ublic TTestTest(String name) {
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,39,uper(name);
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,42,Override
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,40,@Before
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,46,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,59,"ssertEquals(""t statistic"",  -2.81976445346,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,58,"Assert.assertEquals(""t statistic"",  -2.81976445346,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,61,"ssertEquals(""t statistic"",  -2.81976445346,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,60,"Assert.assertEquals(""t statistic"",  -2.81976445346,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,63,"ssertEquals(""p value"", 0.0136390585873,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,62,"Assert.assertEquals(""p value"", 0.0136390585873,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,65,"ssertEquals(""p value"", 0.0136390585873,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,64,"Assert.assertEquals(""p value"", 0.0136390585873,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,70,"ail(""arguments too short, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,69,"Assert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,77,"ail(""arguments too short, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,76,"Assert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,84,"ail(""arguments too short, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,83,"Assert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,91,"ail(""arguments too short, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,90,"Assert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,98,"ail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,97,"Assert.fail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,104,"ail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,103,"Assert.fail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,111,"ail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,110,"Assert.fail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,117,"ail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,116,"Assert.fail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,122,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,131,"ssertEquals(""one sample t stat"", 3.86485535541,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,131,"Assert.assertEquals(""one sample t stat"", 3.86485535541,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,133,"ssertEquals(""one sample t stat"", 3.86485535541,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,133,"Assert.assertEquals(""one sample t stat"", 3.86485535541,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,135,"ssertEquals(""one sample p value"", 0.000521637019637,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,135,"Assert.assertEquals(""one sample p value"", 0.000521637019637,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,137,"ssertEquals(""one sample p value"", 0.000521637019637,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,137,"Assert.assertEquals(""one sample p value"", 0.000521637019637,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,139,"ssertTrue(""one sample t-test reject"", testStatistic.tTest(0d, oneSidedP, 0.01));"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,140,"ssertTrue(""one sample t-test reject"", testStatistic.tTest(0d, oneSidedPStats, 0.01));"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,141,"ssertTrue(""one sample t-test accept"", !testStatistic.tTest(0d, oneSidedP, 0.0001));"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,142,"ssertTrue(""one sample t-test accept"", !testStatistic.tTest(0d, oneSidedPStats, 0.0001));"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,139,"Assert.assertTrue(""one sample t-test reject"", testStatistic.tTest(0d, oneSidedP, 0.01));"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,140,"Assert.assertTrue(""one sample t-test reject"", testStatistic.tTest(0d, oneSidedPStats, 0.01));"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,141,"Assert.assertTrue(""one sample t-test accept"", !testStatistic.tTest(0d, oneSidedP, 0.0001));"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,142,"Assert.assertTrue(""one sample t-test accept"", !testStatistic.tTest(0d, oneSidedPStats, 0.0001));"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,146,"ail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,146,"Assert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,153,"ail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,153,"Assert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,160,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,173,"ssertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,174,"Assert.assertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,175,"ssertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,176,"Assert.assertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,177,"ssertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,178,"Assert.assertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,179,"ssertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,180,"Assert.assertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,181,"ssertTrue(""two sample heteroscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,182,"Assert.assertTrue(""two sample heteroscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,183,"ssertTrue(""two sample heteroscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,184,"Assert.assertTrue(""two sample heteroscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,185,"ssertTrue(""two sample heteroscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,186,"Assert.assertTrue(""two sample heteroscedastic t-test accept"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,187,"ssertTrue(""two sample heteroscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,188,"Assert.assertTrue(""two sample heteroscedastic t-test accept"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,192,"ail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,193,"Assert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,199,"ail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,200,"Assert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,206,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,207,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,213,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,214,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,220,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,221,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,227,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,228,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,234,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,235,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,241,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,242,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,247,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,259,"ssertEquals(""two sample homoscedastic t stat"", 0.73096310086,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,261,"Assert.assertEquals(""two sample homoscedastic t stat"", 0.73096310086,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,261,"ssertEquals(""two sample homoscedastic p value"", 0.4833963785,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,263,"Assert.assertEquals(""two sample homoscedastic p value"", 0.4833963785,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,263,"ssertTrue(""two sample homoscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,265,"Assert.assertTrue(""two sample homoscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,265,"ssertTrue(""two sample homoscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,267,"Assert.assertTrue(""two sample homoscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,271,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,274,"ssertEquals(-2.2360679775, testStatistic.t(sample1, sample2),"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,277,"Assert.assertEquals(-2.2360679775, testStatistic.t(sample1, sample2),"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,276,"ssertEquals(0.198727388935, testStatistic.tTest(sample1, sample2),"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,279,"Assert.assertEquals(0.198727388935, testStatistic.tTest(sample1, sample2),"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,283,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,286,"ssertEquals(-0.3133, testStatistic.pairedT(sample1, sample2), 1E-4);"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,287,"ssertEquals(0.774544295819, testStatistic.pairedTTest(sample1, sample2), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,288,"ssertEquals(0.001208, testStatistic.pairedTTest(sample1, sample3), 1E-6);"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,289,"ssertFalse(testStatistic.pairedTTest(sample1, sample3, .001));"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,290,"ssertTrue(testStatistic.pairedTTest(sample1, sample3, .002));"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,290,"Assert.assertEquals(-0.3133, testStatistic.pairedT(sample1, sample2), 1E-4);"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,291,"Assert.assertEquals(0.774544295819, testStatistic.pairedTTest(sample1, sample2), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,292,"Assert.assertEquals(0.001208, testStatistic.pairedTTest(sample1, sample3), 1E-6);"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,293,"Assert.assertFalse(testStatistic.pairedTTest(sample1, sample3, .001));"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,294,"Assert.assertTrue(testStatistic.pairedTTest(sample1, sample3, .002));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,25,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,32,ublic class TestUtilsTest extends TestCase {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,34,ublic TestUtilsTest(String name) {
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,35,uper(name);
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,33,public class TestUtilsTest {
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,35,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,47,"ssertEquals(""chi-square statistic"", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,48,"ssertEquals(""chi-square p-value"", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,45,"Assert.assertEquals(""chi-square statistic"", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,46,"Assert.assertEquals(""chi-square p-value"", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,52,"ssertEquals( ""chi-square test statistic"", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,53,"ssertEquals(""chi-square p-value"", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,54,"ssertTrue(""chi-square test reject"", TestUtils.chiSquareTest(expected1, observed1, 0.07));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,55,"ssertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(expected1, observed1, 0.05));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,50,"Assert.assertEquals( ""chi-square test statistic"", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,51,"Assert.assertEquals(""chi-square p-value"", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,52,"Assert.assertTrue(""chi-square test reject"", TestUtils.chiSquareTest(expected1, observed1, 0.07));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,53,"Assert.assertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(expected1, observed1, 0.05));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,59,"ail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,57,"Assert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,68,"ail(""arguments too short, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,66,"Assert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,78,"ail(""arrays have different lengths, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,76,"Assert.fail(""arrays have different lengths, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,87,"ail(""bad expected count, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,85,"Assert.fail(""bad expected count, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,97,"ail(""bad expected count, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,95,"Assert.fail(""bad expected count, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,102,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,109,"ssertEquals( ""chi-square test statistic"", 22.709027688, TestUtils.chiSquare(counts), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,110,"ssertEquals(""chi-square p-value"", 0.000144751460134, TestUtils.chiSquareTest(counts), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,111,"ssertTrue(""chi-square test reject"", TestUtils.chiSquareTest(counts, 0.0002));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,112,"ssertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(counts, 0.0001));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,108,"Assert.assertEquals( ""chi-square test statistic"", 22.709027688, TestUtils.chiSquare(counts), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,109,"Assert.assertEquals(""chi-square p-value"", 0.000144751460134, TestUtils.chiSquareTest(counts), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,110,"Assert.assertTrue(""chi-square test reject"", TestUtils.chiSquareTest(counts, 0.0002));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,111,"Assert.assertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(counts, 0.0001));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,115,"ssertEquals( ""chi-square test statistic"", 0.168965517241, TestUtils.chiSquare(counts2), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,116,"ssertEquals(""chi-square p-value"",0.918987499852, TestUtils.chiSquareTest(counts2), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,117,"ssertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(counts2, 0.1));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,114,"Assert.assertEquals( ""chi-square test statistic"", 0.168965517241, TestUtils.chiSquare(counts2), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,115,"Assert.assertEquals(""chi-square p-value"",0.918987499852, TestUtils.chiSquareTest(counts2), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,116,"Assert.assertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(counts2, 0.1));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,123,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,122,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,132,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,131,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,139,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,138,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,148,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,147,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,156,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,155,"Assert.fail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,161,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,174,"ssertEquals(""chi-square p-value"", 0.0, cst, 1E-3);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,175,"ssertEquals( ""chi-square test statistic"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,174,"Assert.assertEquals(""chi-square p-value"", 0.0, cst, 1E-3);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,175,"Assert.assertEquals( ""chi-square test statistic"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,180,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,183,"ssertEquals( ""chi-square test statistic"", 9.67444662263,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,184,"Assert.assertEquals( ""chi-square test statistic"", 9.67444662263,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,185,"ssertEquals(""chi-square p-value"", 0.0462835770603,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,186,"Assert.assertEquals(""chi-square p-value"", 0.0462835770603,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,194,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,204,"ssertEquals(""t statistic"",  -2.81976445346,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,206,"Assert.assertEquals(""t statistic"",  -2.81976445346,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,206,"ssertEquals(""t statistic"",  -2.81976445346,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,208,"Assert.assertEquals(""t statistic"",  -2.81976445346,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,208,"ssertEquals(""p value"", 0.0136390585873,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,210,"Assert.assertEquals(""p value"", 0.0136390585873,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,210,"ssertEquals(""p value"", 0.0136390585873,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,212,"Assert.assertEquals(""p value"", 0.0136390585873,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,215,"ail(""arguments too short, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,217,"Assert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,222,"ail(""arguments too short, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,224,"Assert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,229,"ail(""arguments too short, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,231,"Assert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,236,"ail(""arguments too short, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,238,"Assert.fail(""arguments too short, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,243,"ail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,245,"Assert.fail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,249,"ail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,251,"Assert.fail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,256,"ail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,258,"Assert.fail(""insufficient data to compute t statistic, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,262,"ail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,264,"Assert.fail(""insufficient data to perform t test, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,270,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,276,"ssertEquals(""one sample t stat"", 3.86485535541,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,279,"Assert.assertEquals(""one sample t stat"", 3.86485535541,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,278,"ssertEquals(""one sample t stat"", 3.86485535541,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,281,"Assert.assertEquals(""one sample t stat"", 3.86485535541,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,280,"ssertEquals(""one sample p value"", 0.000521637019637,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,283,"Assert.assertEquals(""one sample p value"", 0.000521637019637,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,282,"ssertEquals(""one sample p value"", 0.000521637019637,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,285,"Assert.assertEquals(""one sample p value"", 0.000521637019637,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,284,"ssertTrue(""one sample t-test reject"", TestUtils.tTest(0d, oneSidedP, 0.01));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,285,"ssertTrue(""one sample t-test reject"", TestUtils.tTest(0d, oneSidedPStats, 0.01));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,286,"ssertTrue(""one sample t-test accept"", !TestUtils.tTest(0d, oneSidedP, 0.0001));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,287,"ssertTrue(""one sample t-test accept"", !TestUtils.tTest(0d, oneSidedPStats, 0.0001));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,287,"Assert.assertTrue(""one sample t-test reject"", TestUtils.tTest(0d, oneSidedP, 0.01));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,288,"Assert.assertTrue(""one sample t-test reject"", TestUtils.tTest(0d, oneSidedPStats, 0.01));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,289,"Assert.assertTrue(""one sample t-test accept"", !TestUtils.tTest(0d, oneSidedP, 0.0001));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,290,"Assert.assertTrue(""one sample t-test accept"", !TestUtils.tTest(0d, oneSidedPStats, 0.0001));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,291,"ail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,294,"Assert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,298,"ail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,301,"Assert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,308,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,318,"ssertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,322,"Assert.assertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,320,"ssertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,324,"Assert.assertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,322,"ssertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,326,"Assert.assertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,324,"ssertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,328,"Assert.assertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,326,"ssertTrue(""two sample heteroscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,330,"Assert.assertTrue(""two sample heteroscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,328,"ssertTrue(""two sample heteroscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,332,"Assert.assertTrue(""two sample heteroscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,330,"ssertTrue(""two sample heteroscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,334,"Assert.assertTrue(""two sample heteroscedastic t-test accept"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,332,"ssertTrue(""two sample heteroscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,336,"Assert.assertTrue(""two sample heteroscedastic t-test accept"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,337,"ail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,341,"Assert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,344,"ail(""alpha out of range, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,348,"Assert.fail(""alpha out of range, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,351,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,355,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,358,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,362,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,365,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,369,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,372,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,376,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,379,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,383,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,386,"ail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,390,"Assert.fail(""insufficient data, MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,395,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,404,"ssertEquals(""two sample homoscedastic t stat"", 0.73096310086,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,409,"Assert.assertEquals(""two sample homoscedastic t stat"", 0.73096310086,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,406,"ssertEquals(""two sample homoscedastic p value"", 0.4833963785,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,411,"Assert.assertEquals(""two sample homoscedastic p value"", 0.4833963785,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,408,"ssertTrue(""two sample homoscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,413,"Assert.assertTrue(""two sample homoscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,410,"ssertTrue(""two sample homoscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,415,"Assert.assertTrue(""two sample homoscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,419,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,419,"ssertEquals(-2.2360679775, TestUtils.t(sample1, sample2),"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,425,"Assert.assertEquals(-2.2360679775, TestUtils.t(sample1, sample2),"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,421,"ssertEquals(0.198727388935, TestUtils.tTest(sample1, sample2),"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,427,"Assert.assertEquals(0.198727388935, TestUtils.tTest(sample1, sample2),"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,431,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,431,"ssertEquals(-0.3133, TestUtils.pairedT(sample1, sample2), 1E-4);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,432,"ssertEquals(0.774544295819, TestUtils.pairedTTest(sample1, sample2), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,433,"ssertEquals(0.001208, TestUtils.pairedTTest(sample1, sample3), 1E-6);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,434,"ssertFalse(TestUtils.pairedTTest(sample1, sample3, .001));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,435,"ssertTrue(TestUtils.pairedTTest(sample1, sample3, .002));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,438,"Assert.assertEquals(-0.3133, TestUtils.pairedT(sample1, sample2), 1E-4);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,439,"Assert.assertEquals(0.774544295819, TestUtils.pairedTTest(sample1, sample2), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,440,"Assert.assertEquals(0.001208, TestUtils.pairedTTest(sample1, sample3), 1E-6);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,441,"Assert.assertFalse(TestUtils.pairedTTest(sample1, sample3, .001));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,442,"Assert.assertTrue(TestUtils.pairedTTest(sample1, sample3, .002));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,455,@Test
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,452,"ssertEquals(oneWayAnova.anovaFValue(classes),"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,460,"Assert.assertEquals(oneWayAnova.anovaFValue(classes),"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,454,"ssertEquals(oneWayAnova.anovaPValue(classes),"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,462,"Assert.assertEquals(oneWayAnova.anovaPValue(classes),"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,456,"ssertEquals(oneWayAnova.anovaTest(classes, 0.01),"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,464,"Assert.assertEquals(oneWayAnova.anovaTest(classes, 0.01),"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,19,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,20,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,27,ublic class WilcoxonSignedRankTestTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,29,public class WilcoxonSignedRankTestTest {
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,31,ublic WilcoxonSignedRankTestTest(String name) {
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,32,uper(name);
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,33,@Test
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,49,"ssertEquals(40, testStatistic.wilcoxonSignedRank(x, y), 1e-10);"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,50,"ssertEquals(0.03906, testStatistic.wilcoxonSignedRankTest(x, y, true), 1e-5);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,48,"Assert.assertEquals(40, testStatistic.wilcoxonSignedRank(x, y), 1e-10);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,49,"Assert.assertEquals(0.03906, testStatistic.wilcoxonSignedRankTest(x, y, true), 1e-5);"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,60,"ssertEquals(40, testStatistic.wilcoxonSignedRank(x, y), 1e-10);"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,61,"ssertEquals(0.0329693812, testStatistic.wilcoxonSignedRankTest(x, y, false), 1e-10);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,59,"Assert.assertEquals(40, testStatistic.wilcoxonSignedRank(x, y), 1e-10);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,60,"Assert.assertEquals(0.0329693812, testStatistic.wilcoxonSignedRankTest(x, y, false), 1e-10);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,63,@Test
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,81,"ail(""More than 30 samples and exact chosen, IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,81,"Assert.fail(""More than 30 samples and exact chosen, IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,90,"ail(""x does not contain samples (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,90,"Assert.fail(""x does not contain samples (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,97,"ail(""x does not contain samples (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,97,"Assert.fail(""x does not contain samples (asymptotic), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,104,"ail(""y does not contain samples (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,104,"Assert.fail(""y does not contain samples (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,111,"ail(""y does not contain samples (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,111,"Assert.fail(""y does not contain samples (asymptotic), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,120,"ail(""x and y not same size (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,120,"Assert.fail(""x and y not same size (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,127,"ail(""x and y not same size (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,127,"Assert.fail(""x and y not same size (asymptotic), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,137,"ail(""x and y is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,137,"Assert.fail(""x and y is null (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,144,"ail(""x and y is null (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,144,"Assert.fail(""x and y is null (asymptotic), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,154,"ail(""x is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,154,"Assert.fail(""x is null (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,161,"ail(""x is null (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,161,"Assert.fail(""x is null (asymptotic), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,168,"ail(""y is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,168,"Assert.fail(""y is null (exact), IllegalArgumentException expected"");"
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,175,"ail(""y is null (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,175,"Assert.fail(""y is null (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,23,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,31,ublic class NaturalRankingTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,31,public class NaturalRankingTest {
False,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,41,ublic NaturalRankingTest(String arg0) {
False,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,42,uper(arg0);
False,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,45,Override
False,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,46,rotected void setUp() throws Exception {
False,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,47,uper.setUp();
False,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,50,Override
False,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,51,rotected void tearDown() throws Exception {
False,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,52,uper.tearDown();
True,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,41,@Test
True,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,64,@Test
True,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,87,@Test
True,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,111,@Test
True,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,135,@Test
True,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,158,@Test
True,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,184,@Test
False,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,19,mport static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,19,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,186,"ssertEquals(combinedX, regression.X);"
False,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,187,"ssertEquals(combinedY, regression.Y);"
False,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,188,"ssertEquals(combinedCovInv, regression.getOmegaInverse());"
True,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,186,"Assert.assertEquals(combinedX, regression.X);"
True,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,187,"Assert.assertEquals(combinedY, regression.Y);"
True,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java,188,"Assert.assertEquals(combinedCovInv, regression.getOmegaInverse());"
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,21,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,22,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,22,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,46,"ssertEquals(getNumberOfRegressors(), beta.length);"
True,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,45,"Assert.assertEquals(getNumberOfRegressors(), beta.length);"
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,52,"ssertEquals(getSampleSize(), e.length);"
True,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,51,"Assert.assertEquals(getSampleSize(), e.length);"
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,58,"ssertEquals(getNumberOfRegressors(), variance.length);"
True,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,57,"Assert.assertEquals(getNumberOfRegressors(), variance.length);"
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,65,ssertTrue(variance > 0.0);
True,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,64,Assert.assertTrue(variance > 0.0);
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,94,"ssertEquals(flatX, regression.X);"
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,95,"ssertEquals(flatY, regression.Y);"
True,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,93,"Assert.assertEquals(flatX, regression.X);"
True,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,94,"Assert.assertEquals(flatY, regression.Y);"
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,104,"ssertEquals(flatX, regression.X);"
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,105,"ssertEquals(flatY, regression.Y);"
True,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,103,"Assert.assertEquals(flatX, regression.X);"
True,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,104,"Assert.assertEquals(flatY, regression.Y);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,19,mport static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,27,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,98,"ssertEquals(0.0,"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,98,"Assert.assertEquals(0.0,"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,101,"ssertEquals(1, ((OLSMultipleLinearRegression) regression).calculateRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,101,"Assert.assertEquals(1, ((OLSMultipleLinearRegression) regression).calculateRSquared(), 1E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,175,"ssertEquals(304.8540735619638, model.estimateRegressionStandardError(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,175,"Assert.assertEquals(304.8540735619638, model.estimateRegressionStandardError(), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,178,"ssertEquals(0.995479004577296, model.calculateRSquared(), 1E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,179,"ssertEquals(0.992465007628826, model.calculateAdjustedRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,178,"Assert.assertEquals(0.995479004577296, model.calculateRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,179,"Assert.assertEquals(0.992465007628826, model.calculateAdjustedRSquared(), 1E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,210,"ssertEquals(475.1655079819517, model.estimateRegressionStandardError(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,210,"Assert.assertEquals(475.1655079819517, model.estimateRegressionStandardError(), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,213,"ssertEquals(0.9999670130706, model.calculateRSquared(), 1E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,214,"ssertEquals(0.999947220913, model.calculateAdjustedRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,213,"Assert.assertEquals(0.9999670130706, model.calculateRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,214,"Assert.assertEquals(0.999947220913, model.calculateAdjustedRSquared(), 1E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,320,"ssertEquals(7.73642194433223, model.estimateRegressionStandardError(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,320,"Assert.assertEquals(7.73642194433223, model.estimateRegressionStandardError(), 1E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,323,"ssertEquals(0.649789742860228, model.calculateRSquared(), 1E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,324,"ssertEquals(0.6164363850373927, model.calculateAdjustedRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,323,"Assert.assertEquals(0.649789742860228, model.calculateRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,324,"Assert.assertEquals(0.6164363850373927, model.calculateAdjustedRSquared(), 1E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,364,"ssertEquals(17.24710630547, model.estimateRegressionStandardError(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,364,"Assert.assertEquals(17.24710630547, model.estimateRegressionStandardError(), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,367,"ssertEquals(0.946350722085, model.calculateRSquared(), 1E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,368,"ssertEquals(0.9413600915813, model.calculateAdjustedRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,367,"Assert.assertEquals(0.946350722085, model.calculateRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,368,"Assert.assertEquals(0.9413600915813, model.calculateAdjustedRSquared(), 1E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,425,"ssertEquals(referenceData[k], hat.getEntry(i, j), 10e-3);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,426,"ssertEquals(hat.getEntry(i, j), hat.getEntry(j, i), 10e-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,425,"Assert.assertEquals(referenceData[k], hat.getEntry(i, j), 10e-3);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,426,"Assert.assertEquals(hat.getEntry(i, j), hat.getEntry(j, i), 10e-12);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,489,"ssertEquals(combinedX, regression.X);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,490,"ssertEquals(combinedY, regression.Y);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,489,"Assert.assertEquals(combinedX, regression.X);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,490,"Assert.assertEquals(combinedY, regression.Y);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,499,"ssertEquals(combinedX, regression.X);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,500,"ssertEquals(combinedY, regression.Y);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,499,"Assert.assertEquals(combinedX, regression.X);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,500,"Assert.assertEquals(combinedY, regression.Y);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,23,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,31,ublic final class SimpleRegressionTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,32,public final class SimpleRegressionTest {
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,82,ublic SimpleRegressionTest(String name) {
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,83,uper(name);
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,83,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,93,"ssertEquals(""slope"", 1.00211681802045, regression.getSlope(), 10E-12);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,94,"ssertEquals(""slope std err"", 0.429796848199937E-03,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,91,"Assert.assertEquals(""slope"", 1.00211681802045, regression.getSlope(), 10E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,92,"Assert.assertEquals(""slope std err"", 0.429796848199937E-03,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,96,"ssertEquals(""number of observations"", 36, regression.getN());"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,97,"ssertEquals( ""intercept"", -0.262323073774029,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,94,"Assert.assertEquals(""number of observations"", 36, regression.getN());"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,95,"Assert.assertEquals( ""intercept"", -0.262323073774029,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,99,"ssertEquals(""std err intercept"", 0.232818234301152,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,97,"Assert.assertEquals(""std err intercept"", 0.232818234301152,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,101,"ssertEquals(""r-square"", 0.999993745883712,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,99,"Assert.assertEquals(""r-square"", 0.999993745883712,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,103,"ssertEquals(""SSR"", 4255954.13232369,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,101,"Assert.assertEquals(""SSR"", 4255954.13232369,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,105,"ssertEquals(""MSE"", 0.782864662630069,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,103,"Assert.assertEquals(""MSE"", 0.782864662630069,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,107,"ssertEquals(""SSE"", 26.6173985294224,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,105,"Assert.assertEquals(""SSE"", 26.6173985294224,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,111,"ssertEquals( ""predict(0)"",  -0.262323073774029,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,109,"Assert.assertEquals( ""predict(0)"",  -0.262323073774029,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,113,"ssertEquals(""predict(1)"", 1.00211681802045 - 0.262323073774029,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,111,"Assert.assertEquals(""predict(1)"", 1.00211681802045 - 0.262323073774029,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,115,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,120,"ssertEquals(""number of observations"", 17, regression.getN());"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,121,"ssertEquals(""r-square"", .896123, regression.getRSquare(), 10E-6);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,122,"ssertEquals(""r"", -0.94663767742, regression.getR(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,119,"Assert.assertEquals(""number of observations"", 17, regression.getN());"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,120,"Assert.assertEquals(""r-square"", .896123, regression.getRSquare(), 10E-6);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,121,"Assert.assertEquals(""r"", -0.94663767742, regression.getR(), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,124,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,127,"ssertTrue(""intercept not NaN"", Double.isNaN(regression.getIntercept()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,128,"ssertTrue(""slope not NaN"", Double.isNaN(regression.getSlope()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,129,"ssertTrue(""slope std err not NaN"", Double.isNaN(regression.getSlopeStdErr()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,130,"ssertTrue(""intercept std err not NaN"", Double.isNaN(regression.getInterceptStdErr()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,131,"ssertTrue(""MSE not NaN"", Double.isNaN(regression.getMeanSquareError()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,132,"ssertTrue(""e not NaN"", Double.isNaN(regression.getR()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,133,"ssertTrue(""r-square not NaN"", Double.isNaN(regression.getRSquare()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,134,"ssertTrue( ""RSS not NaN"", Double.isNaN(regression.getRegressionSumSquares()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,135,"ssertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,136,"ssertTrue(""SSTO not NaN"", Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,137,"ssertTrue(""predict not NaN"", Double.isNaN(regression.predict(0)));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,127,"Assert.assertTrue(""intercept not NaN"", Double.isNaN(regression.getIntercept()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,128,"Assert.assertTrue(""slope not NaN"", Double.isNaN(regression.getSlope()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,129,"Assert.assertTrue(""slope std err not NaN"", Double.isNaN(regression.getSlopeStdErr()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,130,"Assert.assertTrue(""intercept std err not NaN"", Double.isNaN(regression.getInterceptStdErr()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,131,"Assert.assertTrue(""MSE not NaN"", Double.isNaN(regression.getMeanSquareError()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,132,"Assert.assertTrue(""e not NaN"", Double.isNaN(regression.getR()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,133,"Assert.assertTrue(""r-square not NaN"", Double.isNaN(regression.getRSquare()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,134,"Assert.assertTrue( ""RSS not NaN"", Double.isNaN(regression.getRegressionSumSquares()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,135,"Assert.assertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,136,"Assert.assertTrue(""SSTO not NaN"", Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,137,"Assert.assertTrue(""predict not NaN"", Double.isNaN(regression.predict(0)));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,143,"ssertTrue(""intercept not NaN"", Double.isNaN(regression.getIntercept()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,144,"ssertTrue(""slope not NaN"", Double.isNaN(regression.getSlope()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,145,"ssertTrue(""slope std err not NaN"", Double.isNaN(regression.getSlopeStdErr()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,146,"ssertTrue(""intercept std err not NaN"", Double.isNaN(regression.getInterceptStdErr()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,147,"ssertTrue(""MSE not NaN"", Double.isNaN(regression.getMeanSquareError()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,148,"ssertTrue(""e not NaN"", Double.isNaN(regression.getR()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,149,"ssertTrue(""r-square not NaN"", Double.isNaN(regression.getRSquare()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,150,"ssertTrue(""RSS not NaN"", Double.isNaN(regression.getRegressionSumSquares()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,151,"ssertTrue(""SSE not NaN"", Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,152,"ssertTrue(""predict not NaN"", Double.isNaN(regression.predict(0)));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,143,"Assert.assertTrue(""intercept not NaN"", Double.isNaN(regression.getIntercept()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,144,"Assert.assertTrue(""slope not NaN"", Double.isNaN(regression.getSlope()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,145,"Assert.assertTrue(""slope std err not NaN"", Double.isNaN(regression.getSlopeStdErr()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,146,"Assert.assertTrue(""intercept std err not NaN"", Double.isNaN(regression.getInterceptStdErr()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,147,"Assert.assertTrue(""MSE not NaN"", Double.isNaN(regression.getMeanSquareError()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,148,"Assert.assertTrue(""e not NaN"", Double.isNaN(regression.getR()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,149,"Assert.assertTrue(""r-square not NaN"", Double.isNaN(regression.getRSquare()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,150,"Assert.assertTrue(""RSS not NaN"", Double.isNaN(regression.getRegressionSumSquares()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,151,"Assert.assertTrue(""SSE not NaN"", Double.isNaN(regression.getSumSquaredErrors()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,152,"Assert.assertTrue(""predict not NaN"", Double.isNaN(regression.predict(0)));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,155,"ssertTrue(""SSTO NaN"", !Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,155,"Assert.assertTrue(""SSTO NaN"", !Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,163,"ssertTrue(""interceptNaN"", !Double.isNaN(regression.getIntercept()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,164,"ssertTrue(""slope NaN"", !Double.isNaN(regression.getSlope()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,165,"ssertTrue (""slope std err not NaN"", Double.isNaN(regression.getSlopeStdErr()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,166,"ssertTrue(""intercept std err not NaN"", Double.isNaN(regression.getInterceptStdErr()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,167,"ssertTrue(""MSE not NaN"", Double.isNaN(regression.getMeanSquareError()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,168,"ssertTrue(""r NaN"", !Double.isNaN(regression.getR()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,169,"ssertTrue(""r-square NaN"", !Double.isNaN(regression.getRSquare()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,170,"ssertTrue(""RSS NaN"", !Double.isNaN(regression.getRegressionSumSquares()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,171,"ssertTrue(""SSE NaN"", !Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,172,"ssertTrue(""SSTO NaN"", !Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,173,"ssertTrue(""predict NaN"", !Double.isNaN(regression.predict(0)));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,163,"Assert.assertTrue(""interceptNaN"", !Double.isNaN(regression.getIntercept()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,164,"Assert.assertTrue(""slope NaN"", !Double.isNaN(regression.getSlope()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,165,"Assert.assertTrue(""slope std err not NaN"", Double.isNaN(regression.getSlopeStdErr()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,166,"Assert.assertTrue(""intercept std err not NaN"", Double.isNaN(regression.getInterceptStdErr()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,167,"Assert.assertTrue(""MSE not NaN"", Double.isNaN(regression.getMeanSquareError()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,168,"Assert.assertTrue(""r NaN"", !Double.isNaN(regression.getR()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,169,"Assert.assertTrue(""r-square NaN"", !Double.isNaN(regression.getRSquare()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,170,"Assert.assertTrue(""RSS NaN"", !Double.isNaN(regression.getRegressionSumSquares()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,171,"Assert.assertTrue(""SSE NaN"", !Double.isNaN(regression.getSumSquaredErrors()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,172,"Assert.assertTrue(""SSTO NaN"", !Double.isNaN(regression.getTotalSumSquares()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,173,"Assert.assertTrue(""predict NaN"", !Double.isNaN(regression.predict(0)));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,178,"ssertTrue(""MSE NaN"", !Double.isNaN(regression.getMeanSquareError()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,179,"ssertTrue(""slope std err NaN"", !Double.isNaN(regression.getSlopeStdErr()));"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,180,"ssertTrue(""intercept std err NaN"", !Double.isNaN(regression.getInterceptStdErr()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,178,"Assert.assertTrue(""MSE NaN"", !Double.isNaN(regression.getMeanSquareError()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,179,"Assert.assertTrue(""slope std err NaN"", !Double.isNaN(regression.getSlopeStdErr()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,180,"Assert.assertTrue(""intercept std err NaN"", !Double.isNaN(regression.getInterceptStdErr()));"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,183,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,186,"ssertEquals(""number of observations"", 17, regression.getN());"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,187,"Assert.assertEquals(""number of observations"", 17, regression.getN());"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,188,"ssertEquals(""number of observations"", 0, regression.getN());"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,189,"Assert.assertEquals(""number of observations"", 0, regression.getN());"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,190,"ssertEquals(""r-square"", .896123, regression.getRSquare(), 10E-6);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,191,"Assert.assertEquals(""r-square"", .896123, regression.getRSquare(), 10E-6);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,192,"ssertEquals(""number of observations"", 53, regression.getN());"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,193,"Assert.assertEquals(""number of observations"", 53, regression.getN());"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,196,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,200,"ssertEquals(""slope std err"", 0.011448491,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,202,"Assert.assertEquals(""slope std err"", 0.011448491,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,202,"ssertEquals(""std err intercept"", 0.286036932,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,204,"Assert.assertEquals(""std err intercept"", 0.286036932,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,204,"ssertEquals(""significance"", 4.596e-07,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,206,"Assert.assertEquals(""significance"", 4.596e-07,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,206,"ssertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,208,"Assert.assertEquals(""slope conf interval half-width"", 0.0270713794287,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,211,"ssertEquals(""slope std err"", 1.07260253,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,213,"Assert.assertEquals(""slope std err"", 1.07260253,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,213,"ssertEquals(""std err intercept"",4.17718672,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,215,"Assert.assertEquals(""std err intercept"",4.17718672,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,215,"ssertEquals(""significance"", 0.261829133982,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,217,"Assert.assertEquals(""significance"", 0.261829133982,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,217,"ssertEquals(""slope conf interval half-width"", 2.97802204827,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,219,"Assert.assertEquals(""slope conf interval half-width"", 2.97802204827,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,222,"ssertTrue(""tighter means wider"","
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,224,"Assert.assertTrue(""tighter means wider"","
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,227,"ail(""expecting MathIllegalArgumentException for alpha = 1"");"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,229,"Assert.fail(""expecting MathIllegalArgumentException for alpha = 1"");"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,236,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,240,"ssertEquals(0.0, regression.getSignificance(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,241,ssertTrue(regression.getSlope() > 0.0);
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,242,ssertTrue(regression.getSumSquaredErrors() >= 0.0);
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,243,"Assert.assertEquals(0.0, regression.getSignificance(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,244,Assert.assertTrue(regression.getSlope() > 0.0);
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,245,Assert.assertTrue(regression.getSumSquaredErrors() >= 0.0);
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,248,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,252,"ssertEquals(0.0, regression.getSignificance(), 1.0e-5);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,253,ssertTrue(regression.getSlope() < 0.0);
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,256,"Assert.assertEquals(0.0, regression.getSignificance(), 1.0e-5);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,257,Assert.assertTrue(regression.getSlope() < 0.0);
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,260,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,264,ssertTrue( 0.0 < regression.getSignificance()
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,269,Assert.assertTrue( 0.0 < regression.getSignificance()
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,275,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,277,ssertTrue(reg.getSumSquaredErrors() >= 0.0);
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,283,Assert.assertTrue(reg.getSumSquaredErrors() >= 0.0);
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,287,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,288,"ssertEquals(""slope std err"", 0.011448491,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,295,"Assert.assertEquals(""slope std err"", 0.011448491,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,290,"ssertEquals(""std err intercept"", 0.286036932,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,297,"Assert.assertEquals(""std err intercept"", 0.286036932,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,292,"ssertEquals(""significance"", 4.596e-07,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,299,"Assert.assertEquals(""significance"", 4.596e-07,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,294,"ssertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,301,"Assert.assertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,307,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,307,"ssertEquals(""slope std err"", 0.011448491,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,315,"Assert.assertEquals(""slope std err"", 0.011448491,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,309,"ssertEquals(""std err intercept"", 0.286036932,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,317,"Assert.assertEquals(""std err intercept"", 0.286036932,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,311,"ssertEquals(""significance"", 4.596e-07,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,319,"Assert.assertEquals(""significance"", 4.596e-07,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,313,"ssertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,321,"Assert.assertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,326,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,325,"ssertEquals(""slope std err"", 0.011448491,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,334,"Assert.assertEquals(""slope std err"", 0.011448491,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,327,"ssertEquals(""std err intercept"", 0.286036932,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,336,"Assert.assertEquals(""std err intercept"", 0.286036932,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,329,"ssertEquals(""significance"", 4.596e-07,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,338,"Assert.assertEquals(""significance"", 4.596e-07,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,331,"ssertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,340,"Assert.assertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,345,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,339,"ssertEquals(regression.getN(), 0);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,349,"Assert.assertEquals(regression.getN(), 0);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,353,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,347,"ssertEquals(regression.getN(), 0);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,358,"Assert.assertEquals(regression.getN(), 0);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,362,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,355,"ssertEquals(regression.getN(), 0);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,367,"Assert.assertEquals(regression.getN(), 0);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,371,@Test
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,363,"ssertEquals(regression.getN(), 0);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,376,"Assert.assertEquals(regression.getN(), 0);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,21,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,24, Testcase for fast cosine transformer.
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,25,* Test case for fast cosine transformer.
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,31,ublic final class FastCosineTransformerTest extends TestCase {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,32,public final class FastCosineTransformerTest {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,37,@Test
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,47,"ssertEquals(y[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,49,"Assert.assertEquals(y[i], result[i], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,52,"ssertEquals(x[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,54,"Assert.assertEquals(x[i], result[i], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,59,"ssertEquals(x[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,61,"Assert.assertEquals(x[i], result[i], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,64,"ssertEquals(y[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,66,"Assert.assertEquals(y[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,73,@Test
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,82,"ssertEquals(expected[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,85,"Assert.assertEquals(expected[i], result[i], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,88,"ssertEquals(-expected[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,91,"Assert.assertEquals(-expected[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,98,@Test
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,102,"ail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,106,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,109,"ail(""Expecting IllegalArgumentException - bad samples number"");"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,113,"Assert.fail(""Expecting IllegalArgumentException - bad samples number"");"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,116,"ail(""Expecting IllegalArgumentException - bad samples number"");"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,120,"Assert.fail(""Expecting IllegalArgumentException - bad samples number"");"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,25, Testcase for fast Fourier transformer.
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,26,* Test case for fast Fourier transformer.
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,32,ublic final class FastFourierTransformerTest extends TestCase {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,33,public final class FastFourierTransformerTest {
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,38,@Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,54,"ssertEquals(y[i].getReal(), result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,55,"ssertEquals(y[i].getImaginary(), result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,56,"Assert.assertEquals(y[i].getReal(), result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,57,"Assert.assertEquals(y[i].getImaginary(), result[i].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,60,"ssertEquals(x[i], result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,61,"ssertEquals(0.0, result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,62,"Assert.assertEquals(x[i], result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,63,"Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,70,"ssertEquals(x2[i], result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,71,"ssertEquals(0.0, result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,72,"Assert.assertEquals(x2[i], result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,73,"Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,76,"ssertEquals(y2[i].getReal(), result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,77,"ssertEquals(y2[i].getImaginary(), result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,78,"Assert.assertEquals(y2[i].getReal(), result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,79,"Assert.assertEquals(y2[i].getImaginary(), result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,83,@Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,94,"ssertEquals(input.length, output.length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,95,"ssertEquals(input.length, output2.length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,96,"ssertEquals(input[0].length, output[0].length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,97,"ssertEquals(input[0].length, output2[0].length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,98,"ssertEquals(input[1].length, output[1].length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,99,"ssertEquals(input[1].length, output2[1].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,97,"Assert.assertEquals(input.length, output.length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,98,"Assert.assertEquals(input.length, output2.length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,99,"Assert.assertEquals(input[0].length, output[0].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,100,"Assert.assertEquals(input[0].length, output2[0].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,101,"Assert.assertEquals(input[1].length, output[1].length);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,102,"Assert.assertEquals(input[1].length, output2[1].length);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,103,"ssertEquals(input[i][j].getImaginary(), output2[i][j].getImaginary(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,106,"Assert.assertEquals(input[i][j].getImaginary(), output2[i][j].getImaginary(),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,105,"ssertEquals(input[i][j].getReal(), output2[i][j].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,106,"ssertEquals(goodOutput[i][j].getImaginary(), output[i][j].getImaginary(),"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,108,"Assert.assertEquals(input[i][j].getReal(), output2[i][j].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,109,"Assert.assertEquals(goodOutput[i][j].getImaginary(), output[i][j].getImaginary(),"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,108,"ssertEquals(goodOutput[i][j].getReal(), output[i][j].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,111,"Assert.assertEquals(goodOutput[i][j].getReal(), output[i][j].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,119,@Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,124,"ssertEquals(0.0, result[1].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,125,"ssertEquals(-(N >> 1), result[1].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,126,"ssertEquals(0.0, result[N-1].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,127,"ssertEquals(N >> 1, result[N-1].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,128,"Assert.assertEquals(0.0, result[1].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,129,"Assert.assertEquals(-(N >> 1), result[1].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,130,"Assert.assertEquals(0.0, result[N-1].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,131,"Assert.assertEquals(N >> 1, result[N-1].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,129,"ssertEquals(0.0, result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,130,"ssertEquals(0.0, result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,133,"Assert.assertEquals(0.0, result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,134,"Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,135,"ssertEquals(0.0, result[1].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,136,"ssertEquals(-0.5, result[1].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,137,"ssertEquals(0.0, result[N-1].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,138,"ssertEquals(0.5, result[N-1].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,139,"Assert.assertEquals(0.0, result[1].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,140,"Assert.assertEquals(-0.5, result[1].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,141,"Assert.assertEquals(0.0, result[N-1].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,142,"Assert.assertEquals(0.5, result[N-1].getImaginary(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,140,"ssertEquals(0.0, result[i].getReal(), tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,141,"ssertEquals(0.0, result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,144,"Assert.assertEquals(0.0, result[i].getReal(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,145,"Assert.assertEquals(0.0, result[i].getImaginary(), tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,152,@Test
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,155,"ail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,160,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,162,"ail(""Expecting IllegalArgumentException - bad samples number"");"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,167,"Assert.fail(""Expecting IllegalArgumentException - bad samples number"");"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,169,"ail(""Expecting IllegalArgumentException - bad samples number"");"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,174,"Assert.fail(""Expecting IllegalArgumentException - bad samples number"");"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,19,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,21,import org.junit.Test;
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,25,ublic final class FastHadamardTransformerTest extends TestCase {
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,28,public final class FastHadamardTransformerTest {
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,33,@Test
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,42,@Test
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,51,@Test
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,49,"ssertEquals( 0.5, x[0], 0);"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,50,"ssertEquals(-0.5, x[1], 0);"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,51,"ssertEquals( 0.0, x[2], 0);"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,52,"ssertEquals( 0.0, x[3], 0);"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,55,"Assert.assertEquals( 0.5, x[0], 0);"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,56,"Assert.assertEquals(-0.5, x[1], 0);"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,57,"Assert.assertEquals( 0.0, x[2], 0);"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,58,"Assert.assertEquals( 0.0, x[3], 0);"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,64,@Test
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,61,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,68,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,85,"ssertEquals((double) y[i], dResult[i]);"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,92,"Assert.assertTrue(MathUtils.equals((double) y[i], dResult[i], 1));"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,97,"ssertEquals(y[i], iResult[i]);"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,104,"Assert.assertEquals(y[i], iResult[i]);"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,114,"ssertEquals((double) x[i], dResult[i]);"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,121,"Assert.assertTrue(MathUtils.equals((double) x[i], dResult[i], 1));"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,21,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,24, Testcase for fast sine transformer.
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,25,* Test case for fast sine transformer.
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,31,ublic final class FastSineTransformerTest extends TestCase {
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,32,public final class FastSineTransformerTest {
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,37,@Test
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,47,"ssertEquals(y[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,49,"Assert.assertEquals(y[i], result[i], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,52,"ssertEquals(x[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,54,"Assert.assertEquals(x[i], result[i], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,59,"ssertEquals(x[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,61,"Assert.assertEquals(x[i], result[i], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,64,"ssertEquals(y[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,66,"Assert.assertEquals(y[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,73,@Test
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,78,"ssertEquals(N >> 1, result[2], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,81,"Assert.assertEquals(N >> 1, result[2], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,80,"ssertEquals(0.0, result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,83,"Assert.assertEquals(0.0, result[i], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,85,"ssertEquals(-(N >> 1), result[2], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,88,"Assert.assertEquals(-(N >> 1), result[2], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,87,"ssertEquals(0.0, result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,90,"Assert.assertEquals(0.0, result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,97,@Test
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,101,"ail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,105,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,108,"ail(""Expecting IllegalArgumentException - bad samples number"");"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,112,"Assert.fail(""Expecting IllegalArgumentException - bad samples number"");"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,115,"ail(""Expecting IllegalArgumentException - bad samples number"");"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,119,"Assert.fail(""Expecting IllegalArgumentException - bad samples number"");"
False,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,19,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,20,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,21,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,29,"ssertEquals(BigReal.ZERO, BigRealField.getInstance().getZero());"
True,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,28,"Assert.assertEquals(BigReal.ZERO, BigRealField.getInstance().getZero());"
False,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,34,"ssertEquals(BigReal.ONE, BigRealField.getInstance().getOne());"
True,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,33,"Assert.assertEquals(BigReal.ONE, BigRealField.getInstance().getOne());"
False,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,41,ssertTrue(field == TestUtils.serializeAndRecover(field));
True,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,src/test/java/org/apache/commons/math/util/BigRealFieldTest.java,40,Assert.assertTrue(field == TestUtils.serializeAndRecover(field));
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,19,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,20,mport static org.junit.Assert.assertFalse;
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,25,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,34,"ssertEquals(1.625, new BigReal(new BigDecimal(""1.625"")).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,35,"ssertEquals(-5.0, new BigReal(new BigInteger(""-5"")).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,36,"ssertEquals(-5.0, new BigReal(new BigInteger(""-5""), MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,37,"ssertEquals(0.125, new BigReal(new BigInteger(""125""), 3).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,38,"ssertEquals(0.125, new BigReal(new BigInteger(""125""), 3, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,39,"ssertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,40,"ssertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,41,"ssertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,42,"ssertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,43,"ssertEquals(1.625, new BigReal(1.625).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,44,"ssertEquals(1.625, new BigReal(1.625, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,45,"ssertEquals(-5.0, new BigReal(-5).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,46,"ssertEquals(-5.0, new BigReal(-5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,47,"ssertEquals(-5.0, new BigReal(-5l).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,48,"ssertEquals(-5.0, new BigReal(-5l, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,49,"ssertEquals(1.625, new BigReal(""1.625"").doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,50,"ssertEquals(1.625, new BigReal(""1.625"", MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,32,"Assert.assertEquals(1.625, new BigReal(new BigDecimal(""1.625"")).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,33,"Assert.assertEquals(-5.0, new BigReal(new BigInteger(""-5"")).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,34,"Assert.assertEquals(-5.0, new BigReal(new BigInteger(""-5""), MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,35,"Assert.assertEquals(0.125, new BigReal(new BigInteger(""125""), 3).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,36,"Assert.assertEquals(0.125, new BigReal(new BigInteger(""125""), 3, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,37,"Assert.assertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,38,"Assert.assertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,39,"Assert.assertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,40,"Assert.assertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,41,"Assert.assertEquals(1.625, new BigReal(1.625).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,42,"Assert.assertEquals(1.625, new BigReal(1.625, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,43,"Assert.assertEquals(-5.0, new BigReal(-5).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,44,"Assert.assertEquals(-5.0, new BigReal(-5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,45,"Assert.assertEquals(-5.0, new BigReal(-5l).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,46,"Assert.assertEquals(-5.0, new BigReal(-5l, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,47,"Assert.assertEquals(1.625, new BigReal(""1.625"").doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,48,"Assert.assertEquals(1.625, new BigReal(""1.625"", MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,59,"ssertEquals(0, first.compareTo(first));"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,60,"ssertEquals(0, first.compareTo(third));"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,61,"ssertEquals(1, first.compareTo(second));"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,62,"ssertEquals(-1, second.compareTo(first));"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,57,"Assert.assertEquals(0, first.compareTo(first));"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,58,"Assert.assertEquals(0, first.compareTo(third));"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,59,"Assert.assertEquals(1, first.compareTo(second));"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,60,"Assert.assertEquals(-1, second.compareTo(first));"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,64,@Test
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,69,"ssertEquals(9.9999999, a.add(b).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,68,"Assert.assertEquals(9.9999999, a.add(b).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,71,@Test
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,75,"ssertEquals( -7.5308643, a.subtract(b).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,75,"Assert.assertEquals( -7.5308643, a.subtract(b).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,78,@Test
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,81,"ssertEquals(1024.0, a.divide(b).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,82,"Assert.assertEquals(1024.0, a.divide(b).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,85,@Test
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,87,"ssertEquals(1.0, a.multiply(b).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,89,"Assert.assertEquals(1.0, a.multiply(b).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,92,"ssertEquals(0.5, new BigReal(0.5).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,94,"Assert.assertEquals(0.5, new BigReal(0.5).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,98,"ssertEquals(pi, new BigReal(pi).bigDecimalValue());"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,99,"ssertEquals(new BigDecimal(0.5), new BigReal(1.0 / 2.0).bigDecimalValue());"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,100,"Assert.assertEquals(pi, new BigReal(pi).bigDecimalValue());"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,101,"Assert.assertEquals(new BigDecimal(0.5), new BigReal(1.0 / 2.0).bigDecimalValue());"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,106,ssertTrue(zero.equals(zero));
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,107,ssertFalse(zero.equals(nullReal));
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,108,ssertFalse(zero.equals(Double.valueOf(0)));
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,108,Assert.assertTrue(zero.equals(zero));
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,109,Assert.assertFalse(zero.equals(nullReal));
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,110,Assert.assertFalse(zero.equals(Double.valueOf(0)));
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,110,ssertTrue(zero.equals(zero2));
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,111,"ssertEquals(zero.hashCode(), zero2.hashCode());"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,112,Assert.assertTrue(zero.equals(zero2));
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,113,"Assert.assertEquals(zero.hashCode(), zero2.hashCode());"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,113,ssertFalse((one.equals(zero) || zero.equals(one)));
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,114,ssertTrue(one.equals(BigReal.ONE));
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,115,Assert.assertFalse((one.equals(zero) || zero.equals(one)));
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,116,Assert.assertTrue(one.equals(BigReal.ONE));
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,119,@Test
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,124,"ssertEquals(Real, TestUtils.serializeAndRecover(Real));"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,127,"Assert.assertEquals(Real, TestUtils.serializeAndRecover(Real));"
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,19,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,20,import org.junit.Test;
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,24,ublic class ContinuedFractionTest extends TestCase {
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,26, Constructor for ContinuedFractionTest.
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,27, @param name
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,29,ublic ContinuedFractionTest(String name) {
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,30,uper(name);
True,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,26,public class ContinuedFractionTest {
True,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,28,@Test
False,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,48,"ssertEquals(1.61803399, gr, 10e-9);"
True,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/java/org/apache/commons/math/util/ContinuedFractionTest.java,44,"Assert.assertEquals(1.61803399, gr, 10e-9);"
False,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,27,import org.junit.Test;
False,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,31,ublic class DefaultTransformerTest extends TestCase {
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,32,public class DefaultTransformerTest {
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,36,@Test
False,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,39,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,41,"Assert.assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,47,@Test
False,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,49,"ail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,52,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,61,@Test
False,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,62,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,66,"Assert.assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,72,@Test
False,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,72,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,77,"Assert.assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,83,@Test
False,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,82,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,88,"Assert.assertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,94,@Test
False,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,93,"ail(""Expecting MathException"");"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,100,"Assert.fail(""Expecting MathException"");"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,106,@Test
False,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,100,"ssertEquals(new DefaultTransformer(), TestUtils.serializeAndRecover(new DefaultTransformer()));"
True,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/java/org/apache/commons/math/util/DefaultTransformerTest.java,108,"Assert.assertEquals(new DefaultTransformer(), TestUtils.serializeAndRecover(new DefaultTransformer()));"
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,21,import org.junit.Test;
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,21,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,28,ublic abstract class DoubleArrayAbstractTest extends TestCase {
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,29,public abstract class DoubleArrayAbstractTest {
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,35,ublic DoubleArrayAbstractTest(String name) {
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,36,uper(name);
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,36,@Test
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,45,ssertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,43,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,50,ssertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,48,Assert.assertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,56,@Test
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,67,ssertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,66,Assert.assertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,77,@Test
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,87,ssertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,87,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,91,ssertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,91,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,96,ssertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,96,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,106,ssertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,106,Assert.assertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,112,@Test
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,124,"ssertEquals(""Min should be -2.0"", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,125,ssertEquals(
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,125,"Assert.assertEquals(""Min should be -2.0"", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/java/org/apache/commons/math/util/DoubleArrayAbstractTest.java,126,Assert.assertEquals(
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,23,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,33,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,34,import org.junit.Test;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,40,ublic final class MathUtilsTest extends TestCase {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,42,ublic MathUtilsTest(String name) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,43,uper(name);
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,41,public final class MathUtilsTest {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,94,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,98,"ssertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,99,"ssertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,100,"ssertEquals(MathUtils.binomialCoefficient(0, 0), 1);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,96,"Assert.assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,97,"Assert.assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,98,"Assert.assertEquals(MathUtils.binomialCoefficient(0, 0), 1);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,101,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,106,"ssertEquals(big, MathUtils.addAndCheck(big, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,105,"Assert.assertEquals(big, MathUtils.addAndCheck(big, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,109,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,108,"Assert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,114,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,113,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,118,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,122,"ssertEquals(max, MathUtils.addAndCheck(max, 0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,123,"ssertEquals(min, MathUtils.addAndCheck(min, 0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,124,"ssertEquals(max, MathUtils.addAndCheck(0L, max));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,125,"ssertEquals(min, MathUtils.addAndCheck(0L, min));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,126,"ssertEquals(1, MathUtils.addAndCheck(-1L, 2L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,127,"ssertEquals(1, MathUtils.addAndCheck(2L, -1L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,128,"ssertEquals(-3, MathUtils.addAndCheck(-2L, -1L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,129,"ssertEquals(min, MathUtils.addAndCheck(min + 1, -1L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,122,"Assert.assertEquals(max, MathUtils.addAndCheck(max, 0L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,123,"Assert.assertEquals(min, MathUtils.addAndCheck(min, 0L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,124,"Assert.assertEquals(max, MathUtils.addAndCheck(0L, max));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,125,"Assert.assertEquals(min, MathUtils.addAndCheck(0L, min));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,126,"Assert.assertEquals(1, MathUtils.addAndCheck(-1L, 2L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,127,"Assert.assertEquals(1, MathUtils.addAndCheck(2L, -1L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,128,"Assert.assertEquals(-3, MathUtils.addAndCheck(-2L, -1L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,129,"Assert.assertEquals(min, MathUtils.addAndCheck(min + 1, -1L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,139,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,139,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,145,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,162,"ssertEquals(""5 choose "" + i, bcoef5[i], MathUtils.binomialCoefficient(5, i));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,163,"Assert.assertEquals(""5 choose "" + i, bcoef5[i], MathUtils.binomialCoefficient(5, i));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,165,"ssertEquals(""6 choose "" + i, bcoef6[i], MathUtils.binomialCoefficient(6, i));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,166,"Assert.assertEquals(""6 choose "" + i, bcoef6[i], MathUtils.binomialCoefficient(6, i));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,170,"ssertEquals(n + "" choose "" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficient(n, k));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,171,"ssertEquals(n + "" choose "" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,172,"ssertEquals(n + "" choose "" + k, FastMath.log(binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,171,"Assert.assertEquals(n + "" choose "" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficient(n, k));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,172,"Assert.assertEquals(n + "" choose "" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,173,"Assert.assertEquals(n + "" choose "" + k, FastMath.log(binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,180,"ssertEquals(n[i] + "" choose "" + k[i], expected,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,181,"Assert.assertEquals(n[i] + "" choose "" + k[i], expected,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,182,"ssertEquals(n[i] + "" choose "" + k[i], expected,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,183,"Assert.assertEquals(n[i] + "" choose "" + k[i], expected,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,184,"ssertEquals(""log("" + n[i] + "" choose "" + k[i] + "")"", FastMath.log(expected),"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,185,"Assert.assertEquals(""log("" + n[i] + "" choose "" + k[i] + "")"", FastMath.log(expected),"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,194,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,211,"ssertEquals(n + "" choose "" + k, exactResult, ourResult);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,212,"ssertEquals(n + "" choose "" + k, shouldThrow, didThrow);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,213,"ssertTrue(n + "" choose "" + k, (n > 66 || !didThrow));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,213,"Assert.assertEquals(n + "" choose "" + k, exactResult, ourResult);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,214,"Assert.assertEquals(n + "" choose "" + k, shouldThrow, didThrow);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,215,"Assert.assertTrue(n + "" choose "" + k, (n > 66 || !didThrow));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,216,"ssertEquals(n + "" choose "" + k, 1.,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,218,"Assert.assertEquals(n + "" choose "" + k, 1.,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,218,"ssertEquals(n + "" choose "" + k, 1,"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,220,"Assert.assertEquals(n + "" choose "" + k, 1,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,226,"ssertEquals(exactResult, ourResult);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,228,"Assert.assertEquals(exactResult, ourResult);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,230,"ssertEquals(exactResult, ourResult);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,232,"Assert.assertEquals(exactResult, ourResult);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,235,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,237,"Assert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,243,"ssertEquals(exactResult, ourResult);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,244,"ssertEquals(1, MathUtils.binomialCoefficientDouble(n, 3) / exactResult, 1e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,245,"ssertEquals(1, MathUtils.binomialCoefficientLog(n, 3) / FastMath.log(exactResult), 1e-10);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,245,"Assert.assertEquals(exactResult, ourResult);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,246,"Assert.assertEquals(1, MathUtils.binomialCoefficientDouble(n, 3) / exactResult, 1e-10);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,247,"Assert.assertEquals(1, MathUtils.binomialCoefficientLog(n, 3) / FastMath.log(exactResult), 1e-10);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,251,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,252,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,255,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,259,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,262,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,266,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,269,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,273,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,276,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,279,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,282,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,285,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,288,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,292,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,295,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,298,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,301,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,303,"ssertTrue(""expecting infinite binomial coefficient"", Double"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,306,"Assert.assertTrue(""expecting infinite binomial coefficient"", Double"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,310,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,308,"ssertEquals(0, MathUtils.compareTo(152.33, 152.32, .011));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,309,"ssertTrue(MathUtils.compareTo(152.308, 152.32, .011) < 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,310,"ssertTrue(MathUtils.compareTo(152.33, 152.318, .011) > 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,312,"Assert.assertEquals(0, MathUtils.compareTo(152.33, 152.32, .011));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,313,"Assert.assertTrue(MathUtils.compareTo(152.308, 152.32, .011) < 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,314,"Assert.assertTrue(MathUtils.compareTo(152.33, 152.318, .011) > 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,317,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,316,"ssertEquals(expected, MathUtils.cosh(x), 1.0e-5);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,321,"Assert.assertEquals(expected, MathUtils.cosh(x), 1.0e-5);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,324,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,320,ssertTrue(Double.isNaN(MathUtils.cosh(Double.NaN)));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,326,Assert.assertTrue(Double.isNaN(MathUtils.cosh(Double.NaN)));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,329,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,333,"ssertTrue(MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,334,"ssertTrue(MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,340,"Assert.assertTrue(MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,341,"Assert.assertTrue(MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,336,"ssertTrue(!MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,337,"ssertTrue(!MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,343,"Assert.assertTrue(!MathUtils.equalsIncludingNaN(testArray[i], testArray[j]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,344,"Assert.assertTrue(!MathUtils.equalsIncludingNaN(testArray[j], testArray[i]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,350,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,344,"ssertTrue(MathUtils.equals(153.0000, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,345,"ssertTrue(MathUtils.equals(153.0000, 153.0625, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,346,"ssertTrue(MathUtils.equals(152.9375, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,347,"ssertFalse(MathUtils.equals(153.0000, 153.0625, .0624));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,348,"ssertFalse(MathUtils.equals(152.9374, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,349,"ssertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,350,"ssertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,351,"ssertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,352,"ssertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,352,"Assert.assertTrue(MathUtils.equals(153.0000, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,353,"Assert.assertTrue(MathUtils.equals(153.0000, 153.0625, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,354,"Assert.assertTrue(MathUtils.equals(152.9375, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,355,"Assert.assertFalse(MathUtils.equals(153.0000, 153.0625, .0624));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,356,"Assert.assertFalse(MathUtils.equals(152.9374, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,357,"Assert.assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,358,"Assert.assertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,359,"Assert.assertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,360,"Assert.assertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,363,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,363,"ssertTrue(MathUtils.equals(a, b, 0.5 * diff));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,372,"Assert.assertTrue(MathUtils.equals(a, b, 0.5 * diff));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,369,"ssertTrue(MathUtils.equals(a, c, diff));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,370,"ssertFalse(MathUtils.equals(a, c, (1 - 1e-16) * diff));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,378,"Assert.assertTrue(MathUtils.equals(a, c, diff));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,379,"Assert.assertFalse(MathUtils.equals(a, c, (1 - 1e-16) * diff));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,382,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,374,"ssertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,375,"ssertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,376,"ssertTrue(MathUtils.equalsIncludingNaN(152.9375, 153.0000, .0625));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,377,"ssertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,378,"ssertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,379,"ssertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,380,"ssertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,381,"ssertFalse(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0624));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,382,"ssertFalse(MathUtils.equalsIncludingNaN(152.9374, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,384,"Assert.assertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,385,"Assert.assertTrue(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,386,"Assert.assertTrue(MathUtils.equalsIncludingNaN(152.9375, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,387,"Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,388,"Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,389,"Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,390,"Assert.assertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,391,"Assert.assertFalse(MathUtils.equalsIncludingNaN(153.0000, 153.0625, .0624));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,392,"Assert.assertFalse(MathUtils.equalsIncludingNaN(152.9374, 153.0000, .0625));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,396,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,387,"ssertTrue(""+0.0f == -0.0f"",MathUtils.equals(0.0f, -0.0f));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,388,"ssertTrue(""+0.0f == -0.0f (1 ulp)"",MathUtils.equals(0.0f, -0.0f, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,398,"Assert.assertTrue(""+0.0f == -0.0f"",MathUtils.equals(0.0f, -0.0f));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,399,"Assert.assertTrue(""+0.0f == -0.0f (1 ulp)"",MathUtils.equals(0.0f, -0.0f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,390,"ssertTrue(""1.0f == 1.0f + 1 ulp"",MathUtils.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat))));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,391,"ssertTrue(""1.0f == 1.0f + 1 ulp (1 ulp)"",MathUtils.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat)), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,392,"ssertFalse(""1.0f != 1.0f + 2 ulp (1 ulp)"",MathUtils.equals(oneFloat, Float.intBitsToFloat(2 + Float.floatToIntBits(oneFloat)), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,401,"Assert.assertTrue(""1.0f == 1.0f + 1 ulp"",MathUtils.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat))));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,402,"Assert.assertTrue(""1.0f == 1.0f + 1 ulp (1 ulp)"",MathUtils.equals(oneFloat, Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat)), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,403,"Assert.assertFalse(""1.0f != 1.0f + 2 ulp (1 ulp)"",MathUtils.equals(oneFloat, Float.intBitsToFloat(2 + Float.floatToIntBits(oneFloat)), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,394,"ssertTrue(MathUtils.equals(153.0f, 153.0f, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,405,"Assert.assertTrue(MathUtils.equals(153.0f, 153.0f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,397,"/        assertTrue(MathUtils.equals(153.0f, 153.00000000000003f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,398,"/        assertFalse(MathUtils.equals(153.0f, 153.00000000000006f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,399,"/        assertTrue(MathUtils.equals(153.0f, 152.99999999999997f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,400,"/        assertFalse(MathUtils.equals(153f, 152.99999999999994f, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,408,"//        Assert.assertTrue(MathUtils.equals(153.0f, 153.00000000000003f, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,409,"//        Assert.assertFalse(MathUtils.equals(153.0f, 153.00000000000006f, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,410,"//        Assert.assertTrue(MathUtils.equals(153.0f, 152.99999999999997f, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,411,"//        Assert.assertFalse(MathUtils.equals(153f, 152.99999999999994f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,402,"/        assertTrue(MathUtils.equals(-128.0f, -127.99999999999999f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,403,"/        assertFalse(MathUtils.equals(-128.0f, -127.99999999999997f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,404,"/        assertTrue(MathUtils.equals(-128.0f, -128.00000000000003f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,405,"/        assertFalse(MathUtils.equals(-128.0f, -128.00000000000006f, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,413,"//        Assert.assertTrue(MathUtils.equals(-128.0f, -127.99999999999999f, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,414,"//        Assert.assertFalse(MathUtils.equals(-128.0f, -127.99999999999997f, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,415,"//        Assert.assertTrue(MathUtils.equals(-128.0f, -128.00000000000003f, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,416,"//        Assert.assertFalse(MathUtils.equals(-128.0f, -128.00000000000006f, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,407,"ssertTrue(MathUtils.equals(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,408,"ssertTrue(MathUtils.equals(Double.MAX_VALUE, Float.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,418,"Assert.assertTrue(MathUtils.equals(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,419,"Assert.assertTrue(MathUtils.equals(Double.MAX_VALUE, Float.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,410,"ssertTrue(MathUtils.equals(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,411,"ssertTrue(MathUtils.equals(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,421,"Assert.assertTrue(MathUtils.equals(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,422,"Assert.assertTrue(MathUtils.equals(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,413,"ssertFalse(MathUtils.equals(Float.NaN, Float.NaN, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,424,"Assert.assertFalse(MathUtils.equals(Float.NaN, Float.NaN, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,415,"ssertFalse(MathUtils.equals(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, 100000));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,426,"Assert.assertFalse(MathUtils.equals(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, 100000));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,429,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,419,"ssertTrue(MathUtils.equals(0.0, -0.0, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,431,"Assert.assertTrue(MathUtils.equals(0.0, -0.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,421,"ssertTrue(MathUtils.equals(1.0, 1 + FastMath.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,422,"ssertFalse(MathUtils.equals(1.0, 1 + 2 * FastMath.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,433,"Assert.assertTrue(MathUtils.equals(1.0, 1 + FastMath.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,434,"Assert.assertFalse(MathUtils.equals(1.0, 1 + 2 * FastMath.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,426,"ssertTrue(MathUtils.equals(1.0, nUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,427,"ssertTrue(MathUtils.equals(nUp1, nnUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,428,"ssertFalse(MathUtils.equals(1.0, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,438,"Assert.assertTrue(MathUtils.equals(1.0, nUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,439,"Assert.assertTrue(MathUtils.equals(nUp1, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,440,"Assert.assertFalse(MathUtils.equals(1.0, nnUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,430,"ssertTrue(MathUtils.equals(0.0, FastMath.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,431,"ssertTrue(MathUtils.equals(0.0, -FastMath.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,442,"Assert.assertTrue(MathUtils.equals(0.0, FastMath.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,443,"Assert.assertTrue(MathUtils.equals(0.0, -FastMath.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,433,"ssertTrue(MathUtils.equals(153.0, 153.0, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,445,"Assert.assertTrue(MathUtils.equals(153.0, 153.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,435,"ssertTrue(MathUtils.equals(153.0, 153.00000000000003, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,436,"ssertFalse(MathUtils.equals(153.0, 153.00000000000006, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,437,"ssertTrue(MathUtils.equals(153.0, 152.99999999999997, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,438,"ssertFalse(MathUtils.equals(153, 152.99999999999994, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,447,"Assert.assertTrue(MathUtils.equals(153.0, 153.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,448,"Assert.assertFalse(MathUtils.equals(153.0, 153.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,449,"Assert.assertTrue(MathUtils.equals(153.0, 152.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,450,"Assert.assertFalse(MathUtils.equals(153, 152.99999999999994, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,440,"ssertTrue(MathUtils.equals(-128.0, -127.99999999999999, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,441,"ssertFalse(MathUtils.equals(-128.0, -127.99999999999997, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,442,"ssertTrue(MathUtils.equals(-128.0, -128.00000000000003, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,443,"ssertFalse(MathUtils.equals(-128.0, -128.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,452,"Assert.assertTrue(MathUtils.equals(-128.0, -127.99999999999999, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,453,"Assert.assertFalse(MathUtils.equals(-128.0, -127.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,454,"Assert.assertTrue(MathUtils.equals(-128.0, -128.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,455,"Assert.assertFalse(MathUtils.equals(-128.0, -128.00000000000006, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,445,"ssertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,446,"ssertTrue(MathUtils.equals(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,457,"Assert.assertTrue(MathUtils.equals(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,458,"Assert.assertTrue(MathUtils.equals(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,448,"ssertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,449,"ssertTrue(MathUtils.equals(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,460,"Assert.assertTrue(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,461,"Assert.assertTrue(MathUtils.equals(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,451,"ssertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,463,"Assert.assertFalse(MathUtils.equals(Double.NaN, Double.NaN, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,453,"ssertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,465,"Assert.assertFalse(MathUtils.equals(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,468,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,457,"ssertTrue(MathUtils.equalsIncludingNaN(0.0, -0.0, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,470,"Assert.assertTrue(MathUtils.equalsIncludingNaN(0.0, -0.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,459,"ssertTrue(MathUtils.equalsIncludingNaN(1.0, 1 + FastMath.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,460,"ssertFalse(MathUtils.equalsIncludingNaN(1.0, 1 + 2 * FastMath.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,472,"Assert.assertTrue(MathUtils.equalsIncludingNaN(1.0, 1 + FastMath.ulp(1d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,473,"Assert.assertFalse(MathUtils.equalsIncludingNaN(1.0, 1 + 2 * FastMath.ulp(1d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,464,"ssertTrue(MathUtils.equalsIncludingNaN(1.0, nUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,465,"ssertTrue(MathUtils.equalsIncludingNaN(nUp1, nnUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,466,"ssertFalse(MathUtils.equalsIncludingNaN(1.0, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,477,"Assert.assertTrue(MathUtils.equalsIncludingNaN(1.0, nUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,478,"Assert.assertTrue(MathUtils.equalsIncludingNaN(nUp1, nnUp1, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,479,"Assert.assertFalse(MathUtils.equalsIncludingNaN(1.0, nnUp1, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,468,"ssertTrue(MathUtils.equalsIncludingNaN(0.0, FastMath.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,469,"ssertTrue(MathUtils.equalsIncludingNaN(0.0, -FastMath.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,481,"Assert.assertTrue(MathUtils.equalsIncludingNaN(0.0, FastMath.ulp(0d), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,482,"Assert.assertTrue(MathUtils.equalsIncludingNaN(0.0, -FastMath.ulp(0d), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,471,"ssertTrue(MathUtils.equalsIncludingNaN(153.0, 153.0, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,484,"Assert.assertTrue(MathUtils.equalsIncludingNaN(153.0, 153.0, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,473,"ssertTrue(MathUtils.equalsIncludingNaN(153.0, 153.00000000000003, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,474,"ssertFalse(MathUtils.equalsIncludingNaN(153.0, 153.00000000000006, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,475,"ssertTrue(MathUtils.equalsIncludingNaN(153.0, 152.99999999999997, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,476,"ssertFalse(MathUtils.equalsIncludingNaN(153, 152.99999999999994, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,486,"Assert.assertTrue(MathUtils.equalsIncludingNaN(153.0, 153.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,487,"Assert.assertFalse(MathUtils.equalsIncludingNaN(153.0, 153.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,488,"Assert.assertTrue(MathUtils.equalsIncludingNaN(153.0, 152.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,489,"Assert.assertFalse(MathUtils.equalsIncludingNaN(153, 152.99999999999994, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,478,"ssertTrue(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999999, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,479,"ssertFalse(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999997, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,480,"ssertTrue(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000003, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,481,"ssertFalse(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000006, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,491,"Assert.assertTrue(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999999, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,492,"Assert.assertFalse(MathUtils.equalsIncludingNaN(-128.0, -127.99999999999997, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,493,"Assert.assertTrue(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000003, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,494,"Assert.assertFalse(MathUtils.equalsIncludingNaN(-128.0, -128.00000000000006, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,483,"ssertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,484,"ssertTrue(MathUtils.equalsIncludingNaN(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,496,"Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,497,"Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.MAX_VALUE, Double.POSITIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,486,"ssertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,487,"ssertTrue(MathUtils.equalsIncludingNaN(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,499,"Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,500,"Assert.assertTrue(MathUtils.equalsIncludingNaN(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,489,"ssertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,502,"Assert.assertTrue(MathUtils.equalsIncludingNaN(Double.NaN, Double.NaN, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,491,"ssertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,504,"Assert.assertFalse(MathUtils.equalsIncludingNaN(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 100000));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,507,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,495,"ssertFalse(MathUtils.equals(new double[] { 1d }, null));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,496,"ssertFalse(MathUtils.equals(null, new double[] { 1d }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,497,"ssertTrue(MathUtils.equals((double[]) null, (double[]) null));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,509,"Assert.assertFalse(MathUtils.equals(new double[] { 1d }, null));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,510,"Assert.assertFalse(MathUtils.equals(null, new double[] { 1d }));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,511,"Assert.assertTrue(MathUtils.equals((double[]) null, (double[]) null));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,499,"ssertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,500,"ssertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,501,ssertTrue(MathUtils.equals(new double[] {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,513,"Assert.assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,514,"Assert.assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,515,Assert.assertTrue(MathUtils.equals(new double[] {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,508,"ssertFalse(MathUtils.equals(new double[] { Double.NaN },"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,522,"Assert.assertFalse(MathUtils.equals(new double[] { Double.NaN },"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,510,"ssertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,524,"Assert.assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,512,"ssertFalse(MathUtils.equals(new double[] { 1d },"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,526,"Assert.assertFalse(MathUtils.equals(new double[] { 1d },"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,531,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,518,"ssertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, null));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,519,"ssertFalse(MathUtils.equalsIncludingNaN(null, new double[] { 1d }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,520,"ssertTrue(MathUtils.equalsIncludingNaN((double[]) null, (double[]) null));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,533,"Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, null));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,534,"Assert.assertFalse(MathUtils.equalsIncludingNaN(null, new double[] { 1d }));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,535,"Assert.assertTrue(MathUtils.equalsIncludingNaN((double[]) null, (double[]) null));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,522,"ssertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[0]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,523,"ssertTrue(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,524,ssertTrue(MathUtils.equalsIncludingNaN(new double[] {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,537,"Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[0]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,538,"Assert.assertTrue(MathUtils.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,539,Assert.assertTrue(MathUtils.equalsIncludingNaN(new double[] {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,531,"ssertFalse(MathUtils.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,546,"Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,533,"ssertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d },"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,548,"Assert.assertFalse(MathUtils.equalsIncludingNaN(new double[] { 1d },"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,552,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,539,"ssertEquals(i + ""! "", factorial(i), MathUtils.factorial(i));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,540,"ssertEquals(i + ""! "", factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,541,"ssertEquals(i + ""! "", FastMath.log(factorial(i)), MathUtils.factorialLog(i), 10E-12);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,555,"Assert.assertEquals(i + ""! "", factorial(i), MathUtils.factorial(i));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,556,"Assert.assertEquals(i + ""! "", factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,557,"Assert.assertEquals(i + ""! "", FastMath.log(factorial(i)), MathUtils.factorialLog(i), 10E-12);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,544,"ssertEquals(""0"", 1, MathUtils.factorial(0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,545,"ssertEquals(""0"", 1.0d, MathUtils.factorialDouble(0), 1E-14);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,546,"ssertEquals(""0"", 0.0d, MathUtils.factorialLog(0), 1E-14);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,560,"Assert.assertEquals(""0"", 1, MathUtils.factorial(0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,561,"Assert.assertEquals(""0"", 1.0d, MathUtils.factorialDouble(0), 1E-14);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,562,"Assert.assertEquals(""0"", 0.0d, MathUtils.factorialLog(0), 1E-14);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,565,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,552,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,569,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,558,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,575,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,564,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,581,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,570,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,587,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,574,"ssertTrue(""expecting infinite factorial value"", Double.isInfinite(MathUtils.factorialDouble(171)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,591,"Assert.assertTrue(""expecting infinite factorial value"", Double.isInfinite(MathUtils.factorialDouble(171)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,594,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,582,"ssertEquals(0, MathUtils.gcd(0, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,600,"Assert.assertEquals(0, MathUtils.gcd(0, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,584,"ssertEquals(b, MathUtils.gcd(0, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,585,"ssertEquals(a, MathUtils.gcd(a, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,586,"ssertEquals(b, MathUtils.gcd(0, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,587,"ssertEquals(a, MathUtils.gcd(-a, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,602,"Assert.assertEquals(b, MathUtils.gcd(0, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,603,"Assert.assertEquals(a, MathUtils.gcd(a, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,604,"Assert.assertEquals(b, MathUtils.gcd(0, -b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,605,"Assert.assertEquals(a, MathUtils.gcd(-a, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,589,"ssertEquals(10, MathUtils.gcd(a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,590,"ssertEquals(10, MathUtils.gcd(-a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,591,"ssertEquals(10, MathUtils.gcd(a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,592,"ssertEquals(10, MathUtils.gcd(-a, -b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,607,"Assert.assertEquals(10, MathUtils.gcd(a, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,608,"Assert.assertEquals(10, MathUtils.gcd(-a, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,609,"Assert.assertEquals(10, MathUtils.gcd(a, -b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,610,"Assert.assertEquals(10, MathUtils.gcd(-a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,594,"ssertEquals(1, MathUtils.gcd(a, c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,595,"ssertEquals(1, MathUtils.gcd(-a, c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,596,"ssertEquals(1, MathUtils.gcd(a, -c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,597,"ssertEquals(1, MathUtils.gcd(-a, -c));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,612,"Assert.assertEquals(1, MathUtils.gcd(a, c));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,613,"Assert.assertEquals(1, MathUtils.gcd(-a, c));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,614,"Assert.assertEquals(1, MathUtils.gcd(a, -c));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,615,"Assert.assertEquals(1, MathUtils.gcd(-a, -c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,599,"ssertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,617,"Assert.assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,601,"ssertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,602,"ssertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,603,"ssertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,619,"Assert.assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,620,"Assert.assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,621,"Assert.assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,607,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,625,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,614,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,632,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,621,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,639,"Assert.fail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,645,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,632,"ssertEquals(0, MathUtils.gcd(0L, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,651,"Assert.assertEquals(0, MathUtils.gcd(0L, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,634,"ssertEquals(b, MathUtils.gcd(0, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,635,"ssertEquals(a, MathUtils.gcd(a, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,636,"ssertEquals(b, MathUtils.gcd(0, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,637,"ssertEquals(a, MathUtils.gcd(-a, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,653,"Assert.assertEquals(b, MathUtils.gcd(0, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,654,"Assert.assertEquals(a, MathUtils.gcd(a, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,655,"Assert.assertEquals(b, MathUtils.gcd(0, -b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,656,"Assert.assertEquals(a, MathUtils.gcd(-a, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,639,"ssertEquals(10, MathUtils.gcd(a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,640,"ssertEquals(10, MathUtils.gcd(-a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,641,"ssertEquals(10, MathUtils.gcd(a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,642,"ssertEquals(10, MathUtils.gcd(-a, -b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,658,"Assert.assertEquals(10, MathUtils.gcd(a, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,659,"Assert.assertEquals(10, MathUtils.gcd(-a, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,660,"Assert.assertEquals(10, MathUtils.gcd(a, -b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,661,"Assert.assertEquals(10, MathUtils.gcd(-a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,644,"ssertEquals(1, MathUtils.gcd(a, c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,645,"ssertEquals(1, MathUtils.gcd(-a, c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,646,"ssertEquals(1, MathUtils.gcd(a, -c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,647,"ssertEquals(1, MathUtils.gcd(-a, -c));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,663,"Assert.assertEquals(1, MathUtils.gcd(a, c));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,664,"Assert.assertEquals(1, MathUtils.gcd(-a, c));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,665,"Assert.assertEquals(1, MathUtils.gcd(a, -c));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,666,"Assert.assertEquals(1, MathUtils.gcd(-a, -c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,649,"ssertEquals(3L * (1L<<45), MathUtils.gcd(3L * (1L<<50), 9L * (1L<<45)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,668,"Assert.assertEquals(3L * (1L<<45), MathUtils.gcd(3L * (1L<<50), 9L * (1L<<45)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,651,"ssertEquals(1L<<45, MathUtils.gcd(1L<<45, Long.MIN_VALUE));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,670,"Assert.assertEquals(1L<<45, MathUtils.gcd(1L<<45, Long.MIN_VALUE));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,653,"ssertEquals(Long.MAX_VALUE, MathUtils.gcd(Long.MAX_VALUE, 0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,654,"ssertEquals(Long.MAX_VALUE, MathUtils.gcd(-Long.MAX_VALUE, 0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,655,"ssertEquals(1, MathUtils.gcd(60247241209L, 153092023L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,672,"Assert.assertEquals(Long.MAX_VALUE, MathUtils.gcd(Long.MAX_VALUE, 0L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,673,"Assert.assertEquals(Long.MAX_VALUE, MathUtils.gcd(-Long.MAX_VALUE, 0L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,674,"Assert.assertEquals(1, MathUtils.gcd(60247241209L, 153092023L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,659,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,678,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,666,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,685,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,673,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,692,"Assert.fail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,698,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,695,"ssertEquals(gcd, MathUtils.gcd(i1, i2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,715,"Assert.assertEquals(gcd, MathUtils.gcd(i1, i2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,698,"ssertEquals(gcd, MathUtils.gcd(l1, l2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,718,"Assert.assertEquals(gcd, MathUtils.gcd(l1, l2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,722,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,716,"ssertEquals(MathUtils.hash(testArray[i]), MathUtils.hash(testArray[j]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,717,"ssertEquals(MathUtils.hash(testArray[j]), MathUtils.hash(testArray[i]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,737,"Assert.assertEquals(MathUtils.hash(testArray[i]), MathUtils.hash(testArray[j]));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,738,"Assert.assertEquals(MathUtils.hash(testArray[j]), MathUtils.hash(testArray[i]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,719,ssertTrue(MathUtils.hash(testArray[i]) != MathUtils.hash(testArray[j]));
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,720,ssertTrue(MathUtils.hash(testArray[j]) != MathUtils.hash(testArray[i]));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,740,Assert.assertTrue(MathUtils.hash(testArray[i]) != MathUtils.hash(testArray[j]));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,741,Assert.assertTrue(MathUtils.hash(testArray[j]) != MathUtils.hash(testArray[i]));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,747,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,727,"ssertEquals(0, MathUtils.hash((double[]) null));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,728,ssertEquals(MathUtils.hash(new double[] {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,749,"Assert.assertEquals(0, MathUtils.hash((double[]) null));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,750,Assert.assertEquals(MathUtils.hash(new double[] {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,736,ssertFalse(MathUtils.hash(new double[] { 1d }) ==
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,758,Assert.assertFalse(MathUtils.hash(new double[] { 1d }) ==
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,738,ssertFalse(MathUtils.hash(new double[] { 1d }) ==
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,760,Assert.assertFalse(MathUtils.hash(new double[] { 1d }) ==
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,767,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,768,ssertFalse(MathUtils.hash(original) == MathUtils.hash(permuted));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,791,Assert.assertFalse(MathUtils.hash(original) == MathUtils.hash(permuted));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,794,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,772,"ssertEquals((byte)1, MathUtils.indicator((byte)2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,773,"ssertEquals((byte)1, MathUtils.indicator((byte)0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,774,"ssertEquals((byte)(-1), MathUtils.indicator((byte)(-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,796,"Assert.assertEquals((byte)1, MathUtils.indicator((byte)2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,797,"Assert.assertEquals((byte)1, MathUtils.indicator((byte)0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,798,"Assert.assertEquals((byte)(-1), MathUtils.indicator((byte)(-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,801,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,779,"ssertEquals(1.0, MathUtils.indicator(2.0), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,780,"ssertEquals(1.0, MathUtils.indicator(0.0), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,781,"ssertEquals(-1.0, MathUtils.indicator(-2.0), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,782,"ssertEquals(Double.NaN, MathUtils.indicator(Double.NaN));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,804,"Assert.assertEquals(1.0, MathUtils.indicator(2.0), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,805,"Assert.assertEquals(1.0, MathUtils.indicator(0.0), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,806,"Assert.assertEquals(-1.0, MathUtils.indicator(-2.0), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,807,Assert.assertTrue(Double.isNaN(MathUtils.indicator(Double.NaN)));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,810,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,787,"ssertEquals(1.0F, MathUtils.indicator(2.0F), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,788,"ssertEquals(1.0F, MathUtils.indicator(0.0F), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,789,"ssertEquals(-1.0F, MathUtils.indicator(-2.0F), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,813,"Assert.assertEquals(1.0F, MathUtils.indicator(2.0F), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,814,"Assert.assertEquals(1.0F, MathUtils.indicator(0.0F), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,815,"Assert.assertEquals(-1.0F, MathUtils.indicator(-2.0F), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,818,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,793,"ssertEquals(1, MathUtils.indicator((2)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,794,"ssertEquals(1, MathUtils.indicator((0)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,795,"ssertEquals((-1), MathUtils.indicator((-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,820,"Assert.assertEquals(1, MathUtils.indicator((2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,821,"Assert.assertEquals(1, MathUtils.indicator((0)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,822,"Assert.assertEquals((-1), MathUtils.indicator((-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,825,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,799,"ssertEquals(1L, MathUtils.indicator(2L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,800,"ssertEquals(1L, MathUtils.indicator(0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,801,"ssertEquals(-1L, MathUtils.indicator(-2L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,827,"Assert.assertEquals(1L, MathUtils.indicator(2L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,828,"Assert.assertEquals(1L, MathUtils.indicator(0L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,829,"Assert.assertEquals(-1L, MathUtils.indicator(-2L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,832,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,805,"ssertEquals((short)1, MathUtils.indicator((short)2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,806,"ssertEquals((short)1, MathUtils.indicator((short)0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,807,"ssertEquals((short)(-1), MathUtils.indicator((short)(-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,834,"Assert.assertEquals((short)1, MathUtils.indicator((short)2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,835,"Assert.assertEquals((short)1, MathUtils.indicator((short)0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,836,"Assert.assertEquals((short)(-1), MathUtils.indicator((short)(-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,839,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,815,"ssertEquals(0, MathUtils.lcm(0, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,816,"ssertEquals(0, MathUtils.lcm(a, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,817,"ssertEquals(b, MathUtils.lcm(1, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,818,"ssertEquals(a, MathUtils.lcm(a, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,819,"ssertEquals(150, MathUtils.lcm(a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,820,"ssertEquals(150, MathUtils.lcm(-a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,821,"ssertEquals(150, MathUtils.lcm(a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,822,"ssertEquals(150, MathUtils.lcm(-a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,823,"ssertEquals(2310, MathUtils.lcm(a, c));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,845,"Assert.assertEquals(0, MathUtils.lcm(0, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,846,"Assert.assertEquals(0, MathUtils.lcm(a, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,847,"Assert.assertEquals(b, MathUtils.lcm(1, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,848,"Assert.assertEquals(a, MathUtils.lcm(a, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,849,"Assert.assertEquals(150, MathUtils.lcm(a, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,850,"Assert.assertEquals(150, MathUtils.lcm(-a, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,851,"Assert.assertEquals(150, MathUtils.lcm(a, -b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,852,"Assert.assertEquals(150, MathUtils.lcm(-a, -b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,853,"Assert.assertEquals(2310, MathUtils.lcm(a, c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,827,"ssertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,857,"Assert.assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,830,"ssertEquals(0, MathUtils.lcm(0, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,860,"Assert.assertEquals(0, MathUtils.lcm(0, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,835,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,865,"Assert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,843,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,873,"Assert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,850,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,880,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,886,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,861,"ssertEquals(0, MathUtils.lcm(0, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,862,"ssertEquals(0, MathUtils.lcm(a, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,863,"ssertEquals(b, MathUtils.lcm(1, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,864,"ssertEquals(a, MathUtils.lcm(a, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,865,"ssertEquals(150, MathUtils.lcm(a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,866,"ssertEquals(150, MathUtils.lcm(-a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,867,"ssertEquals(150, MathUtils.lcm(a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,868,"ssertEquals(150, MathUtils.lcm(-a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,869,"ssertEquals(2310, MathUtils.lcm(a, c));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,892,"Assert.assertEquals(0, MathUtils.lcm(0, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,893,"Assert.assertEquals(0, MathUtils.lcm(a, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,894,"Assert.assertEquals(b, MathUtils.lcm(1, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,895,"Assert.assertEquals(a, MathUtils.lcm(a, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,896,"Assert.assertEquals(150, MathUtils.lcm(a, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,897,"Assert.assertEquals(150, MathUtils.lcm(-a, b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,898,"Assert.assertEquals(150, MathUtils.lcm(a, -b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,899,"Assert.assertEquals(150, MathUtils.lcm(-a, -b));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,900,"Assert.assertEquals(2310, MathUtils.lcm(a, c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,871,"ssertEquals(Long.MAX_VALUE, MathUtils.lcm(60247241209L, 153092023L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,902,"Assert.assertEquals(Long.MAX_VALUE, MathUtils.lcm(60247241209L, 153092023L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,875,"ssertEquals((1L<<50)*15, MathUtils.lcm((1L<<45)*3, (1L<<50)*5));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,906,"Assert.assertEquals((1L<<50)*15, MathUtils.lcm((1L<<45)*3, (1L<<50)*5));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,878,"ssertEquals(0L, MathUtils.lcm(0L, 0L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,909,"Assert.assertEquals(0L, MathUtils.lcm(0L, 0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,883,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,914,"Assert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,891,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,922,"Assert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,896,"ssertEquals((long) Integer.MAX_VALUE * (Integer.MAX_VALUE - 1),"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,927,"Assert.assertEquals((long) Integer.MAX_VALUE * (Integer.MAX_VALUE - 1),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,900,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,931,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,937,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,907,"ssertEquals(2.0, MathUtils.log(2, 4), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,908,"ssertEquals(3.0, MathUtils.log(2, 8), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,909,"ssertTrue(Double.isNaN(MathUtils.log(-1, 1)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,910,"ssertTrue(Double.isNaN(MathUtils.log(1, -1)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,911,"ssertTrue(Double.isNaN(MathUtils.log(0, 0)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,912,"ssertEquals(0, MathUtils.log(0, 10), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,913,"ssertEquals(Double.NEGATIVE_INFINITY, MathUtils.log(10, 0), 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,939,"Assert.assertEquals(2.0, MathUtils.log(2, 4), 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,940,"Assert.assertEquals(3.0, MathUtils.log(2, 8), 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,941,"Assert.assertTrue(Double.isNaN(MathUtils.log(-1, 1)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,942,"Assert.assertTrue(Double.isNaN(MathUtils.log(1, -1)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,943,"Assert.assertTrue(Double.isNaN(MathUtils.log(0, 0)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,944,"Assert.assertEquals(0, MathUtils.log(0, 10), 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,945,"Assert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.log(10, 0), 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,948,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,919,"ssertEquals(big, MathUtils.mulAndCheck(big, 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,952,"Assert.assertEquals(big, MathUtils.mulAndCheck(big, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,922,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,955,"Assert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,927,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,960,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,965,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,935,"ssertEquals(max, MathUtils.mulAndCheck(max, 1L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,936,"ssertEquals(min, MathUtils.mulAndCheck(min, 1L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,937,"ssertEquals(0L, MathUtils.mulAndCheck(max, 0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,938,"ssertEquals(0L, MathUtils.mulAndCheck(min, 0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,939,"ssertEquals(max, MathUtils.mulAndCheck(1L, max));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,940,"ssertEquals(min, MathUtils.mulAndCheck(1L, min));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,941,"ssertEquals(0L, MathUtils.mulAndCheck(0L, max));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,942,"ssertEquals(0L, MathUtils.mulAndCheck(0L, min));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,943,"ssertEquals(1L, MathUtils.mulAndCheck(-1L, -1L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,944,"ssertEquals(min, MathUtils.mulAndCheck(min / 2, 2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,969,"Assert.assertEquals(max, MathUtils.mulAndCheck(max, 1L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,970,"Assert.assertEquals(min, MathUtils.mulAndCheck(min, 1L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,971,"Assert.assertEquals(0L, MathUtils.mulAndCheck(max, 0L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,972,"Assert.assertEquals(0L, MathUtils.mulAndCheck(min, 0L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,973,"Assert.assertEquals(max, MathUtils.mulAndCheck(1L, max));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,974,"Assert.assertEquals(min, MathUtils.mulAndCheck(1L, min));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,975,"Assert.assertEquals(0L, MathUtils.mulAndCheck(0L, max));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,976,"Assert.assertEquals(0L, MathUtils.mulAndCheck(0L, min));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,977,"Assert.assertEquals(1L, MathUtils.mulAndCheck(-1L, -1L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,978,"Assert.assertEquals(min, MathUtils.mulAndCheck(min / 2, 2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,956,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,990,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,996,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,966,ssertTrue((b - FastMath.PI) <= c);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,967,ssertTrue(c <= (b + FastMath.PI));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1001,Assert.assertTrue((b - FastMath.PI) <= c);
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1002,Assert.assertTrue(c <= (b + FastMath.PI));
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,969,"ssertEquals(c, a - twoK * FastMath.PI, 1.0e-14);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1004,"Assert.assertEquals(c, a - twoK * FastMath.PI, 1.0e-14);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1009,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,998,"ail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1034,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1005,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1041,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1011,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1047,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1017,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1053,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1058,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1024,"ssertEquals(1.23, MathUtils.round(x, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1025,"ssertEquals(1.235, MathUtils.round(x, 3), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1026,"ssertEquals(1.2346, MathUtils.round(x, 4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1061,"Assert.assertEquals(1.23, MathUtils.round(x, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1062,"Assert.assertEquals(1.235, MathUtils.round(x, 3), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1063,"Assert.assertEquals(1.2346, MathUtils.round(x, 4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1029,"ssertEquals(39.25, MathUtils.round(39.245, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1030,"ssertEquals(39.24, MathUtils.round(39.245, 2, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1066,"Assert.assertEquals(39.25, MathUtils.round(39.245, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1067,"Assert.assertEquals(39.24, MathUtils.round(39.245, 2, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1033,"ssertEquals(39.25, MathUtils.round(xx, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1070,"Assert.assertEquals(39.25, MathUtils.round(xx, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1036,"ssertEquals(30.1d, MathUtils.round(30.095d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1037,"ssertEquals(30.1d, MathUtils.round(30.095d, 1), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1038,"ssertEquals(33.1d, MathUtils.round(33.095d, 1), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1039,"ssertEquals(33.1d, MathUtils.round(33.095d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1040,"ssertEquals(50.09d, MathUtils.round(50.085d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1041,"ssertEquals(50.19d, MathUtils.round(50.185d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1042,"ssertEquals(50.01d, MathUtils.round(50.005d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1043,"ssertEquals(30.01d, MathUtils.round(30.005d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1044,"ssertEquals(30.65d, MathUtils.round(30.645d, 2), 0.0d);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1046,"ssertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1047,"ssertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1048,"ssertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1049,"ssertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1050,"ssertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1051,"ssertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1053,"ssertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1054,"ssertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1055,"ssertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1056,"ssertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1057,"ssertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1058,"ssertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1060,"ssertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1061,"ssertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1062,"ssertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1063,"ssertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1064,"ssertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1065,"ssertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1067,"ssertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1068,"ssertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1069,"ssertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1070,"ssertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1071,"ssertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1072,"ssertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1073,"ssertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1074,"ssertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1076,"ssertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1077,"ssertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1078,"ssertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1079,"ssertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1080,"ssertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1081,"ssertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1082,"ssertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1083,"ssertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1084,"ssertEquals(1.236, MathUtils.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1085,"ssertEquals(-1.236, MathUtils.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1087,"ssertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1088,"ssertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1089,"ssertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1090,"ssertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1091,"ssertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1092,"ssertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1093,"ssertEquals(1.235, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1094,"ssertEquals(-1.235, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1096,"ssertEquals(-1.23, MathUtils.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1097,"ssertEquals(1.23, MathUtils.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1073,"Assert.assertEquals(30.1d, MathUtils.round(30.095d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1074,"Assert.assertEquals(30.1d, MathUtils.round(30.095d, 1), 0.0d);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1075,"Assert.assertEquals(33.1d, MathUtils.round(33.095d, 1), 0.0d);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1076,"Assert.assertEquals(33.1d, MathUtils.round(33.095d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1077,"Assert.assertEquals(50.09d, MathUtils.round(50.085d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1078,"Assert.assertEquals(50.19d, MathUtils.round(50.185d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1079,"Assert.assertEquals(50.01d, MathUtils.round(50.005d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1080,"Assert.assertEquals(30.01d, MathUtils.round(30.005d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1081,"Assert.assertEquals(30.65d, MathUtils.round(30.645d, 2), 0.0d);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1083,"Assert.assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1084,"Assert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1085,"Assert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1086,"Assert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1087,"Assert.assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1088,"Assert.assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1090,"Assert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1091,"Assert.assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1092,"Assert.assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1093,"Assert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1094,"Assert.assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1095,"Assert.assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1097,"Assert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1098,"Assert.assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1099,"Assert.assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1100,"Assert.assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1101,"Assert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1102,"Assert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1104,"Assert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1105,"Assert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1106,"Assert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1107,"Assert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1108,"Assert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1109,"Assert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1110,"Assert.assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1111,"Assert.assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1113,"Assert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1114,"Assert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1115,"Assert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1116,"Assert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1117,"Assert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1118,"Assert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1119,"Assert.assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1120,"Assert.assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1121,"Assert.assertEquals(1.236, MathUtils.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1122,"Assert.assertEquals(-1.236, MathUtils.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1124,"Assert.assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1125,"Assert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1126,"Assert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1127,"Assert.assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1128,"Assert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1129,"Assert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1130,"Assert.assertEquals(1.235, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1131,"Assert.assertEquals(-1.235, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1133,"Assert.assertEquals(-1.23, MathUtils.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1134,"Assert.assertEquals(1.23, MathUtils.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1101,ail();
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1138,Assert.fail();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1106,"ssertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1107,"ssertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1108,"ssertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1109,"ssertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1110,"ssertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1111,"ssertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1143,"Assert.assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1144,"Assert.assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1145,"Assert.assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1146,"Assert.assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1147,"Assert.assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1148,"Assert.assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1115,ail();
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1152,Assert.fail();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1121,"ssertEquals(39.25, MathUtils.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1158,"Assert.assertEquals(39.25, MathUtils.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1125,"ssertEquals(0.0, MathUtils.round(0.0, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1126,"ssertEquals(Double.POSITIVE_INFINITY, MathUtils.round(Double.POSITIVE_INFINITY, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1127,"ssertEquals(Double.NEGATIVE_INFINITY, MathUtils.round(Double.NEGATIVE_INFINITY, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1162,"Assert.assertEquals(0.0, MathUtils.round(0.0, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1163,"Assert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.round(Double.POSITIVE_INFINITY, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1164,"Assert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.round(Double.NEGATIVE_INFINITY, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1167,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1132,"ssertEquals(1.23f, MathUtils.round(x, 2), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1133,"ssertEquals(1.235f, MathUtils.round(x, 3), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1134,"ssertEquals(1.2346f, MathUtils.round(x, 4), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1170,"Assert.assertEquals(1.23f, MathUtils.round(x, 2), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1171,"Assert.assertEquals(1.235f, MathUtils.round(x, 3), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1172,"Assert.assertEquals(1.2346f, MathUtils.round(x, 4), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1137,"ssertEquals(30.1f, MathUtils.round(30.095f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1138,"ssertEquals(30.1f, MathUtils.round(30.095f, 1), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1139,"ssertEquals(50.09f, MathUtils.round(50.085f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1140,"ssertEquals(50.19f, MathUtils.round(50.185f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1141,"ssertEquals(50.01f, MathUtils.round(50.005f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1142,"ssertEquals(30.01f, MathUtils.round(30.005f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1143,"ssertEquals(30.65f, MathUtils.round(30.645f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1145,"ssertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1146,"ssertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1147,"ssertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1148,"ssertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1149,"ssertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1150,"ssertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1152,"ssertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1153,"ssertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1154,"ssertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1155,"ssertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1156,"ssertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1157,"ssertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1159,"ssertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1160,"ssertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1161,"ssertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1162,"ssertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1163,"ssertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1164,"ssertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1166,"ssertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1167,"ssertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1168,"ssertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1169,"ssertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1170,"ssertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1171,"ssertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1172,"ssertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1173,"ssertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1175,"ssertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1176,"ssertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1177,"ssertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1178,"ssertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1179,"ssertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1180,"ssertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1181,"ssertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1182,"ssertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1183,"ssertEquals(1.236f, MathUtils.round(1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1184,"ssertEquals(-1.236f, MathUtils.round(-1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1186,"ssertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1187,"ssertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1188,"ssertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1189,"ssertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1190,"ssertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1191,"ssertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1192,"ssertEquals(1.235f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1193,"ssertEquals(-1.235f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1195,"ssertEquals(-1.23f, MathUtils.round(-1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1196,"ssertEquals(1.23f, MathUtils.round(1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1175,"Assert.assertEquals(30.1f, MathUtils.round(30.095f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1176,"Assert.assertEquals(30.1f, MathUtils.round(30.095f, 1), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1177,"Assert.assertEquals(50.09f, MathUtils.round(50.085f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1178,"Assert.assertEquals(50.19f, MathUtils.round(50.185f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1179,"Assert.assertEquals(50.01f, MathUtils.round(50.005f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1180,"Assert.assertEquals(30.01f, MathUtils.round(30.005f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1181,"Assert.assertEquals(30.65f, MathUtils.round(30.645f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1183,"Assert.assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1184,"Assert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1185,"Assert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1186,"Assert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1187,"Assert.assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1188,"Assert.assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1190,"Assert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1191,"Assert.assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1192,"Assert.assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1193,"Assert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1194,"Assert.assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1195,"Assert.assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1197,"Assert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1198,"Assert.assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1199,"Assert.assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1200,"Assert.assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1201,"Assert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1202,"Assert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1204,"Assert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1205,"Assert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1206,"Assert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1207,"Assert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1208,"Assert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1209,"Assert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1210,"Assert.assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1211,"Assert.assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1213,"Assert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1214,"Assert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1215,"Assert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1216,"Assert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1217,"Assert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1218,"Assert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1219,"Assert.assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1220,"Assert.assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1221,"Assert.assertEquals(1.236f, MathUtils.round(1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1222,"Assert.assertEquals(-1.236f, MathUtils.round(-1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1224,"Assert.assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1225,"Assert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1226,"Assert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1227,"Assert.assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1228,"Assert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1229,"Assert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1230,"Assert.assertEquals(1.235f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1231,"Assert.assertEquals(-1.235f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1233,"Assert.assertEquals(-1.23f, MathUtils.round(-1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1234,"Assert.assertEquals(1.23f, MathUtils.round(1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1200,ail();
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1238,Assert.fail();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1205,"ssertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1206,"ssertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1207,"ssertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1208,"ssertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1209,"ssertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1210,"ssertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1243,"Assert.assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1244,"Assert.assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1245,"Assert.assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1246,"Assert.assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1247,"Assert.assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1248,"Assert.assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1214,ail();
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1252,Assert.fail();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1221,"ssertEquals(0.0f, MathUtils.round(0.0f, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1222,"ssertEquals(Float.POSITIVE_INFINITY, MathUtils.round(Float.POSITIVE_INFINITY, 2), 0.0f);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1223,"ssertEquals(Float.NEGATIVE_INFINITY, MathUtils.round(Float.NEGATIVE_INFINITY, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1259,"Assert.assertEquals(0.0f, MathUtils.round(0.0f, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1260,"Assert.assertEquals(Float.POSITIVE_INFINITY, MathUtils.round(Float.POSITIVE_INFINITY, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1261,"Assert.assertEquals(Float.NEGATIVE_INFINITY, MathUtils.round(Float.NEGATIVE_INFINITY, 2), 0.0f);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1264,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1227,"ssertEquals((byte) 1, MathUtils.sign((byte) 2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1228,"ssertEquals((byte) 0, MathUtils.sign((byte) 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1229,"ssertEquals((byte) (-1), MathUtils.sign((byte) (-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1266,"Assert.assertEquals((byte) 1, MathUtils.sign((byte) 2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1267,"Assert.assertEquals((byte) 0, MathUtils.sign((byte) 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1268,"Assert.assertEquals((byte) (-1), MathUtils.sign((byte) (-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1271,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1234,"ssertEquals(1.0, MathUtils.sign(2.0), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1235,"ssertEquals(0.0, MathUtils.sign(0.0), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1236,"ssertEquals(-1.0, MathUtils.sign(-2.0), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1274,"Assert.assertEquals(1.0, MathUtils.sign(2.0), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1275,"Assert.assertEquals(0.0, MathUtils.sign(0.0), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1276,"Assert.assertEquals(-1.0, MathUtils.sign(-2.0), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1280,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1242,"ssertEquals(1.0F, MathUtils.sign(2.0F), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1243,"ssertEquals(0.0F, MathUtils.sign(0.0F), delta);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1244,"ssertEquals(-1.0F, MathUtils.sign(-2.0F), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1283,"Assert.assertEquals(1.0F, MathUtils.sign(2.0F), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1284,"Assert.assertEquals(0.0F, MathUtils.sign(0.0F), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1285,"Assert.assertEquals(-1.0F, MathUtils.sign(-2.0F), delta);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1289,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1249,"ssertEquals(1, MathUtils.sign(2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1250,"ssertEquals(0, MathUtils.sign(0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1251,"ssertEquals((-1), MathUtils.sign((-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1291,"Assert.assertEquals(1, MathUtils.sign(2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1292,"Assert.assertEquals(0, MathUtils.sign(0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1293,"Assert.assertEquals((-1), MathUtils.sign((-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1296,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1255,"ssertEquals(1L, MathUtils.sign(2L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1256,"ssertEquals(0L, MathUtils.sign(0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1257,"ssertEquals(-1L, MathUtils.sign(-2L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1298,"Assert.assertEquals(1L, MathUtils.sign(2L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1299,"Assert.assertEquals(0L, MathUtils.sign(0L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1300,"Assert.assertEquals(-1L, MathUtils.sign(-2L));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1303,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1261,"ssertEquals((short) 1, MathUtils.sign((short) 2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1262,"ssertEquals((short) 0, MathUtils.sign((short) 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1263,"ssertEquals((short) (-1), MathUtils.sign((short) (-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1305,"Assert.assertEquals((short) 1, MathUtils.sign((short) 2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1306,"Assert.assertEquals((short) 0, MathUtils.sign((short) 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1307,"Assert.assertEquals((short) (-1), MathUtils.sign((short) (-2)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1310,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1269,"ssertEquals(expected, MathUtils.sinh(x), 1.0e-5);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1314,"Assert.assertEquals(expected, MathUtils.sinh(x), 1.0e-5);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1317,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1273,ssertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1319,Assert.assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1322,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1279,"ssertEquals(big, MathUtils.subAndCheck(big, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1280,"ssertEquals(bigNeg + 1, MathUtils.subAndCheck(bigNeg, -1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1281,"ssertEquals(-1, MathUtils.subAndCheck(bigNeg, -big));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1326,"Assert.assertEquals(big, MathUtils.subAndCheck(big, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1327,"Assert.assertEquals(bigNeg + 1, MathUtils.subAndCheck(bigNeg, -1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1328,"Assert.assertEquals(-1, MathUtils.subAndCheck(bigNeg, -big));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1284,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1331,"Assert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1289,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1336,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1341,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1298,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1346,"Assert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1300,ssertTrue(ex.getMessage().length() > 1);
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1348,Assert.assertTrue(ex.getMessage().length() > 1);
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1352,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1307,"ssertEquals(max, MathUtils.subAndCheck(max, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1308,"ssertEquals(min, MathUtils.subAndCheck(min, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1309,"ssertEquals(-max, MathUtils.subAndCheck(0, max));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1310,"ssertEquals(min + 1, MathUtils.subAndCheck(min, -1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1356,"Assert.assertEquals(max, MathUtils.subAndCheck(max, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1357,"Assert.assertEquals(min, MathUtils.subAndCheck(min, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1358,"Assert.assertEquals(-max, MathUtils.subAndCheck(0, max));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1359,"Assert.assertEquals(min + 1, MathUtils.subAndCheck(min, -1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1312,"ssertEquals(-1, MathUtils.subAndCheck(-max - 1, -max));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1313,"ssertEquals(max, MathUtils.subAndCheck(-1, -1 - max));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1361,"Assert.assertEquals(-1, MathUtils.subAndCheck(-max - 1, -max));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1362,"Assert.assertEquals(max, MathUtils.subAndCheck(-1, -1 - max));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1322,"ail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1371,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1378,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1331,"ssertEquals(1801088541, MathUtils.pow(21, 7));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1332,"ssertEquals(1, MathUtils.pow(21, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1381,"Assert.assertEquals(1801088541, MathUtils.pow(21, 7));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1382,"Assert.assertEquals(1, MathUtils.pow(21, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1335,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1385,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1340,"ssertEquals(1801088541, MathUtils.pow(21, 7l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1341,"ssertEquals(1, MathUtils.pow(21, 0l));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1390,"Assert.assertEquals(1801088541, MathUtils.pow(21, 7l));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1391,"Assert.assertEquals(1, MathUtils.pow(21, 0l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1344,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1394,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1349,"ssertEquals(1801088541l, MathUtils.pow(21l, 7));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1350,"ssertEquals(1l, MathUtils.pow(21l, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1399,"Assert.assertEquals(1801088541l, MathUtils.pow(21l, 7));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1400,"Assert.assertEquals(1l, MathUtils.pow(21l, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1353,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1403,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1358,"ssertEquals(1801088541l, MathUtils.pow(21l, 7l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1359,"ssertEquals(1l, MathUtils.pow(21l, 0l));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1408,"Assert.assertEquals(1801088541l, MathUtils.pow(21l, 7l));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1409,"Assert.assertEquals(1l, MathUtils.pow(21l, 0l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1362,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1412,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1368,"ssertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1369,"ssertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1418,"Assert.assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1419,"Assert.assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1372,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1422,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1377,"ssertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1378,"ssertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0l));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1427,"Assert.assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, 7l));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1428,"Assert.assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, 0l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1381,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1431,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1386,"ssertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, BigInteger.valueOf(7l)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1387,"ssertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, BigInteger.ZERO));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1436,"Assert.assertEquals(BigInteger.valueOf(1801088541l), MathUtils.pow(twentyOne, BigInteger.valueOf(7l)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1437,"Assert.assertEquals(BigInteger.ONE, MathUtils.pow(twentyOne, BigInteger.ZERO));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1390,"ail(""Expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1440,"Assert.fail(""Expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1399,"ssertEquals(bigOne, MathUtils.pow(twentyOne, 103));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1400,"ssertEquals(bigOne, MathUtils.pow(twentyOne, 103l));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1401,"ssertEquals(bigOne, MathUtils.pow(twentyOne, BigInteger.valueOf(103l)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1449,"Assert.assertEquals(bigOne, MathUtils.pow(twentyOne, 103));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1450,"Assert.assertEquals(bigOne, MathUtils.pow(twentyOne, 103l));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1451,"Assert.assertEquals(bigOne, MathUtils.pow(twentyOne, BigInteger.valueOf(103l)));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1455,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1408,"ssertEquals(7.0, MathUtils.distance1(p1, p2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1459,"Assert.assertTrue(MathUtils.equals(7.0, MathUtils.distance1(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1462,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1414,"ssertEquals(7, MathUtils.distance1(p1, p2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1466,"Assert.assertEquals(7, MathUtils.distance1(p1, p2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1469,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1420,"ssertEquals(5.0, MathUtils.distance(p1, p2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1473,"Assert.assertTrue(MathUtils.equals(5.0, MathUtils.distance(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1476,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1426,"ssertEquals(5.0, MathUtils.distance(p1, p2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1480,"Assert.assertTrue(MathUtils.equals(5, MathUtils.distance(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1483,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1432,"ssertEquals(4.0, MathUtils.distanceInf(p1, p2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1487,"Assert.assertTrue(MathUtils.equals(4.0, MathUtils.distanceInf(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1490,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1438,"ssertEquals(4, MathUtils.distanceInf(p1, p2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1494,"Assert.assertEquals(4, MathUtils.distanceInf(p1, p2));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1497,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1454,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1511,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1461,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1518,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1468,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1525,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1475,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1532,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1538,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1484,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1542,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1490,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1548,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1496,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1554,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1503,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1561,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1509,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1567,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1515,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1573,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1579,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1528,"ssertEquals(-3,  x1[0], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1529,"ssertEquals(9,   x2[0], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1530,"ssertEquals(-27, x3[0], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1587,"Assert.assertEquals(-3,  x1[0], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1588,"Assert.assertEquals(9,   x2[0], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1589,"Assert.assertEquals(-27, x3[0], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1532,"ssertEquals(1, x1[1], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1533,"ssertEquals(1, x2[1], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1534,"ssertEquals(1, x3[1], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1591,"Assert.assertEquals(1, x1[1], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1592,"Assert.assertEquals(1, x2[1], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1593,"Assert.assertEquals(1, x3[1], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1536,"ssertEquals(2, x1[2], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1537,"ssertEquals(4, x2[2], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1538,"ssertEquals(8, x3[2], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1595,"Assert.assertEquals(2, x1[2], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1596,"Assert.assertEquals(4, x2[2], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1597,"Assert.assertEquals(8, x3[2], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1540,"ssertEquals(4,  x1[3], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1541,"ssertEquals(16, x2[3], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1542,"ssertEquals(64, x3[3], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1599,"Assert.assertEquals(4,  x1[3], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1600,"Assert.assertEquals(16, x2[3], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1601,"Assert.assertEquals(64, x3[3], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1544,"ssertEquals(5,   x1[4], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1545,"ssertEquals(25,  x2[4], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1546,"ssertEquals(125, x3[4], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1603,"Assert.assertEquals(5,   x1[4], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1604,"Assert.assertEquals(25,  x2[4], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1605,"Assert.assertEquals(125, x3[4], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1608,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1555,"ssertEquals(dest.length, source.length);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1615,"Assert.assertEquals(dest.length, source.length);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1557,"ssertEquals(source[i], dest[i]);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1617,"Assert.assertEquals(source[i], dest[i]);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1621,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1568,"ssertEquals(dest.length, source.length - offset);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1629,"Assert.assertEquals(dest.length, source.length - offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1570,"ssertEquals(source[i], dest[i]);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1631,"Assert.assertEquals(source[i], dest[i]);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1635,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1581,"ssertEquals(dest.length, source.length + offset);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1643,"Assert.assertEquals(dest.length, source.length + offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1583,"ssertEquals(source[i], dest[i]);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1645,"Assert.assertEquals(source[i], dest[i]);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1586,"ssertEquals(0, dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1648,"Assert.assertEquals(0, dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1652,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1601,"ssertEquals(dest.length, source.length);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1664,"Assert.assertEquals(dest.length, source.length);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1603,"ssertEquals(source[i], dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1666,"Assert.assertEquals(source[i], dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1670,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1619,"ssertEquals(dest.length, source.length - offset);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1683,"Assert.assertEquals(dest.length, source.length - offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1621,"ssertEquals(source[i], dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1685,"Assert.assertEquals(source[i], dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1689,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1637,"ssertEquals(dest.length, source.length + offset);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1702,"Assert.assertEquals(dest.length, source.length + offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1639,"ssertEquals(source[i], dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1704,"Assert.assertEquals(source[i], dest[i], 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1642,"ssertEquals(0, dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1707,"Assert.assertEquals(0, dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1711,@Test
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1721,@Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1658,"athUtils.checkNotNull(array, LocalizedFormats.INPUT_ARRAY, null);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1725,"MathUtils.checkNotNull(array, LocalizedFormats.INPUT_ARRAY);"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,27,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,28,import org.junit.Before;
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,29,import org.junit.Test;
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,32,ublic class OpenIntToDoubleHashMapTest extends TestCase {
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,35,public class OpenIntToDoubleHashMapTest {
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,36,Override
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,37,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,39,@Before
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,40,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,75,@Test
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,81,@Test
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,87,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,93,"ssertEquals(mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,99,"Assert.assertEquals(mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,98,"ssertEquals(mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,99,"ssertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,104,"Assert.assertEquals(mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,105,"Assert.assertTrue(MathUtils.equals(mapEntry.getValue(), map.get(mapEntry.getKey()), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,109,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,108,"ssertEquals(++size, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,109,"ssertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,115,"Assert.assertEquals(++size, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,116,"Assert.assertTrue(MathUtils.equals(mapEntry.getValue(), map.get(mapEntry.getKey()), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,120,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,117,"ssertEquals(javaMap.size(), map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,118,"ssertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,125,"Assert.assertEquals(javaMap.size(), map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,126,"Assert.assertTrue(MathUtils.equals(mapEntry.getValue(), map.get(mapEntry.getKey()), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,130,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,127,ssertTrue(Double.isNaN(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,136,Assert.assertTrue(Double.isNaN(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,139,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,132,ssertTrue(Double.isNaN(map.get(5)));
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,133,ssertTrue(Double.isNaN(map.get(0)));
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,134,ssertTrue(Double.isNaN(map.get(50)));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,142,Assert.assertTrue(Double.isNaN(map.get(5)));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,143,Assert.assertTrue(Double.isNaN(map.get(0)));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,144,Assert.assertTrue(Double.isNaN(map.get(50)));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,147,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,140,"ssertEquals(mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,151,"Assert.assertEquals(mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,143,"ssertEquals(--mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,144,ssertTrue(Double.isNaN(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,154,"Assert.assertEquals(--mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,155,Assert.assertTrue(Double.isNaN(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,163,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,160,"ssertEquals(--mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,161,ssertTrue(Double.isNaN(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,172,"Assert.assertEquals(--mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,173,Assert.assertTrue(Double.isNaN(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,182,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,172,ssertTrue(Double.isNaN(map.remove(50)));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,185,Assert.assertTrue(Double.isNaN(map.remove(50)));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,188,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,183,"ssertEquals(mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,184,ssertTrue(Double.isNaN(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,197,"Assert.assertEquals(mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,198,Assert.assertTrue(Double.isNaN(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,215,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,204,"ssertEquals(javaMap.size(), copy.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,219,"Assert.assertEquals(javaMap.size(), copy.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,207,"ssertEquals(mapEntry.getValue(), copy.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,222,"Assert.assertTrue(MathUtils.equals(mapEntry.getValue(), copy.get(mapEntry.getKey()), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,225,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,213,ssertTrue(map.containsKey(mapEntry.getKey()));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,229,Assert.assertTrue(map.containsKey(mapEntry.getKey()));
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,216,ssertFalse(map.containsKey(mapEntry.getKey()));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,232,Assert.assertFalse(map.containsKey(mapEntry.getKey()));
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,220,ssertTrue(map.containsKey(key));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,236,Assert.assertTrue(map.containsKey(key));
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,222,ssertFalse(map.containsKey(key));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,238,Assert.assertFalse(map.containsKey(key));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,242,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,230,ssertTrue(iterator.hasNext());
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,247,Assert.assertTrue(iterator.hasNext());
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,233,ssertTrue(map.containsKey(key));
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,234,"ssertEquals(javaMap.get(key), map.get(key), 0);"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,235,"ssertEquals(javaMap.get(key), iterator.value(), 0);"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,236,ssertTrue(javaMap.containsKey(key));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,250,Assert.assertTrue(map.containsKey(key));
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,251,"Assert.assertEquals(javaMap.get(key), map.get(key), 0);"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,252,"Assert.assertEquals(javaMap.get(key), iterator.value(), 0);"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,253,Assert.assertTrue(javaMap.containsKey(key));
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,238,ssertFalse(iterator.hasNext());
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,255,Assert.assertFalse(iterator.hasNext());
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,241,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,258,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,264,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,253,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,271,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,282,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,273,"ssertEquals(value1, map.get(key3));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,274,"ssertEquals(3, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,292,"Assert.assertTrue(MathUtils.equals(value1, map.get(key3), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,293,"Assert.assertEquals(3, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,279,"ssertEquals(value2, map.get(key3));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,280,"ssertEquals(2, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,298,"Assert.assertTrue(MathUtils.equals(value2, map.get(key3), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,299,"Assert.assertEquals(2, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,306,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,294,"ssertEquals(2, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,295,"ssertEquals(value1, map.get(key2));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,314,"Assert.assertEquals(2, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,315,"Assert.assertTrue(MathUtils.equals(value1, map.get(key2), 1));"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,300,"ssertEquals(1, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,301,"ssertEquals(value2, map.get(key2));"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,320,"Assert.assertEquals(1, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/java/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,321,"Assert.assertTrue(MathUtils.equals(value2, map.get(key2), 1));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,32,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,33,import org.junit.Before;
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,34,import org.junit.Test;
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,33,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,35,ublic class OpenIntToFieldTest extends TestCase {
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,37,public class OpenIntToFieldTest {
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,40,Override
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,41,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,42,@Before
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,43,public void setUp() throws FractionConversionException {
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,84,@Test
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,90,@Test
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,96,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,103,"ssertEquals(mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,108,"Assert.assertEquals(mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,108,"ssertEquals(mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,109,"ssertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,113,"Assert.assertEquals(mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,114,"Assert.assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,118,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,118,"ssertEquals(++size, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,119,"ssertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,124,"Assert.assertEquals(++size, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,125,"Assert.assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,129,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,127,"ssertEquals(javaMap.size(), map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,128,"ssertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,134,"Assert.assertEquals(javaMap.size(), map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,135,"Assert.assertEquals(mapEntry.getValue(), map.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,139,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,137,ssertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,145,Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,148,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,142,ssertTrue(field.getZero().equals(map.get(5)));
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,143,ssertTrue(field.getZero().equals(map.get(0)));
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,144,ssertTrue(field.getZero().equals(map.get(50)));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,151,Assert.assertTrue(field.getZero().equals(map.get(5)));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,152,Assert.assertTrue(field.getZero().equals(map.get(0)));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,153,Assert.assertTrue(field.getZero().equals(map.get(50)));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,156,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,150,"ssertEquals(mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,160,"Assert.assertEquals(mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,153,"ssertEquals(--mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,154,ssertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,163,"Assert.assertEquals(--mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,164,Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,172,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,170,"ssertEquals(--mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,171,ssertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,181,"Assert.assertEquals(--mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,182,Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,191,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,182,ssertTrue(field.getZero().equals(map.remove(50)));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,194,Assert.assertTrue(field.getZero().equals(map.remove(50)));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,197,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,193,"ssertEquals(mapSize, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,194,ssertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,206,"Assert.assertEquals(mapSize, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,207,Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,224,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,214,"ssertEquals(javaMap.size(), copy.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,228,"Assert.assertEquals(javaMap.size(), copy.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,217,"ssertEquals(mapEntry.getValue(), copy.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,231,"Assert.assertEquals(mapEntry.getValue(), copy.get(mapEntry.getKey()));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,234,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,223,ssertTrue(map.containsKey(mapEntry.getKey()));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,238,Assert.assertTrue(map.containsKey(mapEntry.getKey()));
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,226,ssertFalse(map.containsKey(mapEntry.getKey()));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,241,Assert.assertFalse(map.containsKey(mapEntry.getKey()));
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,230,ssertTrue(map.containsKey(key));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,245,Assert.assertTrue(map.containsKey(key));
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,232,ssertFalse(map.containsKey(key));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,247,Assert.assertFalse(map.containsKey(key));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,251,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,240,ssertTrue(iterator.hasNext());
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,256,Assert.assertTrue(iterator.hasNext());
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,243,ssertTrue(map.containsKey(key));
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,244,"ssertEquals(javaMap.get(key), map.get(key));"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,245,"ssertEquals(javaMap.get(key), iterator.value());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,246,ssertTrue(javaMap.containsKey(key));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,259,Assert.assertTrue(map.containsKey(key));
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,260,"Assert.assertEquals(javaMap.get(key), map.get(key));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,261,"Assert.assertEquals(javaMap.get(key), iterator.value());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,262,Assert.assertTrue(javaMap.containsKey(key));
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,248,ssertFalse(iterator.hasNext());
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,264,Assert.assertFalse(iterator.hasNext());
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,251,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,267,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,273,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,263,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,280,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,291,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,283,"ssertEquals(value1, map.get(key3));"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,284,"ssertEquals(3, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,301,"Assert.assertEquals(value1, map.get(key3));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,302,"Assert.assertEquals(3, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,289,"ssertEquals(value2, map.get(key3));"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,290,"ssertEquals(2, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,307,"Assert.assertEquals(value2, map.get(key3));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,308,"Assert.assertEquals(2, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,315,@Test
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,304,"ssertEquals(2, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,305,"ssertEquals(value1, map.get(key2));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,323,"Assert.assertEquals(2, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,324,"Assert.assertEquals(value1, map.get(key2));"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,310,"ssertEquals(1, map.size());"
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,311,"ssertEquals(value2, map.get(key2));"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,329,"Assert.assertEquals(1, map.size());"
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,330,"Assert.assertEquals(value2, map.get(key2));"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,20,import org.junit.After;
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,22,import org.junit.Before;
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,23,import org.junit.Test;
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,29,ublic ResizableDoubleArrayTest(String name) {
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,30,uper( name );
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,33,Override
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,34,rotected void tearDown() throws Exception {
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,33,@After
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,34,public void tearDown() throws Exception {
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,39,Override
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,40,rotected void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,39,@Before
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,40,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,45,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,51,"ssertEquals(0, testDa.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,52,"ssertEquals(2, testDa.getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,53,"ssertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,54,"ssertEquals(defaultContractionCriteria, testDa.getContractionCriteria(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,55,"ssertEquals(defaultMode, testDa.getExpansionMode());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,52,"Assert.assertEquals(0, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,53,"Assert.assertEquals(2, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,54,"Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,55,"Assert.assertEquals(defaultContractionCriteria, testDa.getContractionCriteria(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,56,"Assert.assertEquals(defaultMode, testDa.getExpansionMode());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,58,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,59,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,64,"ssertEquals(0, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,65,"Assert.assertEquals(0, testDa.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,68,"ssertEquals(3, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,69,"Assert.assertEquals(3, testDa.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,71,"ssertEquals(0, testDa.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,72,"ssertEquals(2, testDa.getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,73,"ssertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,74,"ssertEquals(defaultContractionCriteria, testDa.getContractionCriteria(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,75,"ssertEquals(defaultMode, testDa.getExpansionMode());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,72,"Assert.assertEquals(0, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,73,"Assert.assertEquals(2, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,74,"Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,75,"Assert.assertEquals(defaultContractionCriteria, testDa.getContractionCriteria(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,76,"Assert.assertEquals(defaultMode, testDa.getExpansionMode());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,79,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,80,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,85,"ssertEquals(3.0f, testDa.getExpansionFactor(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,86,"ssertEquals(3.5f, testDa.getContractionCriteria(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,86,"Assert.assertEquals(3.0f, testDa.getExpansionFactor(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,87,"Assert.assertEquals(3.5f, testDa.getContractionCriteria(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,89,"ssertEquals(0, testDa.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,90,"ssertEquals(2, testDa.getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,91,"ssertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,92,"ssertEquals(3.0f, testDa.getContractionCriteria(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,93,"ssertEquals(defaultMode, testDa.getExpansionMode());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,90,"Assert.assertEquals(0, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,91,"Assert.assertEquals(2, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,92,"Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,93,"Assert.assertEquals(3.0f, testDa.getContractionCriteria(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,94,"Assert.assertEquals(defaultMode, testDa.getExpansionMode());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,97,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,98,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,104,"ssertEquals(0, testDa.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,105,"ssertEquals(2, testDa.getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,106,"ssertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,107,"ssertEquals(3.0f, testDa.getContractionCriteria(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,108,"ssertEquals(ResizableDoubleArray.ADDITIVE_MODE,"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,105,"Assert.assertEquals(0, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,106,"Assert.assertEquals(2, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,107,"Assert.assertEquals(defaultExpansionFactor, testDa.getExpansionFactor(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,108,"Assert.assertEquals(3.0f, testDa.getContractionCriteria(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,109,"Assert.assertEquals(ResizableDoubleArray.ADDITIVE_MODE,"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,113,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,114,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,124,"ssertEquals(copyDa, testDa);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,125,"ssertEquals(testDa, copyDa);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,125,"Assert.assertEquals(copyDa, testDa);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,126,"Assert.assertEquals(testDa, copyDa);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,130,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,140,"ssertEquals( ""The number of elements should now be 1001, it isn't"","
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,142,"Assert.assertEquals( ""The number of elements should now be 1001, it isn't"","
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,143,"ssertEquals( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"", 0.0,"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,145,"Assert.assertEquals( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"", 0.0,"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,146,"ssertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000),"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,148,"Assert.assertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000),"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,148,"ssertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0),"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,150,"Assert.assertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0),"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,156,"ssertEquals(4, ((ResizableDoubleArray) da).getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,157,"ssertEquals(3, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,158,"Assert.assertEquals(4, ((ResizableDoubleArray) da).getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,159,"Assert.assertEquals(3, da.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,159,"ssertEquals(4, ((ResizableDoubleArray) da).getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,160,"ssertEquals(4, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,161,"Assert.assertEquals(4, ((ResizableDoubleArray) da).getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,162,"Assert.assertEquals(4, da.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,162,"ssertEquals(11, ((ResizableDoubleArray) da).getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,163,"ssertEquals(11, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,164,"Assert.assertEquals(11, ((ResizableDoubleArray) da).getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,165,"Assert.assertEquals(11, da.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,165,"ssertEquals(11, ((ResizableDoubleArray) da).getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,166,"ssertEquals(11, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,167,"Assert.assertEquals(11, ((ResizableDoubleArray) da).getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,168,"Assert.assertEquals(11, da.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,170,"ail(""Expecting ArrayIndexOutOfBoundsException for negative index"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,172,"Assert.fail(""Expecting ArrayIndexOutOfBoundsException for negative index"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,179,"ssertEquals(2, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,181,"Assert.assertEquals(2, testDa.getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,182,"ssertEquals(2, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,184,"Assert.assertEquals(2, testDa.getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,184,"ssertEquals(4, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,186,"Assert.assertEquals(4, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,190,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,190,"ssertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,193,"Assert.assertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,198,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,200,"ssertEquals(3, testDa.getNumElements(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,201,"ssertEquals(4, testDa.getElement(0), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,202,"ssertEquals(5, testDa.getElement(1), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,203,"ssertEquals(6, testDa.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,204,"Assert.assertEquals(3, testDa.getNumElements(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,205,"Assert.assertEquals(4, testDa.getElement(0), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,206,"Assert.assertEquals(5, testDa.getElement(1), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,207,"Assert.assertEquals(6, testDa.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,206,"ssertEquals(6, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,210,"Assert.assertEquals(6, testDa.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,211,"ssertEquals(2, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,215,"Assert.assertEquals(2, testDa.getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,215,"ssertEquals(1d, testDa.getElement(0), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,216,"ssertEquals(2d, testDa.getElement(1), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,217,"ssertEquals(3d, testDa.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,218,"ssertEquals(4, testDa.getInternalLength());  // x,x,x,0"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,219,"ssertEquals(3, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,219,"Assert.assertEquals(1d, testDa.getElement(0), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,220,"Assert.assertEquals(2d, testDa.getElement(1), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,221,"Assert.assertEquals(3d, testDa.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,222,"Assert.assertEquals(4, testDa.getInternalLength());  // x,x,x,0"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,223,"Assert.assertEquals(3, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,227,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,231,"ssertEquals(3, da.getElement(1), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,236,"Assert.assertEquals(3, da.getElement(1), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,233,"ssertEquals(3, da.getElement(0), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,234,"ssertEquals(4, da.getElement(1), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,238,"Assert.assertEquals(3, da.getElement(0), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,239,"Assert.assertEquals(4, da.getElement(1), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,236,"ssertEquals(5, da.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,241,"Assert.assertEquals(5, da.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,238,"ssertEquals(4, da.getElement(0), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,239,"ssertEquals(5, da.getElement(1), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,240,"ssertEquals(6, da.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,243,"Assert.assertEquals(4, da.getElement(0), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,244,"Assert.assertEquals(5, da.getElement(1), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,245,"Assert.assertEquals(6, da.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,245,"ssertEquals(2, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,250,"Assert.assertEquals(2, testDa.getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,249,"ssertEquals(1d, testDa.getElement(0), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,250,"ssertEquals(2d, testDa.getElement(1), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,251,"ssertEquals(3d, testDa.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,252,"ssertEquals(4, testDa.getInternalLength());  // x,x,x,0"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,253,"ssertEquals(3, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,254,"Assert.assertEquals(1d, testDa.getElement(0), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,255,"Assert.assertEquals(2d, testDa.getElement(1), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,256,"Assert.assertEquals(3d, testDa.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,257,"Assert.assertEquals(4, testDa.getInternalLength());  // x,x,x,0"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,258,"Assert.assertEquals(3, testDa.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,255,"ssertEquals(2d, testDa.getElement(0), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,256,"ssertEquals(3d, testDa.getElement(1), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,257,"ssertEquals(4d, testDa.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,258,"ssertEquals(4, testDa.getInternalLength());  // 0,x,x,x"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,259,"ssertEquals(3, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,260,"Assert.assertEquals(2d, testDa.getElement(0), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,261,"Assert.assertEquals(3d, testDa.getElement(1), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,262,"Assert.assertEquals(4d, testDa.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,263,"Assert.assertEquals(4, testDa.getInternalLength());  // 0,x,x,x"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,264,"Assert.assertEquals(3, testDa.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,261,"ssertEquals(3d, testDa.getElement(0), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,262,"ssertEquals(4d, testDa.getElement(1), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,263,"ssertEquals(5d, testDa.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,264,"ssertEquals(4, testDa.getInternalLength());  // contracted -- x,x,x,0"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,265,"ssertEquals(3, testDa.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,266,"Assert.assertEquals(3d, testDa.getElement(0), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,267,"Assert.assertEquals(4d, testDa.getElement(1), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,268,"Assert.assertEquals(5d, testDa.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,269,"Assert.assertEquals(4, testDa.getInternalLength());  // contracted -- x,x,x,0"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,270,"Assert.assertEquals(3, testDa.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,268,"ail(""Expecting ArrayIndexOutOfBoundsException"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,273,"Assert.fail(""Expecting ArrayIndexOutOfBoundsException"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,274,"ail(""Expecting ArrayIndexOutOfBoundsException"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,279,"Assert.fail(""Expecting ArrayIndexOutOfBoundsException"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,285,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,287,"ssertEquals( ""Number of elements should equal 6"", da.getNumElements(), 6);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,293,"Assert.assertEquals( ""Number of elements should equal 6"", da.getNumElements(), 6);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,290,"ssertEquals( ""Number of elements should equal 3"", da.getNumElements(), 3);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,296,"Assert.assertEquals( ""Number of elements should equal 3"", da.getNumElements(), 3);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,294,"ail( ""Setting number of elements to negative should've thrown an exception"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,300,"Assert.fail( ""Setting number of elements to negative should've thrown an exception"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,299,"ssertEquals( ""Number of elements should now be 1024"", da.getNumElements(), 1024);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,300,"ssertEquals( ""Element 453 should be a default double"", da.getElement( 453 ), 0.0, Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,305,"Assert.assertEquals( ""Number of elements should now be 1024"", da.getNumElements(), 1024);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,306,"Assert.assertEquals( ""Element 453 should be a default double"", da.getElement( 453 ), 0.0, Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,310,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,307,"ssertEquals(""Initial number of elements should be 0"", 0, eDA2.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,314,"Assert.assertEquals(""Initial number of elements should be 0"", 0, eDA2.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,316,"ssertEquals(""Number of elements should be equal to "" + iterations, iterations, eDA2.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,323,"Assert.assertEquals(""Number of elements should be equal to "" + iterations, iterations, eDA2.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,320,"ssertEquals(""Number of elements should be equals to "" + (iterations +1),"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,327,"Assert.assertEquals(""Number of elements should be equals to "" + (iterations +1),"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,331,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,327,"ssertEquals(""Initial number of elements should be 0"", 0, eDA3.getNumElements() );"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,335,"Assert.assertEquals(""Initial number of elements should be 0"", 0, eDA3.getNumElements() );"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,336,"ssertEquals(""Number of elements should be equal to "" + iterations, iterations,eDA3.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,344,"Assert.assertEquals(""Number of elements should be equal to "" + iterations, iterations,eDA3.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,340,"ssertEquals(""Number of elements should be equals to "" + (iterations +1),"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,348,"Assert.assertEquals(""Number of elements should be equals to "" + (iterations +1),"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,343,"ssertEquals(""Expansion factor should equal 3.0"", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,351,"Assert.assertEquals(""Expansion factor should equal 3.0"", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,354,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,358,"ssertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,367,"Assert.assertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,361,"ssertEquals( ""Number of elements should be 6"", 6, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,370,"Assert.assertEquals( ""Number of elements should be 6"", 6, da.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,367,"ssertEquals( ""Number of elements should be 10"", 10, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,376,"Assert.assertEquals( ""Number of elements should be 10"", 10, da.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,370,"ssertEquals( ""Number of elements should be 8"", 8, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,379,"Assert.assertEquals( ""Number of elements should be 8"", 8, da.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,374,"ail( ""Trying to discard a negative number of element is not allowed"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,383,"Assert.fail( ""Trying to discard a negative number of element is not allowed"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,380,"ail( ""Trying to discard a negative number of element is not allowed"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,389,"Assert.fail( ""Trying to discard a negative number of element is not allowed"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,386,"ail( ""You can't discard more elements than the array contains"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,395,"Assert.fail( ""You can't discard more elements than the array contains"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,392,"ail( ""You can't discard more elements than the array contains"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,401,"Assert.fail( ""You can't discard more elements than the array contains"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,407,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,411,"ssertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,421,"Assert.assertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,415,"ssertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,425,"Assert.assertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,420,"ail( ""Trying to discard a negative number of element is not allowed"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,430,"Assert.fail( ""Trying to discard a negative number of element is not allowed"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,425,"ssertEquals( ""Number of elements should be 1"", 1, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,435,"Assert.assertEquals( ""Number of elements should be 1"", 1, da.getNumElements());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,439,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,431,"ssertEquals(10f, ((ResizableDoubleArray)da).getContractionCriteria(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,442,"Assert.assertEquals(10f, ((ResizableDoubleArray)da).getContractionCriteria(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,433,"ssertEquals(8f, ((ResizableDoubleArray)da).getExpansionFactor(), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,444,"Assert.assertEquals(8f, ((ResizableDoubleArray)da).getExpansionFactor(), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,436,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,447,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,442,"ssertEquals(ResizableDoubleArray.ADDITIVE_MODE,"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,453,"Assert.assertEquals(ResizableDoubleArray.ADDITIVE_MODE,"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,446,"ail (""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,457,"Assert.fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,463,@Test
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,457,ssertFalse(first.equals(other));
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,469,Assert.assertFalse(first.equals(other));
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,461,ssertFalse(first.equals(other));
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,473,Assert.assertFalse(first.equals(other));
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,464,ssertTrue(first.equals(first));
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,476,Assert.assertTrue(first.equals(first));
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,529,ssertTrue(b.equals(a));
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,530,ssertTrue(a.equals(b));
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,531,"ssertEquals(a.hashCode(), b.hashCode());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,541,Assert.assertTrue(b.equals(a));
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,542,Assert.assertTrue(a.equals(b));
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,543,"Assert.assertEquals(a.hashCode(), b.hashCode());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,535,ssertFalse(b.equals(a));
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,536,ssertFalse(a.equals(b));
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,537,ssertFalse(a.hashCode() == b.hashCode());
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,547,Assert.assertFalse(b.equals(a));
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,548,Assert.assertFalse(a.equals(b));
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,549,Assert.assertFalse(a.hashCode() == b.hashCode());
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,22,import org.junit.Test;
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,22,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,27,ublic class TransformerMapTest extends TestCase {
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,28,public class TransformerMapTest {
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,32,@Test
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,36,"ssertEquals(expected, map.getTransformer(TransformerMapTest.class));"
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,38,"Assert.assertEquals(expected, map.getTransformer(TransformerMapTest.class));"
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,44,@Test
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,46,ssertTrue(map.containsClass(TransformerMapTest.class));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,49,Assert.assertTrue(map.containsClass(TransformerMapTest.class));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,55,@Test
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,56,ssertTrue(map.containsTransformer(expected));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,60,Assert.assertTrue(map.containsTransformer(expected));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,66,@Test
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,67,ssertTrue(map.containsClass(TransformerMapTest.class));
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,68,ssertTrue(map.containsTransformer(expected));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,72,Assert.assertTrue(map.containsClass(TransformerMapTest.class));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,73,Assert.assertTrue(map.containsTransformer(expected));
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,70,ssertFalse(map.containsClass(TransformerMapTest.class));
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,71,ssertFalse(map.containsTransformer(expected));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,75,Assert.assertFalse(map.containsClass(TransformerMapTest.class));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,76,Assert.assertFalse(map.containsTransformer(expected));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,82,@Test
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,82,ssertTrue(map.containsClass(TransformerMapTest.class));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,88,Assert.assertTrue(map.containsClass(TransformerMapTest.class));
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,84,ssertFalse(map.containsClass(TransformerMapTest.class));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,90,Assert.assertFalse(map.containsClass(TransformerMapTest.class));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,96,@Test
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,94,ssertTrue(map.classes().contains(TransformerMapTest.class));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,101,Assert.assertTrue(map.classes().contains(TransformerMapTest.class));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,107,@Test
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,104,ssertTrue(map.transformers().contains(expected));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,112,Assert.assertTrue(map.transformers().contains(expected));
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,115,@Test
False,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,111,"ssertEquals(map, TestUtils.serializeAndRecover(map));"
True,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,src/test/java/org/apache/commons/math/util/TransformerMapTest.java,120,"Assert.assertEquals(map, TestUtils.serializeAndRecover(map));"

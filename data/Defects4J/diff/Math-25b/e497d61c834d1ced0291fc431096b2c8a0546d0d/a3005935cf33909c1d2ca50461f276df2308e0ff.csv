is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,297,* Constructs a new <code>IllegalArgumentException</code> with specified nested
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,298,* <code>Throwable</code> root cause.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,299,* @param rootCause the exception or error that caused this exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,300,* to be thrown.
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,301,* @return built exception
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,303,public static IllegalArgumentException createIllegalArgumentException(final Throwable rootCause) {
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,304,IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,305,iae.initCause(rootCause);
True,src/java/org/apache/commons/math/MathRuntimeException.java,src/java/org/apache/commons/math/MathRuntimeException.java,306,return iae;
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,49,"{ ""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,50,"""n doit \u00eatre sup\u00e9rieur ou \u00e9gal \u00e0 k "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,51,"""pour le coefficient du bin\u00f4me (n,k), or n = {0}, k = {1}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,52,"{ ""must have n >= 0 for binomial coefficient (n,k), got n = {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,53,"""n doit \u00eatre positif pour le coefficient du bin\u00f4me (n,k), or n = {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,54,"{ ""must have n >= 0 for n!, got n = {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,55,"""n doit \u00eatre positif pour le calcul de n!, or n = {0}"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,52,"impossible d''\u00e9lever une valeur enti\u00e8re \u00e0 une puissance n\u00e9gative ({0}^{1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,59,"""impossible d''\u00e9lever une valeur enti\u00e8re "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,60,"""\u00e0 une puissance n\u00e9gative ({0}^{1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,61,"{ ""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}),"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,62,""" {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,63,"""m\u00e9thode d''arondi {0} invalide, m\u00e9thodes valides : {1} ({2}), {3} ({4}),"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,64,""" {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,92,// org.apache.commons.math.ode.ContinuousOutputModel
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,93,// org.apache.commons.math.random.UncorrelatedRandomVectorGenerator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,282,"{ ""propagation direction mismatch"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,283,"""directions de propagation incoh\u00e9rentes"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,284,"{ ""{0} wide hole between models time ranges"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,285,"""trou de longueur {0} entre les domaines temporels des mod\u00e8les"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,291,// org.apache.commons.math.random.ValueServer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,292,"{ ""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,293,"""mode {0} inconnu, modes connus : {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) et {11} ({12})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,294,"{ ""digest not initialized"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,295,"""mod\u00e8le empirique non initialis\u00e9"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,298,"{ ""distribution not loaded"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,299,"""aucune distribution n''a \u00e9t\u00e9 charg\u00e9e"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,302,"{ ""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,303,"""les donn\u00e9es d''entr\u00e9e proviennent "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,304,"""d''une source non support\u00e9e : {0}, sources support\u00e9es : {1}, {2}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,306,// org.apache.commons.math.random.EmpiricalDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,307,// org.apache.commons.math.random.ValueServer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,308,"{ ""URL {0} contains no data"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,309,"""l''adresse {0} ne contient aucune donn\u00e9e"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,311,// org.apache.commons.math.random.AbstractRandomGenerator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,312,"{ ""upper bound must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,313,"""la borne sup\u00e9rieure doit \u00eatre positive ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,315,// org.apache.commons.math.random.RandomDataImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,316,"{ ""length must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,317,"""la longueur doit \u00eatre positive ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,318,"{ ""upper bound ({0}) must be greater than lower bound ({1})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,319,"""la borne sup\u00e9rieure ({0}) doit \u00eatre sup\u00e9rieure"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,320,""" \u00e0 la borne inf\u00e9rieure ({1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,321,"{ ""permutation k ({0}) exceeds n ({1})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,322,"""la permutation k ({0}) d\u00e9passe n ({1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,323,"{ ""permutation k ({0}) must be positive"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,324,"""la permutation k ({0}) doit \u00eatre positive"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,325,"{ ""sample size ({0}) exceeds collection size ({1})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,326,"""la taille de l''\u00e9chantillon ({0}) d\u00e9passe la taille de la collection ({1})"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,281,"la d\u00e9composition en valeurs/vecteurs propres de matrices non sym\u00e9triques n''est pas encore disponible"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,332,"""la d\u00e9composition en valeurs/vecteurs propres de matrices "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,333,"""non sym\u00e9triques n''est pas encore disponible"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,335," ""{0}x{1} and {2}x{3} matrices are not addition compatible"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,336,"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour l'addition matricielle"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,337," ""{0}x{1} and {2}x{3} matrices are not subtraction compatible"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,338,"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la soustraction matricielle"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,339," ""{0}x{1} and {2}x{3} matrices are not multiplication compatible"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,340,"les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la multiplication matricielle"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,342,/ org.apache.commons.math.linear.DenseRealMatrix
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,343," ""wrong array shape (block length = {0}, expected {1})"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,344,"forme de tableau erron\u00e9e (bloc de longueur {0} au lieu des {1} attendus)"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,346,/ org.apache.commons.math.linear.BigMatrixImpl
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,347,/ org.apache.commons.math.linear.RealMatrixImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,388,// org.apache.commons.math.linear.MatrixUtils
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,352," ""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,353,"pas d''entr\u00e9e aux indices ({0}, {1}) dans une matrice {2}x{3}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,401,"{ ""{0}x{1} and {2}x{3} matrices are not addition compatible"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,402,"""les dimensions {0}x{1} et {2}x{3} sont incompatibles pour l'addition matricielle"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,403,"{ ""{0}x{1} and {2}x{3} matrices are not subtraction compatible"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,404,"""les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la soustraction matricielle"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,405,"{ ""{0}x{1} and {2}x{3} matrices are not multiplication compatible"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,406,"""les dimensions {0}x{1} et {2}x{3} sont incompatibles pour la multiplication matricielle"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,363,/ org.apache.commons.math.random.EmpiricalDistributionImpl
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,364,/ org.apache.commons.math.random.ValueServer
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,365," ""URL {0} contains no data"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,366,"l''adresse {0} ne contient aucune donn\u00e9e"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,408,// org.apache.commons.math.linear.DenseRealMatrix
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,409,"{ ""wrong array shape (block length = {0}, expected {1})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,410,"""forme de tableau erron\u00e9e (bloc de longueur {0} au lieu des {1} attendus)"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,368,/ org.apache.commons.math.complex.Complex
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,369," ""cannot compute nth root for null or negative n: {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,412,// org.apache.commons.math.complex.Complex
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,413,"{ ""cannot compute nth root for null or negative n: {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,419,"{ ""cannot format a {0} instance as a complex number"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,420,"""impossible de formater une instance de {0} comme un nombre complexe"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,421,"{ ""empty string for imaginary character"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,422,"""cha\u00eene vide pour le caract\u00e8 imaginaire"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,423,"{ ""null imaginary format"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,424,"""format imaginaire nul"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,425,"{ ""null real format"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,426,"""format r\u00e9el nul"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,428,// org.apache.commons.math.complex.ComplexUtils
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,429,"{ ""negative complex module {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,430,"""module n\u00e9gatif ({0}) pour un nombre complexe"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,435,"{ ""cannot format a {0} instance as a 3D vector"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,436,"""impossible de formater une instance de {0} comme un vecteur de dimension 3"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,441,"{ ""cannot format a {0} instance as a real vector"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,442,"""impossible de formater une instance de {0} comme un vecteur r\u00e9el"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,543,"{ ""null fraction"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,544,"""fraction nulle"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,549,"{ ""zero norm for rotation defining vector"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,550,"""norme nulle pour un axe de d\u00e9finition de rotation"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,505,/ org.apache.commons.math.random.EmpiricalDistributionImpl
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,506," ""distribution not loaded"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,507,"aucune distribution n''a \u00e9t\u00e9 charg\u00e9e"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,569,// org.apache.commons.math.stat.Frequency
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,570,"{ ""class ({0}) does not implement Comparable"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,571,"""la classe ({0}) n''implante pas l''interface Comparable"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,572,"{ ""instance of class {0} not comparable to existing values"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,573,"""l''instance de la classe {0} n''est pas comparable aux valeurs existantes"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,509,/ org.apache.commons.math.random.ValueServer
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,510," ""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,511,"mode {0} inconnu, modes connus : {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) et {11} ({12})"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,512," ""digest not initialized"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,513,"mod\u00e8le empirique non initialis\u00e9"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,575,// org.apache.commons.math.stat.StatUtils
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,576,"{ ""input arrays must have the same positive length ({0} and {1})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,577,"""les tableaux d''entr\u00e9e doivent avoir la m\u00eame taille positive ({0} et {1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,578,"{ ""input arrays must have the same length and at least two elements ({0} and {1})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,579,"""les tableaux d''entr\u00e9e doivent avoir la m\u00eame taille"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,580,""" et au moins deux \u00e9l\u00e9ments ({0} et {1})"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,518,"les tableaux doivent avoir la m\u00eame taille et comporter au moins deux \u00e9l\u00e9ments. "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,585,"""les tableaux doivent avoir la m\u00eame taille "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,586,"""et comporter au moins deux \u00e9l\u00e9ments. "" +"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,527,"dimensions de tableaux invalides. xArray a une taille de {0}, yArray a {1} \u00e9l\u00e9ments"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,595,"""dimensions de tableaux invalides. xArray a une taille de {0}, "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,596,"""yArray a {1} \u00e9l\u00e9ments"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,598,// org.apache.commons.math.stat.descriptive.DescriptiveStatistics
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,599,"{ ""window size must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,600,"""la taille de la fen\u00eatre doit \u00eatre positive ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,601,"{ ""percentile implementation {0} does not support setQuantile"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,602,"""l''implantation de pourcentage {0} ne dispose pas de la m\u00e9thode setQuantile"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,603,"{ ""cannot access setQuantile method in percentile implementation {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,604,"""acc\u00e8s impossible \u00e0 la m\u00e9thode setQuantile"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,605,""" dans l''implantation de pourcentage {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,606,"{ ""out of bounds quantile value: {0}, must be in (0, 100]"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,607,"""valeur de quantile {0} hors bornes, doit \u00eatre dans l''intervalle ]0, 100]"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,609,// org.apache.commons.math.stat.descriptive.moment.Variance
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,610,// org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,611,// org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,612,"{ ""input values array is null"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,613,"""le tableau des valeurs d''entr\u00e9es est nul"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,615,// org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,616,"{ ""start position cannot be negative ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,617,"""la position de d\u00e9part ne peut pas \u00eatre n\u00e9gative"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,618,"{ ""length cannot be negative ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,619,"""la longueur ne peut pas \u00eatre n\u00e9gative"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,620,"{ ""subarray ends after array end"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,621,"""le sous-tableau se termine apr\u00e8s la fin du tableau"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,533,"{0} valeurs ont \u00e9t\u00e9 ajout\u00e9es avant que la statistique ne soit configur\u00e9e"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,627,"""{0} valeurs ont \u00e9t\u00e9 ajout\u00e9es "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,628,"""avant que la statistique ne soit configur\u00e9e"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,537,"les statistiques bas\u00e9es sur des moments externes ne peuvent pas \u00eatre incr\u00e9ment\u00e9es"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,632,"""les statistiques bas\u00e9es sur des moments externes "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,633,"""ne peuvent pas \u00eatre incr\u00e9ment\u00e9es"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,539,"les statistiques bas\u00e9es sur des moments externes ne peuvent pas \u00eatre remises \u00e0 z\u00e9ro"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,635,"""les statistiques bas\u00e9es sur des moments externes "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,636,"""ne peuvent pas \u00eatre remises \u00e0 z\u00e9ro"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,638,// org.apache.commons.math.stat.Regression
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,639,"{ ""out of bounds significance level {0}, must be in (0, 1)"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,640,"""niveau de signification {0} hors domaine, doit \u00eatre dans l''intervalle ]0, 1["" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,642,// org.apache.commons.math.distribution.AbstractContinuousDistribution
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,643,// org.apache.commons.math.distribution.AbstractIntegerDistribution
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,644,// org.apache.commons.math.distribution.ExponentialDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,645,// org.apache.commons.math.distribution.BinomialDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,646,// org.apache.commons.math.distribution.CauchyDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,647,// org.apache.commons.math.distribution.PascalDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,648,// org.apache.commons.math.distribution.WeibullDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,649,"{ ""{0} out of [{1}, {2}] range"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,650,"""{0} hors du domaine [{1}, {2}]"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,652,// org.apache.commons.math.distribution.AbstractDistribution
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,653,// org.apache.commons.math.distribution.AbstractIntegerDistribution
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,654,"{ ""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,655,"""la borne inf\u00e9rieure ({0}) devrait \u00eatre inf\u00e9rieure "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,656,"""ou \u00e9gale \u00e0 la borne sup\u00e9rieure ({1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,658,// org.apache.commons.math.distribution.BinomialDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,659,"{ ""number of trials must be non-negative ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,660,"""le nombre d''essais ne doit pas \u00eatre n\u00e9gatif ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,662,// org.apache.commons.math.distribution.ExponentialDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,663,// org.apache.commons.math.random.RandomDataImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,664,"{ ""mean must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,665,"""la moyenne doit \u00eatre positive ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,667,// org.apache.commons.math.distribution.FDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,668,// org.apache.commons.math.distribution.TDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,669,"{ ""degrees of freedom must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,670,"""les degr\u00e9s de libert\u00e9 doivent \u00eatre positifs ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,672,// org.apache.commons.math.distribution.GammaDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,673,"{ ""alpha must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,674,"""alpha doit \u00eatre positif ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,675,"{ ""beta must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,676,"""beta doit \u00eatre positif ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,678,// org.apache.commons.math.distribution.HypergeometricDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,679,"{ ""number of successes ({0}) must be less than or equal to population size ({1})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,680,"""le nombre de succ\u00e8s doit \u00eatre inf\u00e9rieur "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,681,"""ou \u00e9gal \u00e0 la taille de la population ({1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,682,"{ ""sample size ({0}) must be less than or equal to population size ({1})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,683,"""la taille de l''\u00e9chantillon doit \u00eatre inf\u00e9rieure "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,684,"""ou \u00e9gale \u00e0 la taille de la population ({1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,685,"{ ""population size must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,686,"""la taille de la population doit \u00eatre positive ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,688,// org.apache.commons.math.distribution.HypergeometricDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,689,// org.apache.commons.math.random.RandomDataImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,690,"{ ""sample size must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,691,"""la taille de l''\u00e9chantillon doit \u00eatre positive ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,693,// org.apache.commons.math.distribution.HypergeometricDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,694,// org.apache.commons.math.distribution.PascalDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,695,"{ ""number of successes must be non-negative ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,696,"""le nombre de succ\u00e8s ne doit pas \u00eatre n\u00e9gatif ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,698,// org.apache.commons.math.distribution.NormalDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,699,// org.apache.commons.math.random.RandomDataImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,700,"{ ""standard deviation must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,701,"""l''\u00e9cart type doit \u00eatre positif ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,703,// org.apache.commons.math.distribution.PoissonDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,704,// org.apache.commons.math.random.RandomDataImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,705,"{ ""the Poisson mean must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,706,"""la moyenne de Poisson doit \u00eatre positive ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,708,// org.apache.commons.math.distribution.WeibullDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,709,"{ ""shape must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,710,"""le facteur de forme doit \u00eatre positif ({0})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,712,// org.apache.commons.math.distribution.WeibullDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,713,// org.apache.commons.math.distribution.CauchyDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,714,"{ ""scale must be positive ({0})"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,715,"""l''\u00e9chelle doit \u00eatre positive ({0})"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,553,"impossible de calculer la racine z\u00e9roi\u00e8me de l''unit\u00e9, r\u00e9sultat ind\u00e9fini"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,729,"""impossible de calculer la racine z\u00e9roi\u00e8me de l''unit\u00e9, "" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,730,"""r\u00e9sultat ind\u00e9fini"" },"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,195,"hrow new IllegalArgumentException(""Cannot format given Object as a Complex"");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,195,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,196,"""cannot format a {0} instance as a complex number"","
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,197,obj.getClass().getName());
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,350,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,351,"imaginaryCharacter must be a non-empty string."");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,352,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,353,"""empty string for imaginary character"");"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,364,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,365,"imaginaryFormat can not be null."");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,366,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,367,"""null imaginary format"");"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,378,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,379,"realFormat can not be null."");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,380,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,381,"""null real format"");"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,20,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,62,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,63,"""Complex modulus must not be negative"");"
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,64,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,65,"""negative complex module {0}"", r);"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,24,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,62,"hrow new IllegalArgumentException(""p must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,63,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,64,"""{0} out of [{1}, {2}] range"", p, 0.0, 1.0);"
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,61,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,62,"""lower endpoint must be less than or equal to upper endpoint"");"
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,62,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,63,"""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})"","
True,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDistribution.java,64,"x0, x1);"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,80,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,81,"""lower endpoint must be less than or equal to upper endpoint"");"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,81,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,82,"""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})"","
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,83,"x0, x1);"
False,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,137,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,138,"""lower endpoint must be less than or equal to upper endpoint"");"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,139,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,140,"""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})"","
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,141,"x0, x1);"
False,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,156,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,157,"p must be between 0 and 1.0 (inclusive)"");"
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,159,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,160,"""{0} out of [{1}, {2}] range"", p, 0.0, 1.0);"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,79,"hrow new IllegalArgumentException(""number of trials must be non-negative."");"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,80,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,81,"""number of trials must be non-negative ({0})"", trials);"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,92,"hrow new IllegalArgumentException(""probability of success must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,94,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,95,"""{0} out of [{1}, {2}] range"", p, 0.0, 1.0);"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,101,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,102,"""probability argument must be between 0 and 1 (inclusive)"");"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,103,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,104,"""{0} out of [{1}, {2}] range"", p, 0.0, 1.0);"
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,128,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,129,"Scale must be positive."");"
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,130,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,131,"""scale must be positive ({0})"", s);"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,53,"hrow new IllegalArgumentException(""mean must be positive."");"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,54,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,55,"""mean must be positive ({0})"", mean);"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,121,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,122,"""probability argument must be between 0 and 1 (inclusive)"");"
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,123,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,124,"""{0} out of [{1}, {2}] range"", p, 0.0, 1.0);"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,165,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,166,"degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,166,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,167,"""degrees of freedom must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,168,degreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,187,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,188,"degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,189,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,190,"""degrees of freedom must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,191,degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,113,"hrow new IllegalArgumentException(""alpha must be positive"");"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,114,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,115,"""alpha must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,116,alpha);
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,133,"hrow new IllegalArgumentException(""beta must be positive"");"
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,136,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,137,"""beta must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,138,beta);
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,56,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,"number of successes must be less than or equal to "" +"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,58,"population size"");"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,58,"""number of successes ({0}) must be less than or equal to population size ({1})"","
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,59,"numberOfSuccesses, populationSize);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,61,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62,"sample size must be less than or equal to population size"");"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,63,"""sample size ({0}) must be less than or equal to population size ({1})"","
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,64,"sampleSize, populationSize);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,229,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,230,"number of successes must be non-negative."");"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,231,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,232,"""number of successes must be non-negative ({0})"","
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,233,num);
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,242,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,243,"population size must be positive."");"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,245,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,246,"""population size must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,247,size);
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,255,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,256,"sample size must be non-negative."");"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,259,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,260,"""sample size must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,261,size);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,23,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,97,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,98,"Standard deviation must be positive."");"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,98,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,99,"""standard deviation must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,100,sd);
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,78,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,79,"number of successes must be non-negative."");"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,79,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,80,"""number of successes must be non-negative ({0})"","
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,81,successes);
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,92,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,93,"probability of success must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,94,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,95,"""{0} out of [{1}, {2}] range"", p, 0.0, 1.0);"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,91,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,92,"The Poisson mean must be positive"");"
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,92,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,93,"""the Poisson mean must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,94,p);
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,55,"hrow new IllegalArgumentException(""degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,56,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,57,"""degrees of freedom must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,58,degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,100,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,101,"""probability argument must be between 0 and 1 (inclusive)"");"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,102,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,103,"""{0} out of [{1}, {2}] range"", p, 0.0, 1.0);"
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,118,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,119,"Shape must be positive."");"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,120,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,121,"""shape must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,122,alpha);
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,130,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,131,"Scale must be positive."");"
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,133,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,134,"""scale must be positive ({0})"","
True,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,135,beta);
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,479,"hrow new IllegalArgumentException(""The fraction must not be null"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,479,"throw MathRuntimeException.createIllegalArgumentException(""null fraction"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,536,"hrow new IllegalArgumentException(""The fraction must not be null"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,536,"throw MathRuntimeException.createIllegalArgumentException(""null fraction"");"
False,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,571,"hrow new IllegalArgumentException(""The fraction must not be null"");"
True,src/java/org/apache/commons/math/fraction/Fraction.java,src/java/org/apache/commons/math/fraction/Fraction.java,571,"throw MathRuntimeException.createIllegalArgumentException(""null fraction"");"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,303,"hrow new IllegalArgumentException(""zero norm for rotation defining vector"");"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,303,"throw MathRuntimeException.createIllegalArgumentException(""zero norm for rotation defining vector"");"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,434,"hrow new IllegalArgumentException(""zero norm for rotation defining vector"");"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,434,"throw MathRuntimeException.createIllegalArgumentException(""zero norm for rotation defining vector"");"
False,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,244,"hrow new IllegalArgumentException(""Cannot format given Object as a Vector3D"");"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,244,"throw MathRuntimeException.createIllegalArgumentException(""cannot format a {0} instance as a 3D vector"","
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,245,obj.getClass().getName());
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,88,heckAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,88,"MatrixUtils.checkAdditionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,107,heckSubtractionCompatible(m);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,107,"MatrixUtils.checkSubtractionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,159,heckMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,159,"MatrixUtils.checkMultiplicationCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,278,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,278,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,297,"heckSubMatrixIndex(selectedRows, selectedColumns);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,297,"MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,326,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,326,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,372,"heckSubMatrixIndex(selectedRows, selectedColumns);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,372,"MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,413,heckRowIndex(row);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,414,heckColumnIndex(column);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,415,heckRowIndex(nRows + row - 1);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,416,heckColumnIndex(nCols + column - 1);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,413,"MatrixUtils.checkRowIndex(this, row);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,414,"MatrixUtils.checkColumnIndex(this, column);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,415,"MatrixUtils.checkRowIndex(this, nRows + row - 1);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,416,"MatrixUtils.checkColumnIndex(this, nCols + column - 1);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,432,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,432,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,447,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,447,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,465,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,465,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,480,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,480,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,504,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,504,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,527,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,527,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,544,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,544,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,559,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,559,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,576,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,576,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,591,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,591,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,837,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,837,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,856,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,856,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,903,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,903,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,922,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,922,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1094, Check if a row index is valid.
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1095, @param row row index to check
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1096, @exception MatrixIndexException if index is not valid
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1098,rotected void checkRowIndex(final int row) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1099,f (row < 0 || row >= getRowDimension()) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1100,"hrow new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1101,"ow, 0, getRowDimension() - 1);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1106, Check if a column index is valid.
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1107, @param column column index to check
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1108, @exception MatrixIndexException if index is not valid
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1110,rotected void checkColumnIndex(final int column)
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1111,hrows MatrixIndexException {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1112,f (column < 0 || column >= getColumnDimension()) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1113,"hrow new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1114,"olumn, 0, getColumnDimension() - 1);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1119, Check if submatrix ranges indices are valid.
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1120, Rows and columns are indicated counting from 0 to n-1.
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1122, @param startRow Initial row index
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1123, @param endRow Final row index
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1124, @param startColumn Initial column index
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1125, @param endColumn Final column index
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1126, @exception MatrixIndexException  if the indices are not valid
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1128,"rotected void checkSubMatrixIndex(final int startRow, final int endRow,"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1129,"inal int startColumn, final int endColumn) {"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1130,heckRowIndex(startRow);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1131,heckRowIndex(endRow);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1132,f (startRow > endRow) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1133,"hrow new MatrixIndexException(""initial row {0} after final row {1}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1134,"tartRow, endRow);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1137,heckColumnIndex(startColumn);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1138,heckColumnIndex(endColumn);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1139,f (startColumn > endColumn) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1140,"hrow new MatrixIndexException(""initial column {0} after final column {1}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1141,"tartColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1148, Check if submatrix ranges indices are valid.
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1149, Rows and columns are indicated counting from 0 to n-1.
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1151, @param selectedRows Array of row indices.
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1152, @param selectedColumns Array of column indices.
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1153, @exception MatrixIndexException if row or column selections are not valid
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1155,"rotected void checkSubMatrixIndex(final int[] selectedRows, final int[] selectedColumns) {"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1156,f (selectedRows.length * selectedColumns.length == 0) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1157,f (selectedRows.length == 0) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1158,"hrow new MatrixIndexException(""empty selected row index array"");"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1160,"hrow new MatrixIndexException(""empty selected column index array"");"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1163,or (final int row : selectedRows) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1164,heckRowIndex(row);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1166,or (final int column : selectedColumns) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1167,heckColumnIndex(column);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1172, Check if a matrix is addition compatible with the instance
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1173, @param m matrix to check
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1174, @exception IllegalArgumentException if matrix is not addition compatible with instance
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1176,rotected void checkAdditionCompatible(final RealMatrix m) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1177,f ((getRowDimension()    != m.getRowDimension()) ||
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1178,getColumnDimension() != m.getColumnDimension())) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1179,hrow MathRuntimeException.createIllegalArgumentException(
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1180,"{0}x{1} and {2}x{3} matrices are not addition compatible"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1181,"etRowDimension(), getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1182,".getRowDimension(), m.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1187, Check if a matrix is subtraction compatible with the instance
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1188, @param m matrix to check
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1189, @exception IllegalArgumentException if matrix is not subtraction compatible with instance
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1191,rotected void checkSubtractionCompatible(final RealMatrix m) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1192,f ((getRowDimension()    != m.getRowDimension()) ||
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1193,getColumnDimension() != m.getColumnDimension())) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1194,hrow MathRuntimeException.createIllegalArgumentException(
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1195,"{0}x{1} and {2}x{3} matrices are not subtraction compatible"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1196,"etRowDimension(), getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1197,".getRowDimension(), m.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1202, Check if a matrix is multiplication compatible with the instance
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1203, @param m matrix to check
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1204, @exception IllegalArgumentException if matrix is not multiplication compatible with instance
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1206,rotected void checkMultiplicationCompatible(final RealMatrix m) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1207,f (getColumnDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1208,hrow MathRuntimeException.createIllegalArgumentException(
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1209,"{0}x{1} and {2}x{3} matrices are not multiplication compatible"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1210,"etRowDimension(), getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1211,".getRowDimension(), m.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,22,* Interface defining very basic matrix operations.
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,23,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,24,* @since 2.0
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,26,public interface AnyMatrix {
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,29,* Is this a square matrix?
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,30,* @return true if the matrix is square (rowDimension = columnDimension)
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,32,boolean isSquare();
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,35,* Returns the number of rows in the matrix.
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,37,* @return rowDimension
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,39,int getRowDimension();
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,42,* Returns the number of columns in the matrix.
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,44,* @return columnDimension
True,src/java/org/apache/commons/math/linear/AnyMatrix.java,src/java/org/apache/commons/math/linear/AnyMatrix.java,46,int getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,34,ublic interface BigMatrix {
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,34,public interface BigMatrix extends AnyMatrix {
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,282, Is this a square matrix?
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,283, @return true if the matrix is square (rowDimension = columnDimension)
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,285,oolean isSquare();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,288, Is this a singular matrix?
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,289, @return true if the matrix is singular
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,291,oolean isSingular();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,294, Returns the number of rows in the matrix.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,296, @return rowDimension
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,298,nt getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,301, Returns the number of columns in the matrix.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,303, @return columnDimension
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,305,nt getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,105,f (rowDimension <=0 || columnDimension <=0) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,106,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,107,"""row and column dimensions must be positive"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,105,if (rowDimension <= 0 ) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,106,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,107,"""invalid row dimension {0} (must be positive)"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,108,rowDimension);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,110,if (columnDimension <= 0) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,111,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,112,"""invalid column dimension {0} (must be positive)"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,113,columnDimension);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,154,"hrow new IllegalArgumentException(""Matrix must have at least one row."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,160,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,158,"hrow new IllegalArgumentException(""Matrix must have at least one column."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,165,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,162,"hrow new IllegalArgumentException(""All input rows must have the same length."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,169,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,170,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,171,"nCols, d[r].length);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,184,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,185,"Matrix must have at least one row."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,193,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,189,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,190,"Matrix must have at least one column."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,198,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,194,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,195,"All input rows must have the same length."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,202,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,203,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,204,"nCols, d[row].length);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,214,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,215,"Matrix must have at least one row."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,223,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,219,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,220,"Matrix must have at least one column."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,228,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,224,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,225,"All input rows must have the same length."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,232,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,233,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,234,"nCols, d[row].length);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,279,// safety check
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,280,"MatrixUtils.checkAdditionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,271,f (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,272,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,305,// safety check
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,306,"MatrixUtils.checkAdditionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,296,f (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,297,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,334,// safety check
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,335,"MatrixUtils.checkSubtractionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,324,f (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,325,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,360,// safety check
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,361,"MatrixUtils.checkSubtractionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,349,f (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,350,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,414,f (this.getColumnDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,415,"hrow new IllegalArgumentException(""Matrices are not multiplication compatible."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,428,// safety check
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,429,"MatrixUtils.checkMultiplicationCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,444,f (this.getColumnDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,445,"hrow new IllegalArgumentException(""Matrices are not multiplication compatible."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,459,// safety check
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,460,"MatrixUtils.checkMultiplicationCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,590,heckRowIndex(startRow);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,591,heckRowIndex(endRow);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,605,"MatrixUtils.checkRowIndex(this, startRow);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,606,"MatrixUtils.checkRowIndex(this, endRow);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,597,heckColumnIndex(startColumn);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,598,heckColumnIndex(endColumn);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,612,"MatrixUtils.checkColumnIndex(this, startColumn);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,613,"MatrixUtils.checkColumnIndex(this, endColumn);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,651,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,666,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,654,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,669,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,691,inal int nCols = subMatrix[0].length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,694,"hrow new IllegalArgumentException(""Matrix must have at least one row."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,707,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,710,final int nCols = subMatrix[0].length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,697,"hrow new IllegalArgumentException(""Matrix must have at least one column."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,712,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,702,"hrow new IllegalArgumentException(""All input rows must have the same length."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,717,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,718,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,719,"nCols, subMatrix[r].length);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,720,heckRowIndex(row);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,721,heckColumnIndex(column);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,722,heckRowIndex(nRows + row - 1);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,723,heckColumnIndex(nCols + column - 1);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,737,"MatrixUtils.checkRowIndex(this, row);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,738,"MatrixUtils.checkColumnIndex(this, column);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,739,"MatrixUtils.checkRowIndex(this, nRows + row - 1);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,740,"MatrixUtils.checkColumnIndex(this, nCols + column - 1);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,742,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,759,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,758,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,775,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,778,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,795,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,797,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,814,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,817,heckColumnIndex(col);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,834,"MatrixUtils.checkColumnIndex(this, col);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,838,heckColumnIndex(col);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,855,"MatrixUtils.checkColumnIndex(this, col);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1491, Check if a row index is valid.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1492, @param row row index to check
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1493, @exception MatrixIndexException if index is not valid
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1495,rivate void checkRowIndex(final int row) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1496,f (row < 0 || row >= getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1497,hrow new MatrixIndexException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1498,"row index {0} out of allowed range [{1}, {2}]"","
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1499,"ow, 0, getRowDimension() - 1);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1504, Check if a column index is valid.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1505, @param column column index to check
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1506, @exception MatrixIndexException if index is not valid
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1508,rivate void checkColumnIndex(final int column)
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1509,hrows MatrixIndexException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1510,f (column < 0 || column >= getColumnDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1511,hrow new MatrixIndexException(
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1512,"column index {0} out of allowed range [{1}, {2}]"","
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1513,"olumn, 0, getColumnDimension() - 1);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,314,heckAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,314,"MatrixUtils.checkAdditionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,358,heckAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,358,"MatrixUtils.checkAdditionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,385,heckSubtractionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,385,"MatrixUtils.checkSubtractionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,429,heckSubtractionCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,429,"MatrixUtils.checkSubtractionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,496,heckMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,496,"MatrixUtils.checkMultiplicationCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,555,heckMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,555,"MatrixUtils.checkMultiplicationCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,689,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,689,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,818,"heckSubMatrixIndex(row, endRow, column, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,818,"MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,864,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,864,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,917,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,917,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,955,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,955,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1006,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1006,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1042,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1042,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1076,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1076,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1112,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1112,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1135,heckRowIndex(row);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1135,"MatrixUtils.checkRowIndex(this, row);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1161,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1161,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1186,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1186,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1470,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1470,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1498,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1498,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1570,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1570,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1598,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1598,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,35,ublic interface FieldMatrix<T extends FieldElement<T>> extends Serializable {
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,35,"public interface FieldMatrix<T extends FieldElement<T>> extends AnyMatrix, Serializable {"
False,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,435, Is this a square matrix?
False,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,436, @return true if the matrix is square (rowDimension = columnDimension)
False,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,438,oolean isSquare();
False,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,441, Returns the number of rows in the matrix.
False,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,443, @return rowDimension
False,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,445,nt getRowDimension();
False,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,448, Returns the number of columns in the matrix.
False,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,450, @return columnDimension
False,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,452,nt getColumnDimension();
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,496,* Check if a row index is valid.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,497,* @param m matrix containing the submatrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,498,* @param row row index to check
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,499,* @exception MatrixIndexException if index is not valid
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,501,"public static void checkRowIndex(final AnyMatrix m, final int row) {"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,502,if (row < 0 || row >= m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,503,"throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,504,"row, 0, m.getRowDimension() - 1);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,509,* Check if a column index is valid.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,510,* @param m matrix containing the submatrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,511,* @param column column index to check
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,512,* @exception MatrixIndexException if index is not valid
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,514,"public static void checkColumnIndex(final AnyMatrix m, final int column)"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,515,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,516,if (column < 0 || column >= m.getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,517,"throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,518,"column, 0, m.getColumnDimension() - 1);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,523,* Check if submatrix ranges indices are valid.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,524,* Rows and columns are indicated counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,526,* @param m matrix containing the submatrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,527,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,528,* @param endRow Final row index
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,529,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,530,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,531,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,533,"public static void checkSubMatrixIndex(final AnyMatrix m,"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,534,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,535,"final int startColumn, final int endColumn) {"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,536,"checkRowIndex(m, startRow);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,537,"checkRowIndex(m, endRow);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,538,if (startRow > endRow) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,539,"throw new MatrixIndexException(""initial row {0} after final row {1}"","
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,540,"startRow, endRow);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,543,"checkColumnIndex(m, startColumn);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,544,"checkColumnIndex(m, endColumn);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,545,if (startColumn > endColumn) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,546,"throw new MatrixIndexException(""initial column {0} after final column {1}"","
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,547,"startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,554,* Check if submatrix ranges indices are valid.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,555,* Rows and columns are indicated counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,557,* @param m matrix containing the submatrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,558,* @param selectedRows Array of row indices.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,559,* @param selectedColumns Array of column indices.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,560,* @exception MatrixIndexException if row or column selections are not valid
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,562,"public static void checkSubMatrixIndex(final AnyMatrix m,"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,563,"final int[] selectedRows, final int[] selectedColumns)"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,564,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,565,if (selectedRows.length * selectedColumns.length == 0) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,566,if (selectedRows.length == 0) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,567,"throw new MatrixIndexException(""empty selected row index array"");"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,569,"throw new MatrixIndexException(""empty selected column index array"");"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,572,for (final int row : selectedRows) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,573,"checkRowIndex(m, row);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,575,for (final int column : selectedColumns) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,576,"checkColumnIndex(m, column);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,581,* Check if matrices are addition compatible
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,582,* @param left left hand side matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,583,* @param right right hand side matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,584,* @exception IllegalArgumentException if matrices are not addition compatible
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,586,"public static void checkAdditionCompatible(final AnyMatrix left, final AnyMatrix right)"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,587,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,588,if ((left.getRowDimension()    != right.getRowDimension()) ||
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,589,(left.getColumnDimension() != right.getColumnDimension())) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,590,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,591,"""{0}x{1} and {2}x{3} matrices are not addition compatible"","
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,592,"left.getRowDimension(), left.getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,593,"right.getRowDimension(), right.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,598,* Check if matrices are subtraction compatible
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,599,* @param left left hand side matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,600,* @param right right hand side matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,601,* @exception IllegalArgumentException if matrices are not subtraction compatible
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,603,"public static void checkSubtractionCompatible(final AnyMatrix left, final AnyMatrix right)"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,604,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,605,if ((left.getRowDimension()    != right.getRowDimension()) ||
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,606,(left.getColumnDimension() != right.getColumnDimension())) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,607,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,608,"""{0}x{1} and {2}x{3} matrices are not subtraction compatible"","
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,609,"left.getRowDimension(), left.getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,610,"right.getRowDimension(), right.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,615,* Check if matrices are multiplication compatible
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,616,* @param left left hand side matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,617,* @param right right hand side matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,618,* @exception IllegalArgumentException if matrices are not multiplication compatible
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,620,"public static void checkMultiplicationCompatible(final AnyMatrix left, final AnyMatrix right)"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,621,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,622,if (left.getColumnDimension() != right.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,623,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,624,"""{0}x{1} and {2}x{3} matrices are not multiplication compatible"","
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,625,"left.getRowDimension(), left.getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,626,"right.getRowDimension(), right.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,34,ublic interface RealMatrix extends Serializable {
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,34,"public interface RealMatrix extends AnyMatrix, Serializable {"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,463, Is this a square matrix?
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,464, @return true if the matrix is square (rowDimension = columnDimension)
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,466,oolean isSquare();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,478, Returns the number of rows in the matrix.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,480, @return rowDimension
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,482,nt getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,485, Returns the number of columns in the matrix.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,487, @return columnDimension
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,489,nt getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,191,heckAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,191,"MatrixUtils.checkAdditionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,231,heckSubtractionCompatible(m);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,231,"MatrixUtils.checkSubtractionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,271,heckMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,271,"MatrixUtils.checkMultiplicationCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,500,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,500,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,518,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,518,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,567,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,567,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,585,"heckSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,585,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,248,"hrow new IllegalArgumentException(""Cannot format given Object as a RealVector"");"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,248,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,249,"""cannot format a {0} instance as a real vector"","
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,250,obj.getClass().getName());
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,104,heckAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,104,"MatrixUtils.checkAdditionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,139,heckAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,139,"MatrixUtils.checkAdditionCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,162,heckMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,162,"MatrixUtils.checkMultiplicationCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,193,heckMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,193,"MatrixUtils.checkMultiplicationCompatible(this, m);"
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,225,heckRowIndex(row);
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,226,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,225,"MatrixUtils.checkRowIndex(this, row);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,226,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,240,heckRowIndex(row);
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,241,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,240,"MatrixUtils.checkRowIndex(this, row);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,241,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,253,heckRowIndex(row);
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,254,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,253,"MatrixUtils.checkRowIndex(this, row);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,254,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,268,heckRowIndex(row);
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,269,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,268,"MatrixUtils.checkRowIndex(this, row);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,269,"MatrixUtils.checkColumnIndex(this, column);"
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,118,"hrow new IllegalArgumentException(""state vector dimension mismatch"");"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,118,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,119,"""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,120,"getInterpolatedState().length, model.getInterpolatedState().length);"
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,122,"hrow new IllegalArgumentException(""propagation direction mismatch"");"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,124,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,125,"""propagation direction mismatch"");"
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,131,"hrow new IllegalArgumentException(""hole between time ranges"");"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,134,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,135,"""{0} wide hole between models time ranges"", Math.abs(gap));"
False,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,56," integrator uses p=1, q=2, r=0, s=n-1."
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,56,"* integrator uses p=1, q=2, r=0, s=n-1. The {@link"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,57,"* org.apache.commons.math.ode.stiff.BDFIntegrator BDF} integrator uses p=1, q=n,"
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,58,"* r=0, s=1."
True,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,src/java/org/apache/commons/math/ode/NordsieckTransformer.java,86,* @see org.apache.commons.math.ode.stiff.BDFIntegrator
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,19,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,141,"hrow new IllegalArgumentException(""upper bound must be positive"");"
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,143,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/java/org/apache/commons/math/random/AbstractRandomGenerator.java,144,"""upper bound must be positive ({0})"", n);"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,231,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,232,"Input data comes from the"" + "" unsupported source"");"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,231,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,232,"""input data comes from unsupported datasource: {0}, "" +"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,233,"""supported sources: {1}, {2}"","
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,234,"in.getClass().getName(),"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,235,"BufferedReader.class.getName(), double[].class.getName());"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,27,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,135,"hrow new IllegalArgumentException(""length must be positive"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,136,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,137,"""length must be positive ({0})"", len);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,180,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,181,"upper bound must be > lower bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,182,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,183,"""upper bound ({0}) must be greater than lower bound ({1})"","
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,184,"upper, lower);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,200,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,201,"upper bound must be > lower bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,203,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,204,"""upper bound ({0}) must be greater than lower bound ({1})"","
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,205,"upper, lower);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,230,"hrow new IllegalArgumentException(""length must be positive"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,234,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,235,"""length must be positive ({0})"", len);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,289,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,290,"lower bound must be < upper bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,294,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,295,"""upper bound ({0}) must be greater than lower bound ({1})"","
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,296,"upper, lower);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,309,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,310,"lower bound must be < upper bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,315,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,316,"""upper bound ({0}) must be greater than lower bound ({1})"","
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,317,"upper, lower);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,347,"hrow new IllegalArgumentException(""Poisson mean must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,354,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,355,"""the Poisson mean must be positive ({0})"", mean);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,449,"hrow new IllegalArgumentException(""Gaussian std dev must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,457,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,458,"""standard deviation must be positive ({0})"", sigma);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,471,"hrow new IllegalArgumentException(""Exponential mean must be >= 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,480,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,481,"""mean must be positive ({0})"", mean);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,499,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,500,"lower bound must be < upper bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,509,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,510,"""upper bound ({0}) must be greater than lower bound ({1})"","
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,511,"upper, lower);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,658,"hrow new IllegalArgumentException(""permutation k exceeds n"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,669,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,670,"""permutation k ({0}) exceeds n ({1})"", k, n);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,661,"hrow new IllegalArgumentException(""permutation k must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,673,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,674,"""permutation k ({0}) must be positive"", k);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,693,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,694,"sample size exceeds collection size"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,706,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,707,"""sample size ({0}) exceeds collection size ({1})"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,696,f (k == 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,697,"hrow new IllegalArgumentException(""sample size must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,709,if (k <= 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,710,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,711,"""sample size must be positive ({0})"", k);"
True,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,49,"hrow new IllegalArgumentException(""dimension mismatch"");"
True,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,51,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,52,"""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,53,"mean.length, standardDeviation.length);"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,25,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,113,"hrow new IllegalArgumentException(""Object must implement Comparable"");"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,115,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,116,"""class ({0}) does not implement Comparable"","
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,117,v.getClass().getName());
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,141,"hrow new IllegalArgumentException(""Value not comparable to existing values."");"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,145,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,146,"""instance of class {0} not comparable to existing values"","
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,147,v.getClass().getName());
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,19,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,566,f (n  != sample2.length || n < 1) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,567,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,568,"""Input arrays must have the same (positive) length."");"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,567,if ((n  != sample2.length) || (n < 1)) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,568,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,569,"""input arrays must have the same positive length ({0} and {1})"","
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,570,"n, sample2.length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,611,"hrow new IllegalArgumentException(""Input array lengths must be equal and at least 2."");"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,613,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,614,"""input arrays must have the same length and at least two elements ({0} and {1})"","
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,615,"n, sample2.length);"
True,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,19,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,61,"hrow new IllegalArgumentException(""input value array is null"");"
True,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,62,"throw MathRuntimeException.createIllegalArgumentException(""input values array is null"");"
False,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,129,"hrow new IllegalArgumentException(""input values array is null"");"
True,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,130,"throw MathRuntimeException.createIllegalArgumentException(""input values array is null"");"
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,21,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,83,"hrow new IllegalArgumentException(""input value array is null"");"
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,85,"throw MathRuntimeException.createIllegalArgumentException(""input values array is null"");"
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,87,"hrow new IllegalArgumentException(""start position cannot be negative"");"
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,89,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,90,"""start position cannot be negative ({0})"", begin);"
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,91,"hrow new IllegalArgumentException(""length cannot be negative"");"
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,94,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,95,"""length cannot be negative ({0})"", length);"
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,95,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,96,"begin + length > values.length"");"
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,99,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,100,"""subarray ends after array end"");"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,23,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,304,"hrow new IllegalArgumentException(""window size must be positive."");"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,305,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,306,"""window size must be positive ({0})"", windowSize);"
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,382,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,383,"Percentile implementation does not support setQuantile"");"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,384,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,385,"""percentile implementation {0} does not support setQuantile"","
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,386,percentileImpl.getClass().getName());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,385,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,386,"IllegalAccessException setting quantile"");"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,388,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,389,"""cannot access setQuantile method in percentile implementation {0}"","
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,390,percentileImpl.getClass().getName());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,388,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,389,"Error setting quantile"" + e3.toString());"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,392,throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,564,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,565,"Percentile implementation does not support setQuantile"");"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,567,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,568,"""percentile implementation {0} does not support setQuantile"","
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,569,percentileImpl.getClass().getName());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,567,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,568,"IllegalAccessException setting quantile"");"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,571,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,572,"""cannot access setQuantile method in percentile implementation {0}"","
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,573,percentileImpl.getClass().getName());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,570,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,571,"Error setting quantile"" + e3.toString());"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,575,throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
True,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,21,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,214,"hrow new IllegalArgumentException(""input values array is null"");"
True,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,215,"throw MathRuntimeException.createIllegalArgumentException(""input values array is null"");"
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,199,"hrow new IllegalArgumentException(""invalid quantile value: "" + p);"
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,201,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,202,"""out of bounds quantile value: {0}, must be in (0, 100]"", p);"
False,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,247,"hrow new IllegalArgumentException(""Illegal quantile value: "" + p);"
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,250,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,251,"""out of bounds quantile value: {0}, must be in (0, 100]"", p);"
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,21,import org.apache.commons.math.linear.RealVector;
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,22,import org.apache.commons.math.linear.RealVectorImpl;
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,34,rotected RealMatrix Y;
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,36,protected RealVector Y;
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,42," @param nvars number of independent variables (columnns, not counting y)"
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,44,"* @param nvars number of independent variables (columns, not counting y)"
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,56,his.Y = new RealMatrixImpl(y);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,58,this.Y = new RealVectorImpl(y);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,65,his.Y = new RealMatrixImpl(y);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,67,this.Y = new RealVectorImpl(y);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,123,ealMatrix b = calculateBeta();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,124,eturn b.getColumn(0);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,125,RealVector b = calculateBeta();
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,126,return b.getData();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,131,ealMatrix b = calculateBeta();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,132,ealMatrix e = Y.subtract(X.multiply(b));
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,133,eturn e.getColumn(0);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,133,RealVector b = calculateBeta();
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,134,RealVector e = Y.subtract(X.operate(b));
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,135,return e.getData();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,169,rotected abstract RealMatrix calculateBeta();
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,171,protected abstract RealVector calculateBeta();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,196,rotected RealMatrix calculateResiduals() {
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,197,ealMatrix b = calculateBeta();
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,198,eturn Y.subtract(X.multiply(b));
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,198,protected RealVector calculateResiduals() {
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,199,RealVector b = calculateBeta();
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,200,return Y.subtract(X.operate(b));
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,22,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,549,hrow new IllegalArgumentException();
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,550,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,551,"""out of bounds significance level {0}, must be in (0, 1)"","
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,552,alpha);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,179,f (n < k) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,180,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,181,"must have n >= k for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,183,f (n < 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,184,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,185,"must have n >= 0 for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,179,"checkBinomial(n, k);"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,256,f (n < k) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,257,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,258,"must have n >= k for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,260,f (n < 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,261,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,262,"must have n >= 0 for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,249,"checkBinomial(n, k);"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,304,f (n < k) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,305,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,306,"must have n >= k for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,308,f (n < 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,309,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,310,"must have n >= 0 for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,290,"checkBinomial(n, k);"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,337,* Check binomial preconditions.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,338,* @param n the size of the set
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,339,* @param k the size of the subsets to be counted
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,340,* @exception IllegalArgumentException if preconditions are not met.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,342,"private static void checkBinomial(final int n, final int k)"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,343,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,344,if (n < k) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,345,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,346,"""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,347,"n, k);"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,349,if (n < 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,350,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,351,"""must have n >= 0 for binomial coefficient (n,k), got n = {0}"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,352,n);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,504,"hrow new IllegalArgumentException(""must have n >= 0 for n!"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,503,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,504,"""must have n >= 0 for n!, got n = {0}"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,505,n);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,535,"hrow new IllegalArgumentException(""must have n >= 0 for n!"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,536,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,537,"""must have n >= 0 for n!, got n = {0}"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,538,n);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,558,"hrow new IllegalArgumentException(""must have n > 0 for n!"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,561,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,562,"""must have n >= 0 for n!, got n = {0}"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,563,n);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1135,"hrow new IllegalArgumentException(""Invalid rounding method."");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1140,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1141,"""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}),"" +"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1142,""" {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1143,"roundingMethod,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1144,"""ROUND_CEILING"",     BigDecimal.ROUND_CEILING,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1145,"""ROUND_DOWN"",        BigDecimal.ROUND_DOWN,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1146,"""ROUND_FLOOR"",       BigDecimal.ROUND_FLOOR,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1147,"""ROUND_HALF_DOWN"",   BigDecimal.ROUND_HALF_DOWN,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1148,"""ROUND_HALF_EVEN"",   BigDecimal.ROUND_HALF_EVEN,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1149,"""ROUND_HALF_UP"",     BigDecimal.ROUND_HALF_UP,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1150,"""ROUND_UNNECESSARY"", BigDecimal.ROUND_UNNECESSARY,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1151,"""ROUND_UP"",          BigDecimal.ROUND_UP);"

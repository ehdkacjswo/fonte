is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,17,package org.apache.commons.math.complex;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,21,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,22,import org.apache.commons.math.exception.MathIllegalStateException;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,23,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,24,import org.apache.commons.math.exception.ZeroException;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,25,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,26,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,29,* A helper class for the computation and caching of the {@code n}<sup>th</sup>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,30,* roots of unity.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,32,* @version $Id$
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,33,* @since 3.0
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,35,public class RootsOfUnity implements Serializable {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,37,/** Serializable version id. */
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,38,private static final long serialVersionUID = 6404784357747329667L;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,40,/** Number of roots of unity. */
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,41,private int omegaCount;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,43,/** Real part of the roots. */
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,44,private double[] omegaReal;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,46,/** Imaginary part of the roots for forward transform. */
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,47,private double[] omegaImaginaryForward;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,49,/** Imaginary part of the roots for reverse transform. */
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,50,private double[] omegaImaginaryInverse;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,52,/** Forward/reverse indicator. */
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,53,private boolean isForward;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,56,* Build an engine for computing the {@code n}<sup>th</sup> roots of
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,57,* unity.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,59,public RootsOfUnity() {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,61,omegaCount = 0;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,62,omegaReal = null;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,63,omegaImaginaryForward = null;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,64,omegaImaginaryInverse = null;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,65,isForward = true;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,69,* Check if computation has been done for forward or reverse transform.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,71,* @return {@code true} if computation has been done for forward transform
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,72,* @throws MathIllegalStateException if no roots of unity have been computed
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,73,* yet
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,75,public synchronized boolean isForward()
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,76,throws MathIllegalStateException {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,78,if (omegaCount == 0) {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,79,throw new MathIllegalStateException(
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,80,LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,82,return isForward;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,86,* <p>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,87,* Computes the {@code n}<sup>th</sup> roots of unity. The roots are
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,88,"* stored in {@code omega[]}, such that {@code omega[k] = w ^ k}, where"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,89,"* {@code k = 0, ..., n - 1}, {@code w = exp(-2 &pi; i / n)} and"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,90,* {@code i = sqrt(-1)}.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,91,* </p>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,92,* <p>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,93,* Note that {@code n} is positive for forward transform and negative
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,94,* for inverse transform.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,95,* </p>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,97,"* @param n number of roots of unity to compute, positive for forward"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,98,"* transform, negative for inverse transform"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,99,* @throws ZeroException if {@code n = 0}
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,101,public synchronized void computeOmega(int n) throws ZeroException {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,103,if (n == 0) {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,104,throw new ZeroException(
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,105,LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY);
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,108,isForward = n > 0;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,110,// avoid repetitive calculations
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,111,final int absN = FastMath.abs(n);
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,113,if (absN == omegaCount) {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,114,return;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,117,"// calculate everything from scratch, for both forward and inverse"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,118,// versions
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,119,final double t = 2.0 * FastMath.PI / absN;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,120,final double cosT = FastMath.cos(t);
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,121,final double sinT = FastMath.sin(t);
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,122,omegaReal = new double[absN];
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,123,omegaImaginaryForward = new double[absN];
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,124,omegaImaginaryInverse = new double[absN];
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,125,omegaReal[0] = 1.0;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,126,omegaImaginaryForward[0] = 0.0;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,127,omegaImaginaryInverse[0] = 0.0;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,128,for (int i = 1; i < absN; i++) {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,129,omegaReal[i] = omegaReal[i - 1] * cosT +
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,130,omegaImaginaryForward[i - 1] * sinT;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,131,omegaImaginaryForward[i] = omegaImaginaryForward[i - 1] * cosT -
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,132,omegaReal[i - 1] * sinT;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,133,omegaImaginaryInverse[i] = -omegaImaginaryForward[i];
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,135,omegaCount = absN;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,139,* Get the real part of the {@code k}<sup>th</sup>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,140,* {@code n}<sup>th</sup> root of unity.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,142,* @param k index of the {@code n}<sup>th</sup> root of unity
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,143,* @return real part of the {@code k}<sup>th</sup>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,144,* {@code n}<sup>th</sup> root of unity
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,145,* @throws MathIllegalStateException if no roots of unity have been
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,146,* computed yet
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,147,* @throws MathIllegalArgumentException if {@code k} is out of range
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,149,public synchronized double getOmegaReal(int k)
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,150,"throws MathIllegalStateException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,152,if (omegaCount == 0) {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,153,throw new MathIllegalStateException(
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,154,LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,156,if ((k < 0) || (k >= omegaCount)) {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,157,throw new OutOfRangeException(
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,158,"LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,159,"Integer.valueOf(k),"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,160,"Integer.valueOf(0),"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,161,Integer.valueOf(omegaCount - 1));
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,164,return omegaReal[k];
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,168,* Get the imaginary part of the {@code k}<sup>th</sup>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,169,* {@code n}<sup>th</sup> root of unity.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,171,* @param k index of the {@code n}<sup>th</sup> root of unity
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,172,* @return imaginary part of the {@code k}<sup>th</sup>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,173,* {@code n}<sup>th</sup> root of unity
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,174,* @throws MathIllegalStateException if no roots of unity have been
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,175,* computed yet
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,176,* @throws OutOfRangeException if {@code k} is out of range
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,178,public synchronized double getOmegaImaginary(int k)
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,179,"throws MathIllegalStateException, OutOfRangeException {"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,181,if (omegaCount == 0) {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,182,throw new MathIllegalStateException(
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,183,LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,185,if ((k < 0) || (k >= omegaCount)) {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,186,throw new OutOfRangeException(
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,187,"LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,188,"Integer.valueOf(k),"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,189,"Integer.valueOf(0),"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,190,Integer.valueOf(omegaCount - 1));
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,193,return isForward ? omegaImaginaryForward[k] :
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,194,omegaImaginaryInverse[k];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,25,import org.apache.commons.math.complex.RootsOfUnity;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,27,mport org.apache.commons.math.exception.MathIllegalStateException;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,28,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,29,mport org.apache.commons.math.exception.ZeroException;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,644, Computes the {@code n}<sup>th</sup> roots of unity. A cache of already
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,645, computed values is maintained.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,647,rivate static class RootsOfUnity implements Serializable {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,649,** Serializable version id. */
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,650,rivate static final long serialVersionUID = 6404784357747329667L;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,652,** Number of roots of unity. */
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,653,rivate int omegaCount;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,655,** Real part of the roots. */
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,656,rivate double[] omegaReal;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,658,** Imaginary part of the roots for forward transform. */
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,659,rivate double[] omegaImaginaryForward;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,661,** Imaginary part of the roots for reverse transform. */
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,662,rivate double[] omegaImaginaryInverse;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,664,** Forward/reverse indicator. */
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,665,rivate boolean isForward;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,668, Build an engine for computing the {@code n}<sup>th</sup> roots of
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,669, unity.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,671,ublic RootsOfUnity() {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,673,megaCount = 0;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,674,megaReal = null;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,675,megaImaginaryForward = null;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,676,megaImaginaryInverse = null;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,677,sForward = true;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,681, Check if computation has been done for forward or reverse transform.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,683, @return {@code true} if computation has been done for forward transform
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,684, @throws MathIllegalStateException if no roots of unity have been computed
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,685, yet
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,687,ublic synchronized boolean isForward()
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,688,hrows MathIllegalStateException {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,690,f (omegaCount == 0) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,691,hrow new MathIllegalStateException(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,692,ocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,694,eturn isForward;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,698, <p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,699, Computes the {@code n}<sup>th</sup> roots of unity. The roots are
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,700," stored in {@code omega[]}, such that {@code omega[k] = w ^ k}, where"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,701," {@code k = 0, ..., n - 1}, {@code w = exp(-2 &pi; i / n)} and"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,702, {@code i = sqrt(-1)}.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,703, </p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,704, <p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,705, Note that {@code n} is positive for forward transform and negative
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,706, for inverse transform.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,707, </p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,709," @param n number of roots of unity to compute, positive for forward"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,710," transform, negative for inverse transform"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,711, @throws ZeroException if {@code n = 0}
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,713,ublic synchronized void computeOmega(int n) throws ZeroException {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,715,f (n == 0) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,716,hrow new ZeroException(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,717,ocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,720,sForward = n > 0;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,722,/ avoid repetitive calculations
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,723,inal int absN = FastMath.abs(n);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,725,f (absN == omegaCount) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,726,eturn;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,729,"/ calculate everything from scratch, for both forward and inverse"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,730,/ versions
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,731,inal double t = 2.0 * FastMath.PI / absN;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,732,inal double cosT = FastMath.cos(t);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,733,inal double sinT = FastMath.sin(t);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,734,megaReal = new double[absN];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,735,megaImaginaryForward = new double[absN];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,736,megaImaginaryInverse = new double[absN];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,737,megaReal[0] = 1.0;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,738,megaImaginaryForward[0] = 0.0;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,739,megaImaginaryInverse[0] = 0.0;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,740,or (int i = 1; i < absN; i++) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,741,megaReal[i] = omegaReal[i - 1] * cosT +
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,742,megaImaginaryForward[i - 1] * sinT;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,743,megaImaginaryForward[i] = omegaImaginaryForward[i - 1] * cosT -
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,744,megaReal[i - 1] * sinT;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,745,megaImaginaryInverse[i] = -omegaImaginaryForward[i];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,747,megaCount = absN;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,751, Get the real part of the {@code k}<sup>th</sup>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,752, {@code n}<sup>th</sup> root of unity.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,754, @param k index of the {@code n}<sup>th</sup> root of unity
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,755, @return real part of the {@code k}<sup>th</sup>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,756, {@code n}<sup>th</sup> root of unity
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,757, @throws MathIllegalStateException if no roots of unity have been
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,758, computed yet
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,759, @throws MathIllegalArgumentException if {@code k} is out of range
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,761,ublic synchronized double getOmegaReal(int k)
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,762,"hrows MathIllegalStateException, MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,764,f (omegaCount == 0) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,765,hrow new MathIllegalStateException(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,766,ocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,768,f ((k < 0) || (k >= omegaCount)) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,769,hrow new OutOfRangeException(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,770,"ocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,771,"nteger.valueOf(k),"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,772,"nteger.valueOf(0),"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,773,nteger.valueOf(omegaCount - 1));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,776,eturn omegaReal[k];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,780, Get the imaginary part of the {@code k}<sup>th</sup>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,781, {@code n}<sup>th</sup> root of unity.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,783, @param k index of the {@code n}<sup>th</sup> root of unity
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,784, @return imaginary part of the {@code k}<sup>th</sup>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,785, {@code n}<sup>th</sup> root of unity
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,786, @throws MathIllegalStateException if no roots of unity have been
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,787, computed yet
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,788, @throws OutOfRangeException if {@code k} is out of range
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,790,ublic synchronized double getOmegaImaginary(int k)
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,791,"hrows MathIllegalStateException, OutOfRangeException {"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,793,f (omegaCount == 0) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,794,hrow new MathIllegalStateException(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,795,ocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,797,f ((k < 0) || (k >= omegaCount)) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,798,hrow new OutOfRangeException(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,799,"ocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,800,"nteger.valueOf(k),"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,801,"nteger.valueOf(0),"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,802,nteger.valueOf(omegaCount - 1));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,805,eturn isForward ? omegaImaginaryForward[k] :
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,806,megaImaginaryInverse[k];

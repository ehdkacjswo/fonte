is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,338,"f (Precision.compareTo(entry, 0d, maxUlps) > 0) {"
True,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java,338,"if (Precision.compareTo(entry, 0d, epsilon) > 0) {"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,32,@Test
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,33,public void testMath781() {
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,34,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,36,ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,37,"constraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,38,"constraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,39,"constraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,41,double epsilon = 1e-6;
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,42,SimplexSolver solver = new SimplexSolver();
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,43,"PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,45,"Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,46,"Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,47,"Assert.assertTrue(Precision.compareTo(solution.getPoint()[2], 0.0d, epsilon) < 0);"
True,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,48,"Assert.assertEquals(2.0d, solution.getValue(), epsilon);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,483,// Determine the largest main and secondary value in absolute term.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,484,double maxAbsoluteValue=0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,485,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,486,if (Math.abs(realEigenvalues[i])>maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,487,maxAbsoluteValue=Math.abs(realEigenvalues[i]);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,489,if (Math.abs(e[i])>maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,490,maxAbsoluteValue=Math.abs(e[i]);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,493,// Make null any main and secondary value too small to be significant
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,494,if (maxAbsoluteValue!=0.0) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,495,for (int i=0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,496,if (Math.abs(realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,497,realEigenvalues[i]=0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,499,if (Math.abs(e[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,500,e[i]=0.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,571,ouble maxAbsoluteValue=0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,594,maxAbsoluteValue=0.0;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,91,or (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,91,for (int j = i; j < n; j++) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,96,matATA[j][i]=matATA[i][j];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,104,or (int j = 0; j < m; j++) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,105,for (int j = i; j < m; j++) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,110,matAAT[j][i]=matAAT[i][j];

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,850,/** Apply the rotation to a vector stored in an array.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,851,* @param in an array with three items which stores vector to rotate
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,852,* @param out an array with three items to put result to (it can be the same
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,853,* array as in)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,855,"public void applyTo(final double[] in, final double[] out) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,857,final double x = in[0];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,858,final double y = in[1];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,859,final double z = in[2];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,861,final double s = q1 * x + q2 * y + q3 * z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,863,out[0] = 2 * (q0 * (x * q0 - (q2 * z - q3 * y)) + s * q1) - x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,864,out[1] = 2 * (q0 * (y * q0 - (q3 * x - q1 * z)) + s * q2) - y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,865,out[2] = 2 * (q0 * (z * q0 - (q1 * y - q2 * x)) + s * q3) - z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,888,/** Apply the inverse of the rotation to a vector stored in an array.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,889,* @param in an array with three items which stores vector to rotate
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,890,* @param out an array with three items to put result to (it can be the same
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,891,* array as in)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,893,"public void applyInverseTo(final double[] in, final double[] out) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,895,final double x = in[0];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,896,final double y = in[1];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,897,final double z = in[2];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,899,final double s = q1 * x + q2 * y + q3 * z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,900,final double m0 = -q0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,902,out[0] = 2 * (m0 * (x * m0 - (q2 * z - q3 * y)) + s * q1) - x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,903,out[1] = 2 * (m0 * (y * m0 - (q3 * x - q1 * z)) + s * q2) - y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,904,out[2] = 2 * (m0 * (z * m0 - (q1 * y - q2 * x)) + s * q3) - z;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,441,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,442,public void testArray() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,444,"Rotation r = new Rotation(new Vector3D(2, -3, 5), 1.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,446,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,447,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,448,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,449,"Vector3D u = new Vector3D(x, y, z);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,450,Vector3D v = r.applyTo(u);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,451,"double[] inOut = new double[] { x, y, z };"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,452,"r.applyTo(inOut, inOut);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,453,"Assert.assertEquals(v.getX(), inOut[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,454,"Assert.assertEquals(v.getY(), inOut[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,455,"Assert.assertEquals(v.getZ(), inOut[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,456,"r.applyInverseTo(inOut, inOut);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,457,"Assert.assertEquals(u.getX(), inOut[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,458,"Assert.assertEquals(u.getY(), inOut[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,459,"Assert.assertEquals(u.getZ(), inOut[2], 1.0e-10);"

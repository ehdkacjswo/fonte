is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,37, Returns the error function erf(x).
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,38,* <p>Returns the error function</p>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,39,* <p>erf(x) = 2/&radic;&pi; <sub>0</sub>&int;<sup>x</sup> e<sup>-t<sup>2</sup></sup>dt </p>
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,39, The implementation of this method is based on:
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,40, <ul>
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,41, <li>
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,42," <a href=""http://mathworld.wolfram.com/Erf.html"">"
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,43," Erf</a>, equation (3).</li>"
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,44, </ul>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,41,* <p>This implementation computes erf(x) using the
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,42,"* {@link Gamma#regularizedGammaP(double, double, double, int) regularized gamma function},"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,43,"* following <a href=""http://mathworld.wolfram.com/Erf.html""> Erf</a>, equation (3)</p>"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,45,"* <p>The value returned is always between -1 and 1 (inclusive).  If {@code abs(x) > 40}, then"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,46,"* {@code erf(x)} is indistinguishable from either 1 or -1 as a double, so the appropriate extreme"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,47,* value is returned.</p>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,52,"* @see Gamma#regularizedGammaP(double, double, double, int)"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,55,if (FastMath.abs(x) > 40) {
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,56,return x > 0 ? 1 : -1;
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,66,* <p>Returns the complementary error function</p>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,67,* <p>erfc(x) = 2/&radic;&pi; <sub>x</sub>&int;<sup>&infin;</sup> e<sup>-t<sup>2</sup></sup>dt <br/>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,68,*    = 1 - {@link #erf(double) erf(x)} </p>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,70,* <p>This implementation computes erfc(x) using the
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,71,"* {@link Gamma#regularizedGammaQ(double, double, double, int) regularized gamma function},"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,72,"* following <a href=""http://mathworld.wolfram.com/Erf.html""> Erf</a>, equation (3).</p>"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,74,"* <p>The value returned is always between 0 and 2 (inclusive).  If {@code abs(x) > 40}, then"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,75,"* {@code erf(x)} is indistinguishable from either 0 or 2 as a double, so the appropriate extreme"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,76,* value is returned.</p>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,78,* @param x the value
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,79,* @return the complementary error function erfc(x)
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,80,* @throws MathException if the algorithm fails to converge
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,81,"* @see Gamma#regularizedGammaQ(double, double, double, int)"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,82,* @since 2.2
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,84,public static double erfc(double x) throws MathException {
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,85,if (FastMath.abs(x) > 40) {
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,86,return x > 0 ? 0 : 2;
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,88,"final double ret = Gamma.regularizedGammaQ(0.5, x * x, 1.0e-15, 10000);"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,89,return x < 0 ? 2 - ret : ret;
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,21,import org.apache.commons.math.TestUtils;
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,33,"ssertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,34,"assertEquals(expected, actual, 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,35,"assertEquals(1 - expected, Erf.erfc(0.0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,43,"assertEquals(1 - actual, Erf.erfc(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,48,"assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,56,"assertEquals(1 - actual, Erf.erfc(x), 1e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,61,"assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,69,"assertEquals(1 - actual, Erf.erfc(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,74,"assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,82,"assertEquals(1 - expected, Erf.erfc(x), 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,87,"assertEquals(1 - expected, Erf.erfc(-x), 1.0e-5);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,81, MATH-301
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,91,"* MATH-301, MATH-456"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,84,or (int i = 1; i < 200; i++) {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,94,for (int i = 1; i < 200; i*=10) {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,98,result = Erf.erf(-i);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,99,assertFalse(Double.isNaN(result));
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,100,assertTrue(result >= -1 && result < 0);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,101,result = Erf.erfc(i);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,102,assertFalse(Double.isNaN(result));
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,103,assertTrue(result >= 0 && result < 1);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,104,result = Erf.erfc(-i);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,105,assertFalse(Double.isNaN(result));
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,106,assertTrue(result >= 1 && result <= 2);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,108,"assertEquals(-1, Erf.erf(Double.NEGATIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,109,"assertEquals(1, Erf.erf(Double.POSITIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,110,"assertEquals(2, Erf.erfc(Double.NEGATIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,111,"assertEquals(0, Erf.erfc(Double.POSITIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,115,* Compare Erf.erf against reference values computed using GCC 4.2.1 (Apple OSX packaged version)
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,116,* erfl (extended precision erf).
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,118,public void testErfGnu() throws Exception {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,119,final double tol = 1E-15;
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,120,"final double[] gnuValues = new double[] {-1, -1, -1, -1, -1,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,121,"-1, -1, -1, -0.99999999999999997848,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,122,"-0.99999999999999264217, -0.99999999999846254017, -0.99999999980338395581, -0.99999998458274209971,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,123,"-0.9999992569016276586, -0.99997790950300141459, -0.99959304798255504108, -0.99532226501895273415,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,124,"-0.96610514647531072711, -0.84270079294971486948, -0.52049987781304653809,  0,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,125,"0.52049987781304653809, 0.84270079294971486948, 0.96610514647531072711, 0.99532226501895273415,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,126,"0.99959304798255504108, 0.99997790950300141459, 0.9999992569016276586, 0.99999998458274209971,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,127,"0.99999999980338395581, 0.99999999999846254017, 0.99999999999999264217, 0.99999999999999997848,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,128,"1,  1,  1,  1,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,129,"1,  1,  1,  1};"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,130,double x = -10d;
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,131,for (int i = 0; i < 41; i++) {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,132,"assertEquals(gnuValues[i], Erf.erf(x), tol);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,133,x += 0.5d;
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,138,* Compare Erf.erfc against reference values computed using GCC 4.2.1 (Apple OSX packaged version)
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,139,* erfcl (extended precision erfc).
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,141,public void testErfcGnu() throws Exception {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,142,final double tol = 1E-15;
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,143,"final double[] gnuValues = new double[] { 2,  2,  2,  2,  2,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,144,"2,  2,  2, 1.9999999999999999785,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,145,"1.9999999999999926422, 1.9999999999984625402, 1.9999999998033839558, 1.9999999845827420998,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,146,"1.9999992569016276586, 1.9999779095030014146, 1.9995930479825550411, 1.9953222650189527342,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,147,"1.9661051464753107271, 1.8427007929497148695, 1.5204998778130465381,  1,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,148,"0.47950012218695346194, 0.15729920705028513051, 0.033894853524689272893, 0.0046777349810472658333,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,149,"0.00040695201744495893941, 2.2090496998585441366E-05, 7.4309837234141274516E-07, 1.5417257900280018858E-08,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,150,"1.966160441542887477E-10, 1.5374597944280348501E-12, 7.3578479179743980661E-15, 2.1519736712498913103E-17,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,151,"3.8421483271206474691E-20, 4.1838256077794144006E-23, 2.7766493860305691016E-26, 1.1224297172982927079E-29,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,152,"2.7623240713337714448E-33, 4.1370317465138102353E-37, 3.7692144856548799402E-41, 2.0884875837625447567E-45};"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,153,double x = -10d;
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,154,for (int i = 0; i < 41; i++) {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,155,"assertEquals(gnuValues[i], Erf.erfc(x), tol);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,156,x += 0.5d;
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,161,"* Tests erfc against reference data computed using Maple reported in Marsaglia, G,,"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,162,"* ""Evaluating the Normal Distribution,"" Journal of Statistical Software, July, 2004."
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,163,* http//www.jstatsoft.org/v11/a05/paper
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,165,public void testErfcMaple() throws Exception {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,166,double[][] ref = new double[][]
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,167,"{{0.1, 4.60172162722971e-01},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,168,"{1.2, 1.15069670221708e-01},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,169,"{2.3, 1.07241100216758e-02},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,170,"{3.4, 3.36929265676881e-04},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,171,"{4.5, 3.39767312473006e-06},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,172,"{5.6, 1.07175902583109e-08},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,173,"{6.7, 1.04209769879652e-11},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,174,"{7.8, 3.09535877195870e-15},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,175,"{8.9, 2.79233437493966e-19},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,176,"{10.0, 7.61985302416053e-24},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,177,"{11.1, 6.27219439321703e-29},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,178,"{12.2, 1.55411978638959e-34},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,179,"{13.3, 1.15734162836904e-40},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,180,"{14.4, 2.58717592540226e-47},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,181,"{15.5, 1.73446079179387e-54},"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,182,"{16.6, 3.48454651995041e-62}"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,184,for (int i = 0; i < 15; i++) {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,185,final double result = 0.5*Erf.erfc(ref[i][0]/Math.sqrt(2));
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,186,"assertEquals(ref[i][1], result, 1E-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,187,"TestUtils.assertRelativelyEquals(ref[i][1], result, 1E-13);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,59, @version $Revision: 1.5 $ $Date: 2003/07/30 21:58:10 $
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,58,* @version $Revision: 1.6 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,74,ublic MathConfigurationException(String message) {
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,73,public MathConfigurationException(final String message) {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,83,"ublic MathConfigurationException(String message, Throwable throwable) {"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,82,public MathConfigurationException(
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,83,"final String message,"
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,84,final Throwable throwable) {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,91,ublic MathConfigurationException(Throwable throwable) {
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,92,public MathConfigurationException(final Throwable throwable) {
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,59, @version $Revision: 1.4 $ $Date: 2003/07/09 20:02:44 $
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,58,* @version $Revision: 1.5 $ $Date: 2003/08/09 04:03:41 $
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,63,* Constructs a MathException
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,73,ublic MathException(String message) {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,72,public MathException(final String message) {
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,81,"ublic MathException(String message, Throwable throwable) {"
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,80,"public MathException(final String message, final Throwable throwable) {"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,88,ublic MathException(Throwable throwable) {
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,87,public MathException(final Throwable throwable) {
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,63, @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,62,* @version $Revision: 1.3 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65, @version $Revision: 1.3 $ $Date: 2003/07/09 21:45:23 $
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65,* @version $Revision: 1.4 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,112, @see org.apache.commons.math.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,112,* @see org.apache.commons.math.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,60, @version $Revision: 1.14 $ $Date: 2003/07/09 21:45:23 $
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,60,* @version $Revision: 1.15 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,62,ublic class StatUtils {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,62,public final class StatUtils {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,65,* Private Constructor
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,67,private StatUtils() {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,69,ublic static double sum(double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,75,public static double sum(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,80,"ublic static double sum(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,86,public static double sum(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,87,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,88,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,89,final int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,94,ublic static double sumSq(double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,103,public static double sumSq(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,105,"ublic static double sumSq(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,114,public static double sumSq(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,115,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,116,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,117,final int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,119,ublic static double product(double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,131,public static double product(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,130,"ublic static double product(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,142,public static double product(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,143,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,144,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,145,final int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,144,ublic static double sumLog(double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,159,public static double sumLog(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,155,"ublic static double sumLog(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,170,public static double sumLog(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,171,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,172,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,173,final int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,166, arithmetic mean </a> of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,184,* arithmetic mean </a> of the available values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,170,ublic static double mean(double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,188,public static double mean(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,176, arithmetic mean </a> of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,194,* arithmetic mean </a> of the available values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,182,"ublic static double mean(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,200,public static double mean(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,201,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,202,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,203,final int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,189, two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,210,* two pass algorithm of the following
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,193," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,214,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,197," @return the result, Double.NaN if no values for an empty array"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,198, or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,218,"* @return the result, Double.NaN if no values for an empty array"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,219,* or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,200,ublic static double variance(double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,221,public static double variance(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,206, two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,227,* two pass algorithm of the following
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,210," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,231,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,216," @return the result, Double.NaN if no values for an empty array"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,217, or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,237,"* @return the result, Double.NaN if no values for an empty array"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,238,* or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,219,"ublic static double variance(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,240,public static double variance(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,241,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,242,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,243,final int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,234,"accum - (Math.pow(accum2, 2) / ((double)length)))"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,258,"(accum - (Math.pow(accum2, 2) / ((double) length)))"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,245,ublic static double max(double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,269,public static double max(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,256,"ublic static double max(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,280,public static double max(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,281,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,282,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,283,final int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,263,ax = (max > values[i]) ? max : values[i];
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,290,if (max < values[i]) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,291,max = values[i];
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,274,ublic static double min(double[] values) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,303,public static double min(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,285,"ublic static double min(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,314,public static double min(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,315,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,316,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,317,final int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,293,in = (min < values[i]) ? min : values[i];
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,326,if (min > values[i]) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,327,min = values[i];
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,300, Private testInput method used by all methods to verify the content
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,335,* Private testInput method used by all methods to verify the content
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,306,"rivate static void testInput(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,341,private static void testInput(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,342,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,343,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,344,final int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,308,f (length > values.length)
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,346,if (length > values.length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,311,f (begin + length > values.length)
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,312,"hrow new IllegalArgumentException(""begin + length > values.length"");"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,350,if (begin + length > values.length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,351,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,352,"""begin + length > values.length"");"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,314,f (values == null)
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,355,if (values == null) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,62, @version $Revision: 1.6 $ $Date: 2003/07/30 21:58:11 $
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,62,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,69, This implements the AbstractUnivariateStatistic impl to funnel
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,69,* This implements the AbstractUnivariateStatistic impl to funnel
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,71, StorelessUnivariateStatistic this is never really used because more
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,71,* StorelessUnivariateStatistic this is never really used because more
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,73, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,74," UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,73,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,76,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,75,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,76,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,77,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,78,final int length) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,90,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,92,public abstract void clear();
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,95,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,97,public abstract double getResult();
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,100,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,102,public abstract void increment(final double d);
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,59, indiviual statistics do not need to implement these methods.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,60, @version $Revision: 1.5 $ $Date: 2003/07/15 03:37:10 $
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,59,* indiviual statistics do not need to implement these methods.
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,60,* @version $Revision: 1.6 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,69, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,70, UnivariateStatistic#evaluate(double[])
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,68,* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[])
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,72,ublic double evaluate(double[] values) {
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,70,public double evaluate(final double[] values) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,78, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,79," UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,76,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,81,"ublic abstract double evaluate(double[] values, int begin, int length);"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,78,public abstract double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,79,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,80,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,81,final int length);
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,84, this protected test method used by all methods to verify the content
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,84,* this protected test method used by all methods to verify the content
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,89,"* @return this is used to determine if the array is of 0 length or not,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,90,* it is used by an individual statistic to determine if continuation
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,91,* of a statistical calculation should continue or return NaN.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,90,"rotected boolean test(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,93,protected boolean test(
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,94,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,95,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,96,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,97,"hrow new IllegalArgumentException(""begin + length > values.length"");"
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,103,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,104,"""begin + length > values.length"");"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,59, maintain a double[] of the values. Because a StorelessUnivariateStatistic
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,60, does not require that a double[] storage structure be maintained with the
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,61," values in it, there are only a subset of known statistics can actually be"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,62, implemented using it. If a Statistic cannot be implemented in a Storeless
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,63, approach it should implement the UnivariateStatistic interface directly
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,59,* maintain a double[] of the values. Because a StorelessUnivariateStatistic
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,60,* does not require that a double[] storage structure be maintained with the
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,61,"* values in it, there are only a subset of known statistics can actually be"
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,62,* implemented using it. If a Statistic cannot be implemented in a Storeless
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,63,* approach it should implement the UnivariateStatistic interface directly
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,65, @version $Revision: 1.6 $ $Date: 2003/07/15 03:37:10 $
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,65,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,57, UnivariateStatistic interface provides methods to evaluate
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,58, double[] based content using an implemented statistical approach.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,59," The interface provides two ""stateless"" simple methods to calculate"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,57,* UnivariateStatistic interface provides methods to evaluate
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,58,* double[] based content using an implemented statistical approach.
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,59,"* The interface provides two ""stateless"" simple methods to calculate"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,61, @version $Revision: 1.5 $ $Date: 2003/07/15 03:37:10 $
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,61,* @version $Revision: 1.6 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,68, @return the result of the evaluation or Double.NaN
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,68,* @return the result of the evaluation or Double.NaN
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,74, Evaluates part of a double[] returning the result
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,74,* Evaluates part of a double[] returning the result
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,79, @return the result of the evaluation or Double.NaN
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,79,* @return the result of the evaluation or Double.NaN
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,82,"ouble evaluate(double[] values, int begin, int length);"
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,82,"double evaluate(double[] values, int begin, int length);"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,61, The FirstMoment (arithmentic mean) is calculated using the following
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,61,* The FirstMoment (arithmentic mean) is calculated using the following
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,65, @version $Revision: 1.5 $ $Date: 2003/07/15 03:36:36 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,65,* @version $Revision: 1.6 $ $Date: 2003/08/09 04:03:40 $
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,77, higher order moments
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,77,* higher order moments
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,83, higher order moments
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,83,* higher order moments
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,89, higher order moments
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,89,* higher order moments
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,94, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,95, StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,94,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,97,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,96,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,111, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,112, StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,110,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,123, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,124, StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,121,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,57, The FourthMoment is calculated using the following
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,57,* The FourthMoment is calculated using the following
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,61, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,61,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:40 $
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,78,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,78,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,80,4 = m3 = m2 = m1 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,80,m4 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,81,m3 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,82,m2 = 0.0;
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,83,m1 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,99, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,102,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,61, @version $Revision: 1.8 $ $Date: 2003/07/09 20:04:10 $
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,61,* @version $Revision: 1.9 $ $Date: 2003/08/09 04:03:40 $
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,73,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,77,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,79, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,83,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,108,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,112,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,113,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,114,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,115,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,65, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,65,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:40 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,82,* Construct a Kurtosis
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,81,ublic Kurtosis(FourthMoment m4) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,89,* Construct a Kurtosis with an external moment
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,90,* @param m4 external Moment
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,92,public Kurtosis(final FourthMoment m4) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,89,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,100,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,96, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,107,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,141, This algorithm uses a corrected two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,153,* This algorithm uses a corrected two pass algorithm of the following
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,146," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,158,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,149, Returns the kurtosis for this collection of values. Kurtosis is a
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,161,* Returns the kurtosis for this collection of values. Kurtosis is a
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,156,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,168,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,169,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,170,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,171,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,170,"/ Calc the std, this is implemented here instead of using the"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,171,/ standardDeviation method eliminate a duplicate pass to get the mean
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,184,"// Calc the std, this is implemented here instead"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,185,// of using the standardDeviation method eliminate
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,186,// a duplicate pass to get the mean
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,184,/ Sum the ^4 of the distance from the mean divided by the
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,199,// Sum the ^4 of the distance from the mean divided by the
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,192,ouble n = length;
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,207,double n0 = length;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,195,n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,210,(n0 * (n0 + 1)) / ((n0 - 1) * (n0 - 2) * (n0 - 3));
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,197,"(3 * Math.pow(n - 1, 2.0)) / ((n - 2) * (n - 3)));"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,212,"((3 * Math.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3)));"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,56,mport org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,56,import org
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,57,.apache
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,58,.commons
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,59,.math
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,60,.stat
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,61,.univariate
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,62,.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,62, @version $Revision: 1.7 $ $Date: 2003/07/15 03:36:36 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,68,* @version $Revision: 1.8 $ $Date: 2003/08/09 04:03:40 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,75,ublic Mean(FirstMoment m1) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,84,* Constructs a Mean with an External Moment.
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,85,* @param m1 the moment
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,87,public Mean(final FirstMoment m1) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,83,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,95,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,99, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,111,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,106,um sum = new Sum();
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,120,protected Sum sum = new Sum();
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,117,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,131,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,132,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,133,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,134,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,57, The SecondMoment is calculated using the following
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,57,* The SecondMoment is calculated using the following
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,61, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,61,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:40 $
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,74,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,74,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,99, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,99,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,66, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,66,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:40 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,83,* Constructs a Skewness
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,82,ublic Skewness(ThirdMoment m3) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,90,* Constructs a Skewness with an external moment
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,91,* @param m3 external moment
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,93,public Skewness(final ThirdMoment m3) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,90,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,101,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,97, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,108,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,139, This algorithm uses a corrected two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,151,* This algorithm uses a corrected two pass algorithm of the following
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,141," corrected two pass formula (14.1.8)</a>, and also referenced in:"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,153,"* corrected two pass formula (14.1.8)</a>, and also referenced in"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,144," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,156,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,147, Returns the skewness of a collection of values.  Skewness is a
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,148, measure of the assymetry of a given distribution.
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,159,* Returns the skewness of a collection of values.  Skewness is a
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,160,* measure of the assymetry of a given distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,155,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,167,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,168,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,169,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,170,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,168,"/ Calc the std, this is implemented here instead of using the"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,169,/ standardDeviation method eliminate a duplicate pass to get the mean
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,183,"// Calc the std, this is implemented here instead"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,184,// of using the standardDeviation method eliminate
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,185,// a duplicate pass to get the mean
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,181,/ Calculate the skew as the sum the cubes of the distance
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,197,// Calculate the skew as the sum the cubes of the distance
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,189,ouble n = length;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,205,double n0 = length;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,192,kew = (n / ((n - 1) * (n - 2))) * accum3;
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,208,skew = (n0 / ((n0 - 1) * (n0 - 2))) * accum3;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,58, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,58,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:40 $
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,69,* Constructs a StandardDeviation
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,70,ublic StandardDeviation(SecondMoment m2) {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,76,* Constructs a StandardDeviation with an external moment
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,77,* @param m2 the external moment
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,79,public StandardDeviation(final SecondMoment m2) {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,77,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,86,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,82, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,91,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,107, Returns the Standard Deviation on an array of values.
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,116,* Returns the Standard Deviation on an array of values.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,111," @return the result, Double.NaN if no values for an empty array"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,112, or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,120,"* @return the result, Double.NaN if no values for an empty array"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,121,* or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,115,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,124,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,125,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,126,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,127,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,57, The ThirdMoment (arithmentic mean) is calculated using the following
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,57,* The ThirdMoment (arithmentic mean) is calculated using the following
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,61, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:10 $
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,61,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:40 $
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,63,ublic class ThirdMoment extends SecondMoment{
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,63,public class ThirdMoment extends SecondMoment {
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,80,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,80,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,99, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,99,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,60, @version $Revision: 1.7 $ $Date: 2003/07/15 03:36:36 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,60,* @version $Revision: 1.8 $ $Date: 2003/08/09 04:03:40 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,64,/** SecondMoment is used in incremental calculation of Variance*/
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,68,* Boolean test to determine if this Variance should also increment
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,69,"* the second moment, this evaluates to false when this Variance is"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,70,* constructed with an external SecondMoment as a parameter.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,75,* This property maintains the latest calculated
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,76,* variance for efficiency when getResult() is called
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,77,* many times between increments.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,82,* Maintains the current count of inrementations that have occured.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,83,"* If the external SecondMoment is used, the this is updated from"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,84,* that moments counter
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,89,* Constructs a Variance.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,76,ublic Variance(SecondMoment m2) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,96,* Constructs a Variance based on an externalized second moment.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,97,* @param m2 the SecondMoment (Thrid or Fourth moments work
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,98,* here as well.)
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,100,public Variance(final SecondMoment m2) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,81, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,82, StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,105,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,84,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,107,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,91, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,92, StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,114,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,101,ariance = moment.m2 / (moment.n0 - 1);
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,123,variance = moment.m2 / (moment.n0 - 1);
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,110, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,111, StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,132,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,121,*UnvariateStatistic Approach */
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,122,ean mean = new Mean();
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,142,/** Mean to be used in UnvariateStatistic evaluation approach. */
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,143,protected Mean mean = new Mean();
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,126, two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,147,* two pass algorithm of the following
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,131," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,152,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,137," @return the result, Double.NaN if no values for an empty array"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,138, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,139, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,140," UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,158,"* @return the result, Double.NaN if no values for an empty array"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,159,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,160,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,142,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,162,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,163,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,164,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,165,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,65, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:12 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,65,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,74,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,75,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,86, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,87,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,92,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,95,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,96,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,97,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,98,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,99,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,58, @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,58,* @version $Revision: 1.4 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,65, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:12 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,65,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,74,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,75,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,86, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,87,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,95,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,96,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,97,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,98,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,99,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,60, @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:12 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,60,* @version $Revision: 1.5 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,77, @param percentile
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,78,* @param p the percentile
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,79,ublic Percentile(double percentile) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,80,his.percentile = percentile;
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,80,public Percentile(final double p) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,81,this.percentile = p;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,84, Evaluates the double[] top the specified percentile.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,85, This does not alter the interal percentile state of the
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,85,* Evaluates the double[] top the specified percentile.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,86,* This does not alter the interal percentile state of the
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,89, @return the result of the evaluation or Double.NaN
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,90,* @return the result of the evaluation or Double.NaN
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,92,"ublic double evaluate(double[] values, double p) {"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,93,"eturn evaluate(values, 0,values.length, p);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,93,"public double evaluate(final double[] values, final double p) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,94,"return evaluate(values, 0, values.length, p);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,99,"ublic double evaluate(double[] values, int start, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,100,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,101,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,102,"final int start,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,103,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,104, Evaluates the double[] top the specified percentile.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,105, This does not alter the interal percentile state of the
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,109,* Evaluates the double[] top the specified percentile.
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,110,* This does not alter the interal percentile state of the
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,110, @param p Is the percentile to evaluate to.*
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,111, @return the result of the evaluation or Double.NaN
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,115,* @param p Is the percentile to evaluate to.*
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,116,* @return the result of the evaluation or Double.NaN
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,114,"ublic double evaluate(double[] values, int begin, int length, double p) {"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,119,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,120,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,121,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,122,"final int length,"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,123,final double p) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,125,"test(values, begin, length);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,116,"est(values,begin,length);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,133,"ystem.arraycopy(values, begin,sorted, 0, length);"
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,142,"System.arraycopy(values, begin, sorted, 0, length);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,161,ublic void setPercentile(double p) {
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,170,public void setPercentile(final double p) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,65, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:13 $
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,65,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,77,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,77,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,86, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,86,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,107,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,107,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,108,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,109,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,110,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,59, @version $Revision: 1.8 $ $Date: 2003/07/15 03:38:50 $
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,59,* @version $Revision: 1.9 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,69, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,70, StorelessUnivariateStatistic#increment(double)
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,69,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,72,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,71,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,81, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,82, StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,80,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,89, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,90, StorelessUnivariateStatistic#clear()
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,87,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,102, @see org.apache.commons.math.stat.univariate.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,103," UnivariateStatistic#evaluate(double[], int, int)"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,99,"* @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,105,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,101,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,102,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,103,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,104,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,65, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:13 $
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,65,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,78,ublic void increment(double d) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,80,public void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,88, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,90,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,110,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,112,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,113,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,114,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,115,final int length) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,65, @version $Revision: 1.6 $ $Date: 2003/07/09 20:04:13 $
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,65,* @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,77,ublic void increment(double d) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,78,f (Double.isNaN(value )) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,77,public void increment(final double d) {
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,78,if (Double.isNaN(value)) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,86, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getValue()
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,86,* @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,107,"ublic double evaluate(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,107,public double evaluate(
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,108,"final double[] values,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,109,"final int begin,"
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,110,final int length) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,61, @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,61,* @version $Revision: 1.4 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,71, Create a BeanTransformer
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,71,* Create a BeanTransformer
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,79, @param propertyName The property.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,79,* @param property The property.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,81,ublic BeanTransformer(String propertyName) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,82,his.propertyName = propertyName;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,81,public BeanTransformer(final String property) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,82,this.propertyName = property;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,88,ublic double transform(Object o) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,88,public double transform(final Object o) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,116,ublic void setPropertyName(String string) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,116,public void setPropertyName(final String string) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,60, @version $Revision: 1.2 $ $Date: 2003/07/07 23:19:22 $
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,60,* @version $Revision: 1.3 $ $Date: 2003/08/09 04:03:41 $
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,62,ublic class MathUtils {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,62,public final class MathUtils {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,65,* Private Constructor
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,67,private MathUtils() {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,68, @author Albert Davidson Chou
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,72,ublic static double sign( double x ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,73,f ( x >= 0.0 ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,74,eturn 1.0 ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,76,public static double sign(final double x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,77,if (x >= 0.0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,78,return 1.0;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,76,eturn -1.0 ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,80,return -1.0;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,84, @author Albert Davidson Chou
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,88,ublic static float sign( float x ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,89,f ( x >= 0.0F ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,90,eturn 1.0F ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,90,public static float sign(final float x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,91,if (x >= 0.0F) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,92,return 1.0F;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,92,eturn -1.0F ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,94,return -1.0F;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,100, @author Albert Davidson Chou
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,104,ublic static byte sign( byte x ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,105,f ( x >= (byte)0 ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,106,eturn (byte)1 ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,104,public static byte sign(final byte x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,105,if (x >= (byte) 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,106,return (byte) 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,108,eturn (byte)(-1) ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,108,return (byte) (-1);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,116, @author Albert Davidson Chou
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,120,ublic static short sign( short x ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,121,f ( x >= (short)0 ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,122,eturn (short)1 ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,119,public static short sign(final short x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,120,if (x >= (short) 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,121,return (short) 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,124,eturn (short)(-1) ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,123,return (short) (-1);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,132, @author Albert Davidson Chou
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,136,ublic static int sign( int x ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,137,f ( x >= 0 ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,138,eturn 1 ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,134,public static int sign(final int x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,135,if (x >= 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,136,return 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,140,eturn -1 ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,138,return -1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,148, @author Albert Davidson Chou
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,152,ublic static long sign( long x ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,153,f ( x >= 0L ) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,154,eturn 1L ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,149,public static long sign(final long x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,150,if (x >= 0L) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,151,return 1L;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,156,eturn -1L ;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,153,return -1L;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,160, Returns an exact representation of the
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,161," <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,162," Binomial Coefficient</a>,  ""<code>n choose k</code>"","
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,163, the number of <code>k</code>-element subsets that can be selected from
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,164, an <code>n</code>-element set.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,165, <p>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,166, <Strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,167, <li> <code>0 < k <= n </code> (otherwise
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,168, <li> <code>0 < k <= n </code> (otherwise
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,169,      <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,170, <li> The result is small enough to fit into a <code>long</code>.  The
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,171,      largest value of <code>n</code> for which all coefficients are
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,172,      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,173, <li> The result is small enough to fit into a <code>long</code>.  The
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,174,      largest value of <code>n</code> for which all coefficients are
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,175,      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,176,      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,177,      </code> is thrown.</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,178, </ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,181, @param n the size of the set
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,182, @param k the size of the subsets to be counted
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,183, @return <code>n choose k</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,185,"ublic static long binomialCoefficient(int n, int k) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,157,* Returns an exact representation of the
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,158,"* <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,159,"* Binomial Coefficient</a>,  ""<code>n choose k</code>"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,160,* the number of <code>k</code>-element subsets that can be selected from
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,161,* an <code>n</code>-element set.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,162,* <p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,163,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,164,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,165,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,166,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,167,* <li> The result is small enough to fit into a <code>long</code>. The
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,168,*      largest value of <code>n</code> for which all coefficients are
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,169,*      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,170,* <li> The result is small enough to fit into a <code>long</code>.  The
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,171,*      largest value of <code>n</code> for which all coefficients are
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,172,*      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,173,*      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,174,*      </code> is thrown.</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,175,* </ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,178,* @param n the size of the set
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,179,* @param k the size of the subsets to be counted
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,180,* @return <code>n choose k</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,182,"public static long binomialCoefficient(final int n, final int k) {"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,187,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,188,"""must have n >= k for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,184,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,185,"""must have n >= k for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,190,f (n <= 0)  {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,191,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,192,"""must have n > 0 for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,187,if (n <= 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,188,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,189,"""must have n > 0 for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,203,hrow new ArithmeticException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,204,"""result too large to represent in a long integer"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,200,throw new ArithmeticException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,201,"""result too large to represent in a long integer"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,229,"ublic static double binomialCoefficientDouble(int n, int k) {"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,230,"eturn Math.floor(Math.exp(binomialCoefficientLog(n, k)) + .5);"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,226,"public static double binomialCoefficientDouble(final int n, final int k) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,227,"return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,249,"ublic static double binomialCoefficientLog(int n, int k) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,246,"public static double binomialCoefficientLog(final int n, final int k) {"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,251,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,252,"""must have n >= k for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,248,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,249,"""must have n >= k for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,254,f (n <= 0)  {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,255,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,256,"""must have n > 0 for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,251,if (n <= 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,252,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,253,"""must have n > 0 for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,298,ublic static long factorial(int n) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,295,public static long factorial(final int n) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,301,hrow new ArithmeticException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,302,"""result too large to represent in a long integer"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,298,throw new ArithmeticException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,299,"""result too large to represent in a long integer"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,326,ublic static double factorialDouble(int n) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,327,f (n <= 0)  {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,328,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,329,"""must have n > 0 for n!"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,323,public static double factorialDouble(final int n) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,324,if (n <= 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,325,"throw new IllegalArgumentException(""must have n > 0 for n!"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,335, Returns the natural <code>log</code> of <code>n</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,336," <a href=""http://mathworld.wolfram.com/Factorial.html"">"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,337," Factorial</a>, or <code>n!</code>,"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,338," the product of the numbers <code>1,...,n</code>, as as"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,339, <code>double</code>.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,340, <p>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,341, <Strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,342, <li> <code>n > 0</code> (otherwise
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,343,      <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,344, </ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,346, @param n argument
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,347, @return <code>n!</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,349,ublic static double factorialLog(int n) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,350,f (n <= 0)  {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,351,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,352,"""must have n > 0 for n!"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,331,* Returns the natural <code>log</code> of <code>n</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,332,"* <a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,333,"* Factorial</a>, or <code>n!</code>,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,334,"* the product of the numbers <code>1,...,n</code>, as as"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,335,* <code>double</code>.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,336,* <p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,337,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,338,* <li> <code>n > 0</code> (otherwise
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,339,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,340,* </ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,342,* @param n argument
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,343,* @return <code>n!</code>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,345,public static double factorialLog(final int n) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,346,if (n <= 0) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,347,"throw new IllegalArgumentException(""must have n > 0 for n!"");"

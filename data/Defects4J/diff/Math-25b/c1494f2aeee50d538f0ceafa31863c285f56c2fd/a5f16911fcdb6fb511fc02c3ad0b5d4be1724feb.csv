is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,763,"private void doTestMapBinaryOperation(final BinaryOperation op, final boolean inPlace) {"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,764,final double x = getPreferredEntryValue();
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,765,final double y = x + 1d;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,766,final double z = y + 1d;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,767,final double[] data =
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,769,"Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,770,"0d, -0d, x, y, z, 2 * x, -x, 1 / x, x * x, x + y, x - y, y - x"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,772,final double[] expected = new double[data.length];
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,773,for (int i = 0; i < data.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,774,final double d = data[i];
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,775,for (int j = 0; j < expected.length; j++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,776,switch (op) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,777,case ADD:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,778,expected[j] = data[j] + d;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,779,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,780,case SUB:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,781,expected[j] = data[j] - d;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,782,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,783,case MUL:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,784,expected[j] = data[j] * d;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,785,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,786,case DIV:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,787,expected[j] = data[j] / d;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,788,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,789,default:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,790,"throw new AssertionError(""unexpected value"");"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,793,final RealVector v = create(data);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,794,final RealVector actual;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,795,if (inPlace) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,796,switch (op) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,797,case ADD:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,798,actual = v.mapAddToSelf(d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,799,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,800,case SUB:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,801,actual = v.mapSubtractToSelf(d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,802,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,803,case MUL:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,804,actual = v.mapMultiplyToSelf(d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,805,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,806,case DIV:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,807,actual = v.mapDivideToSelf(d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,808,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,809,default:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,810,"throw new AssertionError(""unexpected value"");"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,812,} else {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,813,switch (op) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,814,case ADD:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,815,actual = v.mapAdd(d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,816,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,817,case SUB:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,818,actual = v.mapSubtract(d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,819,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,820,case MUL:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,821,actual = v.mapMultiply(d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,822,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,823,case DIV:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,824,actual = v.mapDivide(d);
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,825,break;
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,826,default:
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,827,"throw new AssertionError(""unexpected value"");"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,830,"TestUtils.assertEquals(Double.toString(d), expected, actual, 0d);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,834,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,835,public void testMapAdd() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,836,"doTestMapBinaryOperation(BinaryOperation.ADD, false);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,839,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,840,public void testMapAddToSelf() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,841,"doTestMapBinaryOperation(BinaryOperation.ADD, true);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,844,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,845,public void testMapSubtract() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,846,"doTestMapBinaryOperation(BinaryOperation.SUB, false);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,849,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,850,public void testMapSubtractToSelf() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,851,"doTestMapBinaryOperation(BinaryOperation.SUB, true);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,854,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,855,public void testMapMultiply() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,856,"doTestMapBinaryOperation(BinaryOperation.MUL, false);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,859,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,860,public void testMapMultiplyToSelf() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,861,"doTestMapBinaryOperation(BinaryOperation.MUL, true);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,864,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,865,public void testMapDivide() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,866,"doTestMapBinaryOperation(BinaryOperation.DIV, false);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,869,@Test
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,870,public void testMapDivideToSelf() {
True,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,871,"doTestMapBinaryOperation(BinaryOperation.DIV, true);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,824,/octave =  v1 .+ 2.0
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,825,ealVector v_mapAdd = v1.mapAdd(2.0d);
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,826,"ouble[] result_mapAdd = {3d, 4d, 5d};"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,827,"ssertClose(""compare vectors"" ,result_mapAdd,v_mapAdd.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,829,/octave =  v1 .+ 2.0
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,830,ealVector v_mapAddToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,831,_mapAddToSelf.mapAddToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,832,"ouble[] result_mapAddToSelf = {3d, 4d, 5d};"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,833,"ssertClose(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,835,/octave =  v1 .- 2.0
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,836,ealVector v_mapSubtract = v1.mapSubtract(2.0d);
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,837,"ouble[] result_mapSubtract = {-1d, 0d, 1d};"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,838,"ssertClose(""compare vectors"" ,result_mapSubtract,v_mapSubtract.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,840,/octave =  v1 .- 2.0
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,841,ealVector v_mapSubtractToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,842,_mapSubtractToSelf.mapSubtractToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,843,"ouble[] result_mapSubtractToSelf = {-1d, 0d, 1d};"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,844,"ssertClose(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,846,/octave =  v1 .* 2.0
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,847,ealVector v_mapMultiply = v1.mapMultiply(2.0d);
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,848,"ouble[] result_mapMultiply = {2d, 4d, 6d};"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,849,"ssertClose(""compare vectors"" ,result_mapMultiply,v_mapMultiply.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,851,/octave =  v1 .* 2.0
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,852,ealVector v_mapMultiplyToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,853,_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,854,"ouble[] result_mapMultiplyToSelf = {2d, 4d, 6d};"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,855,"ssertClose(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,857,/octave =  v1 ./ 2.0
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,858,ealVector v_mapDivide = v1.mapDivide(2.0d);
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,859,"ouble[] result_mapDivide = {.5d, 1d, 1.5d};"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,860,"ssertClose(""compare vectors"" ,result_mapDivide,v_mapDivide.toArray(),normTolerance);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,862,/octave =  v1 ./ 2.0
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,863,ealVector v_mapDivideToSelf = v1.copy();
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,864,_mapDivideToSelf.mapDivideToSelf(2.0d);
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,865,"ouble[] result_mapDivideToSelf = {.5d, 1d, 1.5d};"
False,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java,866,"ssertClose(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.toArray(),normTolerance);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,58,import java.util.Comparator;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,59,import java.text.NumberFormat;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,59,mport org.apache.commons.collections.Bag;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,60,mport org.apache.commons.collections.HashBag;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,61,import org.apache.commons.collections.SortedBag;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,62,import org.apache.commons.collections.TreeBag;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,63, Maintains a frequency distribution. <br>
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,64," Accepts int, long or string values, converting"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,65, all to Strings and maintaining frequency counts.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,65,* Maintains a frequency distribution.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,66,* <p>
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,67,"* Accepts int, long, char or Object values.  New values added must be comparable to"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,68,"* those that have been added, otherwise the add method will throw an IllegalArgumentException."
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,69,"* The values are ordered using the default (natural order), unless a  <code>Comparator</code>"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,70,*  is supplied in the constructor.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,67, @version $Revision: 1.11 $ $Date: 2004/01/29 00:49:01 $
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,72,* @version $Revision: 1.12 $ $Date: 2004/02/08 19:51:25 $
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,69,ublic class Frequency implements Serializable{
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,74,public class Frequency implements Serializable {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,71,** name for this frequency distribution. */
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,72,rivate String name;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,75,rivate Bag freqTable = new HashBag();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,77,private SortedBag freqTable = null;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,81,his(null);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,83,freqTable = new TreeBag();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,85, Construct a frequency distribution with the given name.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,86, @param name the name for the new distribution.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,87,* Constructor allowing values Comparator to be specified.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,88,* @param comparator Comparator used to order values
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,88,ublic Frequency(String name) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,89,uper();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,90,etName(name);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,90,public Frequency(Comparator comparator) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,91,freqTable = new TreeBag(comparator);
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,94, Return a string representation of describing this frequency
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,95,* Return a string representation of this frequency
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,100,NumberFormat nf = NumberFormat.getPercentInstance();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,100,"utBuffer.append(""Value \t Frequency \n"");"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,102,"outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,106,utBuffer.append(freqTable.getCount(value));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,108,outBuffer.append(getCount(value));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,109,outBuffer.append('\t');
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,110,outBuffer.append(nf.format(getPct(value)));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,111,outBuffer.append('\t');
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,112,outBuffer.append(nf.format(getCumPct(value)));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,116,ublic void addValue(String v) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,117,reqTable.add(v);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,122,public void addValue(Object v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,123,try {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,124,freqTable.add(v);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,125,} catch (ClassCastException ex) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,126,//TreeBag will throw ClassCastException if v is not comparable
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,127,"throw new IllegalArgumentException(""Value not comparable to existing values."");"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,125,ddValue((new Integer(v)).toString());
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,136,addValue(new Long(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,133,ddValue((new Long(v)).toString());
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,144,addValue(new Long(v));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,137, Returns the number of values = v
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,138, @param v the value to lookup.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,139, @return the absolute frequency of v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,148,* Adds 1 to the frequency count for v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,149,* @param v the value to add.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,141,ublic long getCount(String v) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,142,eturn freqTable.getCount(v);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,151,public void addValue(char v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,152,addValue(new Character(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,155,/** Clears the frequency table */
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,156,public void clear() {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,157,freqTable.clear();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,161,* Returns an Iterator over the set of values that have been added
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,162,* @return values Iterator
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,164,public Iterator valuesIterator() {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,165,return freqTable.uniqueSet().iterator();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,147, @return the aggregate frequency.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,172,* @return the total frequency count.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,150,eturn freqTable.size();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,175,return freqTable.size();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,154, Returns the percentage of values = v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,179,* Returns the number of values = v
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,156, @return the relative frequency of v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,181,* @return the frequency of v.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,158,ublic double getPct(String v) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,159,eturn (double) getCount(v) / (double) getSumFreq();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,183,public long getCount(Object v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,184,long result = 0;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,185,try {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,186,result = freqTable.getCount(v);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,187,} catch (Exception ex) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,188,// ignore and return 0 -- ClassCastException will be thrown if value is not comparable
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,190,return result;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,162,** Clears the frequency table */
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,163,ublic void clear() {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,164,reqTable.clear();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,194,* Returns the number of values = v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,195,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,196,* @return the frequency of v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,198,public long getCount(int v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,199,long result = 0;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,200,try {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,201,result = freqTable.getCount(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,202,} catch (Exception ex) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,203,// ignore and return 0 -- ClassCastException will be thrown if value is not comparable
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,205,return result;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,167,** Getter for property name.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,168, @return Value of property name.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,209,* Returns the number of values = v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,210,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,211,* @return the frequency of v.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,170,ublic String getName() {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,171,eturn name;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,213,public long getCount(long v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,214,long result = 0;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,215,try {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,216,result = freqTable.getCount(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,217,} catch (Exception ex) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,218,// ignore and return 0 -- ClassCastException will be thrown if value is not comparable
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,220,return result;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,174,** Setter for property name.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,175, @param name New value of property name.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,224,* Returns the number of values = v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,225,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,226,* @return the frequency of v.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,177,ublic void setName(java.lang.String name) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,178,his.name = name;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,228,public long getCount(char v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,229,long result = 0;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,230,try {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,231,result = freqTable.getCount(new Character(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,232,} catch (Exception ex) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,233,// ignore and return 0 -- ClassCastException will be thrown if value is not comparable
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,235,return result;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,241,* Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,242,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,243,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,245,public double getPct(Object v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,246,return (double) getCount(v) / (double) getSumFreq();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,250,* Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,251,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,252,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,254,public double getPct(int v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,255,return getPct(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,259,* Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,260,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,261,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,263,public double getPct(long v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,264,return getPct(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,268,* Returns the percentage of values = v (as a proportion -- i.e. between 0 and 1).
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,269,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,270,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,272,public double getPct(char v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,273,return getPct(new Character(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,279,* Returns the cummulative frequency of values less than or equal to v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,280,* <p>
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,281,* Returns 0 if v is not comparable to the values set.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,283,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,284,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,286,public long getCumFreq(Object v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,287,long result = 0;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,288,try {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,289,result = freqTable.getCount(v);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,290,} catch (ClassCastException ex) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,291,return result;   // v is not comparable
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,293,Comparable c = (Comparable) v;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,294,if (c.compareTo(freqTable.first()) < 0) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,295,"return 0;	// v is comparable, but less than the first value"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,297,if (c.compareTo(freqTable.last()) > 0) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,298,"return getSumFreq();	// v is comparable, but greater than the last value"
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,300,Iterator values = valuesIterator();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,301,while (values.hasNext()) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,302,Object nextValue = values.next();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,303,if (c.compareTo(nextValue) > 0) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,304,result += getCount(nextValue);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,305,} else {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,306,return result;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,309,return result;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,313,* Returns the cummulative frequency of values less than or equal to v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,314,* <p>
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,315,* Returns 0 if v is not comparable to the values set.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,317,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,318,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,320,public long getCumFreq(int v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,321,return getCumFreq(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,325,* Returns the cummulative frequency of values less than or equal to v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,326,* <p>
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,327,* Returns 0 if v is not comparable to the values set.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,329,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,330,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,332,public long getCumFreq(long v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,333,return getCumFreq(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,337,* Returns the cummulative frequency of values less than or equal to v.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,338,* <p>
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,339,* Returns 0 if v is not comparable to the values set.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,341,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,342,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,344,public long getCumFreq(char v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,345,return getCumFreq(new Character(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,351,* Returns the cummulative percentatge of values less than or equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,352,* (as a proportion -- i.e. between 0 and 1).
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,353,* <p>
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,354,* Returns 0 if v is not comparable to the values set.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,356,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,357,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,359,public double getCumPct(Object v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,360,return (double) getCumFreq(v) / (double) getSumFreq();
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,364,* Returns the cummulative percentatge of values less than or equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,365,* (as a proportion -- i.e. between 0 and 1).
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,366,* <p>
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,367,* Returns 0 if v is not comparable to the values set.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,369,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,370,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,372,public double getCumPct(int v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,373,return getCumPct(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,377,* Returns the cummulative percentatge of values less than or equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,378,* (as a proportion -- i.e. between 0 and 1).
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,379,* <p>
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,380,* Returns 0 if v is not comparable to the values set.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,382,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,383,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,385,public double getCumPct(long v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,386,return getCumPct(new Long(v));
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,390,* Returns the cummulative percentatge of values less than or equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,391,* (as a proportion -- i.e. between 0 and 1).
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,392,* <p>
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,393,* Returns 0 if v is not comparable to the values set.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,395,* @param v the value to lookup.
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,396,* @return the proportion of values equal to v
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,398,public double getCumPct(char v) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,399,return getCumPct(new Character(v));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,70, @version $Revision: 1.10 $ $Date: 2004/01/29 00:49:03 $
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,70,* @version $Revision: 1.11 $ $Date: 2004/02/08 19:51:25 $
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,115,tring iString = new Integer(i).toString();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,116,bserved[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,115,observed[i] = freq.getCount(i);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,143,tring iString = new Integer(i).toString();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,144,bserved[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,142,observed[i] = freq.getCount(i);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,171,tring iString = new Integer(i).toString();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,172,bserved[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,169,observed[i] = freq.getCount(i);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,199,tring iString = new Integer(i).toString();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,200,bserved[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,196,observed[i] = freq.getCount(i);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,232,"ong cumFreq = f.getCount(""0"") + f.getCount(""1"") + f.getCount(""2"") +"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,233,".getCount(""3"") + f.getCount(""4"") + f.getCount(""5"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,228,long cumFreq = f.getCount(0) + f.getCount(1) + f.getCount(2) +
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,229,f.getCount(3) + f.getCount(4) + f.getCount(5);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,67, @version $Revision: 1.8 $ $Date: 2004/01/29 00:49:00 $
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,67,* @version $Revision: 1.9 $ $Date: 2004/02/08 19:51:25 $
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,73,private long threeL = 3;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,76,private int threeI=3;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,80,private Frequency f = null;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,87,f = new Frequency();
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,94,"requency f = new Frequency(""test counts"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,98,.addValue(oneS);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,101,f.addValue(1);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,100,"ssertEquals(""one frequency count"",3,f.getCount(""1""));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,101,"ssertEquals(""two frequency count"",1,f.getCount(""2""));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,102,"ssertEquals(""foo frequency count"",0,f.getCount(""foo""));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,103,"assertEquals(""one frequency count"",3,f.getCount(1));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,104,"assertEquals(""two frequency count"",1,f.getCount(2));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,105,"assertEquals(""three frequency count"",0,f.getCount(3));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,107,"assertEquals(""zero cummulative frequency"", 0, f.getCumFreq(0));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,108,"assertEquals(""one cummulative frequency"", 3,  f.getCumFreq(1));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,109,"assertEquals(""two cummulative frequency"", 4,  f.getCumFreq(2));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,110,"assertEquals(""two cummulative frequency"", 4,  f.getCumFreq(5));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,111,"assertEquals(""two cummulative frequency"", 0,  f.getCumFreq(""foo""));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,110,"requency f = new Frequency(""test pcts"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,115,".addValue(""foo"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,116,".addValue(""foo"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,117,".addValue(""foo"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,118,".addValue(""foo"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,119,"ssertEquals(""one pct"",0.25,f.getPct(""1""),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,120,"ssertEquals(""two pct"",0.25,f.getPct(""2""),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,121,"ssertEquals(""foo pct"",0.5,f.getPct(""foo""),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,122,"ssertEquals(""bar pct"",0,f.getPct(""bar""),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,122,f.addValue(threeL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,123,f.addValue(threeL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,124,f.addValue(3);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,125,f.addValue(threeI);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,126,"assertEquals(""one pct"",0.25,f.getPct(1),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,127,"assertEquals(""two pct"",0.25,f.getPct(new Long(2)),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,128,"assertEquals(""three pct"",0.5,f.getPct(threeL),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,129,"assertEquals(""five pct"",0,f.getPct(5),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,130,"assertEquals(""foo pct"",0,f.getPct(""foo""),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,131,"assertEquals(""one cum pct"",0.25,f.getCumPct(1),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,132,"assertEquals(""two cum pct"",0.50,f.getCumPct(new Long(2)),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,133,"assertEquals(""three cum pct"",1.0,f.getCumPct(threeL),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,134,"assertEquals(""five cum pct"",1.0,f.getCumPct(5),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,135,"assertEquals(""zero cum pct"",0.0,f.getCumPct(0),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,136,"assertEquals(""foo cum pct"",0,f.getCumPct(""foo""),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,139,/** test adding incomparable values */
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,140,public void testAdd() {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,141,char aChar = 'a';
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,142,char bChar = 'b';
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,143,"String aString = ""a"";"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,144,f.addValue(aChar);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,145,f.addValue(bChar);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,146,try {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,147,f.addValue(aString);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,148,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,149,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,150,// expected
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,152,"assertEquals(""a pct"",0.5,f.getPct(aChar),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,153,"assertEquals(""b cum pct"",1.0,f.getCumPct(bChar),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,154,"assertEquals(""a string pct"",0.0,f.getPct(aString),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,155,"assertEquals(""a string cum pct"",0.0,f.getCumPct(aString),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,159,* Tests toString()
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,129,"requency f = new Frequency(""test toString"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,168,//System.out.println(s);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,158,ublic void testSetName(){
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,159,"tring name = ""name"";"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,160,requency f = new Frequency();
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,161,.setName(name);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,162,"ssertEquals(name, f.getName());"

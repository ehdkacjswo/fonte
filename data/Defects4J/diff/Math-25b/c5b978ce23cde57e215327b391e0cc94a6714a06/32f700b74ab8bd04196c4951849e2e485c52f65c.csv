is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,59, through the addValue() method.   This interface defines the LCD interface
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,60, which all Univariate implementations must implement.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,59,* through the addValue() method. This interface defines the LCD interface
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,60,* which all Univariate implementations must implement. <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,61,"* A ""rolling"" capability is supported by all implementations with the following"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,62,* contract: <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,63,* <i> Setting the windowSize property limits the domain of all statistics to
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,64,* the last <code>windowSize</code> values added.</i><p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,65,* We use the term <i>available values</i> throughout the API documentation
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,66,"* to refer to these values when the windowSize is set. For example, if the"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,67,"* windowSize is set to 3 and the values {1,2,3,4,5} have been added <strong>"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,68,"* in that order</strong> then the <i>available values</i> are {3,4,5} and all"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,69,* reported statistics will be based on these values<p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,70,"* The default windowSize is ""infinite"" -- i.e., all values added are included"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,71,* in all computations.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,65, @version $Revision: 1.5 $ $Date: 2003/05/21 17:59:19 $
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,76,* @version $Revision: 1.6 $ $Date: 2003/05/23 17:33:18 $
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,74,ublic abstract void addValue(double v);
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,85,abstract void addValue(double v);
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,77, Returns the mean of the values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,88,* Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,89,* arithmetic mean </a> of the available values <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,91,* Will return Double.NaN if no values have been added when
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,92,* this method is invoked.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,80,ublic abstract double getMean();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,96,abstract double getMean();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,83, Returns the geometric mean of the values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,99,* Returns the <a href=http://www.xycoon.com/geometric_mean.htm>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,100,* geometric mean </a> of the available values <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,102,* Will return Double.NaN if no values have been added or the product
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,103,* of the available values is less than or equal to 0.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,86,ublic abstract double getGeometricMean();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,107,abstract double getGeometricMean();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,89, Returns the product of all values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,110,* Returns the product of the available values <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,111,* Will return Double.NaN if no values have been added.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,92,ublic abstract double getProduct();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,115,abstract double getProduct();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,95, Returns the variance of the values that have been added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,96, @return variance value
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,118,* Returns the variance of the available values. <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,119,* Double.NaN is returned for an empty set of values and 0.0 is
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,120,* returned for a single value set.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,122,* @return The variance of a set of values.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,98,ublic abstract double getVariance();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,124,abstract double getVariance();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,101, Returns the standard deviation of the values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,127,* Returns the variance of the available values. <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,128,* Double.NaN is returned for an empty set of values and 0.0 is
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,129,* returned for a single value set.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,104,ublic abstract double getStandardDeviation();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,133,abstract double getStandardDeviation();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,106,** Getter for property max.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,136,* Returns the maximum of the available values <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,137,* Double.NaN is returned in no values have been added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,109,ublic abstract double getMax();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,141,abstract double getMax();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,111,** Getter for property min.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,144,* Returns the minimum of the available values <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,145,* Double.NaN is returned in no values have been added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,114,ublic abstract double getMin();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,149,abstract double getMin();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,116,** Getter for property n.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,117, @return Value of property n.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,152,* Returns the number of available values
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,153,* @return the number of available values
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,119,ublic abstract int getN();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,155,abstract int getN();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,121,** Getter for property sum.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,122, @return Value of property sum.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,158,* Returns the sum of the available values <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,159,* Returns 0 if no values have been added.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,161,* @return the sum of the available values
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,124,ublic abstract double getSum();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,163,abstract double getSum();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,126,** Getter for property sumsq.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,127, @return Value of property sumsq.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,166,* Returns the sum of the squares of the available values.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,167,* Returns 0 if no values have been added.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,169,* @return the sum of the squares of the available values.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,129,ublic abstract double getSumsq();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,171,abstract double getSumsq();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,131,"** Resets all sums to 0, resets min and max */"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,132,ublic abstract void clear();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,173,/** Resets all statistics */
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,174,abstract void clear();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,140,ublic static final int INIFINTE_WINDOW = -1;
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,182,static final int INIFINTE_WINDOW = -1;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,146,ublic abstract int getWindowSize();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,188,abstract int getWindowSize();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,154,ublic abstract void setWindowSize(int windowSize);
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,196,abstract void setWindowSize(int windowSize);
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,62, All data (including n) are represented internally as doubles.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,62,* All data are represented internally as doubles.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,67, @author Mark Diggory
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,69, @version $Revision: 1.6 $ $Date: 2003/05/21 17:59:19 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,68,* @author Mark Diggory
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,69,* @author Brent Worden
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,70,* @version $Revision: 1.7 $ $Date: 2003/05/23 17:33:18 $
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,97,** produce of values that have been added */
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,98,/** product of values that have been added */
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,112," Adds the value, updating running sums."
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,113, @param v the value to be added
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,121, Returns the mean of the values that have been added
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,122, @return mean value
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,125,/ FIXME: throw something meaningful if n = 0
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,126,eturn (sum / (double) n );
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,120,if (n == 0) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,121,return Double.NaN;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,122,} else {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,123,return (sum / (double) n );
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,130, Returns the geometric mean of the values that have been added
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,131, @return geometric mean value
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,134,"eturn Math.pow(product,( 1.0/n ) );"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,129,if ((product <= 0.0) || (n == 0)) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,130,return Double.NaN;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,131,} else {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,132,"return Math.pow(product,( 1.0/(double)n ) );"
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,138, Returns the product of all values add to this Univariate
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,139, @return product value
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,146, Returns the variance of the values that have been added.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,147, @return The variance of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,148,         an empty set of values and 0.0 is returned for a single value set.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,164, Returns the standard deviation of the values that have been added
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,165, @return The standard deviation of a set of values.  Double.NaN is
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,166,         returned for an empty set of values and 0.0 is returned for
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,167,         a single value set.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,170,eturn (new Double(Math.sqrt
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,171,(new Double(getVariance())).doubleValue()))).doubleValue();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,157,double variance = getVariance();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,158,if ((variance == 0.0) || (variance == Double.NaN)) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,159,return variance;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,160,} else {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,161,return Math.sqrt(variance);
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,175," Adds the value, updating running sums."
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,176, @param v the value to be added
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,200,/ Include the influence of the new
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,201,"/ TODO: The next two lines seems rather expensive, but"
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,202,/ I don't see many alternatives.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,203,in = doubleArray.getMin();
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,204,ax = doubleArray.getMax();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,187,if(discarded == min) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,188,min = doubleArray.getMin();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,189,} else {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,190,if(discarded == max){
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,191,max = doubleArray.getMax();
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,208,/ Note that the product CANNOT be discarded
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,209,/ properly because one cannot discount the effect
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,210,"/ of a zero value.  For this reason, the product"
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,211,/ of the altered array must be calculated from the
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,212,/ current array elements.  Product must be recalculated
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,213,"/ everytime the array is ""rolled"""
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,214,roduct = 1.0;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,215,ouble[] elements = doubleArray.getElements();
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,216,or( int i = 0; i < elements.length; i++ ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,198,if(product != 0.0){
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,199,// can safely remove discarded value
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,200,product *= v/discarded;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,201,} else if(discarded == 0.0){
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,202,// need to recompute product
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,203,product = 1.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,204,double[] elements = doubleArray.getElements();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,205,for( int i = 0; i < elements.length; i++ ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,208,} // else product = 0 and will still be 0 after discard
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,246,eturn max;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,249,** Setter for property max.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,250, @param max New value of property max.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,252,ublic void setMax(double max) {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,253,his.max = max;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,236,if (n == 0) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,237,return Double.NaN;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,238,} else {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,239,return max;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,260,eturn min;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,247,if (n == 0) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,248,return Double.NaN;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,249,} else {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,250,return min;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,299,this.product = Double.NaN;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,63," @author <a href=""mailto:phil@steitz.com"">Phil Steitz</a>"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,64, @version $Revision: 1.2 $ $Date: 2003/05/21 17:59:20 $
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,63,* @author Phil Steitz
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,64,* @author Tim Obrien
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,65,* @version $Revision: 1.3 $ $Date: 2003/05/23 17:33:18 $
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,118,"ssertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,119,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,120,"ssertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,122,.addValue(one);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,118,"assertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,119,Double.isNaN( u.getMean() ) );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,120,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,121,Double.isNaN( u.getStandardDeviation() ) );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,122,"assertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,123,Double.isNaN(u.getVariance() ) );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,125,u.addValue(one);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,124,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,125,"ssertTrue( ""Mean of n = 1 set should be zero"", u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,126,"ssertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,127,"assertTrue( ""Mean of n = 1 set should be value of single item n1"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,128,u.getMean() == one);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,129,"assertTrue( ""Mean of n = 1 set should be zero"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,130,u.getStandardDeviation() == 0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,131,"assertTrue( ""Variance of n = 1 set should be zero"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,132,u.getVariance() == 0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,137,"ssertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,138,"ssertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,143,"assertEquals( ""Product not expected"", 24.0, u.getProduct(),"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,144,Double.MIN_VALUE );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,145,"assertEquals( ""Geometric mean not expected"", 2.213364,"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,146,"u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,147,"ssertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,148,"ssertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,155,"assertEquals( ""Product not expected"", 39916800.0,"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,156,"u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,157,"assertEquals( ""Geometric mean not expected"", 5.755931,"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,158,"u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,161,public void testRollingMinMax() {
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,162,UnivariateImpl u = new UnivariateImpl(3);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,163,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,164,u.addValue( 5.0 );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,165,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,166,u.addValue( 4.0 ); // discarding min
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,167,"assertEquals( ""min not expected"", 3.0,"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,168,"u.getMin(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,169,u.addValue(1.0);  // discarding max
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,170,"assertEquals( ""max not expected"", 4.0,"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,171,"u.getMax(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,174,public void testNaNContracts() {
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,175,UnivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,176,double nan = Double.NaN;
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,177,"assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,178,"assertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,179,"assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,180,"assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,181,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,183,u.addValue(1.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,185,"assertEquals( ""mean not expected"", 1.0,"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,186,"u.getMean(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,187,"assertEquals( ""variance not expected"", 0.0,"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,188,"u.getVariance(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,189,"assertEquals( ""geometric mean not expected"", 1.0,"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,190,"u.getGeometricMean(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,192,u.addValue(-1.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,194,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,196,u.addValue(0.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,198,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,200,//FiXME: test all other NaN contract specs

is_addition,old_file_path,new_file_path,line_num,content
False,src/mantissa/src/org/spaceroots/mantissa/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,18,ackage org.spaceroots.mantissa.optimization;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,18,package org.apache.commons.math.optimization;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,18,ackage org.spaceroots.mantissa.optimization;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,18,package org.apache.commons.math.optimization;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,20,mport org.spaceroots.mantissa.MantissaException;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,20,import org.apache.commons.math.MathException;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,30,xtends MantissaException {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,32,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,33, Build an exception with a default message
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,35,ublic CostException() {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,36,"uper(""cost exception"");"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,39,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,40, Build an exception with the specified message
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,41, @param message exception message
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,43,ublic CostException(String message) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,44,uper(message);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,47,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,48, Build an exception from a cause
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,49, @param cause cause of this exception
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,51,ublic CostException(Throwable cause) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,52,uper(cause);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,55,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,56, Build an exception from a message and a cause
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,57, @param message exception message
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,58, @param cause cause of this exception
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,60,"ublic CostException(String message, Throwable cause) {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,61,"uper(message, cause);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,64,rivate static final long serialVersionUID = -6099968585593678071L;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,30,extends MathException {
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,32,/** Serializable version identifier. */
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,33,private static final long serialVersionUID = 467695563268795689L;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,36,* Constructs a new <code>MathException</code> with specified
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,37,* formatted detail message.
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,38,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,39,* @param pattern format specifier
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,40,* @param arguments format arguments
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,42,"public CostException(String pattern, Object[] arguments) {"
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,43,"super(pattern, arguments);"
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,47,* Constructs a new <code>MathException</code> with specified
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,48,* nested <code>Throwable</code> root cause.
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,50,* @param rootCause  the exception or error that caused this exception
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,51,*                   to be thrown.
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,53,public CostException(Throwable rootCause) {
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostException.java,src/java/org/apache/commons/math/optimization/CostException.java,54,super(rootCause);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/CostFunction.java,18,ackage org.spaceroots.mantissa.optimization;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/CostFunction.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,1,//Licensed to the Apache Software Foundation (ASF) under one
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,2,//or more contributor license agreements.  See the NOTICE file
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,3,//distributed with this work for additional information
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,4,//regarding copyright ownership.  The ASF licenses this file
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,5,"//to you under the Apache License, Version 2.0 (the"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,6,"//""License""); you may not use this file except in compliance"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,7,//with the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,9,//http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,11,"//Unless required by applicable law or agreed to in writing,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,12,//software distributed under the License is distributed on an
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,13,"//""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,14,"//KIND, either express or implied.  See the License for the"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,15,//specific language governing permissions and limitations
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,16,//under the License.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,21,import java.util.Comparator;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,23,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,24,import org.apache.commons.math.DimensionMismatchException;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,25,import org.apache.commons.math.random.CorrelatedRandomVectorGenerator;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,26,import org.apache.commons.math.random.JDKRandomGenerator;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,27,import org.apache.commons.math.random.NotPositiveDefiniteMatrixException;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,28,import org.apache.commons.math.random.RandomGenerator;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,29,import org.apache.commons.math.random.RandomVectorGenerator;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,30,import org.apache.commons.math.random.UncorrelatedRandomVectorGenerator;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,31,import org.apache.commons.math.random.UniformRandomGenerator;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,32,import org.apache.commons.math.stat.descriptive.moment.VectorialCovariance;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,33,import org.apache.commons.math.stat.descriptive.moment.VectorialMean;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,35,/** This class implements simplex-based direct search optimization
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,36,* algorithms.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,38,"* <p>Direct search methods only use cost function values, they don't"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,39,* need derivatives and don't either try to compute approximation of
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,40,* the derivatives. According to a 1996 paper by Margaret H. Wright
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,41,"* (<a href=""http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz"">Direct"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,42,"* Search Methods: Once Scorned, Now Respectable</a>), they are used"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,43,* when either the computation of the derivative is impossible (noisy
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,44,"* functions, unpredictable dicontinuities) or difficult (complexity,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,45,"* computation cost). In the first cases, rather than an optimum, a"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,46,"* <em>not too bad</em> point is desired. In the latter cases, an"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,47,* optimum is desired but cannot be reasonably found. In all cases
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,48,* direct search methods can be useful.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,50,* <p>Simplex-based direct search methods are based on comparison of
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,51,* the cost function values at the vertices of a simplex (which is a
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,52,* set of n+1 points in dimension n) that is updated by the algorithms
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,53,* steps.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,55,* <p>The instances can be built either in single-start or in
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,56,* multi-start mode. Multi-start is a traditional way to try to avoid
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,57,* beeing trapped in a local minimum and miss the global minimum of a
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,58,* function. It can also be used to verify the convergence of an
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,59,"* algorithm. In multi-start mode, the {@link #minimizes(CostFunction,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,60,"* int, ConvergenceChecker, double[], double[]) minimizes}"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,61,"* method returns the best minimum found after all starts, and the"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,62,* {@link #getMinima getMinima} method can be used to retrieve all
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,63,* minima from all starts (including the one already provided by the
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,64,"* {@link #minimizes(CostFunction, int, ConvergenceChecker, double[],"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,65,* double[]) minimizes} method).</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,67,* <p>This class is the base class performing the boilerplate simplex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,68,* initialization and handling. The simplex update by itself is
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,69,* performed by the derived classes according to the implemented
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,70,* algorithms.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,72,* @author Luc Maisonobe
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,73,* @version $Id: DirectSearchOptimizer.java 1705 2006-09-17 19:57:39Z luc $
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,74,* @see CostFunction
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,75,* @see NelderMead
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,76,* @see MultiDirectional
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,78,public abstract class DirectSearchOptimizer {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,80,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,82,protected DirectSearchOptimizer() {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,85,/** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,86,* <p>The initial simplex is built from two vertices that are
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,87,* considered to represent two opposite vertices of a box parallel
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,88,* to the canonical axes of the space. The simplex is the subset of
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,89,* vertices encountered while going from vertexA to vertexB
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,90,* travelling along the box edges only. This can be seen as a scaled
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,91,* regular simplex using the projected separation between the given
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,92,* points as the scaling factor along each coordinate axis.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,93,* <p>The optimization is performed in single-start mode.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,94,* @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,95,* @param maxEvaluations maximal number of function calls for each
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,96,* start (note that the number will be checked <em>after</em>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,97,"* complete simplices have been evaluated, this means that in some"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,98,"* cases this number will be exceeded by a few units, depending on"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,99,* the dimension of the problem)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,100,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,101,* @param vertexA first vertex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,102,* @param vertexB last vertex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,103,* @return the point/cost pairs giving the minimal cost
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,104,* @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,105,* the search
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,106,* @exception NoConvergenceException if none of the starts did
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,107,* converge (it is not thrown if at least one start did converge)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,109,"public PointCostPair minimizes(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,110,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,111,"double[] vertexA, double[] vertexB)"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,112,"throws CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,114,// set up optimizer
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,115,"buildSimplex(vertexA, vertexB);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,116,setSingleStart();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,118,// compute minimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,119,"return minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,123,/** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,124,* <p>The initial simplex is built from two vertices that are
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,125,* considered to represent two opposite vertices of a box parallel
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,126,* to the canonical axes of the space. The simplex is the subset of
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,127,* vertices encountered while going from vertexA to vertexB
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,128,* travelling along the box edges only. This can be seen as a scaled
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,129,* regular simplex using the projected separation between the given
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,130,* points as the scaling factor along each coordinate axis.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,131,* <p>The optimization is performed in multi-start mode.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,132,* @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,133,* @param maxEvaluations maximal number of function calls for each
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,134,* start (note that the number will be checked <em>after</em>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,135,"* complete simplices have been evaluated, this means that in some"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,136,"* cases this number will be exceeded by a few units, depending on"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,137,* the dimension of the problem)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,138,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,139,* @param vertexA first vertex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,140,* @param vertexB last vertex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,141,* @param starts number of starts to perform (including the
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,142,"* first one), multi-start is disabled if value is less than or"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,143,* equal to 1
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,144,* @param seed seed for the random vector generator
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,145,* @return the point/cost pairs giving the minimal cost
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,146,* @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,147,* the search
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,148,* @exception NoConvergenceException if none of the starts did
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,149,* converge (it is not thrown if at least one start did converge)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,151,"public PointCostPair minimizes(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,152,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,153,"double[] vertexA, double[] vertexB,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,154,"int starts, long seed)"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,155,"throws CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,157,// set up the simplex travelling around the box
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,158,"buildSimplex(vertexA, vertexB);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,160,// we consider the simplex could have been produced by a generator
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,161,"// having its mean value at the center of the box, the standard"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,162,// deviation along each axe beeing the corresponding half size
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,163,double[] mean              = new double[vertexA.length];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,164,double[] standardDeviation = new double[vertexA.length];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,165,for (int i = 0; i < vertexA.length; ++i) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,166,mean[i]              = 0.5 * (vertexA[i] + vertexB[i]);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,167,standardDeviation[i] = 0.5 * Math.abs(vertexA[i] - vertexB[i]);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,170,RandomGenerator rg = new JDKRandomGenerator();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,171,rg.setSeed(seed);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,172,UniformRandomGenerator urg = new UniformRandomGenerator(rg);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,173,RandomVectorGenerator rvg =
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,174,"new UncorrelatedRandomVectorGenerator(mean, standardDeviation, urg);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,175,"setMultiStart(starts, rvg);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,177,// compute minimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,178,"return minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,182,/** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,183,* <p>The simplex is built from all its vertices.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,184,* <p>The optimization is performed in single-start mode.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,185,* @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,186,* @param maxEvaluations maximal number of function calls for each
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,187,* start (note that the number will be checked <em>after</em>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,188,"* complete simplices have been evaluated, this means that in some"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,189,"* cases this number will be exceeded by a few units, depending on"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,190,* the dimension of the problem)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,191,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,192,* @param vertices array containing all vertices of the simplex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,193,* @return the point/cost pairs giving the minimal cost
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,194,* @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,195,* the search
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,196,* @exception ConvergenceException if none of the starts did
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,197,* converge (it is not thrown if at least one start did converge)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,199,"public PointCostPair minimizes(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,200,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,201,double[][] vertices)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,202,"throws CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,204,// set up optimizer
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,205,buildSimplex(vertices);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,206,setSingleStart();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,208,// compute minimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,209,"return minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,213,/** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,214,* <p>The simplex is built from all its vertices.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,215,* <p>The optimization is performed in multi-start mode.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,216,* @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,217,* @param maxEvaluations maximal number of function calls for each
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,218,* start (note that the number will be checked <em>after</em>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,219,"* complete simplices have been evaluated, this means that in some"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,220,"* cases this number will be exceeded by a few units, depending on"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,221,* the dimension of the problem)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,222,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,223,* @param vertices array containing all vertices of the simplex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,224,* @param starts number of starts to perform (including the
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,225,"* first one), multi-start is disabled if value is less than or"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,226,* equal to 1
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,227,* @param seed seed for the random vector generator
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,228,* @return the point/cost pairs giving the minimal cost
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,229,* @exception NotPositiveDefiniteMatrixException if the vertices
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,230,* array is degenerated
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,231,* @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,232,* the search
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,233,* @exception ConvergenceException if none of the starts did
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,234,* converge (it is not thrown if at least one start did converge)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,236,"public PointCostPair minimizes(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,237,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,238,"double[][] vertices,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,239,"int starts, long seed)"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,240,"throws NotPositiveDefiniteMatrixException,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,241,"CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,243,try {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,244,// store the points into the simplex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,245,buildSimplex(vertices);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,247,// compute the statistical properties of the simplex points
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,248,VectorialMean meanStat = new VectorialMean(vertices[0].length);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,249,VectorialCovariance covStat = new VectorialCovariance(vertices[0].length);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,250,for (int i = 0; i < vertices.length; ++i) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,251,meanStat.increment(vertices[i]);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,252,covStat.increment(vertices[i]);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,255,RandomGenerator rg = new JDKRandomGenerator();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,256,rg.setSeed(seed);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,257,RandomVectorGenerator rvg =
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,258,"new CorrelatedRandomVectorGenerator(meanStat.getResult(),"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,259,"covStat.getResult(),"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,260,new UniformRandomGenerator(rg));
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,261,"setMultiStart(starts, rvg);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,263,// compute minimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,264,"return minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,266,} catch (DimensionMismatchException dme) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,267,// this should not happen
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,268,"throw new RuntimeException(""internal error"");"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,273,/** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,274,* <p>The simplex is built randomly.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,275,* <p>The optimization is performed in single-start mode.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,276,* @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,277,* @param maxEvaluations maximal number of function calls for each
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,278,* start (note that the number will be checked <em>after</em>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,279,"* complete simplices have been evaluated, this means that in some"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,280,"* cases this number will be exceeded by a few units, depending on"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,281,* the dimension of the problem)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,282,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,283,* @param generator random vector generator
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,284,* @return the point/cost pairs giving the minimal cost
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,285,* @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,286,* the search
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,287,* @exception ConvergenceException if none of the starts did
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,288,* converge (it is not thrown if at least one start did converge)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,290,"public PointCostPair minimizes(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,291,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,292,RandomVectorGenerator generator)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,293,"throws CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,295,// set up optimizer
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,296,buildSimplex(generator);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,297,setSingleStart();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,299,// compute minimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,300,"return minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,304,/** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,305,* <p>The simplex is built randomly.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,306,* <p>The optimization is performed in multi-start mode.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,307,* @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,308,* @param maxEvaluations maximal number of function calls for each
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,309,* start (note that the number will be checked <em>after</em>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,310,"* complete simplices have been evaluated, this means that in some"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,311,"* cases this number will be exceeded by a few units, depending on"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,312,* the dimension of the problem)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,313,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,314,* @param generator random vector generator
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,315,* @param starts number of starts to perform (including the
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,316,"* first one), multi-start is disabled if value is less than or"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,317,* equal to 1
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,318,* @return the point/cost pairs giving the minimal cost
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,319,* @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,320,* the search
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,321,* @exception ConvergenceException if none of the starts did
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,322,* converge (it is not thrown if at least one start did converge)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,324,"public PointCostPair minimizes(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,325,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,326,"RandomVectorGenerator generator,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,327,int starts)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,328,"throws CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,330,// set up optimizer
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,331,buildSimplex(generator);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,332,"setMultiStart(starts, generator);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,334,// compute minimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,335,"return minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,339,/** Build a simplex from two extreme vertices.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,340,* <p>The two vertices are considered to represent two opposite
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,341,* vertices of a box parallel to the canonical axes of the
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,342,* space. The simplex is the subset of vertices encountered while
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,343,* going from vertexA to vertexB travelling along the box edges
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,344,* only. This can be seen as a scaled regular simplex using the
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,345,* projected separation between the given points as the scaling
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,346,* factor along each coordinate axis.</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,347,* @param vertexA first vertex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,348,* @param vertexB last vertex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,350,"private void buildSimplex(double[] vertexA, double[] vertexB) {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,352,int n = vertexA.length;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,353,simplex = new PointCostPair[n + 1];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,355,// set up the simplex travelling around the box
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,356,for (int i = 0; i <= n; ++i) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,357,double[] vertex = new double[n];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,358,if (i > 0) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,359,"System.arraycopy(vertexB, 0, vertex, 0, i);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,361,if (i < n) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,362,"System.arraycopy(vertexA, i, vertex, i, n - i);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,364,"simplex[i] = new PointCostPair(vertex, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,369,/** Build a simplex from all its points.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,370,* @param vertices array containing all vertices of the simplex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,372,private void buildSimplex(double[][] vertices) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,373,int n = vertices.length - 1;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,374,simplex = new PointCostPair[n + 1];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,375,for (int i = 0; i <= n; ++i) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,376,"simplex[i] = new PointCostPair(vertices[i], Double.NaN);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,380,/** Build a simplex randomly.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,381,* @param generator random vector generator
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,383,private void buildSimplex(RandomVectorGenerator generator) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,385,// use first vector size to compute the number of points
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,386,double[] vertex = generator.nextVector();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,387,int n = vertex.length;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,388,simplex = new PointCostPair[n + 1];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,389,"simplex[0] = new PointCostPair(vertex, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,391,// fill up the vertex
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,392,for (int i = 1; i <= n; ++i) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,393,"simplex[i] = new PointCostPair(generator.nextVector(), Double.NaN);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,398,/** Set up single-start mode.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,400,private void setSingleStart() {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,401,starts    = 1;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,402,generator = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,403,minima    = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,406,/** Set up multi-start mode.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,407,* @param starts number of starts to perform (including the
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,408,"* first one), multi-start is disabled if value is less than or"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,409,* equal to 1
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,410,* @param generator random vector generator to use for restarts
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,412,"public void setMultiStart(int starts, RandomVectorGenerator generator) {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,413,if (starts < 2) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,414,this.starts    = 1;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,415,this.generator = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,416,minima         = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,417,} else {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,418,this.starts    = starts;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,419,this.generator = generator;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,420,minima         = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,424,/** Get all the minima found during the last call to {@link
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,425,"* #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,426,* minimizes}.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,427,* <p>The optimizer stores all the minima found during a set of
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,428,* restarts when multi-start mode is enabled. The {@link
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,429,"* #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,430,* minimizes} method returns the best point only. This method
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,431,"* returns all the points found at the end of each starts, including"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,432,"* the best one already returned by the {@link #minimizes(CostFunction,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,433,"* int, ConvergenceChecker, double[], double[]) minimizes} method."
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,434,* The array as one element for each start as specified in the constructor
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,435,* (it has one element only if optimizer has been set up for single-start).</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,436,* <p>The array containing the minima is ordered with the results
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,437,"* from the runs that did converge first, sorted from lowest to"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,438,"* highest minimum cost, and null elements corresponding to the runs"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,439,* that did not converge (all elements will be null if the {@link
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,440,"* #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,441,* minimizes} method throwed a {@link ConvergenceException
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,442,* ConvergenceException}).</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,443,"* @return array containing the minima, or null if {@link"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,444,"* #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,445,* minimizes} has not been called
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,447,public PointCostPair[] getMinima() {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,448,return (PointCostPair[]) minima.clone();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,451,/** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,452,* @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,453,* @param maxEvaluations maximal number of function calls for each
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,454,* start (note that the number will be checked <em>after</em>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,455,"* complete simplices have been evaluated, this means that in some"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,456,"* cases this number will be exceeded by a few units, depending on"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,457,* the dimension of the problem)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,458,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,459,* @return the point/cost pairs giving the minimal cost
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,460,* @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,461,* the search
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,462,* @exception ConvergenceException if none of the starts did
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,463,* converge (it is not thrown if at least one start did converge)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,465,"private PointCostPair minimizes(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,466,ConvergenceChecker checker)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,467,"throws CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,469,this.f = f;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,470,minima = new PointCostPair[starts];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,472,// multi-start loop
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,473,for (int i = 0; i < starts; ++i) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,475,evaluations = 0;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,476,evaluateSimplex();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,478,for (boolean loop = true; loop;) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,479,if (checker.converged(simplex)) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,480,// we have found a minimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,481,minima[i] = simplex[0];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,482,loop = false;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,483,} else if (evaluations >= maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,484,"// this start did not converge, try a new one"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,485,minima[i] = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,486,loop = false;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,487,} else {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,488,iterateSimplex();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,492,if (i < (starts - 1)) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,493,// restart
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,494,buildSimplex(generator);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,499,"// sort the minima from lowest cost to highest cost, followed by"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,500,// null elements
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,501,"Arrays.sort(minima, pointCostPairComparator);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,503,// return the found point given the lowest cost
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,504,if (minima[0] == null) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,505,"throw new ConvergenceException(""none of the {0} start points"""
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,506,"+ "" lead to convergence"","
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,507,new String[] {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,508,Integer.toString(starts)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,511,return minima[0];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,515,/** Compute the next simplex of the algorithm.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,517,protected abstract void iterateSimplex()
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,518,throws CostException;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,520,/** Evaluate the cost on one point.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,521,* <p>A side effect of this method is to count the number of
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,522,* function evaluations</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,523,* @param x point on which the cost function should be evaluated
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,524,* @return cost at the given point
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,525,* @exception CostException if no cost can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,527,protected double evaluateCost(double[] x)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,528,throws CostException {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,529,evaluations++;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,530,return f.cost(x);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,533,/** Evaluate all the non-evaluated points of the simplex.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,534,* @exception CostException if no cost can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,536,protected void evaluateSimplex()
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,537,throws CostException {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,539,// evaluate the cost at all non-evaluated simplex points
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,540,for (int i = 0; i < simplex.length; ++i) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,541,PointCostPair pair = simplex[i];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,542,if (Double.isNaN(pair.cost)) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,543,"simplex[i] = new PointCostPair(pair.point, evaluateCost(pair.point));"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,547,// sort the simplex from lowest cost to highest cost
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,548,"Arrays.sort(simplex, pointCostPairComparator);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,552,/** Replace the worst point of the simplex by a new point.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,553,* @param pointCostPair point to insert
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,555,protected void replaceWorstPoint(PointCostPair pointCostPair) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,556,int n = simplex.length - 1;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,557,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,558,if (simplex[i].cost > pointCostPair.cost) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,559,PointCostPair tmp = simplex[i];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,560,simplex[i]        = pointCostPair;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,561,pointCostPair     = tmp;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,564,simplex[n] = pointCostPair;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,567,/** Comparator for {@link PointCostPair PointCostPair} objects. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,568,private static Comparator pointCostPairComparator = new Comparator() {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,569,"public int compare(Object o1, Object o2) {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,570,if (o1 == null) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,571,return (o2 == null) ? 0 : +1;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,572,} else if (o2 == null) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,573,return -1;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,574,} else {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,575,double cost1 = ((PointCostPair) o1).cost;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,576,double cost2 = ((PointCostPair) o2).cost;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,577,return (cost1 < cost2) ? -1 : ((o1 == o2) ? 0 : +1);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,582,/** Simplex. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,583,protected PointCostPair[] simplex;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,585,/** Cost function. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,586,private CostFunction f;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,588,/** Number of evaluations already performed. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,589,private int evaluations;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,591,/** Number of starts to go. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,592,private int starts;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,594,/** Random generator for multi-start. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,595,private RandomVectorGenerator generator;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,597,/** Found minima. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,598,private PointCostPair[] minima;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,18,ackage org.spaceroots.mantissa.optimization;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,18,package org.apache.commons.math.optimization;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,18,ackage org.spaceroots.mantissa.optimization;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,18,package org.apache.commons.math.optimization;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,18,ackage org.spaceroots.mantissa.optimization;
True,src/mantissa/src/org/spaceroots/mantissa/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/PointCostPair.java,18,package org.apache.commons.math.optimization;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,18,ackage org.spaceroots.mantissa.optimization;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,20,mport org.spaceroots.mantissa.random.RandomVectorGenerator;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,21,mport org.spaceroots.mantissa.random.UncorrelatedRandomVectorGenerator;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,22,mport org.spaceroots.mantissa.random.CorrelatedRandomVectorGenerator;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,23,mport org.spaceroots.mantissa.random.UniformRandomGenerator;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,24,mport org.spaceroots.mantissa.random.VectorialSampleStatistics;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,25,mport org.spaceroots.mantissa.random.NotPositiveDefiniteMatrixException;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,27,mport java.util.Arrays;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,28,mport java.util.Comparator;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,30,** This class implements simplex-based direct search optimization
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,31, algorithms.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,33," <p>Direct search method only use cost function values, they don't"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,34, need derivatives and don't either try to compute approximation of
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,35, the derivatives. According to a 1996 paper by Margaret H. Wright
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,36," (<a href=""http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz"">Direct"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,37," Search Methods: Once Scorned, Now Respectable</a>), they are used"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,38, when either the computation of the derivative is impossible (noisy
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,39," functions, unpredictable dicontinuities) or difficult (complexity,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,40," computation cost). In the first cases, rather than an optimum, a"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,41," <em>not too bad</em> point is desired. In the latter cases, an"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,42, optimum is desired but cannot be reasonably found. In all cases
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,43, direct search methods can be useful.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,45, <p>Simplex-based direct search methods are based on comparison of
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,46, the cost function values at the vertices of a simplex (which is a
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,47, set of n+1 points in dimension n) that is updated by the algorithms
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,48, steps.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,50, <p>The instances can be built either in single-start or in
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,51, multi-start mode. Multi-start is a traditional way to try to avoid
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,52, beeing trapped in a local minimum and miss the global minimum of a
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,53, function. It can also be used to verify the convergence of an
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,54," algorithm. In multi-start mode, the {@link #minimizes(CostFunction,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,55," int, ConvergenceChecker, double[], double[]) minimizes}"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,56," method returns the best minimum found after all starts, and the"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,57, {@link #getMinima getMinima} method can be used to retrieve all
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,58, minima from all starts (including the one already provided by the
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,59," {@link #minimizes(CostFunction, int, ConvergenceChecker, double[],"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,60, double[]) minimizes} method).</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,62, <p>This class is the base class performing the boilerplate simplex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,63, initialization and handling. The simplex update by itself is
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,64, performed by the derived classes according to the implemented
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,65, algorithms.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,67, @author Luc Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,68, @version $Id: DirectSearchOptimizer.java 1705 2006-09-17 19:57:39Z luc $
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,69, @see CostFunction
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,70, @see NelderMead
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,71, @see MultiDirectional
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,73,ublic abstract class DirectSearchOptimizer {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,75,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,77,rotected DirectSearchOptimizer() {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,80,** Minimizes a cost function.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,81, <p>The initial simplex is built from two vertices that are
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,82, considered to represent two opposite vertices of a box parallel
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,83, to the canonical axes of the space. The simplex is the subset of
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,84, vertices encountered while going from vertexA to vertexB
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,85, travelling along the box edges only. This can be seen as a scaled
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,86, regular simplex using the projected separation between the given
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,87, points as the scaling factor along each coordinate axis.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,88, <p>The optimization is performed in single-start mode.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,89, @param f cost function
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,90, @param maxEvaluations maximal number of function calls for each
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,91, start (note that the number will be checked <em>after</em>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,92," complete simplices have been evaluated, this means that in some"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,93," cases this number will be exceeded by a few units, depending on"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,94, the dimension of the problem)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,95, @param checker object to use to check for convergence
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,96, @param vertexA first vertex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,97, @param vertexB last vertex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,98, @return the point/cost pairs giving the minimal cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,99, @exception CostException if the cost function throws one during
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,100, the search
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,101, @exception NoConvergenceException if none of the starts did
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,102, converge (it is not thrown if at least one start did converge)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,104,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,105,"onvergenceChecker checker,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,106,"ouble[] vertexA, double[] vertexB)"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,107,"hrows CostException, NoConvergenceException {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,109,/ set up optimizer
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,110,"uildSimplex(vertexA, vertexB);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,111,etSingleStart();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,113,/ compute minimum
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,114,"eturn minimizes(f, maxEvaluations, checker);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,118,** Minimizes a cost function.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,119, <p>The initial simplex is built from two vertices that are
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,120, considered to represent two opposite vertices of a box parallel
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,121, to the canonical axes of the space. The simplex is the subset of
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,122, vertices encountered while going from vertexA to vertexB
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,123, travelling along the box edges only. This can be seen as a scaled
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,124, regular simplex using the projected separation between the given
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,125, points as the scaling factor along each coordinate axis.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,126, <p>The optimization is performed in multi-start mode.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,127, @param f cost function
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,128, @param maxEvaluations maximal number of function calls for each
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,129, start (note that the number will be checked <em>after</em>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,130," complete simplices have been evaluated, this means that in some"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,131," cases this number will be exceeded by a few units, depending on"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,132, the dimension of the problem)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,133, @param checker object to use to check for convergence
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,134, @param vertexA first vertex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,135, @param vertexB last vertex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,136, @param starts number of starts to perform (including the
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,137," first one), multi-start is disabled if value is less than or"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,138, equal to 1
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,139, @param seed seed for the random vector generator
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,140, @return the point/cost pairs giving the minimal cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,141, @exception CostException if the cost function throws one during
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,142, the search
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,143, @exception NoConvergenceException if none of the starts did
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,144, converge (it is not thrown if at least one start did converge)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,146,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,147,"onvergenceChecker checker,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,148,"ouble[] vertexA, double[] vertexB,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,149,"nt starts, long seed)"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,150,"hrows CostException, NoConvergenceException {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,152,/ set up the simplex travelling around the box
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,153,"uildSimplex(vertexA, vertexB);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,155,/ we consider the simplex could have been produced by a generator
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,156,"/ having its mean value at the center of the box, the standard"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,157,/ deviation along each axe beeing the corresponding half size
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,158,ouble[] mean              = new double[vertexA.length];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,159,ouble[] standardDeviation = new double[vertexA.length];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,160,or (int i = 0; i < vertexA.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,161,ean[i]              = 0.5 * (vertexA[i] + vertexB[i]);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,162,tandardDeviation[i] = 0.5 * Math.abs(vertexA[i] - vertexB[i]);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,165,andomVectorGenerator rvg =
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,166,"ew UncorrelatedRandomVectorGenerator(mean, standardDeviation,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,167,ew UniformRandomGenerator(seed));
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,168,"etMultiStart(starts, rvg);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,170,/ compute minimum
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,171,"eturn minimizes(f, maxEvaluations, checker);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,175,** Minimizes a cost function.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,176, <p>The simplex is built from all its vertices.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,177, <p>The optimization is performed in single-start mode.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,178, @param f cost function
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,179, @param maxEvaluations maximal number of function calls for each
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,180, start (note that the number will be checked <em>after</em>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,181," complete simplices have been evaluated, this means that in some"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,182," cases this number will be exceeded by a few units, depending on"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,183, the dimension of the problem)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,184, @param checker object to use to check for convergence
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,185, @param vertices array containing all vertices of the simplex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,186, @return the point/cost pairs giving the minimal cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,187, @exception CostException if the cost function throws one during
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,188, the search
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,189, @exception NoConvergenceException if none of the starts did
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,190, converge (it is not thrown if at least one start did converge)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,192,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,193,"onvergenceChecker checker,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,194,ouble[][] vertices)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,195,"hrows CostException, NoConvergenceException {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,197,/ set up optimizer
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,198,uildSimplex(vertices);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,199,etSingleStart();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,201,/ compute minimum
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,202,"eturn minimizes(f, maxEvaluations, checker);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,206,** Minimizes a cost function.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,207, <p>The simplex is built from all its vertices.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,208, <p>The optimization is performed in multi-start mode.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,209, @param f cost function
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,210, @param maxEvaluations maximal number of function calls for each
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,211, start (note that the number will be checked <em>after</em>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,212," complete simplices have been evaluated, this means that in some"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,213," cases this number will be exceeded by a few units, depending on"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,214, the dimension of the problem)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,215, @param checker object to use to check for convergence
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,216, @param vertices array containing all vertices of the simplex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,217, @param starts number of starts to perform (including the
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,218," first one), multi-start is disabled if value is less than or"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,219, equal to 1
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,220, @param seed seed for the random vector generator
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,221, @return the point/cost pairs giving the minimal cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,222, @exception NotPositiveDefiniteMatrixException if the vertices
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,223, array is degenerated
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,224, @exception CostException if the cost function throws one during
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,225, the search
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,226, @exception NoConvergenceException if none of the starts did
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,227, converge (it is not thrown if at least one start did converge)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,229,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,230,"onvergenceChecker checker,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,231,"ouble[][] vertices,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,232,"nt starts, long seed)"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,233,"hrows NotPositiveDefiniteMatrixException,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,234,"ostException, NoConvergenceException {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,236,/ store the points into the simplex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,237,uildSimplex(vertices);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,239,/ compute the statistical properties of the simplex points
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,240,ectorialSampleStatistics statistics = new VectorialSampleStatistics();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,241,or (int i = 0; i < vertices.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,242,tatistics.add(vertices[i]);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,245,andomVectorGenerator rvg =
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,246,"ew CorrelatedRandomVectorGenerator(statistics.getMean(),"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,247,"tatistics.getCovarianceMatrix(null),"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,248,ew UniformRandomGenerator(seed));
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,249,"etMultiStart(starts, rvg);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,251,/ compute minimum
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,252,"eturn minimizes(f, maxEvaluations, checker);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,256,** Minimizes a cost function.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,257, <p>The simplex is built randomly.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,258, <p>The optimization is performed in single-start mode.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,259, @param f cost function
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,260, @param maxEvaluations maximal number of function calls for each
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,261, start (note that the number will be checked <em>after</em>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,262," complete simplices have been evaluated, this means that in some"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,263," cases this number will be exceeded by a few units, depending on"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,264, the dimension of the problem)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,265, @param checker object to use to check for convergence
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,266, @param generator random vector generator
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,267, @return the point/cost pairs giving the minimal cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,268, @exception CostException if the cost function throws one during
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,269, the search
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,270, @exception NoConvergenceException if none of the starts did
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,271, converge (it is not thrown if at least one start did converge)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,273,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,274,"onvergenceChecker checker,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,275,andomVectorGenerator generator)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,276,"hrows CostException, NoConvergenceException {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,278,/ set up optimizer
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,279,uildSimplex(generator);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,280,etSingleStart();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,282,/ compute minimum
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,283,"eturn minimizes(f, maxEvaluations, checker);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,287,** Minimizes a cost function.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,288, <p>The simplex is built randomly.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,289, <p>The optimization is performed in multi-start mode.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,290, @param f cost function
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,291, @param maxEvaluations maximal number of function calls for each
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,292, start (note that the number will be checked <em>after</em>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,293," complete simplices have been evaluated, this means that in some"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,294," cases this number will be exceeded by a few units, depending on"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,295, the dimension of the problem)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,296, @param checker object to use to check for convergence
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,297, @param generator random vector generator
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,298, @param starts number of starts to perform (including the
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,299," first one), multi-start is disabled if value is less than or"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,300, equal to 1
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,301, @return the point/cost pairs giving the minimal cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,302, @exception CostException if the cost function throws one during
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,303, the search
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,304, @exception NoConvergenceException if none of the starts did
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,305, converge (it is not thrown if at least one start did converge)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,307,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,308,"onvergenceChecker checker,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,309,"andomVectorGenerator generator,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,310,nt starts)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,311,"hrows CostException, NoConvergenceException {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,313,/ set up optimizer
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,314,uildSimplex(generator);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,315,"etMultiStart(starts, generator);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,317,/ compute minimum
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,318,"eturn minimizes(f, maxEvaluations, checker);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,322,** Build a simplex from two extreme vertices.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,323, <p>The two vertices are considered to represent two opposite
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,324, vertices of a box parallel to the canonical axes of the
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,325, space. The simplex is the subset of vertices encountered while
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,326, going from vertexA to vertexB travelling along the box edges
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,327, only. This can be seen as a scaled regular simplex using the
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,328, projected separation between the given points as the scaling
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,329, factor along each coordinate axis.</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,330, @param vertexA first vertex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,331, @param vertexB last vertex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,333,"rivate void buildSimplex(double[] vertexA, double[] vertexB) {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,335,nt n = vertexA.length;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,336,implex = new PointCostPair[n + 1];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,338,/ set up the simplex travelling around the box
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,339,or (int i = 0; i <= n; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,340,ouble[] vertex = new double[n];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,341,f (i > 0) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,342,"ystem.arraycopy(vertexB, 0, vertex, 0, i);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,344,f (i < n) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,345,"ystem.arraycopy(vertexA, i, vertex, i, n - i);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,347,"implex[i] = new PointCostPair(vertex, Double.NaN);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,352,** Build a simplex from all its points.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,353, @param vertices array containing all vertices of the simplex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,355,rivate void buildSimplex(double[][] vertices) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,356,nt n = vertices.length - 1;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,357,implex = new PointCostPair[n + 1];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,358,or (int i = 0; i <= n; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,359,"implex[i] = new PointCostPair(vertices[i], Double.NaN);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,363,** Build a simplex randomly.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,364, @param generator random vector generator
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,366,rivate void buildSimplex(RandomVectorGenerator generator) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,368,/ use first vector size to compute the number of points
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,369,ouble[] vertex = generator.nextVector();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,370,nt n = vertex.length;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,371,implex = new PointCostPair[n + 1];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,372,"implex[0] = new PointCostPair(vertex, Double.NaN);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,374,/ fill up the vertex
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,375,or (int i = 1; i <= n; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,376,"implex[i] = new PointCostPair(generator.nextVector(), Double.NaN);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,381,** Set up single-start mode.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,383,rivate void setSingleStart() {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,384,tarts    = 1;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,385,enerator = null;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,386,inima    = null;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,389,** Set up multi-start mode.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,390, @param starts number of starts to perform (including the
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,391," first one), multi-start is disabled if value is less than or"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,392, equal to 1
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,393, @param generator random vector generator to use for restarts
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,395,"ublic void setMultiStart(int starts, RandomVectorGenerator generator) {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,396,f (starts < 2) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,397,his.starts    = 1;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,398,his.generator = null;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,399,inima         = null;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,400, else {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,401,his.starts    = starts;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,402,his.generator = generator;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,403,inima         = null;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,407,** Get all the minima found during the last call to {@link
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,408," #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,409, minimizes}.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,410, <p>The optimizer stores all the minima found during a set of
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,411, restarts when multi-start mode is enabled. The {@link
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,412," #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,413, minimizes} method returns the best point only. This method
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,414," returns all the points found at the end of each starts, including"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,415," the best one already returned by the {@link #minimizes(CostFunction,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,416," int, ConvergenceChecker, double[], double[]) minimizes} method."
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,417, The array as one element for each start as specified in the constructor
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,418, (it has one element only if optimizer has been set up for single-start).</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,419, <p>The array containing the minima is ordered with the results
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,420," from the runs that did converge first, sorted from lowest to"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,421," highest minimum cost, and null elements corresponding to the runs"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,422, that did not converge (all elements will be null if the {@link
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,423," #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,424, minimizes} method throwed a {@link NoConvergenceException
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,425, NoConvergenceException}).</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,426," @return array containing the minima, or null if {@link"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,427," #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,428, minimizes} has not been called
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,430,ublic PointCostPair[] getMinima() {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,431,eturn (PointCostPair[]) minima.clone();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,434,** Minimizes a cost function.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,435, @param f cost function
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,436, @param maxEvaluations maximal number of function calls for each
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,437, start (note that the number will be checked <em>after</em>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,438," complete simplices have been evaluated, this means that in some"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,439," cases this number will be exceeded by a few units, depending on"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,440, the dimension of the problem)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,441, @param checker object to use to check for convergence
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,442, @return the point/cost pairs giving the minimal cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,443, @exception CostException if the cost function throws one during
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,444, the search
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,445, @exception NoConvergenceException if none of the starts did
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,446, converge (it is not thrown if at least one start did converge)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,448,"rivate PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,449,onvergenceChecker checker)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,450,"hrows CostException, NoConvergenceException {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,452,his.f = f;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,453,inima = new PointCostPair[starts];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,455,/ multi-start loop
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,456,or (int i = 0; i < starts; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,458,valuations = 0;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,459,valuateSimplex();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,461,or (boolean loop = true; loop;) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,462,f (checker.converged(simplex)) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,463,/ we have found a minimum
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,464,inima[i] = simplex[0];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,465,oop = false;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,466, else if (evaluations >= maxEvaluations) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,467,"/ this start did not converge, try a new one"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,468,inima[i] = null;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,469,oop = false;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,470, else {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,471,terateSimplex();
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,475,f (i < (starts - 1)) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,476,/ restart
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,477,uildSimplex(generator);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,482,"/ sort the minima from lowest cost to highest cost, followed by"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,483,/ null elements
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,484,"rrays.sort(minima, pointCostPairComparator);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,486,/ return the found point given the lowest cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,487,f (minima[0] == null) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,488,"hrow new NoConvergenceException(""none of the {0} start points"""
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,489," "" lead to convergence"","
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,490,ew String[] {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,491,nteger.toString(starts)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,494,eturn minima[0];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,498,** Compute the next simplex of the algorithm.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,500,rotected abstract void iterateSimplex()
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,501,hrows CostException;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,503,** Evaluate the cost on one point.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,504, <p>A side effect of this method is to count the number of
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,505, function evaluations</p>
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,506, @param x point on which the cost function should be evaluated
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,507, @return cost at the given point
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,508, @exception CostException if no cost can be computed for the parameters
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,510,rotected double evaluateCost(double[] x)
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,511,hrows CostException {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,512,valuations++;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,513,eturn f.cost(x);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,516,** Evaluate all the non-evaluated points of the simplex.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,517, @exception CostException if no cost can be computed for the parameters
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,519,rotected void evaluateSimplex()
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,520,hrows CostException {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,522,/ evaluate the cost at all non-evaluated simplex points
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,523,or (int i = 0; i < simplex.length; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,524,ointCostPair pair = simplex[i];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,525,f (Double.isNaN(pair.cost)) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,526,"implex[i] = new PointCostPair(pair.point, evaluateCost(pair.point));"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,530,/ sort the simplex from lowest cost to highest cost
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,531,"rrays.sort(simplex, pointCostPairComparator);"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,535,** Replace the worst point of the simplex by a new point.
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,536, @param pointCostPair point to insert
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,538,rotected void replaceWorstPoint(PointCostPair pointCostPair) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,539,nt n = simplex.length - 1;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,540,or (int i = 0; i < n; ++i) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,541,f (simplex[i].cost > pointCostPair.cost) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,542,ointCostPair tmp = simplex[i];
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,543,implex[i]        = pointCostPair;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,544,ointCostPair     = tmp;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,547,implex[n] = pointCostPair;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,550,** Comparator for {@link PointCostPair PointCostPair} objects. */
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,551,rivate static Comparator pointCostPairComparator = new Comparator() {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,552,"ublic int compare(Object o1, Object o2) {"
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,553,f (o1 == null) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,554,eturn (o2 == null) ? 0 : +1;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,555, else if (o2 == null) {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,556,eturn -1;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,557, else {
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,558,ouble cost1 = ((PointCostPair) o1).cost;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,559,ouble cost2 = ((PointCostPair) o2).cost;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,560,eturn (cost1 < cost2) ? -1 : ((o1 == o2) ? 0 : +1);
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,565,** Simplex. */
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,566,rotected PointCostPair[] simplex;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,568,** Cost function. */
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,569,rivate CostFunction f;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,571,** Number of evaluations already performed. */
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,572,rivate int evaluations;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,574,** Number of starts to go. */
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,575,rivate int starts;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,577,** Random generator for multi-start. */
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,578,rivate RandomVectorGenerator generator;
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,580,** Found minima. */
False,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,src/mantissa/src/org/spaceroots/mantissa/optimization/DirectSearchOptimizer.java,581,rivate PointCostPair[] minima;
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,18,ackage org.spaceroots.mantissa.optimization;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,18,package org.apache.commons.math.optimization;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,20,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,21,import org.apache.commons.math.optimization.CostException;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,22,import org.apache.commons.math.optimization.CostFunction;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,23,import org.apache.commons.math.optimization.MultiDirectional;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,24,import org.apache.commons.math.ConvergenceException;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,25,import org.apache.commons.math.optimization.PointCostPair;
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,30,"hrows CostException, NoConvergenceException {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,37,"throws CostException, ConvergenceException {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,54,"hrows CostException, NoConvergenceException {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,61,"throws CostException, ConvergenceException {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,18,ackage org.spaceroots.mantissa.optimization;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,18,package org.apache.commons.math.optimization;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,20,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,21,import org.apache.commons.math.optimization.CostException;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,22,import org.apache.commons.math.optimization.CostFunction;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,23,import org.apache.commons.math.optimization.NelderMead;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,24,import org.apache.commons.math.ConvergenceException;
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,25,import org.apache.commons.math.optimization.PointCostPair;
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,30,"hrows CostException, NoConvergenceException {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,37,"throws CostException, ConvergenceException {"
False,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,56,"hrows CostException, NoConvergenceException {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,63,"throws CostException, ConvergenceException {"

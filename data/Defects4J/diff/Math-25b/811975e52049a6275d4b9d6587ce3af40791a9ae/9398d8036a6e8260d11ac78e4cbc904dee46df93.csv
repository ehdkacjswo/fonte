is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,5,* reserved.
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,9,* are met:
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,17,*    distribution.
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,57,* StoreUnivariate implements the Univariate interface but maintains the set of values
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,58,* which contribute to the values being returned.  This implementation of Univariate
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,59,"* provides additional functionality such as skewness, kurtosis, and mode.  This additional"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,60,* functionality comes with a price of increased storage costs.
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,62,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,64,public interface StoreUnivariate extends Univariate {
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,67,* A LEPTOKURTIC set has a positive kurtosis (a high peak)
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,69,public static int LEPTOKURTIC = 1;
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,72,* A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,74,public static int MESOKURTIC = 0;
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,77,"* A PLATYKURTIC set has a negative kurtosis (a flat ""peak"")"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,79,public static int PLATYKURTIC = -1;
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,82,* Returns the mode of the values that have been added.  The mode is
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,83,* the element which occurs with the most frequency
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,84,* @return the mode
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,86,public abstract double getMode();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,89,* Returns the skewness of a given distribution.  Skewness is a measure of the
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,90,* assymetry of a given distribution.
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,92,* @return The skewness of this distribution
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,94,public abstract double getSkewness();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,97,"* Kurtosis is a measure of the ""peakedness"" of a distribution"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,99,* @return the mode
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,101,public abstract double getKurtosis();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,104,"* Returns the Kurtosis ""classification"" a distribution can be leptokurtic (high peak), platykurtic (flat peak),"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,105,* or mesokurtic (zero kurtosis).
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,107,"* @return A static constant defined in this interface, StoredDeviation.LEPTOKURITC,"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,108,"* 			    StoredDeviation.PLATYKURTIC, or StoredDeviation.MESOKURTIC"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,110,public abstract int getKurtosisClass();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,113,* Returns the current set of values in an array of double primitives.  The order of addition is preserved
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,115,* @return returns the current set of numbers in the order in which they were added to this set
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,9,* are met:
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,57,* Provides univariate measures for an array of doubles.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,59,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,61,public class StoreUnivariateImpl implements StoreUnivariate {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,63,ExpandableDoubleArray eDA;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,65,public StoreUnivariateImpl() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,66,eDA = new ExpandableDoubleArray();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,69,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,70,* @see org.apache.commons.math.StoreUnivariate#getMode()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,72,public double getMode() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,73,// Mode depends on a refactor Freq class
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,74,"throw new UnsupportedOperationException(""getMode() is not yet implemented"");"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,77,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,78,* @see org.apache.commons.math.StoreUnivariate#getSkewness()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,80,public double getSkewness() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,81,// Initialize the skewness
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,82,double skewness = Double.NaN;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,84,// Get the mean and the standard deviation
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,85,double mean = getMean();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,86,double stdDev = getStandardDeviation();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,88,// Sum the cubes of the distance from the mean divided by the standard deviation
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,89,double accum = 0.0;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,90,for( int i = 0; i < eDA.getNumElements(); i++ ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,91,"accum += Math.pow( (eDA.getElement(i) - mean) / stdDev, 3.0);"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,94,// Get N
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,95,double n = getN();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,97,// Calculate skewness
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,98,skewness = ( n / ( (n-1) * (n-2) ) ) * accum;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,100,return skewness;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,103,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,104,* @see org.apache.commons.math.StoreUnivariate#getKurtosis()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,106,public double getKurtosis() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,107,// Initialize the kurtosis
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,108,double kurtosis = Double.NaN;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,110,// Get the mean and the standard deviation
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,111,double mean = getMean();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,112,double stdDev = getStandardDeviation();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,114,// Sum the ^4 of the distance from the mean divided by the standard deviation
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,115,double accum = 0.0;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,116,for( int i = 0; i < eDA.getNumElements(); i++ ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,117,"accum += Math.pow( (eDA.getElement(i) - mean) / stdDev, 4.0);"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,120,// Get N
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,121,double n = getN();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,123,double coefficientOne = ( n * (n+1)) / ( (n-1) * (n-2) * (n-3) );
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,124,"double termTwo = (  ( 3 * Math.pow( n - 1, 2.0)) /  ( (n-2) * (n-3) ) );"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,125,// Calculate kurtosis
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,126,kurtosis = ( coefficientOne * accum ) - termTwo;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,128,return kurtosis;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,131,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,132,* @see org.apache.commons.math.StoreUnivariate#getKurtosisClass()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,134,public int getKurtosisClass() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,136,int kClass = StoreUnivariate.MESOKURTIC;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,138,double kurtosis = getKurtosis();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,139,if( kurtosis > 0 ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,140,kClass = StoreUnivariate.LEPTOKURTIC;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,141,} else if( kurtosis < 0 ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,142,kClass = StoreUnivariate.PLATYKURTIC;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,145,return( kClass );
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,149,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,150,* @see org.apache.commons.math.Univariate#addValue(double)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,152,public void addValue(double v) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,153,eDA.addElement( v );
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,156,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,157,* @see org.apache.commons.math.Univariate#getMean()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,159,public double getMean() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,160,double arithMean = getSum() / getN();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,161,return arithMean;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,164,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,165,* @see org.apache.commons.math.Univariate#getVariance()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,167,public double getVariance() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,168,// Initialize variance
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,169,double variance = Double.NaN;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,171,if( getN() == 1 ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,172,// If this is a single value
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,173,variance = 0;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,174,} else if( getN() > 1 ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,175,// Get the mean
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,176,double mean = getMean();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,178,// Calculate the sum of the squares of the distance between each value and the mean
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,179,double accum = 0.0;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,180,for( int i = 0; i < eDA.getNumElements(); i++ ){
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,181,"accum += Math.pow( (eDA.getElement(i) - mean), 2.0 );"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,184,// Divide the accumulator by N - Hmmm... unbiased or biased?
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,185,variance = accum / (getN() - 1);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,188,return variance;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,191,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,192,* @see org.apache.commons.math.Univariate#getStandardDeviation()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,194,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,195,double stdDev = Double.NaN;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,196,if( getN() != 0 ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,197,stdDev = Math.sqrt( getVariance() );
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,199,return( stdDev );
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,202,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,203,* @see org.apache.commons.math.Univariate#getMax()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,205,public double getMax() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,207,// Initialize maximum to NaN
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,208,double max = Double.NaN;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,210,for( int i = 0; i < eDA.getNumElements(); i++) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,211,if( i == 0 ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,212,max = eDA.getElement(i);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,213,} else {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,214,if( eDA.getElement(i) > max ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,215,max = eDA.getElement(i);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,220,return max;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,223,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,224,* @see org.apache.commons.math.Univariate#getMin()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,226,public double getMin() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,227,// Initialize minimum to NaN
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,228,double min = Double.NaN;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,230,for( int i = 0; i < eDA.getNumElements(); i++) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,231,if( i == 0 ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,232,min = eDA.getElement(i);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,233,} else {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,234,if( eDA.getElement(i) < min ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,235,min = eDA.getElement(i);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,240,return min;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,243,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,244,* @see org.apache.commons.math.Univariate#getN()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,246,public double getN() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,247,return eDA.getNumElements();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,250,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,251,* @see org.apache.commons.math.Univariate#getSum()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,253,public double getSum() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,254,double accum = 0.0;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,255,for( int i = 0; i < eDA.getNumElements(); i++) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,256,accum += eDA.getElement(i);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,258,return accum;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,261,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,262,* @see org.apache.commons.math.Univariate#getSumsq()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,264,public double getSumsq() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,265,double accum = 0.0;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,266,for( int i = 0; i < eDA.getNumElements(); i++) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,267,"accum += Math.pow(eDA.getElement(i), 2.0);"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,269,return accum;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,272,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,273,* @see org.apache.commons.math.Univariate#clear()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,275,public void clear() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,276,eDA.clear();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,54,ackage org.apache.commons.math;
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,54,package org.apache.commons.math;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,59, through the addValue() method.  Does not store raw data values.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,60, All data (including n) are represented internally as doubles.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,61," Integers, floats and longs can be added, but will be converted"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,62, to doubles by addValue().
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,59,* through the addValue() method.   This interface defines the LCD interface
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,60,* which all Univariate implementations must implement.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,65, @version $Revision: 1.1 $ $Date: 2003/05/12 19:04:10 $
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,63,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,64,* @version $Revision: 1.2 $ $Date: 2003/05/15 05:39:00 $
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,68,ublic class Univariate {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,70,** running sum of values that have been added */
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,71,rivate double sum = 0.0;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,73,** running sum of squares that have been added */
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,74,rivate double sumsq = 0.0;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,76,** count of values that have been added */
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,77,rivate double n = 0.0;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,79,** min of values that have been added */
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,80,rivate double min = Double.MAX_VALUE;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,82,** max of values that have been added */
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,83,rivate double max = Double.MIN_VALUE;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,85,** display name */
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,86,"rivate String name = """";"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,88,** Creates new univariate */
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,89,ublic Univariate() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,90,lear();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,93,** Creates a new univariate with the given name */
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,94,ublic Univariate(java.lang.String name) {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,95,his.name = name;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,96,lear();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,100," Adds the value, updating running sums.<br>"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,101, Converts value to a double before adding.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,102, @param v the value to be added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,104,ublic void addValue(int v) {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,105,ouble f = (new Double(v)).doubleValue();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,106,nsertValue(f);
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,110," Adds the value, updating running sums.<br>"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,111, Converts value to a double before adding.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,112, @param v the value to be added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,114,ublic void addValue(long v) {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,115,ouble f = (new Double(v)).doubleValue();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,116,nsertValue(f);
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,120," Adds the value, updating running sums.<br>"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,121, Converts value to a double before adding.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,122, @param v the value to be added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,124,ublic void addValue(float v) {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,125,nsertValue(v);
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,129," Adds the value, updating running sums."
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,130, @param v the value to be added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,132,ublic void addValue(double v) {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,133,nsertValue(v);
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,137, Returns the mean of the values that have been added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,138, @return mean value
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,140,ublic double getMean() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,141,/ FIXME: throw something meaningful if n = 0
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,142,eturn sum/n;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,146, Returns the variance of the values that have been added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,147, @return variance value
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,149,ublic double getVariance() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,150,ouble xbar = getMean();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,151,/ FIXME: throw something meaningful if n = 0
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,152,eturn (sumsq - xbar*xbar*n)/(n-1);
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,156, Returns the standard deviation of the values that have been added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,157, @return standard deviation value
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,159,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,160,/ FIXME: throw something meaningful if n = 0
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,161,eturn (new Double(Math.sqrt
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,162,(new Double(getVariance())).doubleValue()))).doubleValue();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,166," Adds the value, updating running sums."
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,167, @param v the value to be added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,169,rivate void insertValue(double v) {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,170, += 1.0;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,171,f (v < min) min = v;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,172,f (v > max) max = v;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,173,um += v;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,174,umsq += v*v;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,177,** Getter for property max.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,178, @return Value of property max.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,180,ublic double getMax() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,181,eturn max;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,184,** Setter for property max.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,185, @param max New value of property max.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,187,ublic void setMax(double max) {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,188,his.max = max;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,191,** Getter for property min.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,192, @return Value of property min.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,194,ublic double getMin() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,195,eturn min;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,198,** Getter for property n.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,199, @return Value of property n.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,201,ublic double getN() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,202,eturn n;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,205,** Getter for property sum.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,206, @return Value of property sum.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,208,ublic double getSum() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,209,eturn sum;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,212,** Getter for property sumsq.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,213, @return Value of property sumsq.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,215,ublic double getSumsq() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,216,eturn sumsq;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,219,** Getter for property name.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,220, @return Value of property name.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,222,ublic java.lang.String getName() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,223,eturn name;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,226,** Setter for property name.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,227, @param name New value of property name.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,229,ublic void setName(java.lang.String name) {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,230,his.name = name;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,234, Generates a text report displaying
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,235, univariate statistics from values that
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,236, have been added.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,237, @return String with line feeds displaying statistics
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,239,ublic String toString() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,240,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,241,"utBuffer.append(name + ""\n"");"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,242,"utBuffer.append(""n: "" + n + ""\n"");"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,243,"utBuffer.append(""min: "" + min + ""\n"");"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,244,"utBuffer.append(""max: "" + max + ""\n"");"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,245,"utBuffer.append(""mean: "" + getMean() + ""\n"");"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,246,"utBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,247,eturn outBuffer.toString();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,250,"** Resets all sums to 0, resets min and max */"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,251,ublic void clear() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,252,his.sum = 0.0;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,253,his.sumsq = 0.0;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,254,his.n = 0.0;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,255,his.min = Double.MAX_VALUE;
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,256,his.max = Double.MIN_VALUE;
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,67,public interface Univariate {
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,70,* Adds the value to the set of numbers
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,71,* @param v the value to be added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,73,public abstract void addValue(double v);
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,76,* Returns the mean of the values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,77,* @return mean value
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,79,public abstract double getMean();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,82,* Returns the variance of the values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,83,* @return variance value
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,85,public abstract double getVariance();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,88,* Returns the standard deviation of the values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,89,* @return standard deviation value
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,91,public abstract double getStandardDeviation();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,93,/** Getter for property max.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,94,* @return Value of property max.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,96,public abstract double getMax();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,98,/** Getter for property min.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,99,* @return Value of property min.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,101,public abstract double getMin();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,103,/** Getter for property n.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,104,* @return Value of property n.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,106,public abstract double getN();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,108,/** Getter for property sum.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,109,* @return Value of property sum.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,111,public abstract double getSum();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,113,/** Getter for property sumsq.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,114,* @return Value of property sumsq.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,116,public abstract double getSumsq();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,118,"/** Resets all sums to 0, resets min and max */"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,119,public abstract void clear();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,9,* are met:
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,58,* Accumulates univariate statistics for values fed in
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,59,* through the addValue() method.  Does not store raw data values.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,60,* All data (including n) are represented internally as doubles.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,61,"* Integers, floats and longs can be added, but will be converted"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,62,* to doubles by addValue().
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,64,* @author Phil Steitz
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,65,* @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:00 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,68,public class UnivariateImpl implements Univariate {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,70,/** running sum of values that have been added */
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,71,private double sum = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,73,/** running sum of squares that have been added */
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,74,private double sumsq = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,76,/** count of values that have been added */
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,77,private double n = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,79,/** min of values that have been added */
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,80,private double min = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,82,/** max of values that have been added */
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,83,private double max = Double.MIN_VALUE;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,85,/** Creates new univariate */
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,86,public UnivariateImpl() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,87,clear();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,91,"* Adds the value, updating running sums."
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,92,* @param v the value to be added
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,94,public void addValue(double v) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,96,insertValue(v);
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,100,* Returns the mean of the values that have been added
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,101,* @return mean value
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,103,public double getMean() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,104,// FIXME: throw something meaningful if n = 0
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,105,return sum/n;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,109,* Returns the variance of the values that have been added.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,110,* @return The variance of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,111,* 	           an empty set of values and 0.0 is returned for a single value set.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,113,public double getVariance() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,114,double variance = Double.NaN;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,116,if( n == 1 ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,117,variance = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,118,} else if( n > 1 ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,119,double xbar = getMean();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,120,variance =  (sumsq - xbar*xbar*n)/(n-1);
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,123,return variance;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,127,* Returns the standard deviation of the values that have been added
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,128,* @return The standard deviation of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,129,* 		       an empty set of values and 0.0 is returned for a single value set.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,131,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,132,return (new Double(Math.sqrt
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,133,((new Double(getVariance())).doubleValue()))).doubleValue();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,137,"* Adds the value, updating running sums."
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,138,* @param v the value to be added
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,140,private void insertValue(double v) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,141,n += 1.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,142,if (v < min) min = v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,143,if (v > max) max = v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,144,sum += v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,145,sumsq += v*v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,148,/** Getter for property max.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,149,* @return Value of property max.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,151,public double getMax() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,152,return max;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,155,/** Setter for property max.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,156,* @param max New value of property max.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,158,public void setMax(double max) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,159,this.max = max;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,162,/** Getter for property min.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,163,* @return Value of property min.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,165,public double getMin() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,166,return min;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,169,/** Getter for property n.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,170,* @return Value of property n.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,172,public double getN() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,173,return n;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,176,/** Getter for property sum.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,177,* @return Value of property sum.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,179,public double getSum() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,180,return sum;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,183,/** Getter for property sumsq.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,184,* @return Value of property sumsq.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,186,public double getSumsq() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,187,return sumsq;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,191,* Generates a text report displaying
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,192,* univariate statistics from values that
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,193,* have been added.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,194,* @return String with line feeds displaying statistics
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,196,public String toString() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,197,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,198,"outBuffer.append(""UnivariateImpl:\n"");"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,199,"outBuffer.append(""n: "" + n + ""\n"");"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,200,"outBuffer.append(""min: "" + min + ""\n"");"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,201,"outBuffer.append(""max: "" + max + ""\n"");"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,202,"outBuffer.append(""mean: "" + getMean() + ""\n"");"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,203,"outBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,204,return outBuffer.toString();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,207,"/** Resets all sums to 0, resets min and max */"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,208,public void clear() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,209,this.sum = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,210,this.sumsq = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,211,this.n = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,212,this.min = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,213,this.max = Double.MIN_VALUE;
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,64," @version $Id: MathTestSuite.java,v 1.1 2003/05/12 19:04:38 rdonkin Exp $"
True,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,64,"* @version $Id: MathTestSuite.java,v 1.2 2003/05/15 05:39:01 tobrien Exp $"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,90,uite.addTest(UnivariateTest.suite());
True,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,90,suite.addTest(UnivariateImplTest.suite());
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,61,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,63,"* @author <a href=""mailto:phil@steitz.com"">Phil Steitz</a>"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,64,* @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:01 $
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,67,public final class StoreUnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,68,private double one = 1;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,69,private float two = 2;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,70,private int three = 3;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,71,private double mean = 2;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,72,private double sumSq = 18;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,73,private double sum = 8;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,74,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,75,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,76,private double n = 4;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,77,private double min = 1;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,78,private double max = 3;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,79,private double skewness = 0;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,80,private double kurtosis = 0.5;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,81,private int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,82,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,84,public StoreUnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,85,super(name);
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,88,public void setUp() {
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,91,public static Test suite() {
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,92,TestSuite suite = new TestSuite(StoreUnivariateImplTest.class);
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,93,"suite.setName(""Freq Tests"");"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,94,return suite;
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,97,/** test stats */
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,98,public void testStats() {
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,99,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,100,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,101,u.addValue(one);
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,102,u.addValue(two);
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,103,u.addValue(two);
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,104,u.addValue(three);
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,105,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,106,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,107,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,108,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,109,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,110,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,111,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,112,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,113,u.clear();
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,114,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,117,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,118,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,120,"assertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,121,"assertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,122,"assertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,124,u.addValue(one);
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,126,"assertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,127,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,128,"assertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,131,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,132,StoreUnivariate u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,134,"double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,135,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,136,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,137,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,140,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,141,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,142,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,143,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,64, @version $Revision: 1.1 $ $Date: 2003/05/12 19:02:53 $
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,64,* @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:01 $
False,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,67,ublic final class UnivariateTest extends TestCase {
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,67,public final class UnivariateImplTest extends TestCase {
False,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,82,ublic UnivariateTest(String name) {
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,82,public UnivariateImplTest(String name) {
False,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,90,estSuite suite = new TestSuite(UnivariateTest.class);
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,90,TestSuite suite = new TestSuite(UnivariateImplTest.class);
False,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,97,"nivariate u = new Univariate(""test univariate"");"
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,97,UnivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,115,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,116,UnivariateImpl u = new UnivariateImpl();
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,118,"assertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,119,"assertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,120,"assertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,122,u.addValue(one);
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,124,"assertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,125,"assertTrue( ""Mean of n = 1 set should be zero"", u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/UnivariateTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,126,"assertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"

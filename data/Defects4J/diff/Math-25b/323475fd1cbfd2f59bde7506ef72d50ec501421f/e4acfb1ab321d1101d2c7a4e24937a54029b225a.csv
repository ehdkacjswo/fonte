is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,35,rivate static final long serialVersionUID = 3322454535052136809L;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,35,private static final long serialVersionUID = -7726511984200295583L;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,42,rivate double coefficients[];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,42,private final double coefficients[];
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,48, is the length of the array minus 1.
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,48,"* is the index of the last non-null element of the array, or 0 if all elements"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,49,* are null.
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,53, @param c polynominal coefficients
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,54,* @param c polynomial coefficients
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,62,his.coefficients = new double[c.length];
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,63,"ystem.arraycopy(c, 0, this.coefficients, 0, c.length);"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,63,int l = c.length;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,64,while ((l > 1) && (c[l - 1] == 0)) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,65,--l;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,67,this.coefficients = new double[l];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,68,"System.arraycopy(c, 0, this.coefficients, 0, l);"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,100,ouble[] out = new double[coefficients.length];
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,101,"ystem.arraycopy(coefficients,0, out, 0, coefficients.length);"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,102,eturn out;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,105,return coefficients.clone();
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,131,* Add a polynomial to the instance.
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,132,* @param p polynomial to add
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,133,* @return a new polynomial which is the sum of the instance and p
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,135,public PolynomialFunction add(final PolynomialFunction p) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,137,// identify the lowest degree polynomial
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,138,"final int lowLength  = Math.min(coefficients.length, p.coefficients.length);"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,139,"final int highLength = Math.max(coefficients.length, p.coefficients.length);"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,141,// build the coefficients array
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,142,double[] newCoefficients = new double[highLength];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,143,for (int i = 0; i < lowLength; ++i) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,144,newCoefficients[i] = coefficients[i] + p.coefficients[i];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,146,System.arraycopy((coefficients.length < p.coefficients.length) ?
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,147,"p.coefficients : coefficients,"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,148,"lowLength,"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,149,"newCoefficients, lowLength,"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,150,highLength - lowLength);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,152,return new PolynomialFunction(newCoefficients);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,157,* Subtract a polynomial from the instance.
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,158,* @param p polynomial to subtract
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,159,* @return a new polynomial which is the difference the instance minus p
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,161,public PolynomialFunction subtract(final PolynomialFunction p) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,163,// identify the lowest degree polynomial
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,164,"int lowLength  = Math.min(coefficients.length, p.coefficients.length);"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,165,"int highLength = Math.max(coefficients.length, p.coefficients.length);"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,167,// build the coefficients array
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,168,double[] newCoefficients = new double[highLength];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,169,for (int i = 0; i < lowLength; ++i) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,170,newCoefficients[i] = coefficients[i] - p.coefficients[i];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,172,if (coefficients.length < p.coefficients.length) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,173,for (int i = lowLength; i < highLength; ++i) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,174,newCoefficients[i] = -p.coefficients[i];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,176,} else {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,177,"System.arraycopy(coefficients, lowLength, newCoefficients, lowLength,"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,178,highLength - lowLength);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,181,return new PolynomialFunction(newCoefficients);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,186,* Negate the instance.
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,187,* @return a new polynomial
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,189,public PolynomialFunction negate() {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,190,double[] newCoefficients = new double[coefficients.length];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,191,for (int i = 0; i < coefficients.length; ++i) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,192,newCoefficients[i] = -coefficients[i];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,194,return new PolynomialFunction(newCoefficients);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,198,* Multiply the instance by a polynomial.
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,199,* @param p polynomial to multiply by
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,200,* @return a new polynomial
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,202,public PolynomialFunction multiply(final PolynomialFunction p) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,204,double[] newCoefficients = new double[coefficients.length + p.coefficients.length - 1];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,206,for (int i = 0; i < newCoefficients.length; ++i) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,207,newCoefficients[i] = 0.0;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,208,"for (int j = Math.max(0, i + 1 - p.coefficients.length);"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,209,"j < Math.min(coefficients.length, i + 1);"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,210,++j) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,211,newCoefficients[i] += coefficients[j] * p.coefficients[i-j];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,215,return new PolynomialFunction(newCoefficients);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,260,/** Returns a string representation of the polynomial.
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,262,* <p>The representation is user oriented. Terms are displayed lowest
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,263,"* degrees first. The multiplications signs, coefficients equals to"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,264,"* one and null terms are not displayed (except if the polynomial is 0,"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,265,* in which case the 0 constant term is displayed). Addition of terms
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,266,* with negative coefficients are replaced by subtraction of terms
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,267,* with positive coefficients except for the first displayed term
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,268,"* (i.e. we display <code>-3</code> for a constant negative polynomial,"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,269,* but <code>1 - 3 x + x^2</code> if the negative coefficient is not
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,270,* the first one displayed).</p>
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,272,* @return a string representation of the polynomial
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,275,public String toString() {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,277,StringBuffer s = new StringBuffer();
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,278,if (coefficients[0] == 0.0) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,279,if (coefficients.length == 1) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,280,"return ""0"";"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,282,} else {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,283,s.append(Double.toString(coefficients[0]));
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,286,for (int i = 1; i < coefficients.length; ++i) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,288,if (coefficients[i] != 0) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,290,if (s.length() > 0) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,291,if (coefficients[i] < 0) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,292,"s.append("" - "");"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,293,} else {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,294,"s.append("" + "");"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,296,} else {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,297,if (coefficients[i] < 0) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,298,"s.append(""-"");"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,302,double absAi = Math.abs(coefficients[i]);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,303,if ((absAi - 1) != 0) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,304,s.append(Double.toString(absAi));
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,305,s.append(' ');
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,308,"s.append(""x"");"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,309,if (i > 1) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,310,s.append('^');
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,311,s.append(Integer.toString(i));
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,317,return s.toString();
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,163,public void testString() {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,164,"PolynomialFunction p = new PolynomialFunction(new double[] { -5.0, 3.0, 1.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,165,"checkPolynomial(p, ""-5.0 + 3.0 x + x^2"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,166,"checkPolynomial(new PolynomialFunction(new double[] { 0.0, -2.0, 3.0 }),"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,167,"""-2.0 x + 3.0 x^2"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,168,"checkPolynomial(new PolynomialFunction(new double[] { 1.0, -2.0, 3.0 }),"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,169,"""1.0 - 2.0 x + 3.0 x^2"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,170,"checkPolynomial(new PolynomialFunction(new double[] { 0.0,  2.0, 3.0 }),"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,171,"""2.0 x + 3.0 x^2"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,172,"checkPolynomial(new PolynomialFunction(new double[] { 1.0,  2.0, 3.0 }),"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,173,"""1.0 + 2.0 x + 3.0 x^2"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,174,"checkPolynomial(new PolynomialFunction(new double[] { 1.0,  0.0, 3.0 }),"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,175,"""1.0 + 3.0 x^2"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,176,"checkPolynomial(new PolynomialFunction(new double[] { 0.0 }),"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,177,"""0"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,180,public void testAddition() {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,182,"PolynomialFunction p1 = new PolynomialFunction(new double[] { -2.0, 1.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,183,"PolynomialFunction p2 = new PolynomialFunction(new double[] { 2.0, -1.0, 0.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,184,checkNullPolynomial(p1.add(p2));
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,186,p2 = p1.add(p1);
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,187,"checkPolynomial(p2, ""-4.0 + 2.0 x"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,189,"p1 = new PolynomialFunction(new double[] { 1.0, -4.0, 2.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,190,"p2 = new PolynomialFunction(new double[] { -1.0, 3.0, -2.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,191,p1 = p1.add(p2);
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,192,"assertEquals(1, p1.degree());"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,193,"checkPolynomial(p1, ""-x"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,197,public void testSubtraction() {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,199,"PolynomialFunction p1 = new PolynomialFunction(new double[] { -2.0, 1.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,200,checkNullPolynomial(p1.subtract(p1));
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,202,"PolynomialFunction p2 = new PolynomialFunction(new double[] { -2.0, 6.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,203,p2 = p2.subtract(p1);
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,204,"checkPolynomial(p2, ""5.0 x"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,206,"p1 = new PolynomialFunction(new double[] { 1.0, -4.0, 2.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,207,"p2 = new PolynomialFunction(new double[] { -1.0, 3.0, 2.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,208,p1 = p1.subtract(p2);
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,209,"assertEquals(1, p1.degree());"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,210,"checkPolynomial(p1, ""2.0 - 7.0 x"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,214,public void testMultiplication() {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,216,"PolynomialFunction p1 = new PolynomialFunction(new double[] { -3.0, 2.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,217,"PolynomialFunction p2 = new PolynomialFunction(new double[] { 3.0, 2.0, 1.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,218,"checkPolynomial(p1.multiply(p2), ""-9.0 + x^2 + 2.0 x^3"");"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,220,"p1 = new PolynomialFunction(new double[] { 0.0, 1.0 });"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,221,p2 = p1;
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,222,for (int i = 2; i < 10; ++i) {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,223,p2 = p2.multiply(p1);
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,224,"checkPolynomial(p2, ""x^"" + i);"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,229,"public void checkPolynomial(PolynomialFunction p, String reference) {"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,230,"assertEquals(reference, p.toString());"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,233,private void checkNullPolynomial(PolynomialFunction p) {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,234,for (double coefficient : p.getCoefficients()) {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,235,"assertEquals(0.0, coefficient, 1.0e-15);"

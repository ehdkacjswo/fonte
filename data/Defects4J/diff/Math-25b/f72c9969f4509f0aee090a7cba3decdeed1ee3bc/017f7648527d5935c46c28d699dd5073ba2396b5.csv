is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,17,package org.apache.commons.math.dfp;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,20,import org.apache.commons.math.analysis.solvers.AllowedSolutions;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,21,import org.apache.commons.math.exception.MathInternalError;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,22,import org.apache.commons.math.exception.NoBracketingException;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,23,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,24,import org.apache.commons.math.util.Incrementor;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,25,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,28,* This class implements a modification of the <a
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,29,"* href=""http://mathworld.wolfram.com/BrentsMethod.html""> Brent algorithm</a>."
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,30,* <p>
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,31,* The changes with respect to the original Brent algorithm are:
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,32,* <ul>
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,33,*   <li>the returned value is chosen in the current interval according
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,34,"*   to user specified {@link AllowedSolutions},</li>"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,35,*   <li>the maximal order for the invert polynomial root search is
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,36,*   user-specified instead of being invert quadratic only</li>
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,37,* </ul>
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,38,* </p>
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,39,* The given interval must bracket the root.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,41,* @version $Id$
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,43,public class BracketingNthOrderBrentSolverDFP {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,45,/** Maximal aging triggering an attempt to balance the bracketing interval. */
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,46,private static final int MAXIMAL_AGING = 2;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,48,/** Maximal order. */
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,49,private final int maximalOrder;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,51,/** Function value accuracy. */
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,52,private final Dfp functionValueAccuracy;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,54,/** Absolute accuracy. */
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,55,private final Dfp absoluteAccuracy;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,57,/** Relative accuracy. */
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,58,private final Dfp relativeAccuracy;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,60,/** Evaluations counter. */
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,61,private final Incrementor evaluations = new Incrementor();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,64,* Construct a solver.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,66,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,67,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,68,* @param functionValueAccuracy Function value accuracy.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,69,* @param maximalOrder maximal order.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,70,* @exception NumberIsTooSmallException if maximal order is lower than 2
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,72,"public BracketingNthOrderBrentSolverDFP(final Dfp relativeAccuracy,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,73,"final Dfp absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,74,"final Dfp functionValueAccuracy,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,75,final int maximalOrder)
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,76,throws NumberIsTooSmallException {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,77,if (maximalOrder < 2) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,78,"throw new NumberIsTooSmallException(maximalOrder, 2, true);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,80,this.maximalOrder = maximalOrder;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,81,this.absoluteAccuracy = absoluteAccuracy;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,82,this.relativeAccuracy = relativeAccuracy;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,83,this.functionValueAccuracy = functionValueAccuracy;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,86,/** Get the maximal order.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,87,* @return maximal order
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,89,public int getMaximalOrder() {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,90,return maximalOrder;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,94,* Get the maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,96,* @return the maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,98,public int getMaxEvaluations() {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,99,return evaluations.getMaximalCount();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,103,* Get the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,104,* The number of evaluations corresponds to the last call to the
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,105,* {@code optimize} method. It is 0 if the method has not been
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,106,* called yet.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,108,* @return the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,110,public int getEvaluations() {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,111,return evaluations.getCount();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,115,* Get the absolute accuracy.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,116,* @return absolute accuracy
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,118,public Dfp getAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,119,return absoluteAccuracy;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,123,* Get the relative accuracy.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,124,* @return relative accuracy
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,126,public Dfp getRelativeAccuracy() {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,127,return relativeAccuracy;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,131,* Get the function accuracy.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,132,* @return function accuracy
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,134,public Dfp getFunctionValueAccuracy() {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,135,return functionValueAccuracy;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,139,* Solve for a zero in the given interval.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,140,* A solver may require that the interval brackets a single zero root.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,141,* Solvers that do require bracketing should be able to handle the case
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,142,* where one of the endpoints is itself a root.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,144,* @param maxEval Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,145,* @param f Function to solve.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,146,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,147,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,148,* @param allowedSolutions The kind of solutions that the root-finding algorithm may
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,149,* accept as solutions.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,150,* @return a value where the function is zero.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,151,* @throws org.apache.commons.math.exception.MathIllegalArgumentException
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,152,* if the arguments do not satisfy the requirements specified by the solver.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,153,* @throws org.apache.commons.math.exception.TooManyEvaluationsException if
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,154,* the allowed number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,156,"public Dfp solve(final int maxEval, final UnivariateDfpFunction f,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,157,"final Dfp min, final Dfp max, final AllowedSolutions allowedSolutions) {"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,158,"return solve(maxEval, f, min, max, min.add(max).divide(2), allowedSolutions);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,162,"* Solve for a zero in the given interval, start at {@code startValue}."
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,163,* A solver may require that the interval brackets a single zero root.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,164,* Solvers that do require bracketing should be able to handle the case
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,165,* where one of the endpoints is itself a root.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,167,* @param maxEval Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,168,* @param f Function to solve.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,169,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,170,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,171,* @param startValue Start value to use.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,172,* @param allowedSolutions The kind of solutions that the root-finding algorithm may
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,173,* accept as solutions.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,174,* @return a value where the function is zero.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,175,* @throws org.apache.commons.math.exception.MathIllegalArgumentException
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,176,* if the arguments do not satisfy the requirements specified by the solver.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,177,* @throws org.apache.commons.math.exception.TooManyEvaluationsException if
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,178,* the allowed number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,180,"public Dfp solve(final int maxEval, final UnivariateDfpFunction f,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,181,"final Dfp min, final Dfp max, final Dfp startValue,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,182,final AllowedSolutions allowedSolutions) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,184,// Checks.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,185,MathUtils.checkNotNull(f);
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,187,// Reset.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,188,evaluations.setMaximalCount(maxEval);
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,189,evaluations.resetCount();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,190,Dfp zero = startValue.getZero();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,191,"Dfp nan  = zero.newInstance((byte) 1, Dfp.QNAN);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,193,// prepare arrays with the first points
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,194,final Dfp[] x = new Dfp[maximalOrder + 1];
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,195,final Dfp[] y = new Dfp[maximalOrder + 1];
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,196,x[0] = min;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,197,x[1] = startValue;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,198,x[2] = max;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,200,// evaluate initial guess
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,201,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,202,y[1] = f.value(x[1]);
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,203,if (y[1].isZero()) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,204,// return the initial guess if it is a perfect root.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,205,return x[1];
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,208,// evaluate first  endpoint
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,209,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,210,y[0] = f.value(x[0]);
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,211,if (y[0].isZero()) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,212,// return the first endpoint if it is a perfect root.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,213,return x[0];
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,216,int nbPoints;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,217,int signChangeIndex;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,218,if (y[0].multiply(y[1]).negativeOrNull()) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,220,// reduce interval if it brackets the root
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,221,nbPoints        = 2;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,222,signChangeIndex = 1;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,224,} else {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,226,// evaluate second endpoint
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,227,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,228,y[2] = f.value(x[2]);
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,229,if (y[2].isZero()) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,230,// return the second endpoint if it is a perfect root.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,231,return x[2];
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,234,if (y[1].multiply(y[2]).negativeOrNull()) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,235,// use all computed point as a start sampling array for solving
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,236,nbPoints        = 3;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,237,signChangeIndex = 2;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,238,} else {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,239,"throw new NoBracketingException(x[0].toDouble(), x[2].toDouble(),"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,240,"y[0].toDouble(), y[2].toDouble());"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,245,// prepare a work array for inverse polynomial interpolation
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,246,final Dfp[] tmpX = new Dfp[x.length];
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,248,// current tightest bracketing of the root
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,249,Dfp xA    = x[signChangeIndex - 1];
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,250,Dfp yA    = y[signChangeIndex - 1];
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,251,Dfp absXA = xA.abs();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,252,Dfp absYA = yA.abs();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,253,int agingA   = 0;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,254,Dfp xB    = x[signChangeIndex];
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,255,Dfp yB    = y[signChangeIndex];
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,256,Dfp absXB = xB.abs();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,257,Dfp absYB = yB.abs();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,258,int agingB   = 0;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,260,// search loop
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,261,while (true) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,263,// check convergence of bracketing interval
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,264,Dfp maxX = absXA.lessThan(absXB) ? absXB : absXA;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,265,Dfp maxY = absYA.lessThan(absYB) ? absYB : absYA;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,266,final Dfp xTol = absoluteAccuracy.add(relativeAccuracy.multiply(maxX));
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,267,if (xB.subtract(xA).subtract(xTol).negativeOrNull() ||
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,268,maxY.lessThan(functionValueAccuracy)) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,269,switch (allowedSolutions) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,270,case ANY_SIDE :
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,271,return absYA.lessThan(absYB) ? xA : xB;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,272,case LEFT_SIDE :
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,273,return xA;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,274,case RIGHT_SIDE :
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,275,return xB;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,276,case BELOW_SIDE :
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,277,return yA.lessThan(zero) ? xA : xB;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,278,case ABOVE_SIDE :
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,279,return yA.lessThan(zero) ? xB : xA;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,280,default :
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,281,// this should never happen
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,282,throw new MathInternalError(null);
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,286,// target for the next evaluation point
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,287,Dfp targetY;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,288,if (agingA >= MAXIMAL_AGING) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,289,"// we keep updating the high bracket, try to compensate this"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,290,targetY = yB.divide(16).negate();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,291,} else if (agingB >= MAXIMAL_AGING) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,292,"// we keep updating the low bracket, try to compensate this"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,293,targetY = yA.divide(16).negate();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,294,} else {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,295,"// bracketing is balanced, try to find the root itself"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,296,targetY = zero;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,299,"// make a few attempts to guess a root,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,300,Dfp nextX;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,301,int start = 0;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,302,int end   = nbPoints;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,303,do {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,305,"// guess a value for current target, using inverse polynomial interpolation"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,306,"System.arraycopy(x, start, tmpX, start, end - start);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,307,"nextX = guessX(targetY, tmpX, y, start, end);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,309,if (!(nextX.greaterThan(xA) && nextX.lessThan(xB))) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,310,// the guessed root is not strictly inside of the tightest bracketing interval
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,312,// the guessed root is either not strictly inside the interval or it
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,313,// is a NaN (which occurs when some sampling points share the same y)
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,314,// we try again with a lower interpolation order
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,315,if (signChangeIndex - start >= end - signChangeIndex) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,316,"// we have more points before the sign change, drop the lowest point"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,317,++start;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,318,} else {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,319,"// we have more points after sign change, drop the highest point"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,320,--end;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,323,// we need to do one more attempt
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,324,nextX = nan;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,328,} while (nextX.isNaN() && (end - start > 1));
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,330,if (nextX.isNaN()) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,331,// fall back to bisection
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,332,nextX = xA.add(xB.subtract(xA).divide(2));
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,333,start = signChangeIndex - 1;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,334,end   = signChangeIndex;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,337,// evaluate the function at the guessed root
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,338,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,339,final Dfp nextY = f.value(nextX);
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,340,if (nextY.isZero()) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,341,"// we have found an exact root, since it is not an approximation"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,342,// we don't need to bother about the allowed solutions setting
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,343,return nextX;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,346,if ((nbPoints > 2) && (end - start != nbPoints)) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,348,"// we have been forced to ignore some points to keep bracketing,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,349,"// they are probably too far from the root, drop them from now on"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,350,nbPoints = end - start;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,351,"System.arraycopy(x, start, x, 0, nbPoints);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,352,"System.arraycopy(y, start, y, 0, nbPoints);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,353,signChangeIndex -= start;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,355,} else  if (nbPoints == x.length) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,357,// we have to drop one point in order to insert the new one
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,358,nbPoints--;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,360,// keep the tightest bracketing interval as centered as possible
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,361,if (signChangeIndex >= (x.length + 1) / 2) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,362,"// we drop the lowest point, we have to shift the arrays and the index"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,363,"System.arraycopy(x, 1, x, 0, nbPoints);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,364,"System.arraycopy(y, 1, y, 0, nbPoints);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,365,--signChangeIndex;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,370,// insert the last computed point
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,371,"//(by construction, we know it lies inside the tightest bracketing interval)"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,372,"System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,373,x[signChangeIndex] = nextX;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,374,"System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,375,y[signChangeIndex] = nextY;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,376,++nbPoints;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,378,// update the bracketing interval
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,379,if (nextY.multiply(yA).negativeOrNull()) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,380,// the sign change occurs before the inserted point
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,381,xB = nextX;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,382,yB = nextY;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,383,absYB = yB.abs();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,384,++agingA;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,385,agingB = 0;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,386,} else {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,387,// the sign change occurs after the inserted point
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,388,xA = nextX;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,389,yA = nextY;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,390,absYA = yA.abs();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,391,agingA = 0;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,392,++agingB;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,394,// update the sign change index
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,395,signChangeIndex++;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,403,/** Guess an x value by n<sup>th</sup> order inverse polynomial interpolation.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,404,* <p>
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,405,"* The x value is guessed by evaluating polynomial Q(y) at y = targetY, where Q"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,406,"* is built such that for all considered points (x<sub>i</sub>, y<sub>i</sub>),"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,407,* Q(y<sub>i</sub>) = x<sub>i</sub>.
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,408,* </p>
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,409,* @param targetY target value for y
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,410,"* @param x reference points abscissas for interpolation,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,411,* note that this array <em>is</em> modified during computation
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,412,* @param y reference points ordinates for interpolation
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,413,* @param start start index of the points to consider (inclusive)
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,414,* @param end end index of the points to consider (exclusive)
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,415,* @return guessed root (will be a NaN if two points share the same y)
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,417,"private Dfp guessX(final Dfp targetY, final Dfp[] x, final Dfp[] y,"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,418,"final int start, final int end) {"
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,420,// compute Q Newton coefficients by divided differences
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,421,for (int i = start; i < end - 1; ++i) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,422,final int delta = i + 1 - start;
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,423,for (int j = end - 1; j > i; --j) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,424,x[j] = x[j].subtract(x[j-1]).divide(y[j].subtract(y[j - delta]));
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,428,// evaluate Q(targetY)
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,429,Dfp x0 = targetY.getZero();
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,430,for (int j = end - 1; j >= start; --j) {
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,431,x0 = x[j].add(x0.multiply(targetY.subtract(y[j])));
True,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,src/main/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFP.java,434,return x0;
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,17,package org.apache.commons.math.dfp;
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,19,import org.apache.commons.math.exception.MathUserException;
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,22,* An interface representing a univariate {@link Dfp} function.
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,26,public interface UnivariateDfpFunction {
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,29,* Compute the value of the function.
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,31,* @param x Point at which the function value should be computed.
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,32,* @return the value.
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,33,* @throws IllegalArgumentException when the activated method itself can
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,34,"* ascertain that preconditions, specified in the API expressed at the"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,35,"* level of the activated method, have been violated.  In the vast"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,36,"* majority of cases where Commons-Math throws IllegalArgumentException,"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,37,* it is the result of argument checking of actual parameters immediately
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,38,* passed to a method.
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,39,* @throws MathUserException when the method may encounter errors during evaluation.
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,40,"* This should be thrown only in circumstances where, at the level of the"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,41,"* activated function, IllegalArgumentException is not appropriate and it"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,42,* should indicate that while formal preconditions of the method have not
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,43,"* been violated, an irrecoverable error has occurred evaluating a"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,44,* function at some (usually lower) level of the call stack.
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,45,"* Convergence failures, runtime exceptions (even IllegalArgumentException)"
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,46,* in user code or lower level methods can cause (and should be wrapped in)
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,47,* a MathUserException.
True,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,src/main/java/org/apache/commons/math/dfp/UnivariateDfpFunction.java,49,Dfp value(Dfp x) throws MathUserException;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,18,package org.apache.commons.math.dfp;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,20,import org.apache.commons.math.analysis.solvers.AllowedSolutions;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,21,import org.apache.commons.math.exception.MathInternalError;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,22,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,24,import org.junit.Before;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,28,* Test case for {@link BracketingNthOrderBrentSolverDFP bracketing n<sup>th</sup> order Brent} solver.
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,30,* @version $Id$
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,32,public final class BracketingNthOrderBrentSolverDFPTest {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,34,@Test(expected=NumberIsTooSmallException.class)
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,35,public void testInsufficientOrder3() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,36,"new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy,"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,37,"functionValueAccuracy, 1);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,40,@Test
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,41,public void testConstructorOK() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,42,BracketingNthOrderBrentSolverDFP solver =
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,43,"new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy,"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,44,"functionValueAccuracy, 2);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,45,"Assert.assertEquals(2, solver.getMaximalOrder());"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,48,@Test
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,49,public void testConvergenceOnFunctionAccuracy() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,50,BracketingNthOrderBrentSolverDFP solver =
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,51,"new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy,"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,52,"field.newDfp(1.0e-20), 20);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,53,UnivariateDfpFunction f = new UnivariateDfpFunction() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,54,public Dfp value(Dfp x) {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,55,Dfp one     = field.getOne();
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,56,Dfp oneHalf = one.divide(2);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,57,Dfp xMo     = x.subtract(one);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,58,Dfp xMh     = x.subtract(oneHalf);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,59,Dfp xPh     = x.add(oneHalf);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,60,Dfp xPo     = x.add(one);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,61,return xMo.multiply(xMh).multiply(x).multiply(xPh).multiply(xPo);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,65,"Dfp result = solver.solve(20, f, field.newDfp(0.2), field.newDfp(0.9),"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,66,"field.newDfp(0.4), AllowedSolutions.BELOW_SIDE);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,67,Assert.assertTrue(f.value(result).abs().lessThan(solver.getFunctionValueAccuracy()));
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,68,Assert.assertTrue(f.value(result).negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,69,Assert.assertTrue(result.subtract(field.newDfp(0.5)).subtract(solver.getAbsoluteAccuracy()).positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,70,"result = solver.solve(20, f, field.newDfp(-0.9), field.newDfp(-0.2),"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,71,"field.newDfp(-0.4), AllowedSolutions.ABOVE_SIDE);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,72,Assert.assertTrue(f.value(result).abs().lessThan(solver.getFunctionValueAccuracy()));
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,73,Assert.assertTrue(f.value(result).positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,74,Assert.assertTrue(result.add(field.newDfp(0.5)).subtract(solver.getAbsoluteAccuracy()).negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,77,@Test
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,78,public void testNeta() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,80,// the following test functions come from Beny Neta's paper:
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,81,"// ""Several New Methods for solving Equations"""
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,82,// intern J. Computer Math Vol 23 pp 265-282
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,83,// available here: http://www.math.nps.navy.mil/~bneta/SeveralNewMethods.PDF
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,84,for (AllowedSolutions allowed : AllowedSolutions.values()) {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,85,check(new UnivariateDfpFunction() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,86,public Dfp value(Dfp x) {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,87,return DfpMath.sin(x).subtract(x.divide(2));
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,89,"}, 200, -2.0, 2.0, allowed);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,91,check(new UnivariateDfpFunction() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,92,public Dfp value(Dfp x) {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,93,"return DfpMath.pow(x, 5).add(x).subtract(field.newDfp(10000));"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,95,"}, 200, -5.0, 10.0, allowed);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,97,check(new UnivariateDfpFunction() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,98,public Dfp value(Dfp x) {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,99,return x.sqrt().subtract(field.getOne().divide(x)).subtract(field.newDfp(3));
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,101,"}, 200, 0.001, 10.0, allowed);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,103,check(new UnivariateDfpFunction() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,104,public Dfp value(Dfp x) {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,105,return DfpMath.exp(x).add(x).subtract(field.newDfp(20));
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,107,"}, 200, -5.0, 5.0, allowed);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,109,check(new UnivariateDfpFunction() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,110,public Dfp value(Dfp x) {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,111,return DfpMath.log(x).add(x.sqrt()).subtract(field.newDfp(5));
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,113,"}, 200, 0.001, 10.0, allowed);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,115,check(new UnivariateDfpFunction() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,116,public Dfp value(Dfp x) {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,117,return x.subtract(field.getOne()).multiply(x).multiply(x).subtract(field.getOne());
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,119,"}, 200, -0.5, 1.5, allowed);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,124,"private void check(UnivariateDfpFunction f, int maxEval, double min, double max,"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,125,AllowedSolutions allowedSolutions) {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,126,BracketingNthOrderBrentSolverDFP solver =
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,127,"new BracketingNthOrderBrentSolverDFP(relativeAccuracy, absoluteAccuracy,"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,128,"functionValueAccuracy, 20);"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,129,"Dfp xResult = solver.solve(maxEval, f, field.newDfp(min), field.newDfp(max),"
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,130,allowedSolutions);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,131,Dfp yResult = f.value(xResult);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,132,switch (allowedSolutions) {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,133,case ANY_SIDE :
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,134,Assert.assertTrue(yResult.abs().lessThan(functionValueAccuracy.multiply(2)));
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,135,break;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,136,case LEFT_SIDE : {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,137,boolean increasing = f.value(xResult).add(absoluteAccuracy).greaterThan(yResult);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,138,Assert.assertTrue(increasing ? yResult.negativeOrNull() : yResult.positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,139,break;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,141,case RIGHT_SIDE : {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,142,boolean increasing = f.value(xResult).add(absoluteAccuracy).greaterThan(yResult);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,143,Assert.assertTrue(increasing ? yResult.positiveOrNull() : yResult.negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,144,break;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,146,case BELOW_SIDE :
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,147,Assert.assertTrue(yResult.negativeOrNull());
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,148,break;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,149,case ABOVE_SIDE :
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,150,Assert.assertTrue(yResult.positiveOrNull());
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,151,break;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,152,default :
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,153,// this should never happen
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,154,throw new MathInternalError(null);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,158,@Before
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,159,public void setUp() {
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,160,field                 = new DfpField(50);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,161,absoluteAccuracy      = field.newDfp(1.0e-45);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,162,relativeAccuracy      = field.newDfp(1.0e-45);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,163,functionValueAccuracy = field.newDfp(1.0e-45);
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,166,private DfpField field;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,167,private Dfp      absoluteAccuracy;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,168,private Dfp      relativeAccuracy;
True,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,src/test/java/org/apache/commons/math/dfp/BracketingNthOrderBrentSolverDFPTest.java,169,private Dfp      functionValueAccuracy;

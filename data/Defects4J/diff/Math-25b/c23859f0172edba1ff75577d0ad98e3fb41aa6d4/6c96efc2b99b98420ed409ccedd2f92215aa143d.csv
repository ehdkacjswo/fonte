is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,30, <p>
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,30,* </p>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,70, which make the transform orthogonal. N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,70,* which makes the transform orthogonal. N is the size of the data sample.
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,94, 2y<sub>n</sub> = &sum;<sub>k=0</sub><sup>2N-3</sup>
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,94,* y<sub>n</sub> = (1 / 2) &sum;<sub>k=0</sub><sup>2N-3</sup>
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,99, The present implementation of the fast cosine transform requires the length
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,100, of the data set to be a power of two plus one
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,99,* The present implementation of the discrete cosine transform as a fast cosine
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,100,* transform requires the length of the data set to be a power of two plus one
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,104, <p>As of version 2.0 this no longer implements Serializable</p>
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,104,* <p>As of version 2.0 this no longer implements Serializable.</p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,29," Implements the <a href=""http://mathworld.wolfram.com/FastFourierTransform.html"">"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,30, Fast Fourier Transform</a> for transformation of one-dimensional data sets.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,31," For reference, see <b>Applied Numerical Linear Algebra</b>, ISBN 0898713897,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,32, chapter 6.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,34," There are several conventions for the definition of FFT and inverse FFT,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,35, mainly on different coefficient and exponent. The conventions adopted in the
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,36, present implementation are specified in the comments of the two provided
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,37," factory methods, {@link #create()} and {@link #createUnitary()}."
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,30,* Implements the Fast Fourier Transform for transformation of one-dimensional
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,31,"* real or complex data sets. For reference, see <em>Applied Numerical Linear"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,32,"* Algebra</em>, ISBN 0898713897, chapter 6."
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,40," We require the length of data set to be power of 2, this greatly simplifies"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,41, and speeds up the code. Users can pad the data with zeros to meet this
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,42," requirement. There are other flavors of FFT, for reference, see S. Winograd,"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,35,"* There are several variants of the discrete Fourier transform, with various"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,36,"* normalization conventions, which are described below."
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,37,* </p>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,38,* <p>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,39,* The current implementation of the discrete Fourier transform as a fast
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,40,* Fourier transform requires the length of the data set to be a power of 2.
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,41,* This greatly simplifies and speeds up the code. Users can pad the data with
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,42,"* zeros to meet this requirement. There are other flavors of FFT, for"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,43,"* reference, see S. Winograd,"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,47,"* <h3><a id=""standard"">Standard DFT</a></h3>"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,48,* <p>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,49,* The standard normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,50,* <ul>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,51,* <li>forward transform: y<sub>n</sub> = &sum;<sub>k=0</sub><sup>N-1</sup>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,52,"* x<sub>k</sub> exp(-2&pi;i n k / N),</li>"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,53,* <li>inverse transform: x<sub>k</sub> = N<sup>-1</sup>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,54,"* &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> exp(2&pi;i n k / N),</li>"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,55,* </ul>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,56,* where N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,57,* </p>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,58,* <p>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,59,* {@link FastFourierTransformer}s following this convention are returned by the
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,60,* factory method {@link #create()}.
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,61,* </p>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,62,"* <h3><a id=""unitary"">Unitary DFT</a></h3>"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,63,* <p>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,64,* The unitary normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,65,* <ul>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,66,* <li>forward transform: y<sub>n</sub> = (1 / &radic;N)
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,67,"* &sum;<sub>k=0</sub><sup>N-1</sup> x<sub>k</sub> exp(-2&pi;i n k / N),</li>"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,68,* <li>inverse transform: x<sub>k</sub> = (1 / &radic;N)
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,69,"* &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> exp(2&pi;i n k / N),</li>"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,70,* </ul>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,71,* which makes the transform unitary. N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,72,* </p>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,73,* <p>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,74,* {@link FastFourierTransformer}s following this convention are returned by the
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,75,* factory method {@link #createUnitary()}.
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,76,* </p>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,47, @version $Id$
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,78,* @version $Id: FastFourierTransformer.java 1212260 2011-12-09 06:45:09Z
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,79,* celestin $
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,82, normalizing conventions described below.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,83, <ul>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,84, <li>Forward transform:
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,85, y<sub>n</sub> = &sum;<sub>k=0</sub><sup>N-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,86," x<sub>k</sub> exp(-2&pi;i n k / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,87, <li>Inverse transform:
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,88, x<sub>k</sub> = N<sup>-1</sup> &sum;<sub>n=0</sub><sup>N-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,89," y<sub>n</sub> exp(2&pi;i n k / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,90, </ul>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,91, where N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,115,"* <a href=""#standard"">standard normalizing conventions</a>."
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,94," @return a new DFT transformer, with ""standard"" normalizing conventions"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,118,"* @return a new DFT transformer, with standard normalizing conventions"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,103, normalizing conventions described below.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,104, <ul>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,105, <li>Forward transform:
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,106, y<sub>n</sub> = N<sup>-1/2</sup> &sum;<sub>k=0</sub><sup>N-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,107," x<sub>k</sub> exp(-2&pi;i n k / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,108, <li>Inverse transform:
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,109, x<sub>k</sub> = N<sup>-1/2</sup> &sum;<sub>n=0</sub><sup>N-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,110," y<sub>n</sub> exp(2&pi;i n k / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,111, </ul>
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,112, which make the transform unitary. N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,127,"* <a href=""#unitary"">unitary normalizing conventions</a>."
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,115," @return a new FFT transformer, with unitary normalizing conventions"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,130,"* @return a new DFT transformer, with unitary normalizing conventions"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,26," Implements the <a href=""http://documents.wolfram.com/v5/Add-onsLinks/"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,27," StandardPackages/LinearAlgebra/FourierTrig.html"">Fast Sine Transform</a>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,28," for transformation of one-dimensional data sets. For reference, see"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,29," <b>Fast Fourier Transforms</b>, ISBN 0849371635, chapter 3."
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,31," FST is its own inverse, up to a multiplier depending on conventions."
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,32, The equations are listed in the comments of the corresponding methods.</p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,27,* Implements the Fast Sine Transform for transformation of one-dimensional real
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,28,"* data sets. For reference, see James S. Walker, <em>Fast Fourier"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,29,"* Transforms</em>, chapter 3 (ISBN 0849371635)."
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,30,* </p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,34," Similar to FFT, we also require the length of data set to be power of 2."
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,35," In addition, the first element must be 0 and it's enforced in function"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,36, transformation after sampling.</p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,37, <p>As of version 2.0 this no longer implements Serializable</p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,32,* There are several variants of the discrete sine transform. The present
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,33,"* implementation corresponds to DST-I, with various normalization conventions,"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,34,* which are described below. <strong>It should be noted that regardless to the
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,35,"* convention, the first element of the dataset to be transformed must be"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,36,* zero.</strong>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,37,* </p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,38,"* <h3><a id=""standard"">Standard DST-I</a></h3>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,39,* <p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,40,* The standard normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,41,* <ul>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,42,* <li>forward transform: y<sub>n</sub> = &sum;<sub>k=0</sub><sup>N-1</sup>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,43,"* x<sub>k</sub> sin(&pi; nk / N),</li>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,44,* <li>inverse transform: x<sub>k</sub> = (2 / N)
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,45,"* &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> sin(&pi; nk / N),</li>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,46,* </ul>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,47,"* where N is the size of the data sample, and x<sub>0</sub> = 0."
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,48,* </p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,49,* <p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,50,* {@link RealTransformer}s following this convention are returned by the
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,51,* factory method {@link #create()}.
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,52,* </p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,53,"* <h3><a id=""orthogonal"">Orthogonal DST-I</a></h3>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,54,* <p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,55,* The orthogonal normalization convention is defined as follows
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,56,* <ul>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,57,* <li>Forward transform: y<sub>n</sub> = &radic;(2 / N)
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,58,"* &sum;<sub>k=0</sub><sup>N-1</sup> x<sub>k</sub> sin(&pi; nk / N),</li>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,59,* <li>Inverse transform: x<sub>k</sub> = &radic;(2 / N)
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,60,"* &sum;<sub>n=0</sub><sup>N-1</sup> y<sub>n</sub> sin(&pi; nk / N),</li>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,61,* </ul>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,62,"* which makes the transform orthogonal. N is the size of the data sample, and"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,63,* x<sub>0</sub> = 0.
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,64,* </p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,65,* <p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,66,* {@link RealTransformer}s following this convention are returned by the
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,67,* factory method {@link #createOrthogonal()}.
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,68,* </p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,69,"* <h3>Link with the DFT, and assumptions on the layout of the data set</h3>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,70,* <p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,71,* DST-I is equivalent to DFT of an <em>odd extension</em> of the data series.
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,72,"* More precisely, if x<sub>0</sub>, &hellip;, x<sub>N-1</sub> is the data set"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,73,"* to be sine transformed, the extended data set x<sub>0</sub><sup>&#35;</sup>,"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,74,"* &hellip;, x<sub>2N-1</sub><sup>&#35;</sup> is defined as follows"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,75,* <ul>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,76,"* <li>x<sub>0</sub><sup>&#35;</sup> = x<sub>0</sub> = 0,</li>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,77,"* <li>x<sub>k</sub><sup>&#35;</sup> = x<sub>k</sub> if 1 &le; k &lt; N,</li>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,78,"* <li>x<sub>N</sub><sup>&#35;</sup> = 0,</li>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,79,* <li>x<sub>k</sub><sup>&#35;</sup> = -x<sub>2N-k</sub> if N + 1 &le; k &lt;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,80,* 2N.</li>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,81,* </ul>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,82,* </p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,83,* <p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,84,"* Then, the standard DST-I y<sub>0</sub>, &hellip;, y<sub>N-1</sub> of the real"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,85,"* data set x<sub>0</sub>, &hellip;, x<sub>N-1</sub> is equal to <em>half</em>"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,86,* of i (the pure imaginary number) times the N first elements of the DFT of the
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,87,"* extended data set x<sub>0</sub><sup>&#35;</sup>, &hellip;,"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,88,* x<sub>2N-1</sub><sup>&#35;</sup> <br />
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,89,* y<sub>n</sub> = (i / 2) &sum;<sub>k=0</sub><sup>2N-1</sup>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,90,* x<sub>k</sub><sup>&#35;</sup> exp[-2&pi;i nk / (2N)]
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,91,"* &nbsp;&nbsp;&nbsp;&nbsp;k = 0, &hellip;, N-1."
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,92,* </p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,93,* <p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,94,* The present implementation of the discrete sine transform as a fast sine
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,95,"* transform requires the length of the data to be a power of two. Besides,"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,96,"* it implicitly assumes that the sampled function is odd. In particular, the"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,97,"* first element of the data set must be 0, which is enforced in"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,98,"* {@link #transform(UnivariateFunction, double, double, int)} and"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,99,"* {@link #inverseTransform(UnivariateFunction, double, double, int)}, after"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,100,* sampling.
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,101,* </p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,102,* <p>
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,103,* As of version 2.0 this no longer implements Serializable.
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,104,* </p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,39, @version $Id$
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,106,* @version $Id: FastSineTransformer.java 1213157 2011-12-12 07:19:23Z celestin$
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,68, normalizing conventions described below.
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,69, <ul>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,70, <li>Forward transform:
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,71, y<sub>n</sub> = &sum;<sub>k=0</sub><sup>N-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,72," x<sub>k</sub> sin(&pi; nk / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,73, <li>Inverse transform:
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,74, x<sub>k</sub> = (2 / N) &sum;<sub>n=0</sub><sup>N-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,75," y<sub>n</sub> sin(&pi; nk / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,76, </ul>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,77, where N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,135,"* <a href=""#standard"">standard normalizing conventions</a>."
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,80," @return a new DST transformer, with ""standard"" normalizing conventions"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,138,"* @return a new DST transformer, with standard normalizing conventions"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,89, normalizing conventions described below.
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,90, <ul>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,91, <li>Forward transform:
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,92, y<sub>n</sub> = &radic;(2 / N) &sum;<sub>k=0</sub><sup>N-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,93," x<sub>k</sub> sin(&pi; nk / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,94, <li>Inverse transform:
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,95, x<sub>k</sub> = &radic;(2 / N) &sum;<sub>n=0</sub><sup>N-1</sup>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,96," y<sub>n</sub> sin(&pi; nk / N),</li>"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,97, </ul>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,98, which make the transform orthogonal. N is the size of the data sample.
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,147,"* <a href=""#orthogonal"">orthogonal normalizing conventions</a>."
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,101," @return a new DST transformer, with ""orthogonal"" normalizing conventions"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,150,"* @return a new DST transformer, with orthogonal normalizing conventions"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,113,f (orthogonal){
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,162,if (orthogonal) {

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,18,package org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,20,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,23,* This exception is made available to users to report
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,24,* the error conditions that are triggered by {@link SwitchingFunction}
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,25,"* @version $Revision: 620312 $ $Date: 2008-02-10 20:28:59 +0100 (dim., 10 f√©vr. 2008) $"
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,26,* @since 2.0
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,28,public class SwitchException extends MathException {
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,30,/** Serialization UID. */
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,31,private static final long serialVersionUID = -3662133702316614545L;
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,33,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,34,* Build an exception by translating and formating a message
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,35,* @param specifier format specifier (to be translated)
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,36,* @param parts to insert in the format (no translation)
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,38,"public SwitchException(String specifier, Object[] parts) {"
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,39,"super(specifier, parts);"
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,43,* Create an exception with a given root cause.
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,44,* @param cause  the exception or error that caused this exception to be thrown
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,46,public SwitchException(Throwable cause) {
True,src/java/org/apache/commons/math/ode/SwitchException.java,src/java/org/apache/commons/math/ode/SwitchException.java,47,super(cause);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,45,rivate static final long serialVersionUID = -7307007422156119622L;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,45,private static final long serialVersionUID = -7307007422156119622L;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,53,** Convergence threshold for event localisation. */
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,53,/** Convergence threshold for event localization. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,56,** Upper limit in the iteration count for event localisation. */
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,56,/** Upper limit in the iteration count for event localization. */
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,118, @exception FunctionEvaluationException if the switching function
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,118,* @exception SwitchException if the switching function
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,122,hrows FunctionEvaluationException {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,122,throws SwitchException {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,135, @exception FunctionEvaluationException if the switching function
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,135,* @exception SwitchException if the switching function
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,140,"hrows DerivativeException, FunctionEvaluationException, ConvergenceException {"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,140,"throws DerivativeException, SwitchException, ConvergenceException {"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,172,} catch (SwitchException e) {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,173,"throw new FunctionEvaluationException(t, e);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,208,f ((cause != null) && (cause instanceof DerivativeException)) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,209,hrow (DerivativeException) cause;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,211,hrow e;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,210,if ((cause != null) && (cause instanceof DerivativeException)) {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,211,throw (DerivativeException) cause;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,212,} else if ((cause != null) && (cause instanceof SwitchException)) {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,213,throw (SwitchException) cause;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,215,throw new SwitchException(e);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,230, @exception FunctionEvaluationException if the value of the switching
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,234,* @exception SwitchException if the value of the switching
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,233,"ublic void stepAccepted(double t, double[] y)"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,234,hrows FunctionEvaluationException {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,237,"public void stepAccepted(double t, double[] y) throws SwitchException {"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,267,* @exception SwitchException if the state cannot be reseted by the switching
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,268,* function
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,265,"ublic boolean reset(double t, double[] y) {"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,270,"public boolean reset(double t, double[] y) throws SwitchException {"
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,22,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,96, @exception FunctionEvaluationException if the value of the function
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,97, cannot be evaluated
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,94,* @exception SwitchException if the switching function cannot be evaluated
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,99,"ublic double g(double t, double[] y) throws FunctionEvaluationException;"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,96,"public double g(double t, double[] y) throws SwitchException;"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,131,* @exception SwitchException if the event occurrence triggers an error
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,135,"ublic int eventOccurred(double t, double[] y);"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,133,"public int eventOccurred(double t, double[] y) throws SwitchException;"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,149,* @exception SwitchException if the state cannot be reseted
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,152,"ublic void resetState(double t, double[] y);"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,151,"public void resetState(double t, double[] y) throws SwitchException;"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,20,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,21,mport org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,26,import org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,150, catch (FunctionEvaluationException fee) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,151,hrow new IntegratorException(fee);
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,149,} catch (SwitchException se) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,150,throw new IntegratorException(se);
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,183, catch (FunctionEvaluationException fee) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,184,hrow new IntegratorException(fee);
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,182,} catch (SwitchException se) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,183,throw new IntegratorException(se);
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,206,* @exception IntegratorException if one of the switching functions
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,207,* that should reset the state fails to do it
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,208,"ublic boolean reset(double t, double[] y) {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,209,oolean resetDerivatives = false;
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,210,or (Iterator iter = functions.iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,211,"f (((SwitchState) iter.next()).reset(t, y)) {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,212,esetDerivatives = true;
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,209,"public boolean reset(double t, double[] y) throws IntegratorException {"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,210,try {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,211,boolean resetDerivatives = false;
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,212,for (Iterator iter = functions.iterator(); iter.hasNext();) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,213,"if (((SwitchState) iter.next()).reset(t, y)) {"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,214,resetDerivatives = true;
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,217,return resetDerivatives;
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,218,} catch (SwitchException se) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,219,throw new IntegratorException(se);
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,215,eturn resetDerivatives;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,20,mport org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,21,mport org.apache.commons.math.FunctionEvaluationException;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,22,mport org.apache.commons.math.ode.DerivativeException;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,23,mport org.apache.commons.math.ode.FirstOrderIntegrator;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,24,mport org.apache.commons.math.ode.HighamHall54Integrator;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,25,mport org.apache.commons.math.ode.IntegratorException;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,26,mport org.apache.commons.math.ode.StepHandler;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,27,mport org.apache.commons.math.ode.StepInterpolator;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,28,mport org.apache.commons.math.ode.SwitchingFunction;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,22,import junit.framework.TestSuite;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,30,mport junit.framework.*;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,24,import org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,188,"ublic double g(double t, double[] y) throws FunctionEvaluationException {"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,182,"public double g(double t, double[] y) throws SwitchException {"
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,192,hrow new FunctionEvaluationException(t);
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,186,"throw new SwitchException(""Evaluation failed for argument = {0}"","
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,187,new Object[] { new Double(t) });

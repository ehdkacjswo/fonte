is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,91,// org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction
False,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,94,/ org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,95,// org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatingFunction
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,96,"{ ""no data"","
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,97,"""aucune donn\u00e9e"" },"
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,99,// org.apache.commons.math.analysis.interpolation.MicrosphereInterpolator
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,100,"{ ""brightness exponent should be positive or null, but got {0}"","
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,101,"""l''exposant de brillance devrait \u00eatre positif ou null, or e = {0}"" },"
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,102,"{ ""number of microsphere elements must be positive, but got {0}"","
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,103,"""le nombre d''\u00e9l\u00e9ments de la microsph\u00e8re devrait \u00eatre positif, or n = {0}"" },"
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,105,// org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,19,import java.util.List;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,21,import java.util.Map;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,22,import java.util.HashMap;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,24,import org.apache.commons.math.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,25,import org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,26,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,27,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,28,import org.apache.commons.math.linear.RealVector;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,29,import org.apache.commons.math.linear.ArrayRealVector;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,30,import org.apache.commons.math.random.UnitSphereRandomVectorGenerator;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,33,* Interpolating function that implements the
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,34,"* <a href=""http://www.dudziak.com/microsphere.php"">Microsphere Projection</a>."
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,36,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,38,public class MicrosphereInterpolatingFunction
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,39,implements MultivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,41,* Space dimension.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,43,private final int dimension;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,45,* Internal accounting data for the interpolation algorithm.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,46,* Each element of the list corresponds to one surface element of
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,47,* the microsphere.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,49,private final List<MicrosphereSurfaceElement> microsphere;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,51,* Exponent used in the power law that computes the weights of the
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,52,* sample data.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,54,private final double brightnessExponent;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,56,* Sample data.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,58,"private final Map<RealVector, Double> samples;"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,61,* Class for storing the accounting data needed to perform the
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,62,* microsphere projection.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,64,private static class MicrosphereSurfaceElement {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,66,/** Normal vector characterizing a surface element. */
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,67,private final RealVector normal;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,69,/** Illumination received from the brightest sample. */
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,70,private double brightestIllumination;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,72,/** Brightest sample. */
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,73,"private Map.Entry<RealVector, Double> brightestSample;"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,76,* @param n Normal vector characterizing a surface element
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,77,* of the microsphere.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,79,MicrosphereSurfaceElement(double[] n) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,80,normal = new ArrayRealVector(n);
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,84,* Return the normal vector.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,85,* @return the normal vector
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,87,RealVector normal() {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,88,return normal;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,92,"* Reset ""illumination"" and ""sampleIndex""."
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,94,void reset() {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,95,brightestIllumination = 0;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,96,brightestSample = null;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,100,* Store the illumination and index of the brightest sample.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,101,* @param illuminationFromSample illumination received from sample
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,102,* @param sample current sample illuminating the element
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,104,"void store(final double illuminationFromSample,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,105,"final Map.Entry<RealVector, Double> sample) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,106,if (illuminationFromSample > this.brightestIllumination) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,107,this.brightestIllumination = illuminationFromSample;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,108,this.brightestSample = sample;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,113,* Get the illumination of the element.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,114,* @return the illumination.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,116,double illumination() {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,117,return brightestIllumination;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,121,* Get the sample illuminating the element the most.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,122,* @return the sample.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,124,"Map.Entry<RealVector, Double> sample() {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,125,return brightestSample;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,130,* @param xval the arguments for the interpolation points.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,131,* {@code xval[i][0]} is the first component of interpolation point
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,132,"* {@code i}, {@code xval[i][1]} is the second component, and so on"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,133,"* until {@code xval[i][d-1]}, the last component of that interpolation"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,134,* point (where {@code dimension} is thus the dimension of the sampled
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,135,* space).
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,136,* @param yval the values for the interpolation points
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,137,* @param brightnessExponent Brightness dimming factor.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,138,* @param microsphereElements Number of surface elements of the
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,139,* microsphere.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,140,* @param rand Unit vector generator for creating the microsphere.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,141,* @throws DimensionMismatchException if the lengths of {@code yval} and
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,142,"* {@code xval} (equal to {@code n}, the number of interpolation points)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,143,"* do not match, or the the arrays {@code xval[0]} ... {@code xval[n]},"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,144,* have lengths different from {@code dimension}.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,145,* @throws IllegalArgumentException if there are no data (xval null or zero length)
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,147,"public MicrosphereInterpolatingFunction(double[][] xval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,148,"double[] yval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,149,"int brightnessExponent,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,150,"int microsphereElements,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,151,UnitSphereRandomVectorGenerator rand)
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,152,"throws DimensionMismatchException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,153,if (xval.length == 0 || xval[0] == null) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,154,"MathRuntimeException.createIllegalArgumentException(""no data"");"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,157,if (xval.length != yval.length) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,158,"throw new DimensionMismatchException(xval.length, yval.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,161,dimension = xval[0].length;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,162,this.brightnessExponent = brightnessExponent;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,164,// Copy data samples.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,165,"samples = new HashMap<RealVector, Double>(yval.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,166,"for (int i = 0, max = xval.length; i < max; i++) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,167,if (xval[i].length != dimension) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,168,"throw new DimensionMismatchException(xval.length, yval.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,171,"samples.put(new ArrayRealVector(xval[i]), yval[i]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,174,microsphere = new ArrayList<MicrosphereSurfaceElement>(microsphereElements);
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,175,"// Generate the microsphere, assuming that a fairly large number of"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,176,// randomly generated normals will represent a sphere.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,177,for (int i = 0; i < microsphereElements; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,178,microsphere.add(new MicrosphereSurfaceElement(rand.nextVector()));
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,184,* @param point Interpolation point.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,185,* @return the interpolated value.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,187,public double value(double[] point)
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,188,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,190,final RealVector p = new ArrayRealVector(point);
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,192,// Reset.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,193,for (MicrosphereSurfaceElement md : microsphere) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,194,md.reset();
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,197,// Compute contribution of each sample points to the microsphere elements illumination
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,198,"for (Map.Entry<RealVector, Double> sd : samples.entrySet()) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,200,// Vector between interpolation point and current sample point.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,201,final RealVector diff = sd.getKey().subtract(p);
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,202,final double diffNorm = diff.getNorm();
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,204,if (Math.abs(diffNorm) < Math.ulp(1d)) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,205,"// No need to interpolate, as the interpolation point is"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,206,// actually (very close to) one of the sampled points.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,207,return sd.getValue();
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,210,for (MicrosphereSurfaceElement md : microsphere) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,211,"final double w = Math.pow(diffNorm, -brightnessExponent);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,212,"md.store(cosAngle(diff, md.normal()) * w, sd);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,217,// Interpolation calculation.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,218,double value = 0;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,219,double totalWeight = 0;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,220,for (MicrosphereSurfaceElement md : microsphere) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,221,final double iV = md.illumination();
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,222,"final Map.Entry<RealVector, Double> sd = md.sample();"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,223,if (sd != null) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,224,value += iV * sd.getValue();
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,225,totalWeight += iV;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,229,return value / totalWeight;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,234,* Compute the cosine of the angle between 2 vectors.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,236,* @param v Vector.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,237,* @param w Vector.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,239,"private double cosAngle(final RealVector v, final RealVector w) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,240,return v.dotProduct(w) / (v.getNorm() * w.getNorm());
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,19,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,20,import org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,21,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,22,import org.apache.commons.math.random.UnitSphereRandomVectorGenerator;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,25,* Interpolator that implements the algorithm described in
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,26,* <em>William Dudziak</em>'s
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,27,"* <a href=""http://www.dudziak.com/microsphere.pdf"">MS thesis</a>"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,29,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,31,public class MicrosphereInterpolator
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,32,implements MultivariateRealInterpolator {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,35,* Default number of surface elements that composes the microsphere.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,37,public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,40,* Default exponent used the weights calculation.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,42,public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,45,* Number of surface elements of the microsphere.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,47,private int microsphereElements;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,50,* Exponent used in the power law that computes the weights of the
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,51,* sample data.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,53,private int brightnessExponent;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,55,/** Create a microsphere interpolator with default settings.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,56,* <p>Calling this constructor is equivalent to call {@link
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,57,"* #MicrosphereInterpolator(int, int)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,58,"* MicrosphereInterpolator(MicrosphereInterpolator.DEFAULT_MICROSPHERE_ELEMENTS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,59,* MicrosphereInterpolator.DEFAULT_BRIGHTNESS_EXPONENT)}.</p>
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,60,* weights of the sample data
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,62,public MicrosphereInterpolator() {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,63,"this(DEFAULT_MICROSPHERE_ELEMENTS, DEFAULT_BRIGHTNESS_EXPONENT);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,66,/** Create a microsphere interpolator.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,67,* @param microsphereElements number of surface elements of the microsphere
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,68,* @param brightnessExponent exponent used in the power law that computes the
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,69,* weights of the sample data
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,70,* @throws IllegalArgumentException if {@code microsphereElements <= 0}
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,71,* or {@code brightnessExponent < 0}
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,73,"public MicrosphereInterpolator(final int microsphereElements,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,74,final int brightnessExponent) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,75,setMicropshereElements(microsphereElements);
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,76,setBrightnessExponent(brightnessExponent);
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,80,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,82,"public MultivariateRealFunction interpolate(final double[][] xval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,83,final double[] yval)
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,84,"throws MathException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,85,final UnitSphereRandomVectorGenerator rand
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,86,= new UnitSphereRandomVectorGenerator(xval[0].length);
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,87,"return new MicrosphereInterpolatingFunction(xval, yval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,88,"brightnessExponent,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,89,"microsphereElements,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,90,rand);
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,94,* Set the brightness exponent.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,95,* @param brightnessExponent Exponent for computing the distance dimming
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,96,* factor.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,97,* @throws IllegalArgumentException if {@code brightnessExponent < 0}.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,99,public void setBrightnessExponent(final int brightnessExponent) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,100,if (brightnessExponent < 0) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,101,MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,102,"""brightness exponent should be positive or null, but got {0}"","
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,103,brightnessExponent);
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,105,this.brightnessExponent = brightnessExponent;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,109,* Set the number of microsphere elements.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,110,* @param microsphereElements Number of surface elements of the microsphere.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,111,* @throws IllegalArgumentException if {@code microsphereElements <= 0}.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,113,public void setMicropshereElements(final int microsphereElements) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,114,if (microsphereElements < 0) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,115,MathRuntimeException.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,116,"""number of microsphere elements must be positive, but got {0}"","
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,117,microsphereElements);
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java,119,this.microsphereElements = microsphereElements;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,19,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,20,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,23,* Interface representing a univariate real interpolating function.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,27,public interface MultivariateRealInterpolator {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,30,* Computes an interpolating function for the data set.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,32,* @param xval the arguments for the interpolation points.
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,33,* {@code xval[i][0]} is the first component of interpolation point
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,34,"* {@code i}, {@code xval[i][1]} is the second component, and so on"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,35,"* until {@code xval[i][d-1]}, the last component of that interpolation"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,36,* point (where {@code d} is thus the dimension of the space).
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,37,* @param yval the values for the interpolation points
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,38,* @return a function which interpolates the data set
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,39,* @throws MathException if arguments violate assumptions made by the
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,40,*         interpolation algorithm or some dimension mismatch occurs
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,41,* @throws IllegalArgumentException if there are no data (xval null or zero length)
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,43,"public MultivariateRealFunction interpolate(double[][] xval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,44,double[] yval)
True,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java,45,"throws MathException, IllegalArgumentException;"
False,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealInterpolator.java,35,         interpolationg algorithm
True,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealInterpolator.java,35,*         interpolation algorithm
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,18,package org.apache.commons.math.random;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,22,* Generate random vectors isotropically located on the surface of a sphere.
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,24,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,27,public class UnitSphereRandomVectorGenerator
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,28,implements RandomVectorGenerator {
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,30,* RNG used for generating the individual components of the vectors.
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,32,private final RandomGenerator rand;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,34,* Space dimension.
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,36,private final int dimension;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,39,* @param dimension Space dimension.
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,40,* @param rand RNG for the individual components of the vectors.
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,42,"public UnitSphereRandomVectorGenerator(final int dimension,"
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,43,final RandomGenerator rand) {
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,44,this.dimension = dimension;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,45,this.rand = rand;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,48,"* Create an object that will use a default RNG ({@link MersenneTwister}),"
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,49,* in order to generate the individual components.
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,51,* @param dimension Space dimension.
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,53,public UnitSphereRandomVectorGenerator(final int dimension) {
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,54,"this(dimension, new MersenneTwister());"
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,57,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,58,public double[] nextVector() {
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,60,final double[] v = new double[dimension];
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,62,double normSq;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,63,do {
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,64,normSq = 0;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,65,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,66,final double comp = 2 * rand.nextDouble() - 1;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,67,v[i] = comp;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,68,normSq += comp * comp;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,70,} while (normSq > 1);
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,72,final double f = 1 / Math.sqrt(normSq);
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,73,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,74,v[i] *= f;
True,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java,77,return v;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,19,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,20,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,25,"* Testcase for the ""microsphere projection"" interpolator."
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,27,* @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,29,public final class MicrosphereInterpolatorTest {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,31,* Test of interpolator for a plane.
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,32,* <p>
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,33,* y = 2 x<sub>1</sub> - 3 x<sub>2</sub> + 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,35,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,36,public void testLinearFunction2D() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,37,MultivariateRealFunction f = new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,38,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,39,if (x.length != 2) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,40,throw new IllegalArgumentException();
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,42,return 2 * x[0] - 3 * x[1] + 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,46,MultivariateRealInterpolator interpolator = new MicrosphereInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,48,"// Interpolating points in [-1, 1][-1, 1] by steps of 1."
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,49,final int n = 9;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,50,final int dim = 2;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,51,double[][] x = new double[n][dim];
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,52,double[] y = new double[n];
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,53,int index = 0;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,54,for (int i = -1; i <= 1; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,55,for (int j = -1; j <= 1; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,56,x[index][0] = i;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,57,x[index][1] = j;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,58,y[index] = f.value(x[index]);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,59,++index;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,63,"MultivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,65,double[] c = new double[dim];
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,66,"double expected, result;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,68,c[0] = 0;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,69,c[1] = 0;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,70,expected = f.value(c);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,71,result = p.value(c);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,72,"Assert.assertEquals(""On sample point"", expected, result, Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,74,c[0] = 0 + 1e-5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,75,c[1] = 1 - 1e-5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,76,expected = f.value(c);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,77,result = p.value(c);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,78,"Assert.assertEquals(""1e-5 away from sample point"", expected, result, 1e-4);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,82,* Test of interpolator for a quadratic function.
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,83,* <p>
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,84,* y = 2 x<sub>1</sub><sup>2</sup> - 3 x<sub>2</sub><sup>2</sup>
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,85,*     + 4 x<sub>1</sub> x<sub>2</sub> - 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,87,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,88,public void testParaboloid2D() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,89,MultivariateRealFunction f = new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,90,public double value(double[] x) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,91,if (x.length != 2) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,92,throw new IllegalArgumentException();
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,94,return 2 * x[0] * x[0] - 3 * x[1] * x[1] + 4 * x[0] * x[1] - 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,98,MultivariateRealInterpolator interpolator = new MicrosphereInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,100,"// Interpolating points in [-10, 10][-10, 10] by steps of 2."
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,101,final int n = 121;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,102,final int dim = 2;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,103,double[][] x = new double[n][dim];
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,104,double[] y = new double[n];
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,105,int index = 0;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,106,for (int i = -10; i <= 10; i += 2) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,107,for (int j = -10; j <= 10; j += 2) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,108,x[index][0] = i;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,109,x[index][1] = j;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,110,y[index] = f.value(x[index]);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,111,++index;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,115,"MultivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,117,double[] c = new double[dim];
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,118,"double expected, result;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,120,c[0] = 0;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,121,c[1] = 0;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,122,expected = f.value(c);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,123,result = p.value(c);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,124,"Assert.assertEquals(""On sample point"", expected, result, Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,126,c[0] = 2 + 1e-5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,127,c[1] = 2 - 1e-5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,128,expected = f.value(c);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,129,result = p.value(c);
True,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java,130,"Assert.assertEquals(""1e-5 away from sample point"", expected, result, 1e-3);"

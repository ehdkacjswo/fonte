is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,23,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,22, An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,23, QR-decomposition of a real matrix.
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,24, <p>This interface is based on the class with similar name from the
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,27,* Calculates the QR-decomposition of a matrix.
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,28,* <p>The QR-decomposition of a matrix A consists of two matrices Q and R
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,29,"* that satisfy: A = QR, Q is orthogonal (Q<sup>T</sup>Q = I), and R is"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,30,"* upper triangular. If A is m&times;n, Q is m&times;m and R m&times;n.</p>"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,31,* <p>This class compute the decomposition using Householder reflectors.</p>
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,32,"* <p>For efficiency purposes, the decomposition in packed form is transposed."
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,33,"* This allows inner loop to iterate inside rows, which is much more cache-efficient"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,34,* in Java.</p>
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,35,* <p>This class is based on the class with similar name from the
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,29,   <li>the <code>solve</code> and <code>isFullRank</code> methods have been replaced
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,30,   by a {@link #getSolver() getSolver} method and the equivalent methods provided by
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,31,   the returned {@link DecompositionSolver}.</li>
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,40,*   <li>the {@code solve} and {@code isFullRank} methods have been replaced
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,41,*   by a {@link #getSolver() getSolver} method and the equivalent methods
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,42,*   provided by the returned {@link DecompositionSolver}.</li>
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,37, @since 1.2
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,49,* @since 1.2 (changed to concrete class in 3.0)
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,39,ublic interface QRDecomposition {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,51,public class QRDecomposition {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,54,* A packed TRANSPOSED representation of the QR decomposition.
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,55,* <p>The elements BELOW the diagonal are the elements of the UPPER triangular
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,56,"* matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,57,* from which an explicit form of Q can be recomputed if desired.</p>
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,59,private double[][] qrt;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,61,/** The diagonal elements of R. */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,62,private double[] rDiag;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,64,/** Cached value of Q. */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,65,private RealMatrix cachedQ;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,67,/** Cached value of QT. */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,68,private RealMatrix cachedQT;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,70,/** Cached value of R. */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,71,private RealMatrix cachedR;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,73,/** Cached value of H. */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,74,private RealMatrix cachedH;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,77,* Calculates the QR-decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,78,* @param matrix The matrix to decompose.
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,80,public QRDecomposition(RealMatrix matrix) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,82,final int m = matrix.getRowDimension();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,83,final int n = matrix.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,84,qrt = matrix.transpose().getData();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,85,"rDiag = new double[FastMath.min(m, n)];"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,86,cachedQ  = null;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,87,cachedQT = null;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,88,cachedR  = null;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,89,cachedH  = null;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,92,* The QR decomposition of a matrix A is calculated using Householder
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,93,* reflectors by repeating the following operations to each minor
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,94,"* A(minor,minor) of A:"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,96,"for (int minor = 0; minor < FastMath.min(m, n); minor++) {"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,98,final double[] qrtMinor = qrt[minor];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,101,"* Let x be the first column of the minor, and a^2 = |x|^2."
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,102,* x will be in the positions qr[minor][minor] through qr[m][minor].
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,103,"* The first column of the transformed minor will be (a,0,0,..)'"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,104,* The sign of a is chosen to be opposite to the sign of the first
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,105,* component of x. Let's find a:
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,107,double xNormSqr = 0;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,108,for (int row = minor; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,109,final double c = qrtMinor[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,110,xNormSqr += c * c;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,112,final double a = (qrtMinor[minor] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,113,rDiag[minor] = a;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,115,if (a != 0.0) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,118,* Calculate the normalized reflection vector v and transform
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,119,* the first column. We know the norm of v beforehand: v = x-ae
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,120,"* so |v|^2 = <x-ae,x-ae> = <x,x>-2a<x,e>+a^2<e,e> ="
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,121,"* a^2+a^2-2a<x,e> = 2a*(a - <x,e>)."
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,122,"* Here <x, e> is now qr[minor][minor]."
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,123,* v = x-ae is stored in the column at qr:
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,125,qrtMinor[minor] -= a; // now |v|^2 = -2a*(qr[minor][minor])
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,128,* Transform the rest of the columns of the minor:
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,129,* They will be transformed by the matrix H = I-2vv'/|v|^2.
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,130,"* If x is a column vector of the minor, then"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,131,"* Hx = (I-2vv'/|v|^2)x = x-2vv'x/|v|^2 = x - 2<x,v>/|v|^2 v."
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,132,* Therefore the transformation is easily calculated by
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,133,"* subtracting the column vector (2<x,v>/|v|^2)v from x."
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,135,"* Let 2<x,v>/|v|^2 = alpha. From above we have"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,136,"* |v|^2 = -2a*(qr[minor][minor]), so"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,137,"* alpha = -<x,v>/(a*qr[minor][minor])"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,139,for (int col = minor+1; col < n; col++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,140,final double[] qrtCol = qrt[col];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,141,double alpha = 0;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,142,for (int row = minor; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,143,alpha -= qrtCol[row] * qrtMinor[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,145,alpha /= a * qrtMinor[minor];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,147,// Subtract the column vector alpha*v from x.
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,148,for (int row = minor; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,149,qrtCol[row] -= alpha * qrtMinor[row];
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,46,ealMatrix getR();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,161,public RealMatrix getR() {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,163,if (cachedR == null) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,165,// R is supposed to be m x n
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,166,final int n = qrt.length;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,167,final int m = qrt[0].length;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,168,"cachedR = MatrixUtils.createRealMatrix(m, n);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,170,// copy the diagonal from rDiag and the upper triangle of qr
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,171,"for (int row = FastMath.min(m, n) - 1; row >= 0; row--) {"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,172,"cachedR.setEntry(row, row, rDiag[row]);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,173,for (int col = row + 1; col < n; col++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,174,"cachedR.setEntry(row, col, qrt[col][row]);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,179,// return the cached matrix
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,180,return cachedR;
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,53,ealMatrix getQ();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,188,public RealMatrix getQ() {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,189,if (cachedQ == null) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,190,cachedQ = getQT().transpose();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,192,return cachedQ;
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,60,ealMatrix getQT();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,200,public RealMatrix getQT() {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,201,if (cachedQT == null) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,203,// QT is supposed to be m x m
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,204,final int n = qrt.length;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,205,final int m = qrt[0].length;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,206,"cachedQT = MatrixUtils.createRealMatrix(m, m);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,209,"* Q = Q1 Q2 ... Q_m, so Q is formed by first constructing Q_m and then"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,210,"* applying the Householder transformations Q_(m-1),Q_(m-2),...,Q1 in"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,211,* succession to the result
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,213,"for (int minor = m - 1; minor >= FastMath.min(m, n); minor--) {"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,214,"cachedQT.setEntry(minor, minor, 1.0);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,217,"for (int minor = FastMath.min(m, n)-1; minor >= 0; minor--){"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,218,final double[] qrtMinor = qrt[minor];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,219,"cachedQT.setEntry(minor, minor, 1.0);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,220,if (qrtMinor[minor] != 0.0) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,221,for (int col = minor; col < m; col++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,222,double alpha = 0;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,223,for (int row = minor; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,224,"alpha -= cachedQT.getEntry(col, row) * qrtMinor[row];"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,226,alpha /= rDiag[minor] * qrtMinor[minor];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,228,for (int row = minor; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,229,"cachedQT.addToEntry(col, row, -alpha * qrtMinor[row]);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,236,// return the cached matrix
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,237,return cachedQT;
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,69,ealMatrix getH();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,247,public RealMatrix getH() {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,248,if (cachedH == null) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,250,final int n = qrt.length;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,251,final int m = qrt[0].length;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,252,"cachedH = MatrixUtils.createRealMatrix(m, n);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,253,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,254,"for (int j = 0; j < FastMath.min(i + 1, n); ++j) {"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,255,"cachedH.setEntry(i, j, qrt[j][i] / -rDiag[j]);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,260,// return the cached matrix
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,261,return cachedH;
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,75,ecompositionSolver getSolver();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,268,public DecompositionSolver getSolver() {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,269,"return new Solver(qrt, rDiag);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,272,/** Specialized solver. */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,273,private static class Solver implements DecompositionSolver {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,276,* A packed TRANSPOSED representation of the QR decomposition.
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,277,* <p>The elements BELOW the diagonal are the elements of the UPPER triangular
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,278,"* matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,279,* from which an explicit form of Q can be recomputed if desired.</p>
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,281,private final double[][] qrt;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,283,/** The diagonal elements of R. */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,284,private final double[] rDiag;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,287,* Build a solver from decomposed matrix.
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,288,* @param qrt packed TRANSPOSED representation of the QR decomposition
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,289,* @param rDiag diagonal elements of R
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,291,"private Solver(final double[][] qrt, final double[] rDiag) {"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,292,this.qrt   = qrt;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,293,this.rDiag = rDiag;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,296,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,297,public boolean isNonSingular() {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,299,for (double diag : rDiag) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,300,if (diag == 0) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,301,return false;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,304,return true;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,307,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,308,public RealVector solve(RealVector b) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,309,final int n = qrt.length;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,310,final int m = qrt[0].length;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,311,if (b.getDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,312,"throw new DimensionMismatchException(b.getDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,314,if (!isNonSingular()) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,315,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,318,final double[] x = new double[n];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,319,final double[] y = b.toArray();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,321,// apply Householder transforms to solve Q.y = b
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,322,"for (int minor = 0; minor < FastMath.min(m, n); minor++) {"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,324,final double[] qrtMinor = qrt[minor];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,325,double dotProduct = 0;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,326,for (int row = minor; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,327,dotProduct += y[row] * qrtMinor[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,329,dotProduct /= rDiag[minor] * qrtMinor[minor];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,331,for (int row = minor; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,332,y[row] += dotProduct * qrtMinor[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,336,// solve triangular system R.x = y
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,337,for (int row = rDiag.length - 1; row >= 0; --row) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,338,y[row] /= rDiag[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,339,final double yRow = y[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,340,final double[] qrtRow = qrt[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,341,x[row] = yRow;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,342,for (int i = 0; i < row; i++) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,343,y[i] -= yRow * qrtRow[i];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,347,"return new ArrayRealVector(x, false);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,350,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,351,public RealMatrix solve(RealMatrix b) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,352,final int n = qrt.length;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,353,final int m = qrt[0].length;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,354,if (b.getRowDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,355,"throw new DimensionMismatchException(b.getRowDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,357,if (!isNonSingular()) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,358,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,361,final int columns        = b.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,362,final int blockSize      = BlockRealMatrix.BLOCK_SIZE;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,363,final int cBlocks        = (columns + blockSize - 1) / blockSize;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,364,"final double[][] xBlocks = BlockRealMatrix.createBlocksLayout(n, columns);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,365,final double[][] y       = new double[b.getRowDimension()][blockSize];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,366,final double[]   alpha   = new double[blockSize];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,368,for (int kBlock = 0; kBlock < cBlocks; ++kBlock) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,369,final int kStart = kBlock * blockSize;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,370,"final int kEnd   = FastMath.min(kStart + blockSize, columns);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,371,final int kWidth = kEnd - kStart;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,373,// get the right hand side vector
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,374,"b.copySubMatrix(0, m - 1, kStart, kEnd - 1, y);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,376,// apply Householder transforms to solve Q.y = b
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,377,"for (int minor = 0; minor < FastMath.min(m, n); minor++) {"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,378,final double[] qrtMinor = qrt[minor];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,379,final double factor     = 1.0 / (rDiag[minor] * qrtMinor[minor]);
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,381,"Arrays.fill(alpha, 0, kWidth, 0.0);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,382,for (int row = minor; row < m; ++row) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,383,final double   d    = qrtMinor[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,384,final double[] yRow = y[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,385,for (int k = 0; k < kWidth; ++k) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,386,alpha[k] += d * yRow[k];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,389,for (int k = 0; k < kWidth; ++k) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,390,alpha[k] *= factor;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,393,for (int row = minor; row < m; ++row) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,394,final double   d    = qrtMinor[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,395,final double[] yRow = y[row];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,396,for (int k = 0; k < kWidth; ++k) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,397,yRow[k] += alpha[k] * d;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,402,// solve triangular system R.x = y
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,403,for (int j = rDiag.length - 1; j >= 0; --j) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,404,final int      jBlock = j / blockSize;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,405,final int      jStart = jBlock * blockSize;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,406,final double   factor = 1.0 / rDiag[j];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,407,final double[] yJ     = y[j];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,408,final double[] xBlock = xBlocks[jBlock * cBlocks + kBlock];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,409,int index = (j - jStart) * kWidth;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,410,for (int k = 0; k < kWidth; ++k) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,411,yJ[k]          *= factor;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,412,xBlock[index++] = yJ[k];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,415,final double[] qrtJ = qrt[j];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,416,for (int i = 0; i < j; ++i) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,417,final double rIJ  = qrtJ[i];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,418,final double[] yI = y[i];
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,419,for (int k = 0; k < kWidth; ++k) {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,420,yI[k] -= yJ[k] * rIJ;
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,426,"return new BlockRealMatrix(n, columns, xBlocks, false);"
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,429,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,430,public RealMatrix getInverse() {
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,431,return solve(MatrixUtils.createRealIdentityMatrix(rDiag.length));
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,22,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,23,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,27, Calculates the QR-decomposition of a matrix.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,28, <p>The QR-decomposition of a matrix A consists of two matrices Q and R
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,29," that satisfy: A = QR, Q is orthogonal (Q<sup>T</sup>Q = I), and R is"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,30," upper triangular. If A is m&times;n, Q is m&times;m and R m&times;n.</p>"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,31, <p>This class compute the decomposition using Householder reflectors.</p>
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,32," <p>For efficiency purposes, the decomposition in packed form is transposed."
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,33," This allows inner loop to iterate inside rows, which is much more cache-efficient"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,34, in Java.</p>
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,36," @see <a href=""http://mathworld.wolfram.com/QRDecomposition.html"">MathWorld</a>"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,37," @see <a href=""http://en.wikipedia.org/wiki/QR_decomposition"">Wikipedia</a>"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,39, @version $Id$
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,40, @since 1.2
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,42,ublic class QRDecompositionImpl implements QRDecomposition {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,45, A packed TRANSPOSED representation of the QR decomposition.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,46, <p>The elements BELOW the diagonal are the elements of the UPPER triangular
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,47," matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,48, from which an explicit form of Q can be recomputed if desired.</p>
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,50,rivate double[][] qrt;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,52,** The diagonal elements of R. */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,53,rivate double[] rDiag;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,55,** Cached value of Q. */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,56,rivate RealMatrix cachedQ;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,58,** Cached value of QT. */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,59,rivate RealMatrix cachedQT;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,61,** Cached value of R. */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,62,rivate RealMatrix cachedR;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,64,** Cached value of H. */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,65,rivate RealMatrix cachedH;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,68, Calculates the QR-decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,69, @param matrix The matrix to decompose.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,71,ublic QRDecompositionImpl(RealMatrix matrix) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,73,inal int m = matrix.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,74,inal int n = matrix.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,75,rt = matrix.transpose().getData();
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,76,"Diag = new double[FastMath.min(m, n)];"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,77,achedQ  = null;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,78,achedQT = null;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,79,achedR  = null;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,80,achedH  = null;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,83, The QR decomposition of a matrix A is calculated using Householder
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,84, reflectors by repeating the following operations to each minor
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,85," A(minor,minor) of A:"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,87,"or (int minor = 0; minor < FastMath.min(m, n); minor++) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,89,inal double[] qrtMinor = qrt[minor];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,92," Let x be the first column of the minor, and a^2 = |x|^2."
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,93, x will be in the positions qr[minor][minor] through qr[m][minor].
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,94," The first column of the transformed minor will be (a,0,0,..)'"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,95, The sign of a is chosen to be opposite to the sign of the first
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,96, component of x. Let's find a:
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,98,ouble xNormSqr = 0;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,99,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,100,inal double c = qrtMinor[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,101,NormSqr += c * c;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,103,inal double a = (qrtMinor[minor] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,104,Diag[minor] = a;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,106,f (a != 0.0) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,109, Calculate the normalized reflection vector v and transform
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,110, the first column. We know the norm of v beforehand: v = x-ae
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,111," so |v|^2 = <x-ae,x-ae> = <x,x>-2a<x,e>+a^2<e,e> ="
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,112," a^2+a^2-2a<x,e> = 2a*(a - <x,e>)."
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,113," Here <x, e> is now qr[minor][minor]."
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,114, v = x-ae is stored in the column at qr:
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,116,rtMinor[minor] -= a; // now |v|^2 = -2a*(qr[minor][minor])
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,119, Transform the rest of the columns of the minor:
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,120, They will be transformed by the matrix H = I-2vv'/|v|^2.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,121," If x is a column vector of the minor, then"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,122," Hx = (I-2vv'/|v|^2)x = x-2vv'x/|v|^2 = x - 2<x,v>/|v|^2 v."
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,123, Therefore the transformation is easily calculated by
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,124," subtracting the column vector (2<x,v>/|v|^2)v from x."
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,126," Let 2<x,v>/|v|^2 = alpha. From above we have"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,127," |v|^2 = -2a*(qr[minor][minor]), so"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,128," alpha = -<x,v>/(a*qr[minor][minor])"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,130,or (int col = minor+1; col < n; col++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,131,inal double[] qrtCol = qrt[col];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,132,ouble alpha = 0;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,133,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,134,lpha -= qrtCol[row] * qrtMinor[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,136,lpha /= a * qrtMinor[minor];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,138,/ Subtract the column vector alpha*v from x.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,139,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,140,rtCol[row] -= alpha * qrtMinor[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,147,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,148,ublic RealMatrix getR() {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,150,f (cachedR == null) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,152,/ R is supposed to be m x n
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,153,inal int n = qrt.length;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,154,inal int m = qrt[0].length;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,155,"achedR = MatrixUtils.createRealMatrix(m, n);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,157,/ copy the diagonal from rDiag and the upper triangle of qr
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,158,"or (int row = FastMath.min(m, n) - 1; row >= 0; row--) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,159,"achedR.setEntry(row, row, rDiag[row]);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,160,or (int col = row + 1; col < n; col++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,161,"achedR.setEntry(row, col, qrt[col][row]);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,166,/ return the cached matrix
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,167,eturn cachedR;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,170,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,171,ublic RealMatrix getQ() {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,172,f (cachedQ == null) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,173,achedQ = getQT().transpose();
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,175,eturn cachedQ;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,178,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,179,ublic RealMatrix getQT() {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,180,f (cachedQT == null) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,182,/ QT is supposed to be m x m
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,183,inal int n = qrt.length;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,184,inal int m = qrt[0].length;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,185,"achedQT = MatrixUtils.createRealMatrix(m, m);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,188," Q = Q1 Q2 ... Q_m, so Q is formed by first constructing Q_m and then"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,189," applying the Householder transformations Q_(m-1),Q_(m-2),...,Q1 in"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,190, succession to the result
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,192,"or (int minor = m - 1; minor >= FastMath.min(m, n); minor--) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,193,"achedQT.setEntry(minor, minor, 1.0);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,196,"or (int minor = FastMath.min(m, n)-1; minor >= 0; minor--){"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,197,inal double[] qrtMinor = qrt[minor];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,198,"achedQT.setEntry(minor, minor, 1.0);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,199,f (qrtMinor[minor] != 0.0) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,200,or (int col = minor; col < m; col++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,201,ouble alpha = 0;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,202,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,203,"lpha -= cachedQT.getEntry(col, row) * qrtMinor[row];"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,205,lpha /= rDiag[minor] * qrtMinor[minor];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,207,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,208,"achedQT.addToEntry(col, row, -alpha * qrtMinor[row]);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,215,/ return the cached matrix
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,216,eturn cachedQT;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,219,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,220,ublic RealMatrix getH() {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,221,f (cachedH == null) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,223,inal int n = qrt.length;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,224,inal int m = qrt[0].length;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,225,"achedH = MatrixUtils.createRealMatrix(m, n);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,226,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,227,"or (int j = 0; j < FastMath.min(i + 1, n); ++j) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,228,"achedH.setEntry(i, j, qrt[j][i] / -rDiag[j]);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,233,/ return the cached matrix
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,234,eturn cachedH;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,237,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,238,ublic DecompositionSolver getSolver() {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,239,"eturn new Solver(qrt, rDiag);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,242,** Specialized solver. */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,243,rivate static class Solver implements DecompositionSolver {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,246, A packed TRANSPOSED representation of the QR decomposition.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,247, <p>The elements BELOW the diagonal are the elements of the UPPER triangular
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,248," matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,249, from which an explicit form of Q can be recomputed if desired.</p>
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,251,rivate final double[][] qrt;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,253,** The diagonal elements of R. */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,254,rivate final double[] rDiag;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,257, Build a solver from decomposed matrix.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,258, @param qrt packed TRANSPOSED representation of the QR decomposition
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,259, @param rDiag diagonal elements of R
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,261,"rivate Solver(final double[][] qrt, final double[] rDiag) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,262,his.qrt   = qrt;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,263,his.rDiag = rDiag;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,266,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,267,ublic boolean isNonSingular() {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,269,or (double diag : rDiag) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,270,f (diag == 0) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,271,eturn false;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,274,eturn true;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,277,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,278,ublic RealVector solve(RealVector b) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,279,inal int n = qrt.length;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,280,inal int m = qrt[0].length;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,281,f (b.getDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,282,"hrow new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,284,f (!isNonSingular()) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,285,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,288,inal double[] x = new double[n];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,289,inal double[] y = b.toArray();
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,291,/ apply Householder transforms to solve Q.y = b
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,292,"or (int minor = 0; minor < FastMath.min(m, n); minor++) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,294,inal double[] qrtMinor = qrt[minor];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,295,ouble dotProduct = 0;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,296,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,297,otProduct += y[row] * qrtMinor[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,299,otProduct /= rDiag[minor] * qrtMinor[minor];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,301,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,302,[row] += dotProduct * qrtMinor[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,306,/ solve triangular system R.x = y
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,307,or (int row = rDiag.length - 1; row >= 0; --row) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,308,[row] /= rDiag[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,309,inal double yRow = y[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,310,inal double[] qrtRow = qrt[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,311,[row] = yRow;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,312,or (int i = 0; i < row; i++) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,313,[i] -= yRow * qrtRow[i];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,317,"eturn new ArrayRealVector(x, false);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,320,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,321,ublic RealMatrix solve(RealMatrix b) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,322,inal int n = qrt.length;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,323,inal int m = qrt[0].length;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,324,f (b.getRowDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,325,"hrow new DimensionMismatchException(b.getRowDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,327,f (!isNonSingular()) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,328,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,331,inal int columns        = b.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,332,inal int blockSize      = BlockRealMatrix.BLOCK_SIZE;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,333,inal int cBlocks        = (columns + blockSize - 1) / blockSize;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,334,"inal double[][] xBlocks = BlockRealMatrix.createBlocksLayout(n, columns);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,335,inal double[][] y       = new double[b.getRowDimension()][blockSize];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,336,inal double[]   alpha   = new double[blockSize];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,338,or (int kBlock = 0; kBlock < cBlocks; ++kBlock) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,339,inal int kStart = kBlock * blockSize;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,340,"inal int kEnd   = FastMath.min(kStart + blockSize, columns);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,341,inal int kWidth = kEnd - kStart;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,343,/ get the right hand side vector
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,344,".copySubMatrix(0, m - 1, kStart, kEnd - 1, y);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,346,/ apply Householder transforms to solve Q.y = b
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,347,"or (int minor = 0; minor < FastMath.min(m, n); minor++) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,348,inal double[] qrtMinor = qrt[minor];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,349,inal double factor     = 1.0 / (rDiag[minor] * qrtMinor[minor]);
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,351,"rrays.fill(alpha, 0, kWidth, 0.0);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,352,or (int row = minor; row < m; ++row) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,353,inal double   d    = qrtMinor[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,354,inal double[] yRow = y[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,355,or (int k = 0; k < kWidth; ++k) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,356,lpha[k] += d * yRow[k];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,359,or (int k = 0; k < kWidth; ++k) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,360,lpha[k] *= factor;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,363,or (int row = minor; row < m; ++row) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,364,inal double   d    = qrtMinor[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,365,inal double[] yRow = y[row];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,366,or (int k = 0; k < kWidth; ++k) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,367,Row[k] += alpha[k] * d;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,372,/ solve triangular system R.x = y
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,373,or (int j = rDiag.length - 1; j >= 0; --j) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,374,inal int      jBlock = j / blockSize;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,375,inal int      jStart = jBlock * blockSize;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,376,inal double   factor = 1.0 / rDiag[j];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,377,inal double[] yJ     = y[j];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,378,inal double[] xBlock = xBlocks[jBlock * cBlocks + kBlock];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,379,nt index = (j - jStart) * kWidth;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,380,or (int k = 0; k < kWidth; ++k) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,381,J[k]          *= factor;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,382,Block[index++] = yJ[k];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,385,inal double[] qrtJ = qrt[j];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,386,or (int i = 0; i < j; ++i) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,387,inal double rIJ  = qrtJ[i];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,388,inal double[] yI = y[i];
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,389,or (int k = 0; k < kWidth; ++k) {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,390,I[k] -= yJ[k] * rIJ;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,396,"eturn new BlockRealMatrix(n, columns, xBlocks, false);"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,399,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,400,ublic RealMatrix getInverse() {
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,401,eturn solve(MatrixUtils.createRealIdentityMatrix(rDiag.length));
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,33,mport org.apache.commons.math.linear.QRDecompositionImpl;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,294,"RDecomposition decomposition = new QRDecompositionImpl(new Array2DRowRealMatrix(a, false));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,293,QRDecomposition decomposition;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,294,"decomposition = new QRDecomposition(new Array2DRowRealMatrix(a, false));"
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,26,mport org.apache.commons.math.linear.QRDecompositionImpl;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,26,import org.apache.commons.math.linear.QRDecomposition;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,148,ew QRDecompositionImpl(mA).getSolver();
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,148,new QRDecomposition(mA).getSolver();
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,22,mport org.apache.commons.math.linear.QRDecompositionImpl;
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,36, of the <code>X</code> matrix. (See {@link QRDecompositionImpl} for details on the
True,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,35,* of the <code>X</code> matrix. (See {@link QRDecomposition} for details on the
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,82,r = new QRDecompositionImpl(X);
True,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,81,qr = new QRDecomposition(X);
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,201,r = new QRDecompositionImpl(X);
True,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,200,qr = new QRDecomposition(X);
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,26,ublic class QRDecompositionImplTest {
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,26,public class QRDecompositionTest {
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,72,RDecomposition qr = new QRDecompositionImpl(m);
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,72,QRDecomposition qr = new QRDecomposition(m);
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,100,RDecomposition qr = new QRDecompositionImpl(m);
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,100,QRDecomposition qr = new QRDecomposition(m);
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,126,RDecomposition qr = new QRDecompositionImpl(m);
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,126,QRDecomposition qr = new QRDecomposition(m);
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,136,heckUpperTriangular(new QRDecompositionImpl(matrix).getR());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,136,checkUpperTriangular(new QRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,139,heckUpperTriangular(new QRDecompositionImpl(matrix).getR());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,139,checkUpperTriangular(new QRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,142,heckUpperTriangular(new QRDecompositionImpl(matrix).getR());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,142,checkUpperTriangular(new QRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,145,heckUpperTriangular(new QRDecompositionImpl(matrix).getR());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,145,checkUpperTriangular(new QRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,151,heckUpperTriangular(new QRDecompositionImpl(matrix).getR());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,151,checkUpperTriangular(new QRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,154,heckUpperTriangular(new QRDecompositionImpl(matrix).getR());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,154,checkUpperTriangular(new QRDecomposition(matrix).getR());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,173,heckTrapezoidal(new QRDecompositionImpl(matrix).getH());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,173,checkTrapezoidal(new QRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,176,heckTrapezoidal(new QRDecompositionImpl(matrix).getH());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,176,checkTrapezoidal(new QRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,179,heckTrapezoidal(new QRDecompositionImpl(matrix).getH());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,179,checkTrapezoidal(new QRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,182,heckTrapezoidal(new QRDecompositionImpl(matrix).getH());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,182,checkTrapezoidal(new QRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,188,heckTrapezoidal(new QRDecompositionImpl(matrix).getH());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,188,checkTrapezoidal(new QRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,191,heckTrapezoidal(new QRDecompositionImpl(matrix).getH());
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,191,checkTrapezoidal(new QRDecomposition(matrix).getH());
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,209,ew QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular));
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionTest.java,209,new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular));
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,57,ew QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,57,new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,60,olver = new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,60,solver = new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,63,olver = new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x4)).getSolver();
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,63,solver = new QRDecomposition(MatrixUtils.createRealMatrix(testData3x4)).getSolver();
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,66,olver = new QRDecompositionImpl(MatrixUtils.createRealMatrix(testData4x3)).getSolver();
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,66,solver = new QRDecomposition(MatrixUtils.createRealMatrix(testData4x3)).getSolver();
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,75,ew QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,75,new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,95,ew QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,95,new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,115,ew QRDecompositionImpl(MatrixUtils.createRealMatrix(testData3x3NonSingular));
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,115,new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular));
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,164,ealMatrix x = new QRDecompositionImpl(a).getSolver().solve(b);
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,164,RealMatrix x = new QRDecomposition(a).getSolver().solve(b);
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,177,ealMatrix   x = new QRDecompositionImpl(a).getSolver().solve(b);
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,177,RealMatrix   x = new QRDecomposition(a).getSolver().solve(b);

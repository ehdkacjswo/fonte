is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,141,"inal double[] d = Arrays.copyOf(direc[i], n);"
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,139,"final double[] d = /* Arrays.*/ copyOf(direc[i], n); // Java 1.5 does not support Arrays.copyOf()"
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,287,* Java 1.5 does not support Arrays.copyOf()
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,289,* @param source the array to be copied
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,290,* @param newLen the length of the copy to be returned
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,291,"* @return the copied array, truncated or padded as necessary."
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,293,"private double[] copyOf(double[] source, int newLen) {"
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,294,double[] output = new double[newLen];
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,295,"System.arraycopy(source, 0, output, 0, Math.min(source.length, newLen));"
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,296,return output;
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,132,"eturn Arrays.copyOf(counter, dimension);"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,131,"return /* Arrays.*/ copyOf(counter, dimension); // Java 1.5 does not support Arrays.copyOf()"
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,167,"his.size = Arrays.copyOf(size, dimension);"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,166,"this.size = /* Arrays.*/ copyOf(size, dimension); // Java 1.5 does not support Arrays.copyOf()"
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,289,"eturn Arrays.copyOf(size, dimension);"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,288,"return /* Arrays.*/ copyOf(size, dimension); // Java 1.5 does not support Arrays.copyOf()"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,304,* Java 1.5 does not support Arrays.copyOf()
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,306,* @param source the array to be copied
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,307,* @param newLen the length of the copy to be returned
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,308,"* @return the copied array, truncated or padded as necessary."
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,310,"private int[] copyOf(int[] source, int newLen) {"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,311,int[] output = new int[newLen];
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,312,"System.arraycopy(source, 0, output, 0, Math.min(source.length, newLen));"
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,313,return output;

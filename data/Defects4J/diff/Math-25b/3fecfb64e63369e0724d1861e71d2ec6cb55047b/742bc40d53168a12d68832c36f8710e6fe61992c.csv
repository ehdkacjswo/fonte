is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,19,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,124,"xpint(i, tmp);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,122,"FastMathCalc.expint(i, tmp);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,130,"plitReciprocal(tmp, recip);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,128,"FastMathCalc.splitReciprocal(tmp, recip);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3170,"lowexp(i/1024.0, tmp); // TWO_POWER_10"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3168,"FastMathCalc.slowexp(i/1024.0, tmp); // TWO_POWER_10"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5234,"** Factorial table, for Taylor series expansions. 0!, 1!, 2!, ... 19! */"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5235,rivate static final double FACT[] = new double[]
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5237,"1.0d,                        // 0"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5238,"1.0d,                        // 1"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5239,"2.0d,                        // 2"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5240,"6.0d,                        // 3"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5241,"24.0d,                       // 4"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5242,"120.0d,                      // 5"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5243,"720.0d,                      // 6"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5244,"5040.0d,                     // 7"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5245,"40320.0d,                    // 8"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5246,"362880.0d,                   // 9"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5247,"3628800.0d,                  // 10"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5248,"39916800.0d,                 // 11"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5249,"479001600.0d,                // 12"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5250,"6227020800.0d,               // 13"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5251,"87178291200.0d,              // 14"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5252,"1307674368000.0d,            // 15"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5253,"20922789888000.0d,           // 16"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5254,"355687428096000.0d,          // 17"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5255,"6402373705728000.0d,         // 18"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5256,"121645100408832000.0d,       // 19"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5273,N_MANT[i] = slowLog(d);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,5246,LN_MANT[i] = FastMathCalc.slowLog(d);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6312,** Coefficients for slowLog. */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6313,rivate static final double LN_SPLIT_COEF[][] = {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6314,"2.0, 0.0},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6315,"0.6666666269302368, 3.9736429850260626E-8},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6316,"0.3999999761581421, 2.3841857910019882E-8},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6317,"0.2857142686843872, 1.7029898543501842E-8},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6318,"0.2222222089767456, 1.3245471311735498E-8},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6319,"0.1818181574344635, 2.4384203044354907E-8},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6320,"0.1538461446762085, 9.140260083262505E-9},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6321,"0.13333332538604736, 9.220590270857665E-9},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6322,"0.11764700710773468, 1.2393345855018391E-8},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6323,"0.10526403784751892, 8.251545029714408E-9},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6324,"0.0952233225107193, 1.2675934823758863E-8},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6325,"0.08713622391223907, 1.1430250008909141E-8},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6326,"0.07842259109020233, 2.404307984052299E-9},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6327,"0.08371849358081818, 1.176342548272881E-8},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6328,"0.030589580535888672, 1.2958646899018938E-9},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6329,"0.14982303977012634, 1.225743062930824E-8},"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6542,"rintarray(""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6543,"rintarray(""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6544,"rintarray(""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6545,"rintarray(""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6546,"rintarray(""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6547,"rintarray(""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6548,"rintarray(""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6549,"rintarray(""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6550,"rintarray(""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6551,"rintarray(""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6552,"rintarray(""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6555,"rivate static void printarray(String string, int expectedLen, double[][] array2d) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6556,ystem.out.println(string);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6557,"heckLen(expectedLen, array2d.length);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6558,"ystem.out.println(""    { "");"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6559,nt i = 0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6560,or(double array[] : array2d) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6561,"ystem.out.print(""        {"");"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6562,or(double d : array) { // assume inner array has very few entries
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6563,"tring ds = d >= 0 ? ""+""+Double.toString(d)+""d,"" : Double.toString(d)+""d,"";"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6564,"ystem.out.printf(""%-25.25s"",ds); // multiple entries per line"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6566,"ystem.out.println(""}, // ""+i++);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6568,"ystem.out.println(""    };"");"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6571,"rivate static void printarray(String string, int expectedLen, double[] array) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6572,"ystem.out.println(string+""="");"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6573,"heckLen(expectedLen, array.length);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6574,"ystem.out.println(""    {"");"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6575,or(double d : array){
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6576,"tring ds = d!=d ? ""Double.NaN,"" : d >= 0 ? ""+""+Double.toString(d)+""d,"" : Double.toString(d)+""d,"";"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6577,"ystem.out.printf(""        %s%n"",ds); // one entry per line"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6579,"ystem.out.println(""    };"");"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6582,"rivate static void checkLen(int expectedLen, int actual) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6583,f (expectedLen != actual) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6584,"hrow new DimensionMismatchException(actual, expectedLen);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6495,"FastMathCalc.printarray(""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6496,"FastMathCalc.printarray(""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6497,"FastMathCalc.printarray(""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6498,"FastMathCalc.printarray(""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6499,"FastMathCalc.printarray(""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6500,"FastMathCalc.printarray(""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6501,"FastMathCalc.printarray(""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6502,"FastMathCalc.printarray(""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6503,"FastMathCalc.printarray(""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6504,"FastMathCalc.printarray(""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6505,"FastMathCalc.printarray(""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7337,"  For x between 0 and 1, returns exp(x), uses extended precision"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7338,  @param x argument of exponential
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7339,  @param result placeholder where to place exp(x) split in two terms
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7340,  for extra precision (i.e. exp(x) = result[0] + result[1]
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7341,  @return exp(x)
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7343,"rivate static double slowexp(final double x, final double result[]) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7344,inal double xs[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7345,inal double ys[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7346,inal double facts[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7347,inal double as[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7348,"plit(x, xs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7349,s[0] = ys[1] = 0.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7351,or (int i = FACT.length-1; i >= 0; i--) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7352,"plitMult(xs, ys, as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7353,s[0] = as[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7354,s[1] = as[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7356,"plit(FACT[i], as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7357,"plitReciprocal(as, facts);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7359,"plitAdd(ys, facts, as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7360,s[0] = as[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7361,s[1] = as[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7364,f (result != null) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7365,esult[0] = ys[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7366,esult[1] = ys[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7369,eturn ys[0] + ys[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7372,"** Compute split[0], split[1] such that their sum is equal to d,"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7373, and split[0] has its 30 least significant bits as zero.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7374, @param d number to split
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7375, @param split placeholder where to place the result
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7377,"rivate static void split(final double d, final double split[]) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7378,f (d < 8e298 && d > -8e298) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7379,inal double a = d * HEX_40000000;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7380,plit[0] = (d + a) - a;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7381,plit[1] = d - split[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7382, else {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7383,inal double a = d * 9.31322574615478515625E-10;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7384,plit[0] = (d + a - d) * HEX_40000000;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7385,plit[1] = d - split[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7389,** Recompute a split.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7390," @param a input/out array containing the split, changed"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7391, on output
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7393,rivate static void resplit(final double a[]) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7394,inal double c = a[0] + a[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7395,inal double d = -(c - a[0] - a[1]);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7397,f (c < 8e298 && c > -8e298) { // MAGIC NUMBER
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7398,ouble z = c * HEX_40000000;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7399,[0] = (c + z) - z;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7400,[1] = c - a[0] + d;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7401, else {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7402,ouble z = c * 9.31322574615478515625E-10;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7403,[0] = (c + z - c) * HEX_40000000;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7404,[1] = c - a[0] + d;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7408,** Multiply two numbers in split form.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7409, @param a first term of multiplication
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7410, @param b second term of multiplication
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7411, @param ans placeholder where to put the result
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7413,"rivate static void splitMult(double a[], double b[], double ans[]) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7414,ns[0] = a[0] * b[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7415,ns[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7417,* Resplit */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7418,esplit(ans);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7421,** Add two numbers in split form.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7422, @param a first term of addition
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7423, @param b second term of addition
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7424, @param ans placeholder where to put the result
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7426,"rivate static void splitAdd(final double a[], final double b[], final double ans[]) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7427,ns[0] = a[0] + b[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7428,ns[1] = a[1] + b[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7430,esplit(ans);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7433,** Compute the reciprocal of in.  Use the following algorithm.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7434,  in = c + d.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7435,  want to find x + y such that x+y = 1/(c+d) and x is much
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7436,  larger than y and x has several zero bits on the right.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7438,"  Set b = 1/(2^22),  a = 1 - b.  Thus (a+b) = 1."
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7439,  Use following identity to compute (a+b)/(c+d)
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7441,  (a+b)/(c+d)  =   a/c   +    (bc - ad) / (c^2 + cd)
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7442,  set x = a/c  and y = (bc - ad) / (c^2 + cd)
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7443,"  This will be close to the right answer, but there will be"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7444,  some rounding in the calculation of X.  So by carefully
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7445,  computing 1 - (c+d)(x+y) we can compute an error and
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7446,  add that back in.   This is done carefully so that terms
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7447,  of similar size are subtracted first.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7448,"  @param in initial number, in split form"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7449,  @param result placeholder where to put the result
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7451,"rivate static void splitReciprocal(final double in[], final double result[]) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7452,inal double b = 1.0/4194304.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7453,inal double a = 1.0 - b;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7455,f (in[0] == 0.0) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7456,n[0] = in[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7457,n[1] = 0.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7460,esult[0] = a / in[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7461,esult[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7463,f (result[1] != result[1]) { // can happen if result[1] is NAN
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7464,esult[1] = 0.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7467,* Resplit */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7468,esplit(result);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7470,or (int i = 0; i < 2; i++) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7471,"* this may be overkill, probably once is enough */"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7472,ouble err = 1.0 - result[0] * in[0] - result[0] * in[1] -
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7473,esult[1] * in[0] - result[1] * in[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7474,*err = 1.0 - err; */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7475,rr = err * (result[0] + result[1]);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7476,"*printf(""err = %16e\n"", err); */"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7477,esult[1] += err;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7481,** Compute (a[0] + a[1]) * (b[0] + b[1]) in extended precision.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7482, @param a first term of the multiplication
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7483, @param b second term of the multiplication
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7484, @param result placeholder where to put the result
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7486,"rivate static void quadMult(final double a[], final double b[], final double result[]) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7487,inal double xs[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7488,inal double ys[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7489,inal double zs[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7491,* a[0] * b[0] */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7492,"plit(a[0], xs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7493,"plit(b[0], ys);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7494,"plitMult(xs, ys, zs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7496,esult[0] = zs[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7497,esult[1] = zs[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7499,* a[0] * b[1] */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7500,"plit(b[1], ys);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7501,"plitMult(xs, ys, zs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7503,ouble tmp = result[0] + zs[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7504,esult[1] = result[1] - (tmp - result[0] - zs[0]);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7505,esult[0] = tmp;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7506,mp = result[0] + zs[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7507,esult[1] = result[1] - (tmp - result[0] - zs[1]);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7508,esult[0] = tmp;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7510,* a[1] * b[0] */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7511,"plit(a[1], xs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7512,"plit(b[0], ys);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7513,"plitMult(xs, ys, zs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7515,mp = result[0] + zs[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7516,esult[1] = result[1] - (tmp - result[0] - zs[0]);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7517,esult[0] = tmp;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7518,mp = result[0] + zs[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7519,esult[1] = result[1] - (tmp - result[0] - zs[1]);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7520,esult[0] = tmp;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7522,* a[1] * b[0] */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7523,"plit(a[1], xs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7524,"plit(b[1], ys);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7525,"plitMult(xs, ys, zs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7527,mp = result[0] + zs[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7528,esult[1] = result[1] - (tmp - result[0] - zs[0]);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7529,esult[0] = tmp;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7530,mp = result[0] + zs[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7531,esult[1] = result[1] - (tmp - result[0] - zs[1]);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7532,esult[0] = tmp;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7535,** Compute exp(p) for a integer p in extended precision.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7536, @param p integer whose exponential is requested
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7537, @param result placeholder where to put the result in extended precision
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7538, @return exp(p) in standard precision (equal to result[0] + result[1])
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7540,"rivate static double expint(int p, final double result[]) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7541,/double x = M_E;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7542,inal double xs[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7543,inal double as[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7544,inal double ys[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7545,"/split(x, xs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7546,/xs[1] = (double)(2.7182818284590452353602874713526625L - xs[0]);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7547,/xs[0] = 2.71827697753906250000;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7548,/xs[1] = 4.85091998273542816811e-06;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7549,/xs[0] = Double.longBitsToDouble(0x4005bf0800000000L);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7550,/xs[1] = Double.longBitsToDouble(0x3ed458a2bb4a9b00L);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7552,* E */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7553,s[0] = 2.718281828459045;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7554,s[1] = 1.4456468917292502E-16;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7556,"plit(1.0, ys);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7558,hile (p > 0) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7559,f ((p & 1) != 0) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7560,"uadMult(ys, xs, as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7561,s[0] = as[0]; ys[1] = as[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7564,"uadMult(xs, xs, as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7565,s[0] = as[0]; xs[1] = as[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7567, >>= 1;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7570,f (result != null) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7571,esult[0] = ys[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7572,esult[1] = ys[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7574,esplit(result);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,7577,eturn ys[0] + ys[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8051,"** xi in the range of [1, 2]."
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8052,                                3        5        7
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8053,      x+1           /          x        x        x          \
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8054,  ln ----- =   2 *  |  x  +   ----  +  ----  +  ---- + ...  |
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8055,      1-x           \          3        5        7          /
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8057," So, compute a Remez approximation of the following function"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8059,  ln ((sqrt(x)+1)/(1-sqrt(x)))  /  x
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8061, This will be an even function with only positive coefficents.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8062, x is in the range [0 - 1/3].
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8064, Transform xi for input to the above function by setting
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8065," x = (xi-1)/(xi+1).   Input to the polynomial is x^2, then"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8066, the result is multiplied by x.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8067, @param xi number from which log is requested
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8068, @return log(xi)
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8070,rivate static double[] slowLog(double xi) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8071,ouble x[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8072,ouble x2[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8073,ouble y[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8074,ouble a[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8076,"plit(xi, x);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8078,* Set X = (x-1)/(x+1) */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8079,[0] += 1.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8080,esplit(x);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8081,"plitReciprocal(x, a);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8082,[0] -= 2.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8083,esplit(x);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8084,"plitMult(x, a, y);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8085,[0] = y[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8086,[1] = y[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8088,* Square X -> X2*/
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8089,"plitMult(x, x, x2);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8092,/x[0] -= 1.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8093,/resplit(x);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8095,[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8096,[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8098,or (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8099,"plitMult(y, x2, a);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8100,[0] = a[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8101,[1] = a[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8102,"plitAdd(y, LN_SPLIT_COEF[i], a);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8103,[0] = a[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8104,[1] = a[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8107,"plitMult(y, x, a);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8108,[0] = a[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8109,[1] = a[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8111,eturn y;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8115, For x between 0 and pi/4 compute sine using Taylor expansion:
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8116, sin(x) = x - x^3/3! + x^5/5! - x^7/7! ...
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8117, @param x number from which sine is requested
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8118, @param result placeholder where to put the result in extended precision
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8119, (may be null)
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8120, @return sin(x)
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8122,"rivate static double slowSin(final double x, final double result[]) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8123,inal double xs[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8124,inal double ys[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8125,inal double facts[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8126,inal double as[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8127,"plit(x, xs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8128,s[0] = ys[1] = 0.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8130,or (int i = FACT.length-1; i >= 0; i--) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8131,"plitMult(xs, ys, as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8132,s[0] = as[0]; ys[1] = as[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8134,f ( (i & 1) == 0) { // Ignore even numbers
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8135,ontinue;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8138,"plit(FACT[i], as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8139,"plitReciprocal(as, facts);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8141,f ( (i & 2) != 0 ) { // alternate terms are negative
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8142,acts[0] = -facts[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8143,acts[1] = -facts[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8146,"plitAdd(ys, facts, as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8147,s[0] = as[0]; ys[1] = as[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8150,f (result != null) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8151,esult[0] = ys[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8152,esult[1] = ys[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8155,eturn ys[0] + ys[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8159,  For x between 0 and pi/4 compute cosine using Talor series
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8160,  cos(x) = 1 - x^2/2! + x^4/4! ...
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8161, @param x number from which cosine is requested
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8162, @param result placeholder where to put the result in extended precision
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8163, (may be null)
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8164, @return cos(x)
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8166,"rivate static double slowCos(final double x, final double result[]) {"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8168,inal double xs[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8169,inal double ys[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8170,inal double facts[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8171,inal double as[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8172,"plit(x, xs);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8173,s[0] = ys[1] = 0.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8175,or (int i = FACT.length-1; i >= 0; i--) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8176,"plitMult(xs, ys, as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8177,s[0] = as[0]; ys[1] = as[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8179,f ( (i & 1) != 0) { // skip odd entries
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8180,ontinue;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8183,"plit(FACT[i], as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8184,"plitReciprocal(as, facts);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8186,f ( (i & 2) != 0 ) { // alternate terms are negative
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8187,acts[0] = -facts[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8188,acts[1] = -facts[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8191,"plitAdd(ys, facts, as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8192,s[0] = as[0]; ys[1] = as[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8195,f (result != null) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8196,esult[0] = ys[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8197,esult[1] = ys[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8200,eturn ys[0] + ys[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8203,** Build the sine and cosine tables.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8205,"SuppressWarnings(""unused"")"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8206,rivate static void buildSinCosTables() {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8207,inal double result[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8209,* Use taylor series for 0 <= x <= 6/8 */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8210,or (int i = 0; i < 7; i++) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8211,ouble x = i / 8.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8213,"lowSin(x, result);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8214,INE_TABLE_A[i] = result[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8215,INE_TABLE_B[i] = result[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8217,"lowCos(x, result);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8218,OSINE_TABLE_A[i] = result[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8219,OSINE_TABLE_B[i] = result[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8222,"* Use angle addition formula to complete table to 13/8, just beyond pi/2 */"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8223,or (int i = 7; i < SINE_TABLE_LEN; i++) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8224,ouble xs[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8225,ouble ys[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8226,ouble as[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8227,ouble bs[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8228,ouble temps[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8230,f ( (i & 1) == 0) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8231,"/ Even, use double angle"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8232,s[0] = SINE_TABLE_A[i/2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8233,s[1] = SINE_TABLE_B[i/2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8234,s[0] = COSINE_TABLE_A[i/2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8235,s[1] = COSINE_TABLE_B[i/2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8237,* compute sine */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8238,"plitMult(xs, ys, result);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8239,INE_TABLE_A[i] = result[0] * 2.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8240,INE_TABLE_B[i] = result[1] * 2.0;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8242,* Compute cosine */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8243,"plitMult(ys, ys, as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8244,"plitMult(xs, xs, temps);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8245,emps[0] = -temps[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8246,emps[1] = -temps[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8247,"plitAdd(as, temps, result);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8248,OSINE_TABLE_A[i] = result[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8249,OSINE_TABLE_B[i] = result[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8250, else {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8251,s[0] = SINE_TABLE_A[i/2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8252,s[1] = SINE_TABLE_B[i/2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8253,s[0] = COSINE_TABLE_A[i/2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8254,s[1] = COSINE_TABLE_B[i/2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8255,s[0] = SINE_TABLE_A[i/2+1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8256,s[1] = SINE_TABLE_B[i/2+1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8257,s[0] = COSINE_TABLE_A[i/2+1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8258,s[1] = COSINE_TABLE_B[i/2+1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8260,* compute sine */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8261,"plitMult(xs, bs, temps);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8262,"plitMult(ys, as, result);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8263,"plitAdd(result, temps, result);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8264,INE_TABLE_A[i] = result[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8265,INE_TABLE_B[i] = result[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8267,* Compute cosine */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8268,"plitMult(ys, bs, result);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8269,"plitMult(xs, as, temps);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8270,emps[0] = -temps[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8271,emps[1] = -temps[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8272,"plitAdd(result, temps, result);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8273,OSINE_TABLE_A[i] = result[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8274,OSINE_TABLE_B[i] = result[1];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8278,* Compute tangent = sine/cosine */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8279,or (int i = 0; i < SINE_TABLE_LEN; i++) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8280,ouble xs[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8281,ouble ys[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8282,ouble as[] = new double[2];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8284,s[0] = COSINE_TABLE_A[i];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8285,s[1] = COSINE_TABLE_B[i];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8287,"plitReciprocal(as, ys);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8289,s[0] = SINE_TABLE_A[i];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8290,s[1] = SINE_TABLE_B[i];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8292,"plitMult(xs, ys, as);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8294,ANGENT_TABLE_A[i] = as[0];
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8295,ANGENT_TABLE_B[i] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,9,*   http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,19,package org.apache.commons.math.util;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,21,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,23,class FastMathCalc {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,26,"* 0x40000000 - used to split a double into two parts, both with the low order bits cleared."
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,27,* Equivalent to 2^30.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,29,private static final long HEX_40000000 = 0x40000000L; // 1073741824L
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,31,"/** Factorial table, for Taylor series expansions. 0!, 1!, 2!, ... 19! */"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,32,private static final double FACT[] = new double[]
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,34,"+1.0d,                        // 0"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,35,"+1.0d,                        // 1"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,36,"+2.0d,                        // 2"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,37,"+6.0d,                        // 3"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,38,"+24.0d,                       // 4"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,39,"+120.0d,                      // 5"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,40,"+720.0d,                      // 6"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,41,"+5040.0d,                     // 7"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,42,"+40320.0d,                    // 8"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,43,"+362880.0d,                   // 9"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,44,"+3628800.0d,                  // 10"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,45,"+39916800.0d,                 // 11"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,46,"+479001600.0d,                // 12"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,47,"+6227020800.0d,               // 13"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,48,"+87178291200.0d,              // 14"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,49,"+1307674368000.0d,            // 15"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,50,"+20922789888000.0d,           // 16"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,51,"+355687428096000.0d,          // 17"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,52,"+6402373705728000.0d,         // 18"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,53,"+121645100408832000.0d,       // 19"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,56,/** Coefficients for slowLog. */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,57,private static final double LN_SPLIT_COEF[][] = {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,58,"{2.0, 0.0},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,59,"{0.6666666269302368, 3.9736429850260626E-8},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,60,"{0.3999999761581421, 2.3841857910019882E-8},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,61,"{0.2857142686843872, 1.7029898543501842E-8},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,62,"{0.2222222089767456, 1.3245471311735498E-8},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,63,"{0.1818181574344635, 2.4384203044354907E-8},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,64,"{0.1538461446762085, 9.140260083262505E-9},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,65,"{0.13333332538604736, 9.220590270857665E-9},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,66,"{0.11764700710773468, 1.2393345855018391E-8},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,67,"{0.10526403784751892, 8.251545029714408E-9},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,68,"{0.0952233225107193, 1.2675934823758863E-8},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,69,"{0.08713622391223907, 1.1430250008909141E-8},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,70,"{0.07842259109020233, 2.404307984052299E-9},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,71,"{0.08371849358081818, 1.176342548272881E-8},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,72,"{0.030589580535888672, 1.2958646899018938E-9},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,73,"{0.14982303977012634, 1.225743062930824E-8},"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,76,/** Build the sine and cosine tables.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,77,* @param SINE_TABLE_A
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,78,* @param SINE_TABLE_B
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,79,* @param COSINE_TABLE_A
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,80,* @param COSINE_TABLE_B
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,81,* @param SINE_TABLE_LEN
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,82,* @param TANGENT_TABLE_A
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,83,* @param TANGENT_TABLE_B
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,85,"@SuppressWarnings(""unused"")"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,86,"private static void buildSinCosTables(double[] SINE_TABLE_A, double[] SINE_TABLE_B, double[] COSINE_TABLE_A, double[] COSINE_TABLE_B, int SINE_TABLE_LEN, double[] TANGENT_TABLE_A, double[] TANGENT_TABLE_B) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,87,final double result[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,89,/* Use taylor series for 0 <= x <= 6/8 */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,90,for (int i = 0; i < 7; i++) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,91,double x = i / 8.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,93,"slowSin(x, result);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,94,SINE_TABLE_A[i] = result[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,95,SINE_TABLE_B[i] = result[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,97,"slowCos(x, result);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,98,COSINE_TABLE_A[i] = result[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,99,COSINE_TABLE_B[i] = result[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,102,"/* Use angle addition formula to complete table to 13/8, just beyond pi/2 */"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,103,for (int i = 7; i < SINE_TABLE_LEN; i++) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,104,double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,105,double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,106,double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,107,double bs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,108,double temps[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,110,if ( (i & 1) == 0) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,111,"// Even, use double angle"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,112,xs[0] = SINE_TABLE_A[i/2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,113,xs[1] = SINE_TABLE_B[i/2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,114,ys[0] = COSINE_TABLE_A[i/2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,115,ys[1] = COSINE_TABLE_B[i/2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,117,/* compute sine */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,118,"splitMult(xs, ys, result);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,119,SINE_TABLE_A[i] = result[0] * 2.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,120,SINE_TABLE_B[i] = result[1] * 2.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,122,/* Compute cosine */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,123,"splitMult(ys, ys, as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,124,"splitMult(xs, xs, temps);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,125,temps[0] = -temps[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,126,temps[1] = -temps[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,127,"splitAdd(as, temps, result);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,128,COSINE_TABLE_A[i] = result[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,129,COSINE_TABLE_B[i] = result[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,130,} else {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,131,xs[0] = SINE_TABLE_A[i/2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,132,xs[1] = SINE_TABLE_B[i/2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,133,ys[0] = COSINE_TABLE_A[i/2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,134,ys[1] = COSINE_TABLE_B[i/2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,135,as[0] = SINE_TABLE_A[i/2+1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,136,as[1] = SINE_TABLE_B[i/2+1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,137,bs[0] = COSINE_TABLE_A[i/2+1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,138,bs[1] = COSINE_TABLE_B[i/2+1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,140,/* compute sine */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,141,"splitMult(xs, bs, temps);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,142,"splitMult(ys, as, result);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,143,"splitAdd(result, temps, result);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,144,SINE_TABLE_A[i] = result[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,145,SINE_TABLE_B[i] = result[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,147,/* Compute cosine */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,148,"splitMult(ys, bs, result);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,149,"splitMult(xs, as, temps);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,150,temps[0] = -temps[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,151,temps[1] = -temps[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,152,"splitAdd(result, temps, result);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,153,COSINE_TABLE_A[i] = result[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,154,COSINE_TABLE_B[i] = result[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,158,/* Compute tangent = sine/cosine */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,159,for (int i = 0; i < SINE_TABLE_LEN; i++) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,160,double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,161,double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,162,double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,164,as[0] = COSINE_TABLE_A[i];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,165,as[1] = COSINE_TABLE_B[i];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,167,"splitReciprocal(as, ys);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,169,xs[0] = SINE_TABLE_A[i];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,170,xs[1] = SINE_TABLE_B[i];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,172,"splitMult(xs, ys, as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,174,TANGENT_TABLE_A[i] = as[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,175,TANGENT_TABLE_B[i] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,181,*  For x between 0 and pi/4 compute cosine using Talor series
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,182,*  cos(x) = 1 - x^2/2! + x^4/4! ...
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,183,* @param x number from which cosine is requested
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,184,* @param result placeholder where to put the result in extended precision
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,185,* (may be null)
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,186,* @return cos(x)
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,188,"static double slowCos(final double x, final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,190,final double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,191,final double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,192,final double facts[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,193,final double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,194,"split(x, xs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,195,ys[0] = ys[1] = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,197,for (int i = FACT.length-1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,198,"splitMult(xs, ys, as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,199,ys[0] = as[0]; ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,201,if ( (i & 1) != 0) { // skip odd entries
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,202,continue;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,205,"split(FACT[i], as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,206,"splitReciprocal(as, facts);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,208,if ( (i & 2) != 0 ) { // alternate terms are negative
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,209,facts[0] = -facts[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,210,facts[1] = -facts[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,213,"splitAdd(ys, facts, as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,214,ys[0] = as[0]; ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,217,if (result != null) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,218,result[0] = ys[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,219,result[1] = ys[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,222,return ys[0] + ys[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,226,* For x between 0 and pi/4 compute sine using Taylor expansion:
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,227,* sin(x) = x - x^3/3! + x^5/5! - x^7/7! ...
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,228,* @param x number from which sine is requested
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,229,* @param result placeholder where to put the result in extended precision
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,230,* (may be null)
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,231,* @return sin(x)
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,233,"static double slowSin(final double x, final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,234,final double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,235,final double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,236,final double facts[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,237,final double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,238,"split(x, xs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,239,ys[0] = ys[1] = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,241,for (int i = FACT.length-1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,242,"splitMult(xs, ys, as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,243,ys[0] = as[0]; ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,245,if ( (i & 1) == 0) { // Ignore even numbers
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,246,continue;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,249,"split(FACT[i], as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,250,"splitReciprocal(as, facts);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,252,if ( (i & 2) != 0 ) { // alternate terms are negative
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,253,facts[0] = -facts[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,254,facts[1] = -facts[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,257,"splitAdd(ys, facts, as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,258,ys[0] = as[0]; ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,261,if (result != null) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,262,result[0] = ys[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,263,result[1] = ys[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,266,return ys[0] + ys[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,271,"*  For x between 0 and 1, returns exp(x), uses extended precision"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,272,*  @param x argument of exponential
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,273,*  @param result placeholder where to place exp(x) split in two terms
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,274,*  for extra precision (i.e. exp(x) = result[0] + result[1]
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,275,*  @return exp(x)
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,277,"static double slowexp(final double x, final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,278,final double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,279,final double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,280,final double facts[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,281,final double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,282,"split(x, xs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,283,ys[0] = ys[1] = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,285,for (int i = FACT.length-1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,286,"splitMult(xs, ys, as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,287,ys[0] = as[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,288,ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,290,"split(FACT[i], as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,291,"splitReciprocal(as, facts);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,293,"splitAdd(ys, facts, as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,294,ys[0] = as[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,295,ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,298,if (result != null) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,299,result[0] = ys[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,300,result[1] = ys[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,303,return ys[0] + ys[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,306,"/** Compute split[0], split[1] such that their sum is equal to d,"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,307,* and split[0] has its 30 least significant bits as zero.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,308,* @param d number to split
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,309,* @param split placeholder where to place the result
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,311,"private static void split(final double d, final double split[]) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,312,if (d < 8e298 && d > -8e298) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,313,final double a = d * HEX_40000000;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,314,split[0] = (d + a) - a;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,315,split[1] = d - split[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,316,} else {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,317,final double a = d * 9.31322574615478515625E-10;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,318,split[0] = (d + a - d) * HEX_40000000;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,319,split[1] = d - split[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,323,/** Recompute a split.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,324,"* @param a input/out array containing the split, changed"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,325,* on output
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,327,private static void resplit(final double a[]) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,328,final double c = a[0] + a[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,329,final double d = -(c - a[0] - a[1]);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,331,if (c < 8e298 && c > -8e298) { // MAGIC NUMBER
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,332,double z = c * HEX_40000000;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,333,a[0] = (c + z) - z;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,334,a[1] = c - a[0] + d;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,335,} else {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,336,double z = c * 9.31322574615478515625E-10;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,337,a[0] = (c + z - c) * HEX_40000000;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,338,a[1] = c - a[0] + d;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,342,/** Multiply two numbers in split form.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,343,* @param a first term of multiplication
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,344,* @param b second term of multiplication
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,345,* @param ans placeholder where to put the result
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,347,"private static void splitMult(double a[], double b[], double ans[]) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,348,ans[0] = a[0] * b[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,349,ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,351,/* Resplit */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,352,resplit(ans);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,355,/** Add two numbers in split form.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,356,* @param a first term of addition
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,357,* @param b second term of addition
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,358,* @param ans placeholder where to put the result
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,360,"private static void splitAdd(final double a[], final double b[], final double ans[]) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,361,ans[0] = a[0] + b[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,362,ans[1] = a[1] + b[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,364,resplit(ans);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,367,/** Compute the reciprocal of in.  Use the following algorithm.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,368,*  in = c + d.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,369,*  want to find x + y such that x+y = 1/(c+d) and x is much
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,370,*  larger than y and x has several zero bits on the right.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,372,"*  Set b = 1/(2^22),  a = 1 - b.  Thus (a+b) = 1."
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,373,*  Use following identity to compute (a+b)/(c+d)
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,375,*  (a+b)/(c+d)  =   a/c   +    (bc - ad) / (c^2 + cd)
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,376,*  set x = a/c  and y = (bc - ad) / (c^2 + cd)
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,377,"*  This will be close to the right answer, but there will be"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,378,*  some rounding in the calculation of X.  So by carefully
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,379,*  computing 1 - (c+d)(x+y) we can compute an error and
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,380,*  add that back in.   This is done carefully so that terms
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,381,*  of similar size are subtracted first.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,382,"*  @param in initial number, in split form"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,383,*  @param result placeholder where to put the result
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,385,"static void splitReciprocal(final double in[], final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,386,final double b = 1.0/4194304.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,387,final double a = 1.0 - b;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,389,if (in[0] == 0.0) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,390,in[0] = in[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,391,in[1] = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,394,result[0] = a / in[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,395,result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,397,if (result[1] != result[1]) { // can happen if result[1] is NAN
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,398,result[1] = 0.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,401,/* Resplit */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,402,resplit(result);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,404,for (int i = 0; i < 2; i++) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,405,"/* this may be overkill, probably once is enough */"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,406,double err = 1.0 - result[0] * in[0] - result[0] * in[1] -
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,407,result[1] * in[0] - result[1] * in[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,408,/*err = 1.0 - err; */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,409,err = err * (result[0] + result[1]);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,410,"/*printf(""err = %16e\n"", err); */"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,411,result[1] += err;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,415,/** Compute (a[0] + a[1]) * (b[0] + b[1]) in extended precision.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,416,* @param a first term of the multiplication
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,417,* @param b second term of the multiplication
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,418,* @param result placeholder where to put the result
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,420,"private static void quadMult(final double a[], final double b[], final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,421,final double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,422,final double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,423,final double zs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,425,/* a[0] * b[0] */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,426,"split(a[0], xs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,427,"split(b[0], ys);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,428,"splitMult(xs, ys, zs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,430,result[0] = zs[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,431,result[1] = zs[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,433,/* a[0] * b[1] */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,434,"split(b[1], ys);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,435,"splitMult(xs, ys, zs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,437,double tmp = result[0] + zs[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,438,result[1] = result[1] - (tmp - result[0] - zs[0]);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,439,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,440,tmp = result[0] + zs[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,441,result[1] = result[1] - (tmp - result[0] - zs[1]);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,442,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,444,/* a[1] * b[0] */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,445,"split(a[1], xs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,446,"split(b[0], ys);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,447,"splitMult(xs, ys, zs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,449,tmp = result[0] + zs[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,450,result[1] = result[1] - (tmp - result[0] - zs[0]);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,451,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,452,tmp = result[0] + zs[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,453,result[1] = result[1] - (tmp - result[0] - zs[1]);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,454,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,456,/* a[1] * b[0] */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,457,"split(a[1], xs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,458,"split(b[1], ys);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,459,"splitMult(xs, ys, zs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,461,tmp = result[0] + zs[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,462,result[1] = result[1] - (tmp - result[0] - zs[0]);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,463,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,464,tmp = result[0] + zs[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,465,result[1] = result[1] - (tmp - result[0] - zs[1]);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,466,result[0] = tmp;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,469,/** Compute exp(p) for a integer p in extended precision.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,470,* @param p integer whose exponential is requested
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,471,* @param result placeholder where to put the result in extended precision
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,472,* @return exp(p) in standard precision (equal to result[0] + result[1])
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,474,"static double expint(int p, final double result[]) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,475,//double x = M_E;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,476,final double xs[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,477,final double as[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,478,final double ys[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,479,"//split(x, xs);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,480,//xs[1] = (double)(2.7182818284590452353602874713526625L - xs[0]);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,481,//xs[0] = 2.71827697753906250000;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,482,//xs[1] = 4.85091998273542816811e-06;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,483,//xs[0] = Double.longBitsToDouble(0x4005bf0800000000L);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,484,//xs[1] = Double.longBitsToDouble(0x3ed458a2bb4a9b00L);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,486,/* E */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,487,xs[0] = 2.718281828459045;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,488,xs[1] = 1.4456468917292502E-16;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,490,"split(1.0, ys);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,492,while (p > 0) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,493,if ((p & 1) != 0) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,494,"quadMult(ys, xs, as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,495,ys[0] = as[0]; ys[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,498,"quadMult(xs, xs, as);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,499,xs[0] = as[0]; xs[1] = as[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,501,p >>= 1;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,504,if (result != null) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,505,result[0] = ys[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,506,result[1] = ys[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,508,resplit(result);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,511,return ys[0] + ys[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,513,"/** xi in the range of [1, 2]."
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,514,*                                3        5        7
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,515,*      x+1           /          x        x        x          \
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,516,*  ln ----- =   2 *  |  x  +   ----  +  ----  +  ---- + ...  |
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,517,*      1-x           \          3        5        7          /
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,519,"* So, compute a Remez approximation of the following function"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,521,*  ln ((sqrt(x)+1)/(1-sqrt(x)))  /  x
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,523,* This will be an even function with only positive coefficents.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,524,* x is in the range [0 - 1/3].
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,526,* Transform xi for input to the above function by setting
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,527,"* x = (xi-1)/(xi+1).   Input to the polynomial is x^2, then"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,528,* the result is multiplied by x.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,529,* @param xi number from which log is requested
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,530,* @return log(xi)
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,532,static double[] slowLog(double xi) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,533,double x[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,534,double x2[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,535,double y[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,536,double a[] = new double[2];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,538,"split(xi, x);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,540,/* Set X = (x-1)/(x+1) */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,541,x[0] += 1.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,542,resplit(x);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,543,"splitReciprocal(x, a);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,544,x[0] -= 2.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,545,resplit(x);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,546,"splitMult(x, a, y);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,547,x[0] = y[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,548,x[1] = y[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,550,/* Square X -> X2*/
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,551,"splitMult(x, x, x2);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,554,//x[0] -= 1.0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,555,//resplit(x);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,557,y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,558,y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,560,for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,561,"splitMult(y, x2, a);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,562,y[0] = a[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,563,y[1] = a[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,564,"splitAdd(y, LN_SPLIT_COEF[i], a);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,565,y[0] = a[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,566,y[1] = a[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,569,"splitMult(y, x, a);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,570,y[0] = a[0];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,571,y[1] = a[1];
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,573,return y;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,577,"static void printarray(String string, int expectedLen, double[][] array2d) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,578,System.out.println(string);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,579,"checkLen(expectedLen, array2d.length);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,580,"System.out.println(""    { "");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,581,int i = 0;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,582,for(double array[] : array2d) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,583,"System.out.print(""        {"");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,584,for(double d : array) { // assume inner array has very few entries
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,585,"String ds = d >= 0 ? ""+""+Double.toString(d)+""d,"" : Double.toString(d)+""d,"";"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,586,"System.out.printf(""%-25.25s"",ds); // multiple entries per line"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,588,"System.out.println(""}, // ""+i++);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,590,"System.out.println(""    };"");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,593,"static void printarray(String string, int expectedLen, double[] array) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,594,"System.out.println(string+""="");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,595,"checkLen(expectedLen, array.length);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,596,"System.out.println(""    {"");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,597,for(double d : array){
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,598,"String ds = d!=d ? ""Double.NaN,"" : d >= 0 ? ""+""+Double.toString(d)+""d,"" : Double.toString(d)+""d,"";"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,599,"System.out.printf(""        %s%n"",ds); // one entry per line"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,601,"System.out.println(""    };"");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,604,"private static void checkLen(int expectedLen, int actual) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,605,if (expectedLen != actual) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,606,"throw new DimensionMismatchException(actual, expectedLen);"

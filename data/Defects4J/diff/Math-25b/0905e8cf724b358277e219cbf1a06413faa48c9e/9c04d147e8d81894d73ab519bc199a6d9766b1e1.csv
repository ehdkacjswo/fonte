is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,69,nt i = 1;
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,70,"ouble s, olds, t, oldt;"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,78," = (4 * qtrap.stage(f, min, max, 1) - qtrap.stage(f, min, max, 0)) / 3.0;"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,75,"final double s = (4 * qtrap.stage(f, min, max, 1) - qtrap.stage(f, min, max, 0)) / 3.0;"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,83,lds = 0;
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,84,"ldt = qtrap.stage(f, min, max, 0);"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,85,hile (i <= maximalIterationCount) {
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,86," = qtrap.stage(f, min, max, i);"
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,87, = (4 * t - oldt) / 3.0;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,80,double olds = 0;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,81,"double oldt = qtrap.stage(f, min, max, 0);"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,82,for (int i = 1; i <= maximalIterationCount; ++i) {
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,83,"final double t = qtrap.stage(f, min, max, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,84,final double s = (4 * t - oldt) / 3.0;
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,99,++;
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,80,"ong i, np;"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,81,"ouble x, spacing, sum = 0;"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,87,p = 1L << (n-1);           // number of new points in this stage
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,88,pacing = (max - min) / np; // spacing between adjacent new points
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,89, = min + 0.5 * spacing;    // the first new point
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,90,or (i = 0; i < np; i++) {
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,84,final long np = 1L << (n-1);           // number of new points in this stage
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,85,double sum = 0;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,86,final double spacing = (max - min) / np; // spacing between adjacent new points
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,87,double x = min + 0.5 * spacing;    // the first new point
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,88,for (long i = 0; i < np; i++) {
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,112,nt i = 1;
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,113,"ouble t, oldt;"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,119,"ldt = stage(f, min, max, 0);"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,120,hile (i <= maximalIterationCount) {
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,121," = stage(f, min, max, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,114,"double oldt = stage(f, min, max, 0);"
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,115,for (int i = 1; i <= maximalIterationCount; ++i) {
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,116,"final double t = stage(f, min, max, i);"
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,132,++;
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,60,"ouble a[], c[];"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,72, = new double[x.length-1];
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,73,or (int i = 0; i < c.length; i++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,74,[i] = x[i];
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,76," = computeDividedDifference(x, y);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,70,final double[] c = new double[x.length-1];
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,71,"System.arraycopy(x, 0, c, 0, c.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,73,"final double[] a = computeDividedDifference(x, y);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,97,"rotected static double[] computeDividedDifference(double x[], double y[])"
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,93,"protected static double[] computeDividedDifference(final double x[], final double y[])"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,100,"nt i, j, n;"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,101,"ouble divdiff[], a[], denominator;"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,105, = x.length;
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,106,ivdiff = new double[n];
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,107,or (i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,108,ivdiff[i] = y[i];      // initialization
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,98,final double[] divdiff = y.clone(); // initialization
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,111, = new double [n];
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,100,final int n = x.length;
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,101,final double[] a = new double [n];
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,113,or (i = 1; i < n; i++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,114,or (j = 0; j < n-i; j++) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,115,enominator = x[j+i] - x[j];
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,103,for (int i = 1; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,104,for (int j = 0; j < n-i; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,105,final double denominator = x[j+i] - x[j];
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,280,"ouble sumX = 0, sumXSquared = 0, sumY = 0, sumXY = 0;"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,280,double sumX = 0;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,281,double sumXSquared = 0;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,282,double sumY = 0;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,283,double sumXY = 0;
False,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,165,"or (int i = 0, max = xval.length; i < max; i++) {"
False,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,166,f (xval[i].length != dimension) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,167,"hrow new DimensionMismatchException(xval.length, yval.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,165,for (int i = 0; i < xval.length; ++i) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,166,final double[] xvalI = xval[i];
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,167,if ( xvalI.length != dimension) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,168,"throw new DimensionMismatchException(xvalI.length, dimension);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,170,"amples.put(new ArrayRealVector(xval[i]), yval[i]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java,171,"samples.put(new ArrayRealVector(xvalI), yval[i]);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,46, Interpolating points (abscissas) and the function values at these points.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,46,* Interpolating points (abscissas).
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,48,"rivate double x[], y[];"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,48,private double x[];
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,51,* Function values at interpolating points.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,53,private double y[];
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,161,"nt i, j, n, nearest = 0;"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,162,"ouble value, c[], d[], tc, td, divider, w, dist, min_dist;"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,166, = x.length;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,167, = new double[n];
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,168, = new double[n];
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,169,in_dist = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,170,or (i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,168,int nearest = 0;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,169,final int n = x.length;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,170,final double[] c = new double[n];
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,171,final double[] d = new double[n];
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,172,double min_dist = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,173,for (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,175,ist = Math.abs(z - x[i]);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,178,final double dist = Math.abs(z - x[i]);
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,183,alue = y[nearest];
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,186,double value = y[nearest];
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,185,or (i = 1; i < n; i++) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,186,or (j = 0; j < n-i; j++) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,187,c = x[j] - z;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,188,d = x[i+j] - z;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,189,ivider = x[j] - x[i+j];
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,188,for (int i = 1; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,189,for (int j = 0; j < n-i; j++) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,190,final double tc = x[j] - z;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,191,final double td = x[i+j] - z;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,192,final double divider = x[j] - x[i+j];
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,195, = (c[j+1] - d[j]) / divider;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,198,final double w = (c[j+1] - d[j]) / divider;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,221,"nt i, j, n;"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,222,"ouble c[], tc[], d, t;"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,224, = degree() + 1;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,225,final int n = degree() + 1;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,226,or (i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,227,for (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,231, = new double[n+1];
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,232,final double[] c = new double[n+1];
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,233,or (i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,234,or (j = i; j > 0; j--) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,234,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,235,for (int j = i; j > 0; j--) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,241,c = new double[n];
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,242,or (i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,242,final double[] tc = new double[n];
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,243,for (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,244, = 1;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,245,or (j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,245,double d = 1;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,246,for (int j = 0; j < n; j++) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,259, = y[i] / d;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,260,final double t = y[i] / d;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,265,or (j = n-2; j >= 0; j--) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,266,for (int j = n-2; j >= 0; j--) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,46, Members of c[] are called centers of the Newton polynomial.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,46,* Centers of the Newton polynomial.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,48,private double c[];
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,50,"rivate double a[], c[];"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,54,private double a[];
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,173,"nt i, j, n = degree();"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,177,final int n = degree();
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,176,or (i = 0; i <= n; i++) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,180,for (int i = 0; i <= n; i++) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,181,or (i = n-1; i >= 0; i--) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,182,or (j = n-i; j > 0; j--) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,185,for (int i = n-1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,186,for (int j = n-i; j > 0; j--) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,142,"ouble x0, x1, x2, x, oldx, y0, y1, y2, y;"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,143,"ouble d01, d12, d012, c1, delta, xplus, xminus, tolerance;"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,145,0 = min; y0 = f.value(x0);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,146,2 = max; y2 = f.value(x2);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,147,1 = 0.5 * (x0 + x2); y1 = f.value(x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,143,double x0 = min;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,144,double y0 = f.value(x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,145,double x2 = max;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,146,double y2 = f.value(x2);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,147,double x1 = 0.5 * (x0 + x2);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,148,double y1 = f.value(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,150,f (y0 == 0.0) { return min; }
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,151,f (y2 == 0.0) { return max; }
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,151,if (y0 == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,152,return min;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,154,if (y2 == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,155,return max;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,154,nt i = 1;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,155,ldx = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,156,hile (i <= maximalIterationCount) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,159,double oldx = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,160,for (int i = 1; i <= maximalIterationCount; ++i) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,161,01 = (y1 - y0) / (x1 - x0);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,162,12 = (y2 - y1) / (x2 - x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,163,012 = (d12 - d01) / (x2 - x0);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,164,1 = d01 + (x1 - x0) * d012;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,165,elta = c1 * c1 - 4 * y1 * d012;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,166,plus = x1 + (-2.0 * y1) / (c1 + Math.sqrt(delta));
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,167,minus = x1 + (-2.0 * y1) / (c1 - Math.sqrt(delta));
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,165,final double d01 = (y1 - y0) / (x1 - x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,166,final double d12 = (y2 - y1) / (x2 - x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,167,final double d012 = (d12 - d01) / (x2 - x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,168,final double c1 = d01 + (x1 - x0) * d012;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,169,final double delta = c1 * c1 - 4 * y1 * d012;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,170,final double xplus = x1 + (-2.0 * y1) / (c1 + Math.sqrt(delta));
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,171,final double xminus = x1 + (-2.0 * y1) / (c1 - Math.sqrt(delta));
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,170," = isSequence(x0, xplus, x2) ? xplus : xminus;"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,171, = f.value(x);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,174,"final double x = isSequence(x0, xplus, x2) ? xplus : xminus;"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,175,final double y = f.value(x);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,174,"olerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,178,"final double tolerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,211,++;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,282,"ouble x0, x1, x2, x, oldx, y0, y1, y2, y;"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,283,"ouble q, A, B, C, delta, denominator, tolerance;"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,285,0 = min; y0 = f.value(x0);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,286,1 = max; y1 = f.value(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,287,2 = 0.5 * (x0 + x1); y2 = f.value(x2);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,286,double x0 = min;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,287,double y0 = f.value(x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,288,double x1 = max;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,289,double y1 = f.value(x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,290,double x2 = 0.5 * (x0 + x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,291,double y2 = f.value(x2);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,294,nt i = 1;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,295,ldx = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,296,hile (i <= maximalIterationCount) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,298,double oldx = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,299,for (int i = 1; i <= maximalIterationCount; ++i) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,298, = (x2 - x1) / (x1 - x0);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,299, = q * (y2 - (1 + q) * y1 + q * y0);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,300, = (2*q + 1) * y2 - (1 + q) * (1 + q) * y1 + q * q * y0;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,301, = (1 + q) * y2;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,302,elta = B * B - 4 * A * C;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,301,final double q = (x2 - x1) / (x1 - x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,302,final double a = q * (y2 - (1 + q) * y1 + q * y0);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,303,final double b = (2 * q + 1) * y2 - (1 + q) * (1 + q) * y1 + q * q * y0;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,304,final double c = (1 + q) * y2;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,305,final double delta = b * b - 4 * a * c;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,306,double x;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,307,final double denominator;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,305,ouble dplus = B + Math.sqrt(delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,306,ouble dminus = B - Math.sqrt(delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,310,double dplus = b + Math.sqrt(delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,311,double dminus = b - Math.sqrt(delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,310,enominator = Math.sqrt(B * B - delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,315,denominator = Math.sqrt(b * b - delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,313, = x2 - 2.0 * C * (x2 - x1) / denominator;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,318,x = x2 - 2.0 * c * (x2 - x1) / denominator;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,324, = f.value(x);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,329,final double y = f.value(x);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,327,"olerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,332,"final double tolerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,338,0 = x1; y0 = y1;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,339,1 = x2; y1 = y2;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,340,2 = x; y2 = y;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,343,x0 = x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,344,y0 = y1;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,345,x1 = x2;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,346,y1 = y2;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,347,x2 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,348,y2 = y;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,342,++;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,128,"ouble x1, x2, x3, x, oldx, y1, y2, y3, y, delta, correction, tolerance;"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,130,1 = min; y1 = f.value(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,131,2 = max; y2 = f.value(x2);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,128,double x1 = min;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,129,double y1 = f.value(x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,130,double x2 = max;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,131,double y2 = f.value(x2);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,134,f (y1 == 0.0) { return min; }
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,135,f (y2 == 0.0) { return max; }
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,134,if (y1 == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,135,return min;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,137,if (y2 == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,138,return max;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,139,ldx = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,143,double oldx = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,142,3 = 0.5 * (x1 + x2);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,143,3 = f.value(x3);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,146,final double x3 = 0.5 * (x1 + x2);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,147,final double y3 = f.value(x3);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,148,elta = 1 - (y1 * y2) / (y3 * y3);  // delta > 1 due to bracketing
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,149,orrection = (MathUtils.sign(y2) * MathUtils.sign(y3)) *
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,150,x3 - x1) / Math.sqrt(delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,151, = x3 - correction;                // correction != 0
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,152, = f.value(x);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,152,final double delta = 1 - (y1 * y2) / (y3 * y3);  // delta > 1 due to bracketing
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,153,final double correction = (MathUtils.sign(y2) * MathUtils.sign(y3)) *
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,154,(x3 - x1) / Math.sqrt(delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,155,final double x = x3 - correction;                // correction != 0
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,156,final double y = f.value(x);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,155,"olerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,159,"final double tolerance = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,169,2 = x; y2 = y;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,173,x2 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,174,y2 = y;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,171,1 = x; x2 = x3;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,172,1 = y; y2 = y3;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,176,x1 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,177,x2 = x3;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,178,y1 = y;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,179,y2 = y3;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,176,1 = x; y1 = y;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,183,x1 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,184,y1 = y;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,178,1 = x3; x2 = x;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,179,1 = y3; y2 = y;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,186,x1 = x3;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,187,x2 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,188,y1 = y3;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,189,y2 = y;
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,127,"or (int i = 0, index = 0; i < rows; i++) {"
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,127,int index = 0;
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,128,for (int i = 0; i < rows; i++) {
False,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,157,"or (int i = 0, index = 0; i < rows; i++, index += cols) {"
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,158,int index = 0;
True,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java,159,"for (int i = 0; i < rows; i++, index += cols) {"
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,259,"ouble   delta   = 0, xNorm = 0;"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,259,double   delta   = 0;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,260,double   xNorm = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,318,"or (int i = 0, index = pj; i <= j; ++i, index += cols) {"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,319,int index = pj;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,320,for (int i = 0; i <= j; ++i) {
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,322,index += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,382,"or (int i = 0, index = pj; i <= j; ++i, index += cols) {"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,385,int index = pj;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,386,for (int i = 0; i <= j; ++i) {
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,388,index += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,503,"or (int i = 0, index = pk; i < k; ++i, index += cols) {"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,508,int index = pk;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,509,for (int i = 0; i < k; ++i) {
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,511,index += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,528,"ouble sum2, parl = 0;"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,535,double sum2;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,536,double parl = 0;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,538,"or (int i = 0, index = pj; i < j; ++i, index += cols) {"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,546,int index = pj;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,547,for (int i = 0; i < j; ++i) {
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,549,index += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,553,"or (int i = 0, index = pj; i <= j; ++i, index += cols) {"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,563,int index = pj;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,564,for (int i = 0; i <= j; ++i) {
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,566,index += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,694,"ouble sin, cos;"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,706,final double sin;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,707,final double cos;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,697,ouble cotan = rkk / lmDiag[k];
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,710,final double cotan = rkk / lmDiag[k];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,701,ouble tan = lmDiag[k] / rkk;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,714,final double tan = lmDiag[k] / rkk;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,709,ouble temp = cos * work[k] + sin * qtbpj;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,722,final double temp = cos * work[k] + sin * qtbpj;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,716,emp = cos * rik + sin * lmDiag[i];
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,729,final double temp2 = cos * rik + sin * lmDiag[i];
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,718,acobian[i * cols + pk] = temp;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,731,jacobian[i * cols + pk] = temp2;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,867,"or (int i = k, index = kDiag; i < rows; ++i, index += cols) {"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,880,int index = kDiag;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,881,for (int i = k; i < rows; ++i) {
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,883,index += cols;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,871,"or (int i = k, index = kDiag; i < rows; ++i, index += cols) {"
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,886,index = kDiag;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,887,for (int i = k; i < rows; ++i) {
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,889,index += cols;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,229,"or (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,229,int blockIndex = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,230,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,233,"or (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,234,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,243,"or (int p = pStart, index = 0; p < pEnd; ++p, index += jWidth) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,244,int index = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,245,for (int p = pStart; p < pEnd; ++p) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,247,index += jWidth;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,250,++blockIndex;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,276,"or (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,281,int blockIndex = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,282,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,280,"or (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,286,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,291,++blockIndex;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,340,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,341,"or (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,347,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,348,for (int p = pStart; p < pEnd; ++p) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,349,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,351,++k;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,411,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,412,"or (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,420,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,421,for (int p = pStart; p < pEnd; ++p) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,422,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,424,++k;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,531,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,542,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,543,for (int p = pStart; p < pEnd; ++p) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,536,"or (int l = lStart, r = rStart; l < lEnd; ++l, ++r) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,548,int r = rStart;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,549,for (int l = lStart; l < lEnd; ++l) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,551,++r;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,593,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,607,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,608,for (int p = pStart; p < pEnd; ++p) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,679,"or (int iBlock = 0, pBlock = blockStartRow; iBlock < out.blockRows; ++iBlock, ++pBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,694,int pBlock = blockStartRow;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,695,for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,681,"or (int jBlock = 0, qBlock = blockStartColumn; jBlock < out.blockColumns; ++jBlock, ++qBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,697,int qBlock = blockStartColumn;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,698,for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,763,++qBlock;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,766,++pBlock;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1276,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1297,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1298,for (int p = pStart; p < pEnd; ++p) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1278,"or (int q = qStart, l = p - pStart; q < qEnd; ++q, l+= lInc) {"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1279,utBlock[k++] = tBlock[l];
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1300,int l = p - pStart;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1301,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1302,outBlock[k] = tBlock[l];
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1303,++k;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1304,l+= lInc;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1326,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1351,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1352,for (int p = pStart; p < pEnd; ++p) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1415,"or (int q = qStart, k = (p - pStart) * jWidth; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1441,int k = (p - pStart) * jWidth;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1442,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1444,++k;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1438,"or (int q = qStart, k = (p - pStart) * jWidth; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1466,int k = (p - pStart) * jWidth;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1467,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1469,++k;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1466,"or (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1496,int k = (p - p0) * jWidth + qStart - q0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1497,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1499,++k;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1494,"or (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1526,int k = (p - p0) * jWidth + qStart - q0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1527,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1529,++k;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1508,"or (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1542,int blockIndex = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1543,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1511,"or (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1546,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1515,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1516,"or (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1550,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1551,for (int p = pStart; p < pEnd; ++p) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1552,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1554,++k;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1557,++blockIndex;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1530,"or (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1568,int blockIndex = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1569,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1533,"or (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1572,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1537,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1538,"or (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1576,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1577,for (int p = pStart; p < pEnd; ++p) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1578,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1580,++k;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1583,++blockIndex;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1566,"or (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1608,int k = (p - p0) * jWidth + qStart - q0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1609,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1611,++k;
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1594,"or (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1638,int k = (p - p0) * jWidth + qStart - q0;
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1639,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1641,++k;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,223,"or (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,223,int blockIndex = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,224,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,227,"or (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,228,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,237,"or (int p = pStart, index = 0; p < pEnd; ++p, index += jWidth) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,238,int index = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,239,for (int p = pStart; p < pEnd; ++p) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,241,index += jWidth;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,244,++blockIndex;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,266,"or (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,271,int blockIndex = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,272,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,270,"or (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,276,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,281,++blockIndex;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,330,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,331,"or (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,337,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,338,for (int p = pStart; p < pEnd; ++p) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,339,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,341,++k;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,401,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,402,"or (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,410,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,411,for (int p = pStart; p < pEnd; ++p) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,412,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,414,++k;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,520,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,531,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,532,for (int p = pStart; p < pEnd; ++p) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,525,"or (int l = lStart, r = rStart; l < lEnd; ++l, ++r) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,537,int r = rStart;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,538,for (int l = lStart; l < lEnd; ++l) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,540,++r;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,528,utBlock[k++] += sum;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,542,outBlock[k] += sum;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,543,++k;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,580,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,595,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,596,for (int p = pStart; p < pEnd; ++p) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,599,utBlock[k++] += sum;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,615,outBlock[k] += sum;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,616,++k;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,702,"or (int iBlock = 0, pBlock = blockStartRow; iBlock < out.blockRows; ++iBlock, ++pBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,719,int pBlock = blockStartRow;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,720,for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,704,"or (int jBlock = 0, qBlock = blockStartColumn; jBlock < out.blockColumns; ++jBlock, ++qBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,722,int qBlock = blockStartColumn;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,723,for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,788,++qBlock;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,792,++pBlock;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1297,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1321,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1322,for (int p = pStart; p < pEnd; ++p) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1299,"or (int q = qStart, l = p - pStart; q < qEnd; ++q, l+= lInc) {"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1300,utBlock[k++] = tBlock[l];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1324,int l = p - pStart;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1325,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1326,outBlock[k] = tBlock[l];
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1327,++k;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1328,l+= lInc;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1346,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1374,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1375,for (int p = pStart; p < pEnd; ++p) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1432,"or (int q = qStart, k = (p - pStart) * jWidth; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1461,int k = (p - pStart) * jWidth;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1462,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1464,++k;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1455,"or (int q = qStart, k = (p - pStart) * jWidth; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1486,int k = (p - pStart) * jWidth;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1487,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1489,++k;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1483,"or (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1516,int k = (p - p0) * jWidth + qStart - q0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1517,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1519,++k;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1511,"or (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1546,int k = (p - p0) * jWidth + qStart - q0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1547,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1549,++k;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1525,"or (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1562,int blockIndex = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1563,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1528,"or (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1566,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1532,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1533,"or (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1570,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1571,for (int p = pStart; p < pEnd; ++p) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1572,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1574,++k;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1577,++blockIndex;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1547,"or (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1588,int blockIndex = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1589,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1550,"or (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1592,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1554,"or (int p = pStart, k = 0; p < pEnd; ++p) {"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1555,"or (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1596,int k = 0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1597,for (int p = pStart; p < pEnd; ++p) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1598,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1600,++k;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1603,++blockIndex;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1583,"or (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1628,int k = (p - p0) * jWidth + qStart - q0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1629,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1631,++k;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1611,"or (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1658,int k = (p - p0) * jWidth + qStart - q0;
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1659,for (int q = qStart; q < qEnd; ++q) {
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,1661,++k;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,673,"or (int i = 0, j = realEigenvalues.length - 1; i < j; ++i, --j) {"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,673,int j = realEigenvalues.length - 1;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,674,for (int i = 0; i < j; ++i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,678,--j;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1129,"or (int i = 0, j = 4 * n - 1; i < j; i += 4, j -= 4) {"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1131,int j = 4 * n - 1;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1132,for (int i = 0; i < j; i += 4) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1138,j -= 4;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1737,"or (int i = 0, sixI = 0; i < m - 1; ++i, sixI += 6) {"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1741,int sixI = 0;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1742,for (int i = 0; i < m - 1; ++i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1748,sixI += 6;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1787,"or (int i = 0, sixI = 0; i < nM1; ++i, sixI += 6) {"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1793,int sixI = 0;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1794,for (int i = 0; i < nM1; ++i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1803,sixI += 6;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1813,"or (int i = nM1 - 1, sixI = 6 * i; i >= 0; --i, sixI -= 6) {"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1821,int sixI = 6 * (nM1 - 1);
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1822,for (int i = nM1 - 1; i >= 0; --i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1831,sixI -= 6;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,420,"or (int k = 0, index = (j - jStart) * kWidth; k < kWidth; ++k, ++index) {"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,421,J[k]        *= factor;
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,422,Block[index] = yJ[k];
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,420,int index = (j - jStart) * kWidth;
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,421,for (int k = 0; k < kWidth; ++k) {
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,422,yJ[k]          *= factor;
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,423,xBlock[index++] = yJ[k];
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,211,"or (int i = 0, index = 0; i < rows; i++, index += cols) {"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,211,int index = 0;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,212,for (int i = 0; i < rows; i++) {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,216,index += cols;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,223,"ouble   delta   = 0, xNorm = 0;"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,223,double   delta   = 0;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,224,double   xNorm   = 0;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,495,"ouble sum2, parl = 0;"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,496,double sum2;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,497,double parl = 0;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,661,"ouble sin, cos;"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,663,final double sin;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,664,final double cos;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,664,ouble cotan = rkk / lmDiag[k];
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,667,final double cotan = rkk / lmDiag[k];
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,668,ouble tan = lmDiag[k] / rkk;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,671,final double tan = lmDiag[k] / rkk;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,676,ouble temp = cos * work[k] + sin * qtbpj;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,679,final double temp = cos * work[k] + sin * qtbpj;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,683,emp = cos * rik + sin * lmDiag[i];
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,686,final double temp2 = cos * rik + sin * lmDiag[i];
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,685,acobian[i][pk] = temp;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,688,jacobian[i][pk] = temp2;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,221,"ouble A, B, C, F1, x[], F[] = new double[f.length];"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,221,final double transformed[] = new double[f.length];
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,223,nt N = f.length - 1;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,224,f (!FastFourierTransformer.isPowerOf2(N)) {
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,223,final int n = f.length - 1;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,224,if (!FastFourierTransformer.isPowerOf2(n)) {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,229,f (N == 1) {       // trivial case
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,230,[0] = 0.5 * (f[0] + f[1]);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,231,[1] = 0.5 * (f[0] - f[1]);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,232,eturn F;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,229,if (n == 1) {       // trivial case
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,230,transformed[0] = 0.5 * (f[0] + f[1]);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,231,transformed[1] = 0.5 * (f[0] - f[1]);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,232,return transformed;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,236, = new double[N];
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,237,[0] = 0.5 * (f[0] + f[N]);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,238,[N >> 1] = f[N >> 1];
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,239,1 = 0.5 * (f[0] - f[N]);   // temporary variable for F[1]
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,240,or (int i = 1; i < (N >> 1); i++) {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,241, = 0.5 * (f[i] + f[N-i]);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,242, = Math.sin(i * Math.PI / N) * (f[i] - f[N-i]);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,243, = Math.cos(i * Math.PI / N) * (f[i] - f[N-i]);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,244,[i] = A - B;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,245,[N-i] = A + B;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,246,1 += C;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,236,final double[] x = new double[n];
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,237,x[0] = 0.5 * (f[0] + f[n]);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,238,x[n >> 1] = f[n >> 1];
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,239,double t1 = 0.5 * (f[0] - f[n]);   // temporary variable for transformed[1]
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,240,for (int i = 1; i < (n >> 1); i++) {
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,241,final double a = 0.5 * (f[i] + f[n-i]);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,242,final double b = Math.sin(i * Math.PI / n) * (f[i] - f[n-i]);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,243,final double c = Math.cos(i * Math.PI / n) * (f[i] - f[n-i]);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,244,x[i] = a - b;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,245,x[n-i] = a + b;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,246,t1 += c;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,252,[0] = y[0].getReal();
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,253,[1] = F1;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,254,or (int i = 1; i < (N >> 1); i++) {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,255,[2*i] = y[i].getReal();
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,256,[2*i+1] = F[2*i-1] - y[i].getImaginary();
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,252,transformed[0] = y[0].getReal();
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,253,transformed[1] = t1;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,254,for (int i = 1; i < (n >> 1); i++) {
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,255,transformed[2 * i]     = y[i].getReal();
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,256,transformed[2 * i + 1] = transformed[2 * i - 1] - y[i].getImaginary();
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,258,[N] = y[N >> 1].getReal();
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,258,transformed[n] = y[n >> 1].getReal();
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,260,eturn F;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,260,return transformed;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,347,"nt i, j, k, m, N = data.length;"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,348,"omplex A, B, C, D, E, F, z, f[] = new Complex[N];"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,347,final int n = data.length;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,348,final Complex f[] = new Complex[n];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,352,f (N == 1) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,352,if (n == 1) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,356,f (N == 2) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,356,if (n == 2) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,363, = 0;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,364,or (i = 0; i < N; i++) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,365,[i] = data[j];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,366, = N >> 1;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,367,hile (j >= k && k > 0) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,368, -= k; k >>= 1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,363,int ii = 0;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,364,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,365,f[i] = data[ii];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,366,int k = n >> 1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,367,while (ii >= k && k > 0) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,368,ii -= k; k >>= 1;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,370, += k;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,370,ii += k;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,374,or (i = 0; i < N; i += 4) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,375, = f[i].add(f[i+1]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,376, = f[i+2].add(f[i+3]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,377, = f[i].subtract(f[i+1]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,378, = f[i+2].subtract(f[i+3]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,379, = C.add(D.multiply(Complex.I));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,380, = C.subtract(D.multiply(Complex.I));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,381,[i] = A.add(B);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,382,[i+2] = A.subtract(B);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,374,for (int i = 0; i < n; i += 4) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,375,final Complex a = f[i].add(f[i+1]);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,376,final Complex b = f[i+2].add(f[i+3]);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,377,final Complex c = f[i].subtract(f[i+1]);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,378,final Complex d = f[i+2].subtract(f[i+3]);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,379,final Complex e1 = c.add(d.multiply(Complex.I));
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,380,final Complex e2 = c.subtract(d.multiply(Complex.I));
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,381,f[i] = a.add(b);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,382,f[i+2] = a.subtract(b);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,384,[i+1] = roots.isForward() ? F : E;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,385,[i+3] = roots.isForward() ? E : F;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,384,f[i+1] = roots.isForward() ? e2 : e1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,385,f[i+3] = roots.isForward() ? e1 : e2;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,389,or (i = 4; i < N; i <<= 1) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,390, = N / (i<<1);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,391,or (j = 0; j < N; j += i<<1) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,392,or (k = 0; k < i; k++) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,389,for (int i = 4; i < n; i <<= 1) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,390,final int m = n / (i<<1);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,391,for (int j = 0; j < n; j += i<<1) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,392,for (int k = 0; k < i; k++) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,398, = new Complex(
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,398,final Complex z = new Complex(
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,215,"ouble A, B, x[], F[] = new double[f.length];"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,215,final double transformed[] = new double[f.length];
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,223,nt N = f.length;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,224,f (N == 1) {       // trivial case
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,225,[0] = 0.0;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,226,eturn F;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,223,final int n = f.length;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,224,if (n == 1) {       // trivial case
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,225,transformed[0] = 0.0;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,226,return transformed;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,230, = new double[N];
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,230,final double[] x = new double[n];
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,232,[N >> 1] = 2.0 * f[N >> 1];
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,233,or (int i = 1; i < (N >> 1); i++) {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,234, = Math.sin(i * Math.PI / N) * (f[i] + f[N-i]);
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,235, = 0.5 * (f[i] - f[N-i]);
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,236,[i] = A + B;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,237,[N-i] = A - B;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,232,x[n >> 1] = 2.0 * f[n >> 1];
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,233,for (int i = 1; i < (n >> 1); i++) {
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,234,final double a = Math.sin(i * Math.PI / n) * (f[i] + f[n-i]);
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,235,final double b = 0.5 * (f[i] - f[n-i]);
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,236,x[i]     = a + b;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,237,x[n - i] = a - b;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,243,[0] = 0.0;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,244,[1] = 0.5 * y[0].getReal();
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,245,or (int i = 1; i < (N >> 1); i++) {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,246,[2*i] = -y[i].getImaginary();
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,247,[2*i+1] = y[i].getReal() + F[2*i-1];
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,243,transformed[0] = 0.0;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,244,transformed[1] = 0.5 * y[0].getReal();
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,245,for (int i = 1; i < (n >> 1); i++) {
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,246,transformed[2 * i]     = -y[i].getImaginary();
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,247,transformed[2 * i + 1] = y[i].getReal() + transformed[2 * i - 1];
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,250,eturn F;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,250,return transformed;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,208,"or (int j = 1, i = n - k + 1; j <= k; i++, j++) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,208,int i = n - k + 1;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,209,for (int j = 1; j <= k; j++) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,211,i++;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,214,"or (int j = 1, i = n - k + 1; j <= k; i++, j++) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,216,int i = n - k + 1;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,217,for (int j = 1; j <= k; j++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,221,"ong d = gcd(i, j);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,224,"final long d = gcd(i, j);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,226,i++;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,228,"or (int j = 1, i = n - k + 1; j <= k; i++, j++) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,229,"ong d = gcd(i, j);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,232,int i = n - k + 1;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,233,for (int j = 1; j <= k; j++) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,234,"final long d = gcd(i, j);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,236,i++;
False,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,189,"or (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,189,int j = index;
True,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,190,for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
False,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,218,"or (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,219,int j = index;
True,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,220,for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
False,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,361,"or (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,363,int j = index;
True,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,364,for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
False,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,201,"or (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,201,int j = index;
True,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,202,for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
False,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,230,"or (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,231,int j = index;
True,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,232,for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
False,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,373,"or (int perturb = perturb(hash), j = index; states[index] != FREE; perturb >>= PERTURB_SHIFT) {"
True,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,375,int j = index;
True,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java,376,for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,154,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,155,@Override
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,156,public RealMatrix power(final int p) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,157,if (p < 0) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,158,"throw new IllegalArgumentException(""p must be >= 0"");"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,161,if (!isSquare()) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,162,"throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,165,if (p == 0) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,166,return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,169,if (p == 1) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,170,return this.copy();
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,173,final int power = p - 1;
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,176,* Only log_2(p) operations is used by doing as follows:
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,177,* 5^214 = 5^128 * 5^64 * 5^16 * 5^4 * 5^2
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,179,"* In general, the same approach is used for A^p."
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,182,final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,183,final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,184,int maxI = -1;
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,186,for (int i = 0; i < binaryRepresentation.length; ++i) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,187,if (binaryRepresentation[i] == '1') {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,188,final int pos = binaryRepresentation.length - i - 1;
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,189,nonZeroPositions.add(pos);
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,191,"// The positions are taken in turn, so maxI is only changed once"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,192,if (maxI == -1) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,193,maxI = pos;
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,198,RealMatrix[] results = new RealMatrix[maxI + 1];
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,199,results[0] = this.copy();
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,201,for (int i = 1; i <= maxI; ++i) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,202,results[i] = results[i-1].multiply(results[i-1]);
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,205,RealMatrix result = this.copy();
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,207,for (Integer i : nonZeroPositions) {
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,208,result = result.multiply(results[i]);
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,211,return result;
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,103,* Returns the result multiplying this with itself <code>p</code> times.
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,104,"* Depending on the underlying storage, instability for high powers might occur."
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,105,* @param      p raise this to power p
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,106,* @return     this^p
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,107,* @throws     IllegalArgumentException if p < 0
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,108,*             NonSquareMatrixException if the matrix is not square
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,110,RealMatrix power(final int p);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,99,protected double powerTolerance = 10E-16;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,226,public void testPower() {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,227,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,228,Array2DRowRealMatrix mInv = new Array2DRowRealMatrix(testDataInv);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,229,Array2DRowRealMatrix mPlusInv = new Array2DRowRealMatrix(testDataPlusInv);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,230,Array2DRowRealMatrix identity = new Array2DRowRealMatrix(id);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,232,"TestUtils.assertEquals(""m^0"", m.power(0),"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,233,"identity, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,234,"TestUtils.assertEquals(""mInv^0"", mInv.power(0),"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,235,"identity, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,236,"TestUtils.assertEquals(""mPlusInv^0"", mPlusInv.power(0),"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,237,"identity, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,239,"TestUtils.assertEquals(""m^1"", m.power(1),"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,240,"m, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,241,"TestUtils.assertEquals(""mInv^1"", mInv.power(1),"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,242,"mInv, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,243,"TestUtils.assertEquals(""mPlusInv^1"", mPlusInv.power(1),"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,244,"mPlusInv, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,246,RealMatrix C1 = m.copy();
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,247,RealMatrix C2 = mInv.copy();
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,248,RealMatrix C3 = mPlusInv.copy();
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,250,for (int i = 2; i <= 10; ++i) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,251,C1 = C1.multiply(m);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,252,C2 = C2.multiply(mInv);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,253,C3 = C3.multiply(mPlusInv);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,255,"TestUtils.assertEquals(""m^"" + i, m.power(i),"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,256,"C1, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,257,"TestUtils.assertEquals(""mInv^"" + i, mInv.power(i),"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,258,"C2, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,259,"TestUtils.assertEquals(""mPlusInv^"" + i, mPlusInv.power(i),"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,260,"C3, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,263,try {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,264,Array2DRowRealMatrix mNotSquare = new Array2DRowRealMatrix(testData2T);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,265,mNotSquare.power(2);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,266,"Assert.fail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,267,} catch (NonSquareMatrixException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,268,// ignored
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,271,try {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,272,m.power(-1);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,273,"Assert.fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,274,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,275,// ignored

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,437,bjectType ownerType = ObjectType.cast(
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,438,ypeRegistry.getForgivingType(
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,439,"cope, ownerTypeName, sourceName,"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,440,"wner.getLineno(), owner.getCharno()));"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,441,f (ownerType != null) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,442,hisType = ownerType;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,437,Var ownerVar = scope.getVar(ownerTypeName);
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,438,JSType ownerType = ownerVar == null ? null : ownerVar.getType();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,439,FunctionType ownerFnType = ownerType instanceof FunctionType ?
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,440,(FunctionType) ownerType : null;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,441,ObjectType instType =
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,442,ownerFnType == null || ownerFnType.isOrdinaryFunction() ?
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,443,null : ownerFnType.getInstanceType();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,444,if (instType != null) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,445,thisType = instType;
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,100,"eturn registry.createFromTypeNodes(root, sourceName, scope,"
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,101,oot.getBooleanProp(Node.BRACELESS_TYPE));
True,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,100,"return registry.createFromTypeNodes(root, sourceName, scope);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,144," If we see a type name without braces, it might be legacy jsdoc."
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,145, So we shouldn't emit warnings about it. This method is how we skip
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,146, those warnings.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,148,oid forgiveUnknownNames() {}
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,830," Try to resolve a type name, but forgive the user and don't emit"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,831, a warning if this doesn't resolve.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,833,"ublic JSType getForgivingType(StaticScope<JSType> scope, String jsTypeName,"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,834,"tring sourceName, int lineno, int charno) {"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,835,SType type = getType(
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,836,"cope, jsTypeName, sourceName, lineno, charno);"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,837,ype.forgiveUnknownNames();
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,838,eturn type;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1350,"eturn createFromTypeNodes(n, sourceName, scope, false);"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1354, Creates a JSType from the nodes representing a type.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1355, @param n The node with type info.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1356, @param sourceName The source file name.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1357, @param scope A scope for doing type name lookups.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1358, @param forgiving Whether we should be forgiving about type names
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1359,     that we can't find.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1361,"ublic JSType createFromTypeNodes(Node n, String sourceName,"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1362,"taticScope<JSType> scope, boolean forgiving) {"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1368,"eturn new UnresolvedTypeExpression(this, n, sourceName, forgiving);"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1343,"return new UnresolvedTypeExpression(this, n, sourceName);"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1371,"eturn createFromTypeNodesInternal(n, sourceName, scope, forgiving);"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1346,"return createFromTypeNodesInternal(n, sourceName, scope);"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1391,"taticScope<JSType> scope, boolean forgiving) {"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1366,StaticScope<JSType> scope) {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1399,".getFirstChild(), sourceName, scope, forgiving)"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1374,"n.getFirstChild(), sourceName, scope)"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1409,"irstChild, sourceName, scope, forgiving));"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1384,"firstChild, sourceName, scope));"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1414,".getFirstChild(), sourceName, scope, false));"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1389,"n.getFirstChild(), sourceName, scope));"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1419,".getFirstChild(), sourceName, scope, false));"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1394,"n.getFirstChild(), sourceName, scope));"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1433,"reateFromTypeNodesInternal(child, sourceName, scope, false));"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1408,"createFromTypeNodesInternal(child, sourceName, scope));"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1446,f (forgiving) {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1447,amedType.forgiveUnknownNames();
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1460,"ypeList.getLastChild(), sourceName, scope, false);"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1432,"typeList.getLastChild(), sourceName, scope);"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1466,"ypeList.getFirstChild(), sourceName, scope, false);"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1438,"typeList.getFirstChild(), sourceName, scope);"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1486,"ontextNode, sourceName, scope, false)"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1458,"contextNode, sourceName, scope)"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1514,"rg.getFirstChild(), sourceName, scope, false));"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1486,"arg.getFirstChild(), sourceName, scope));"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1518,"rg, sourceName, scope, false);"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1490,"arg, sourceName, scope);"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1535,"reateFromTypeNodesInternal(current, sourceName, scope, false);"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1507,"createFromTypeNodesInternal(current, sourceName, scope);"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1589,"ieldTypeNode.getLastChild(), sourceName, scope, false);"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1561,"fieldTypeNode.getLastChild(), sourceName, scope);"
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,96," If true, don't warn about unresolveable type names."
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,98, NOTE(nicksantos): A lot of third-party code doesn't use our type syntax.
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,99, They have code like
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,100, {@code @return} the bus.
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,101," and they clearly don't mean that ""the"" is a type. In these cases, we're"
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,102," forgiving and try to guess whether or not ""the"" is a type when it's not"
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,103, clear.
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,105,rivate boolean forgiving = false;
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,126,Override
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,127,oid forgiveUnknownNames() {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,128,orgiving = true;
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,373,oolean beForgiving = forgiving || isForwardDeclared;
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,374,f (!beForgiving && registry.isLastGeneration()) {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,356,if (!isForwardDeclared && registry.isLastGeneration()) {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,378,f (isForwardDeclared) {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,379,etReferencedType(
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,380,egistry.getNativeObjectType(
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,381,STypeNative.NO_RESOLVED_TYPE));
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,382, else {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,383,etReferencedType(
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,384,egistry.getNativeObjectType(
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,385,STypeNative.CHECKED_UNKNOWN_TYPE));
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,360,setReferencedType(
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,361,registry.getNativeObjectType(
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,362,JSTypeNative.NO_RESOLVED_TYPE));
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,96,Override
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,97,oid forgiveUnknownNames() {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,98,or (JSType type : getAlternates()) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,99,ype.forgiveUnknownNames();
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,65," If true, don't warn about unresolveable type names."
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,67, NOTE(nicksantos): A lot of third-party code doesn't use our type syntax.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,68, They have code like
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,69, {@code @return} the bus.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,70," and they clearly don't mean that ""the"" is a type. In these cases, we're"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,71," forgiving and try to guess whether or not ""the"" is a type when it's not"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,72, clear.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,74,rivate boolean forgiving = false;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,80,"tring sourceName, boolean forgiving) {"
True,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,68,String sourceName) {
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,86,his.forgiving = forgiving;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,94,"eturn registry.createFromTypeNodes(typeExpr, sourceName, enclosing,"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,95,orgiving);
True,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,81,"return registry.createFromTypeNodes(typeExpr, sourceName, enclosing);"
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,449,// NOTE(nicksantos): This behavior seems very wrong to me.
False,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,451," ""/** @constructor \n @extends g.NotHere */ var Foo = function() {}\n"""
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,452,"+ ""/** @constructor \n @extends {?} */ """
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,453,"+ ""var Foo = function() {};\n"""
False,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,453," ""/** @constructor */ var Bar = function() {}\n"""
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,455,"+ ""/** @constructor */ var Bar = function() {};\n"""
False,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,462,"s, js, ""{}"", FunctionTypeBuilder.RESOLVED_TAG_EMPTY,"
False,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,463,"Could not resolve type in @extends tag of Foo"");"
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,464,"js, output, ""{a=[[Bar.prototype], [Foo.prototype]]}"");"
False,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,465,"s, output, ""{a=[[Bar.prototype], [Foo.prototype]]}"","
False,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,466,"unctionTypeBuilder.RESOLVED_TAG_EMPTY,"
False,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,467,"Could not resolve type in @extends tag of Foo"");"
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,466,"js, output, ""{a=[[Bar.prototype], [Foo.prototype]]}"");"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6396,"/ To better support third-party code, we do not warn when"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6397,/ there are no braces around an unknown type name.
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6398,"estTypes(""/** @return The result. */ function f() {}"");"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6396,"testTypes(""/** @return The result. */ function f() {}"","
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6397,"""Bad type annotation. Unknown type The"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5258,"function foo1(f) { "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5258,"""function foo1(f) {"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7417,"/ To better support third-party code, we do not warn when"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7418,/ there are no braces around an unknown type name.
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7419,"estTypes(""/** @return The result. */ function f() {}"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7417,"testTypes(""/** @return The result. */ function f() {}"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7418,"""Bad type annotation. Unknown type The"");"

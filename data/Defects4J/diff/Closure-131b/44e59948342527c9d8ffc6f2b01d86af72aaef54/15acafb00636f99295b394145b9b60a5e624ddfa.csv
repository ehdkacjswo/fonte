is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,467,rivate class GlobalFunction implements Symbol {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,467,class GlobalFunction implements Symbol {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,495,public Node getFunctionNode() {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,496,Node parent = nameNode.getParent();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,498,if (NodeUtil.isFunction(parent)) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,499,return parent;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,500,} else {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,501,"// we are the name of a var node, so the function is name's second child"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,502,return nameNode.getChildAtIndex(1);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,518,rivate static class AssignmentProperty implements Property {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,529,static class AssignmentProperty implements Property {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,563,rivate static class LiteralProperty implements Property {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,574,static class LiteralProperty implements Property {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,417,/** Specialize the initial module at the cost of later modules */
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,418,public boolean specializeInitialModule;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,446,if (options.specializeInitialModule) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,447,"// When specializing the initial module, we want our fixups to be"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,448,"// as lean as possible, so we run the entire optimization loop to a"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,449,"// fixed point before specializing, then specialize, and then run the"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,450,// main optimization loop again.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,452,passes.addAll(getMainOptimizationLoop());
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,454,if (options.crossModuleCodeMotion) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,455,passes.add(crossModuleCodeMotion);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,458,if (options.crossModuleMethodMotion) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,459,passes.add(crossModuleMethodMotion);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,462,passes.add(specializeInitialModule.makeOneTimePass());
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1516,* Specialize the initial module at the cost of later modules
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1518,private PassFactory specializeInitialModule =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1519,"new PassFactory(""specializeInitialModule"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1520,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1521,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1522,"return new SpecializeModule(compiler, devirtualizePrototypeMethods,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1523,"inlineFunctions, removeUnusedPrototypeProperties);"
False,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,67,lass DevirtualizePrototypeMethods implements CompilerPass {
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,67,class DevirtualizePrototypeMethods implements SpecializationAwareCompilerPass {
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,69,private SpecializeModule.SpecializationState specializationState;
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,75,public void enableSpecialization(SpecializeModule.SpecializationState state) {
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,76,this.specializationState = state;
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,244,// Don't rewrite methods called in functions that can't be specialized
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,245,// if we are specializing
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,246,if (specializationState != null &&
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,247,!specializationState.canFixupSpecializedFunctionContainingNode(
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,248,nameNode)) {
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,249,return false;
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,300,if (specializationState != null) {
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,301,specializationState.reportSpecializedFunctionContainingNode(parent);
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,325,if (specializationState != null) {
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,326,specializationState.reportRemovedFunction(functionNode);
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,57,lass InlineFunctions implements CompilerPass {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,57,class InlineFunctions implements SpecializationAwareCompilerPass {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,75,private SpecializeModule.SpecializationState specializationState;
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,102,public void enableSpecialization(SpecializeModule.SpecializationState
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,103,specializationState) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,104,this.specializationState = specializationState;
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,317,"* Returns the function the traversal is currently traversing, or null"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,318,* if in the global scope.
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,320,private Node getContainingFunction(NodeTraversal t) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,321,return (t.inGlobalScope()) ? null : t.getScopeRoot();
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,346,// Don't inline if we are specializing and the function can't be fixed up
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,347,if (specializationState != null &&
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,348,!specializationState.canFixupFunction(fn.getFunctionNode())) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,349,return false;
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,473,if (specializationState != null) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,474,"// If we're specializing, make sure we can fixup"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,475,// the containing function before inlining
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,476,Node containingFunction = getContainingFunction(t);
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,477,if (containingFunction != null && !specializationState.canFixupFunction(
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,478,containingFunction)) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,479,return false;
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,528,rivate static class Inline implements CallVisitorCallback {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,560,private class Inline implements CallVisitorCallback {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,577,if (specializationState != null) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,578,Node containingFunction = getContainingFunction(t);
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,580,if (containingFunction != null) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,581,// Report that the function was specialized so that
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,582,// {@link SpecializeModule} can fix it up.
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,583,specializationState.reportSpecializedFunction(containingFunction);
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,793,if (specializationState != null) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,794,specializationState.reportRemovedFunction(fn.getFunctionNode());
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,20,import com.google.javascript.jscomp.AnalyzePrototypeProperties.AssignmentProperty;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,21,import com.google.javascript.jscomp.AnalyzePrototypeProperties.GlobalFunction;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,22,import com.google.javascript.jscomp.AnalyzePrototypeProperties.LiteralProperty;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,32,lass RemoveUnusedPrototypeProperties implements CompilerPass {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,36,class RemoveUnusedPrototypeProperties implements
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,37,SpecializationAwareCompilerPass {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,45,private SpecializeModule.SpecializationState specializationState;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,52,"oolean canModifyExterns, boolean anchorUnusedVars) {"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,58,"boolean canModifyExterns,"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,59,boolean anchorUnusedVars) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,65,public void enableSpecialization(SpecializeModule.SpecializationState state) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,66,this.specializationState = state;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,69,@Override
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,75,eclaration.remove();
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,76,hanged = true;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,87,boolean canRemove = false;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,89,if (specializationState == null) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,90,canRemove = true;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,91,} else {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,92,Node specializableFunction =
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,93,getSpecializableFunctionFromSymbol(declaration);
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,95,if (specializableFunction != null) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,96,specializationState.reportRemovedFunction(specializableFunction);
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,97,canRemove = true;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,101,if (canRemove) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,102,declaration.remove();
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,103,changed = true;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,117,* Attempts to find a specializable function from the Symbol.
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,119,private Node getSpecializableFunctionFromSymbol(Symbol symbol) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,120,Preconditions.checkNotNull(specializationState);
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,122,Node specializableFunction = null;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,124,if (symbol instanceof GlobalFunction) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,125,specializableFunction = ((GlobalFunction) symbol).getFunctionNode();
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,126,} else if (symbol instanceof AssignmentProperty) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,127,Node propertyValue = ((AssignmentProperty) symbol).getValue();
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,128,if (NodeUtil.isFunction(propertyValue)) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,129,specializableFunction = propertyValue;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,131,} else if (symbol instanceof LiteralProperty) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,132,// Module specialization doesn't know how to handle these
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,133,"// because the ""name"" of the function isn't the name"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,134,// it needs to add an unspecialized version of.
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,136,return null;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,137,} else {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,138,"Preconditions.checkState(false, ""Should be unreachable."");"
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,141,if (specializableFunction != null &&
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,142,specializationState.canFixupFunction(specializableFunction)) {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,143,return specializableFunction;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,144,} else {
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,145,return null;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,2,* Copyright 2010 Google Inc.
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,16,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,18,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,19,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,20,import com.google.javascript.jscomp.DefinitionsRemover.Definition;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,21,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,22,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,24,import java.util.Set;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,27,* Uses {@link SimpleDefinitionFinder} to determine if a function has been
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,28,* aliased or exposed to .call() or .apply().
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,30,* @author dcc@google.com (Devin Coughlin)
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,32,class SimpleFunctionAliasAnalysis {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,33,private Set<Node> aliasedFunctions;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,35,private Set<Node> functionsExposedToCallOrApply;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,38,* Returns true if the function is aliased.
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,40,* Must only be called after {@link #analyze(SimpleDefinitionFinder)}
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,41,* has been called.
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,43,public boolean isAliased(Node functionNode) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,44,Preconditions.checkNotNull(aliasedFunctions);
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,45,Preconditions.checkArgument(NodeUtil.isFunction(functionNode));
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,47,return aliasedFunctions.contains(functionNode);
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,51,* Returns true if the function ever exposed to .call() or .apply().
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,53,* Must only be called after {@link #analyze(SimpleDefinitionFinder)}
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,54,* has been called.
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,56,public boolean isExposedToCallOrApply(Node functionNode) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,57,Preconditions.checkNotNull(functionsExposedToCallOrApply);
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,58,Preconditions.checkArgument(NodeUtil.isFunction(functionNode));
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,60,return functionsExposedToCallOrApply.contains(functionNode);
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,64,* Uses the provided {@link SimpleDefinitionFinder} to determine
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,65,* which functions are aliased or exposed to .call() or .apply().
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,67,public void analyze(SimpleDefinitionFinder finder) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,68,Preconditions.checkState(aliasedFunctions == null);
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,70,aliasedFunctions = Sets.newHashSet();
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,71,functionsExposedToCallOrApply = Sets.newHashSet();
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,73,for (DefinitionSite definitionSite : finder.getDefinitionSites()) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,74,Definition definition = definitionSite.definition;
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,76,if (!definition.isExtern()) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,77,Node rValue = definition.getRValue();
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,79,if (rValue != null && NodeUtil.isFunction(rValue)) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,80,// rValue is a Token.FUNCTION from a definition
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,82,for (UseSite useSite : finder.getUseSites(definition)) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,83,"updateFunctionForUse(rValue, useSite.node);"
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,91,* Updates alias and exposure information based a site where the function is
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,92,* used.
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,94,"* Note: this method may be called multiple times per Function, each time"
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,95,* with a different useNode.
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,97,"private void updateFunctionForUse(Node function, Node useNode) {"
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,98,Node useParent = useNode.getParent();
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,99,int parentType = useParent.getType();
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,101,if ((parentType == Token.CALL || parentType == Token.NEW)
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,102,&& useParent.getFirstChild() == useNode) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,103,// Regular call sites don't count as aliases
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,104,} else if (NodeUtil.isGet(useParent)) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,105,"// GET{PROP,ELEM} don't count as aliases"
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,106,// but we have to check for using them in .call and .apply.
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,108,if (NodeUtil.isGetProp(useParent)) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,109,Node gramps = useParent.getParent();
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,110,if (NodeUtil.isFunctionObjectApply(gramps) ||
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,111,NodeUtil.isFunctionObjectCall(gramps)) {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,112,functionsExposedToCallOrApply.add(function);
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,115,} else {
True,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,src/com/google/javascript/jscomp/SimpleFunctionAliasAnalysis.java,116,aliasedFunctions.add(function);
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,2,* Copyright 2010 Google Inc.
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,16,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,19,* Interface indicating a CompilerPass is specialization aware.
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,21,* See {@link SpecializeModule} for details of module specialization.
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,23,* @author dcc@google.com (Devin Coughlin)
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,26,interface SpecializationAwareCompilerPass extends CompilerPass {
True,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,src/com/google/javascript/jscomp/SpecializationAwareCompilerPass.java,27,public void enableSpecialization(SpecializeModule.SpecializationState state);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,2,* Copyright 2010 Google Inc.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,20,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,21,import com.google.common.collect.Maps;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,22,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,23,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,24,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,26,import java.util.Collection;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,27,import java.util.Collections;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,28,import java.util.List;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,29,import java.util.Map;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,30,import java.util.Set;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,33,* Beginnings of an optimization to specialize the initial module at the cost of
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,34,* increasing code in later modules. This is still very experimental.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,36,* High-level overview:
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,38,* This optimization replaces functions in the initial module with specialized
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,39,"* versions that are only safe in the initial module. The original, general,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,40,"* versions of the functions are ""fixed up"" in later modules. This optimization"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,41,* can shrink the initial module significantly but the fixup code in later
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,42,* modules increases overall code size.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,44,* Implementation approach:
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,46,* We take a ridiculously naive approach: remove the initial module
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,47,"* from the rest of the AST, optimize it with existing optimization passes"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,48,"* (recording which functions have been specialized), put it back in the AST,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,49,* and add fixups restoring the general versions of the functions in each module
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,50,* that depends on the initial module.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,52,"* Since it is only safe to specialize functions that can be fixed up, we"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,53,* don't allow specialization of local functions and functions that
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,54,* are aliased.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,56,"* We currently run three optimizations on the isolated AST: InlineFunctions,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,57,"* DevirtualizePrototypeMethods, and RemoveUnusedPrototypeProperties."
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,59,* These optimizations rely on a coarse-grained name-based analysis to
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,60,* maintain safety properties and thus are likely to see some benefit when
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,61,* applied in isolation.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,63,* InlineFunctions is truly specializing -- it replaces functions with
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,64,"* versions that have calls to other functions inlined into them, while"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,65,* RemoveUnusedPrototypeProperties is really just removing properties that
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,66,* aren't used in the initial module and adding copies further down in the
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,67,* module graph. It would probably be more elegant to give
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,68,* CrossModuleMethodMotion permission to make copies of methods instead.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,70,* There are additional passes that might benefit from being made
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,71,* specialization-aware:
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,73,* - OptimizeParameters
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,75,* - Any pass that is too slow to run over the entire AST but might
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,76,*      be acceptable on only the initial module:
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,77,*  - RemoveUnusedNames
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,79,"*  - Also, any pass that uses the results of PureFunctionIdentifier to"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,80,*  determine when it is safe to remove code might benefit (e.g. the peephole
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,81,"*  passes), since PureFunctionIdentifier relies on SimpleDefinitionFinder,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,82,*  which would be more precise when running on only the initial module.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,84,* @author dcc@google.com (Devin Coughlin)
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,86,public class SpecializeModule implements CompilerPass {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,87,private AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,89,"private Map<Node, Node> specializedInputRootsByOriginal;"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,91,"private Map<Node, OriginalFunctionInformation>"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,92,functionInfoBySpecializedFunctionNode;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,94,private SpecializationState specializationState;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,96,private final PassFactory[] specializationPassFactories;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,98,"public SpecializeModule(AbstractCompiler compiler,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,99,PassFactory ...specializationPassFactories) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,100,this.compiler = compiler;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,101,this.specializationPassFactories = specializationPassFactories;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,105,* Performs initial module specialization.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,107,* The process is as follows:
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,109,* 1) Make a copy of each of the inputs in the initial root and put them
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,110,* in a fake AST that looks like it is the whole program.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,112,* 2) Run the specializing compiler passes over the fake initial module AST
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,113,"* until it reaches a fixed point, recording which functions are specialized"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,114,* or removed.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,116,* 3) Replace the original input roots with the specialized input roots
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,118,"* 4) For each module that directly depends on the initial module, add"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,119,* fixups for the specialized and removed functions. Right now we add
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,120,* fixups for for every function that was specialzed or removed -- we could
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,121,* be smarter about this and for each dependent module only add the functions
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,122,* that it needs.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,124,* 5) Add dummy variables declaring the removed function to the end of
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,125,* the now-specialized initial module. This is needed to keep
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,126,* {@link VarCheck} from complaining.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,128,@Override
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,129,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,130,JSModuleGraph moduleGraph = compiler.getModuleGraph();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,132,// Can't perform optimization without a module graph!
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,133,if (moduleGraph == null) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,134,return;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,137,JSModule module = moduleGraph.getRootModule();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,139,Node fakeModuleRoot = copyModuleInputs(module);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,141,SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,143,"defFinder.process(externs, fakeModuleRoot);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,145,SimpleFunctionAliasAnalysis initialModuleFunctionAliasAnalysis =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,146,new SimpleFunctionAliasAnalysis();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,148,initialModuleFunctionAliasAnalysis.analyze(defFinder);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,150,specializationState =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,151,new SpecializationState(initialModuleFunctionAliasAnalysis);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,153,do {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,154,specializationState.resetHasChanged();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,156,for (SpecializationAwareCompilerPass pass : createSpecializingPasses()) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,157,pass.enableSpecialization(specializationState);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,158,"pass.process(externs, fakeModuleRoot);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,160,} while(specializationState.hasChanged());
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,162,replaceOriginalModuleInputsWithSpecialized();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,163,addDummyVarDeclarationsToInitialModule(module);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,164,addOriginalFunctionVersionsToDependentModules(module);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,168,* Returns a collection of new instances of specializing passes.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,170,private Collection<SpecializationAwareCompilerPass>
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,171,createSpecializingPasses() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,173,Collection<SpecializationAwareCompilerPass> passes = Lists.newLinkedList();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,175,for (PassFactory passFactory : specializationPassFactories) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,176,CompilerPass pass = passFactory.createInternal(compiler);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,178,Preconditions.checkState(pass instanceof
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,179,SpecializationAwareCompilerPass);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,181,passes.add((SpecializationAwareCompilerPass) pass);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,184,return passes;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,188,* Creates an AST that consists solely of copies of the input roots for the
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,189,* passed in module.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,191,* Also records a map in {@link #functionInfoBySpecializedFunctionNode}
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,192,* of information about the original function keyed on the copies of the
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,193,* functions to specialized.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,195,private Node copyModuleInputs(JSModule module) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,197,specializedInputRootsByOriginal = Maps.newLinkedHashMap();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,199,functionInfoBySpecializedFunctionNode = Maps.newLinkedHashMap();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,201,Node syntheticModuleJsRoot = new Node(Token.BLOCK);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,202,syntheticModuleJsRoot.setIsSyntheticBlock(true);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,204,for (CompilerInput input : module.getInputs()) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,205,Node originalInputRoot = input.getAstRoot(compiler);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,207,Node copiedInputRoot = originalInputRoot.cloneTree();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,208,copiedInputRoot.copyInformationFromForTree(originalInputRoot);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,210,"specializedInputRootsByOriginal.put(originalInputRoot,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,211,copiedInputRoot);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,213,"matchTopLevelFunctions(originalInputRoot, copiedInputRoot);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,215,syntheticModuleJsRoot.addChildToBack(copiedInputRoot);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,218,// The jsRoot needs a parent (in a normal compilation this would be the
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,219,// node that contains jsRoot and the externs).
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,220,Node syntheticExternsAndJsRoot = new Node(Token.BLOCK);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,221,syntheticExternsAndJsRoot.addChildToBack(syntheticModuleJsRoot);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,223,return syntheticModuleJsRoot;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,227,* Records information about original functions and creates a map from
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,228,* the specialized functions to this information.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,230,* This information is only recorded for global functions since non-global
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,231,* functions cannot be inlined.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,233,* @param original An original input root.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,234,* @param toBeSpecialized A copy of the input root (the copy to be
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,235,* specialized)
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,237,"private void matchTopLevelFunctions(Node original, Node toBeSpecialized) {"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,238,new NodeMatcher() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,239,@Override
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,240,"public void reportMatch(Node original, Node specialized) {"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,241,if (NodeUtil.isFunction(original)) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,242,OriginalFunctionInformation functionInfo =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,243,new OriginalFunctionInformation(original);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,245,"functionInfoBySpecializedFunctionNode.put(specialized,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,246,functionInfo);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,250,@Override
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,251,"public boolean shouldTraverse(Node n1, Node n2) {"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,252,return !NodeUtil.isFunction(n1);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,254,"}.match(original, toBeSpecialized);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,258,* Replaces the original input roots of the initial module with
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,259,* their specialized versions.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,261,"* (Since {@link JsAst} holds a pointer to original inputs roots, we actually"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,262,* replace the all the children of the root rather than swapping the
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,263,* root pointers).
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,265,private void replaceOriginalModuleInputsWithSpecialized() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,266,for (Node original : specializedInputRootsByOriginal.keySet()) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,267,Node specialized = specializedInputRootsByOriginal.get(original);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,269,original.removeChildren();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,271,List<Node> specializedChildren = Lists.newLinkedList();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,273,while (specialized.getFirstChild() != null) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,274,original.addChildToBack(specialized.removeFirstChild());
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,280,* Adds dummy variable declarations for all the function declarations we've
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,281,* removed to the end of the initial module.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,283,"* We do this to make {@link VarCheck} happy, since it requires variables to"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,284,* be declared before they are used in the whole program AST and doesn't
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,285,* like it when they are declared multiple times.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,287,* TODO(dcc): Be smarter about whether we need a VAR here or not.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,289,private void addDummyVarDeclarationsToInitialModule(JSModule module) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,290,CompilerInput lastInputInFirstModule =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,291,module.getInputs().get(module.getInputs().size() - 1);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,293,Node dummyVarParent = lastInputInFirstModule.getAstRoot(compiler);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,295,for (Node modifiedFunction : functionInfoBySpecializedFunctionNode.keySet())
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,297,if (specializationState.getRemovedFunctions().contains(modifiedFunction)) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,298,OriginalFunctionInformation originalInfo =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,299,functionInfoBySpecializedFunctionNode.get(modifiedFunction);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,301,if (originalInfo.name != null && originalInfo.originalWasDeclaration()) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,302,dummyVarParent.addChildToBack(originalInfo.generateDummyDeclaration());
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,309,* Adds a copy of the original versions of specialized/removed functions
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,310,* to each of the dependents of module.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,312,* Currently we add all of these functions to all dependents; it
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,313,* would be more efficient to only add the functions that could be used.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,315,* TODO(dcc): Only add fixup functions where needed.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,317,private void addOriginalFunctionVersionsToDependentModules(JSModule module) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,318,for (JSModule directDependent : getDirectDependents(module)) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,319,CompilerInput firstInput = directDependent.getInputs().get(0);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,320,Node firstInputRootNode = firstInput.getAstRoot(compiler);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,322,// We don't iterate specializedFunctions directly because want to maintain
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,323,"// and specializedFunctions in source order, rather than"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,324,// in the order that some optimization specialized the function.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,326,"// So since we're adding to the front of the module each time, we"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,327,// have to iterate in reverse source order.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,329,List<Node> possiblyModifiedFunctions =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,330,Lists.newArrayList(functionInfoBySpecializedFunctionNode.keySet());
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,332,Collections.reverse(possiblyModifiedFunctions);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,334,for (Node modifiedFunction : possiblyModifiedFunctions) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,335,boolean declarationWasSpecialized =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,336,specializationState.getSpecializedFunctions()
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,337,.contains(modifiedFunction);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,339,boolean declarationWasRemoved =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,340,specializationState.getRemovedFunctions()
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,341,.contains(modifiedFunction);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,343,if (declarationWasSpecialized || declarationWasRemoved) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,344,OriginalFunctionInformation originalInfo =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,345,functionInfoBySpecializedFunctionNode.get(modifiedFunction);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,347,// Don't add unspecialized versions of anonymous functions
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,348,if (originalInfo.name != null) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,349,Node newDefinition =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,350,originalInfo.generateFixupDefinition();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,352,firstInputRootNode.addChildrenToFront(newDefinition);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,360,* Returns a list of modules that directly depend on the given module.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,362,* This probably deserves to be in JSModuleGraph.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,364,public Collection<JSModule> getDirectDependents(JSModule module) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,365,Set<JSModule> directDependents = Sets.newHashSet();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,367,for (JSModule possibleDependent :
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,368,compiler.getModuleGraph().getAllModules()) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,369,if (possibleDependent.getDependencies().contains(module)) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,370,directDependents.add(possibleDependent);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,374,return directDependents;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,378,* A simple abstract classes that takes two isomorphic ASTs and walks
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,379,"* each of them together, reporting matches to subclasses."
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,381,* This could probably be hardened and moved to NodeUtil
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,383,private abstract static class NodeMatcher {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,386,"* Calls {@link #reportMatch(Node, Node)} for each pair of matching nodes"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,387,* from the two ASTs.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,389,* The two ASTs must be isomorphic. Currently no error checking is
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,390,* performed to ensure that this is the case.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,392,"public void match(Node ast1, Node ast2) {"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,393,// Just blunder ahead and assume that the two nodes actually match
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,395,"reportMatch(ast1, ast2);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,397,"if (shouldTraverse(ast1, ast2)) {"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,398,Node childOf1 = ast1.getFirstChild();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,399,Node childOf2 = ast2.getFirstChild();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,401,while (childOf1 != null) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,402,"match(childOf1, childOf2);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,403,childOf1 = childOf1.getNext();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,404,childOf2 = childOf2.getNext();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,411,* Subclasses should override to add their own behavior when two nodes
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,412,* are matched.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,413,* @param n1 A node from the AST passed as ast1 in
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,414,"* {@link #match(Node, Node)}."
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,415,* @param n2 A node from the AST passed as ast1 in
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,416,"* {@link #match(Node, Node)}."
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,418,"public abstract void reportMatch(Node n1, Node n2);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,421,* Subclasses should override to determine whether matching should proceed
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,422,* under a subtree.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,424,"public boolean shouldTraverse(Node node1, Node n2) {"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,425,return true;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,430,* A class that stores information about the original version of a
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,431,* function that will be/was specialized or removed.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,433,* This class stores:
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,434,* - how the function was defined
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,435,* - a copy of the original function
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,437,private static class OriginalFunctionInformation {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,438,private String name;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,441,*  a = function() {} if true;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,442,*  function a() {} otherwise
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,444,private boolean isAssignFunction;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,446,private boolean assignHasVar;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,448,private Node originalFunctionCopy;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,450,public OriginalFunctionInformation(Node originalFunction) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,451,name = NodeUtil.getFunctionName(originalFunction);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,453,originalFunctionCopy = originalFunction.cloneTree();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,454,originalFunctionCopy.copyInformationFromForTree(originalFunction);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,456,Node originalParent = originalFunction.getParent();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,458,isAssignFunction = NodeUtil.isAssign(originalParent) ||
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,459,NodeUtil.isName(originalParent);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,461,assignHasVar =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,462,isAssignFunction && NodeUtil.isVar(originalParent.getParent());
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,465,private Node copiedOriginalFunction() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,466,// Copy of a copy
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,467,Node copy = originalFunctionCopy.cloneTree();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,468,copy.copyInformationFromForTree(originalFunctionCopy);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,470,return copy;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,474,* Did the original function add its name to scope?
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,475,"* (If so, and specialization removes it, then we'll have to"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,476,* add a VAR for it so VarCheck doesn't complain).
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,478,private boolean originalWasDeclaration() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,479,return (!isAssignFunction) || (assignHasVar);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,483,* Generates a definition of the original function that can be added as
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,484,* a fixup in the modules that directly depend on the specialized module.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,486,* <PRE>
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,487,* The trick here is that even if the original function is declared as:
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,489,* function foo() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,490,*   // stuff
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,493,* the fixup will have to be of the form
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,495,* foo = function() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,496,*   // stuff
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,498,* </PRE>
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,501,private Node generateFixupDefinition() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,502,Node functionCopy = copiedOriginalFunction();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,504,Node nameNode;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,506,if (isAssignFunction) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,507,nameNode =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,508,"NodeUtil.newQualifiedNameNode(name, functionCopy, name);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,509,} else {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,510,// Grab the name node from the original function and make that
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,511,// function anonymous.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,512,nameNode = functionCopy.getFirstChild();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,513,"functionCopy.replaceChild(nameNode,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,514,"NodeUtil.newName("""", nameNode));"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,517,"Node assignment = new Node(Token.ASSIGN, nameNode, functionCopy);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,518,assignment.copyInformationFrom(functionCopy);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,520,return NodeUtil.newExpr(assignment);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,524,* Returns a new dummy var declaration for the function with no initial
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,525,* value:
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,527,* var name;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,529,private Node generateDummyDeclaration() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,530,"Node declaration = NodeUtil.newVarNode(name, null);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,531,declaration.copyInformationFromForTree(originalFunctionCopy);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,533,return declaration;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,538,* A class to hold state during SpecializeModule. An instance of this class
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,539,* is passed to specialization-aware compiler passes -- they use it to
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,540,* communicate with SpecializeModule.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,542,* SpecializationAware optimizations are required to keep track of the
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,543,* functions they remove and the functions that they modify so that the fixups
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,544,"* can be added. However, not all functions can be fixed up."
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,546,* Specialization-aware classes *must* call
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,547,* {@link #reportSpecializedFunction} when a function is modified during
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,548,* specialization and {@link #reportRemovedFunction} when one is removed.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,550,"* Also, when specializing, they must query {@link #canFixupFunction}"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,551,* before modifying a function.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,553,"* This two-way communication, is the reason we don't use"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,554,* {@link AstChangeProxy} to report code changes.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,556,public static class SpecializationState {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,559,* The functions that the pass has specialized. These functions will
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,560,* be fixed up in non-specialized modules to their more general versions.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,562,* This field is also used to determine whether specialization is enabled.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,563,"* If not null, specialization is enabled, otherwise it is disabled."
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,565,private Set<Node> specializedFunctions;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,568,* The functions that the pass has removed. These functions will be
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,569,* redefined in non-specialized modules.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,571,private Set<Node> removedFunctions;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,573,private SimpleFunctionAliasAnalysis initialModuleAliasAnalysis;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,575,/** Will be true if any new functions have been removed or specialized since
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,576,* {@link #resetHasChanged}.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,578,private boolean hasChanged = false;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,580,public SpecializationState(SimpleFunctionAliasAnalysis
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,581,initialModuleAliasAnalysis) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,583,this.initialModuleAliasAnalysis = initialModuleAliasAnalysis;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,585,specializedFunctions = Sets.newLinkedHashSet();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,586,removedFunctions = Sets.newLinkedHashSet();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,590,* Returns true if any new functions have been reported as removed or
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,591,* specialized since {@link #resetHasChanged()} was last called.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,593,private boolean hasChanged() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,594,return hasChanged;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,597,private void resetHasChanged() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,598,hasChanged = false;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,602,* Returns the functions specialized by this compiler pass.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,604,public Set<Node> getSpecializedFunctions() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,605,return specializedFunctions;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,609,* Reports that a function has been specialized.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,611,* @param functionNode A specialized AST node with type Token.FUNCTION
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,613,public void reportSpecializedFunction(Node functionNode) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,614,hasChanged = specializedFunctions.add(functionNode);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,618,* Reports that the function containing the node has been specialized.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,620,public void reportSpecializedFunctionContainingNode(Node node) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,621,Node containingFunction = containingFunction(node);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,623,if (containingFunction != null) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,624,reportSpecializedFunction(containingFunction);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,629,* The functions removed by this compiler pass.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,631,public Set<Node> getRemovedFunctions() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,632,return removedFunctions;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,636,* Reports that a function has been removed.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,638,* @param functionNode A removed AST node with type Token.FUNCTION
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,640,public void reportRemovedFunction(Node functionNode) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,641,hasChanged = removedFunctions.add(functionNode);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,645,"* Returns true if the function can be fixed up (that is, if it can be"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,646,* safely removed or specialized).
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,648,"* <p>In order to be safely fixed up, a function must be:"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,649,* <PRE>
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,650,* - in the global scope
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,651,* - not aliased in the initial module
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,652,* - of one of the following forms:
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,653,*    function f() {}
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,654,*    var f = function() {}
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,655,*    f = function(){}
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,656,*    var ns = {}; ns.f = function() {}
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,657,*    SomeClass.prototype.foo = function() {};
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,658,* </PRE>
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,660,"* <p>Anonymous functions cannot be safely fixed up, nor can functions"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,661,* that have been aliased.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,663,"* <p>Some functions declared as object literals could be safely fixed up,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,664,* however we do not currently support this.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,666,public boolean canFixupFunction(Node functionNode) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,667,Preconditions.checkArgument(NodeUtil.isFunction(functionNode));
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,669,if (!nodeIsInGlobalScope(functionNode) ||
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,670,initialModuleAliasAnalysis.isAliased(functionNode)) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,671,return false;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,674,if (NodeUtil.isStatement(functionNode)) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,675,// function F() {}
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,676,return true;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,679,Node parent = functionNode.getParent();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,680,Node gramps = parent.getParent();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,682,if (NodeUtil.isName(parent) && NodeUtil.isVar(gramps)) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,683,// var f = function() {}
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,684,return true;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,687,if (NodeUtil.isExprAssign(gramps)
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,688,&& parent.getChildAtIndex(1) == functionNode) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,689,// f = function() {}
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,690,// ns.f = function() {}
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,691,return true;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,694,return false;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,698,* Returns true if the function containing n can be fixed up.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,699,* Also returns true if n is in the global scope -- since it is always safe
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,700,* to specialize the global scope.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,702,public boolean canFixupSpecializedFunctionContainingNode(Node n) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,703,Node containingFunction = containingFunction(n);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,704,if (containingFunction != null) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,705,return canFixupFunction(containingFunction);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,706,} else {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,707,// Always safe to specialize the global scope
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,708,return true;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,713,* Returns true if a node is in the global scope; false otherwise.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,715,private boolean nodeIsInGlobalScope(Node node) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,716,return containingFunction(node) == null;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,720,"* Returns the function containing the node, or null if none exists."
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,722,private Node containingFunction(Node node) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,723,for (Node ancestor : node.getAncestors()) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,724,if (NodeUtil.isFunction(ancestor)) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,725,return ancestor;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,729,return null;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,2,* Copyright 2010 Google Inc.
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,16,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,18,import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,19,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,22,* Tests for {@link SimpleFunctionAliasAnalysis}.
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,24,* @author dcc@google.com (Devin Coughlin)
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,26,public class SimpleFunctionAliasAnalysisTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,28,private SimpleFunctionAliasAnalysis analysis;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,30,private Compiler lastCompiler;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,32,@Override
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,33,protected CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,34,return new CompilerPass() {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,36,@Override
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,37,"public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,38,SimpleDefinitionFinder finder = new SimpleDefinitionFinder(compiler);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,39,"finder.process(externs, root);"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,41,analysis = new SimpleFunctionAliasAnalysis();
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,43,analysis.analyze(finder);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,45,lastCompiler = compiler;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,50,public void testFunctionGetIsAliased() {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,51,// Aliased by VAR assignment
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,52,String source =
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,53,"""function A(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,54,"""var ns = {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,55,"""ns.B = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,56,"""var C = function() {}\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,57,"""var D = function() {}\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,58,"""var aliasA = A;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,59,"""var aliasB = ns.B;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,60,"""var aliasC = C;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,61,"""D();"";"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,63,compileAndRun(source);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,65,"assertFunctionAliased(true, ""A"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,66,"assertFunctionAliased(true, ""ns.B"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,67,"assertFunctionAliased(true, ""C"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,68,"assertFunctionAliased(false, ""D"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,70,// Aliased by normal assignment
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,71,source =
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,72,"""function A(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,73,"""var ns = {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,74,"""ns.B = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,75,"""var C = function() {}\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,76,"""ns.D = function() {}\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,77,"""var aliasA;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,78,"""aliasA = A;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,79,"""var aliasB = {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,80,"""aliasB.foo = ns.B;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,81,"""var aliasC;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,82,"""aliasC = C;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,83,"""ns.D();"";"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,85,compileAndRun(source);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,87,"assertFunctionAliased(true, ""A"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,88,"assertFunctionAliased(true, ""ns.B"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,89,"assertFunctionAliased(true, ""C"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,90,"assertFunctionAliased(false, ""ns.D"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,92,// Aliased by passing as parameter
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,93,source =
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,94,"""function A(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,95,"""var ns = {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,96,"""ns.B = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,97,"""var C = function() {}\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,98,"""function D() {}\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,99,"""var foo = function(a) {}\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,100,"""foo(A);\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,101,"""foo(ns.B)\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,102,"""foo(C);\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,103,"""D();"";"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,105,compileAndRun(source);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,107,"assertFunctionAliased(true, ""A"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,108,"assertFunctionAliased(true, ""ns.B"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,109,"assertFunctionAliased(true, ""C"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,110,"assertFunctionAliased(false, ""D"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,112,// Not aliased by being target of call
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,113,source =
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,114,"""function A(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,115,"""var ns = {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,116,"""ns.B = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,117,"""var C = function() {}\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,118,"""A();\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,119,"""ns.B();\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,120,"""C();\n"";"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,122,compileAndRun(source);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,124,"assertFunctionAliased(false, ""A"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,125,"assertFunctionAliased(false, ""ns.B"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,126,"assertFunctionAliased(false, ""C"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,128,"// Not aliased by GET{PROP,ELEM}"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,129,source =
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,130,"""function A(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,131,"""var ns = {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,132,"""ns.B = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,133,"""var C = function() {}\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,134,"""A.foo;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,135,"""ns.B.prototype;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,136,"""C[0];\n"";"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,138,compileAndRun(source);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,140,"assertFunctionAliased(false, ""A"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,141,"assertFunctionAliased(false, ""ns.B"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,142,"assertFunctionAliased(false, ""C"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,145,public void testFunctionGetIsExposedToCallOrApply() {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,146,// Exposed to call
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,147,String source =
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,148,"""function A(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,149,"""function B(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,150,"""function C(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,151,"""var x;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,152,"""A.call(x);\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,153,"""B.apply(x);\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,154,"""C();\n"";"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,156,compileAndRun(source);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,158,"assertFunctionExposedToCallOrApply(true, ""A"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,159,"assertFunctionExposedToCallOrApply(true, ""B"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,160,"assertFunctionExposedToCallOrApply(false, ""C"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,162,source =
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,163,"""var ns = {};"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,164,"""ns.A = function(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,165,"""ns.B = function(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,166,"""ns.C = function(){};\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,167,"""var x;\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,168,"""ns.A.call(x);\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,169,"""ns.B.apply(x);\n"" +"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,170,"""ns.C();\n"";"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,172,compileAndRun(source);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,174,"assertFunctionExposedToCallOrApply(true, ""ns.A"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,175,"assertFunctionExposedToCallOrApply(true, ""ns.B"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,176,"assertFunctionExposedToCallOrApply(false, ""ns.C"");"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,179,"private void assertFunctionAliased(boolean aliasStatus,"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,180,String functionName) {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,181,Node function = findFunction(functionName);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,183,"assertEquals(aliasStatus, analysis.isAliased(function));"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,186,"private void assertFunctionExposedToCallOrApply(boolean exposure,"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,187,String functionName) {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,188,Node function = findFunction(functionName);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,190,"assertEquals(exposure, analysis.isExposedToCallOrApply(function));"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,193,private void compileAndRun(String source) {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,194,"testSame(source, source, null);"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,197,private Node findFunction(String name) {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,198,FunctionFinder f = new FunctionFinder(name);
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,199,"new NodeTraversal(lastCompiler, f).traverse(lastCompiler.jsRoot);"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,200,"assertNotNull(""Couldn't find "" + name, f.found);"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,201,return f.found;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,205,* Quick Traversal to find a given function in the AST.
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,207,private class FunctionFinder extends AbstractPostOrderCallback {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,208,Node found = null;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,209,final String target;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,211,FunctionFinder(String target) {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,212,this.target = target;
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,215,@Override
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,216,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,217,if (NodeUtil.isFunction(n)
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,218,&& target.equals(NodeUtil.getFunctionName(n))) {
True,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,test/com/google/javascript/jscomp/SimpleFunctionAliasAnalysisTest.java,219,found = n;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,2,* Copyright 2010 Google Inc.
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,19,import com.google.common.collect.ImmutableSet;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,20,import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,21,import com.google.javascript.jscomp.SpecializeModule.SpecializationState;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,22,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,25,* Tests for {@link SpecializeModule}.
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,27,* @author dcc@google.com (Devin Coughlin)
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,29,public class SpecializeModuleTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,31,"private static final String SHARED_EXTERNS = ""var alert = function() {}"";"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,33,public SpecializeModuleTest() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,34,super(SHARED_EXTERNS);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,37,private PassFactory inlineFunctions =
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,38,"new PassFactory(""inlineFunctions"", true) {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,39,@Override
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,40,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,41,"return new InlineFunctions(compiler,"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,42,"compiler.getUniqueNameIdSupplier(), true, false, true);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,46,private PassFactory removeUnusedPrototypeProperties =
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,47,"new PassFactory(""removeUnusedPrototypeProperties"", true) {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,48,@Override
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,49,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,50,"return new RemoveUnusedPrototypeProperties(compiler, false, false);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,54,private PassFactory devirtualizePrototypeMethods =
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,55,"new PassFactory(""devirtualizePrototypeMethods"", true) {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,56,@Override
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,57,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,58,return new DevirtualizePrototypeMethods(compiler);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,62,@Override
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,63,protected CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,64,"final SpecializeModule specializeModule = new SpecializeModule(compiler,"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,65,"devirtualizePrototypeMethods, inlineFunctions,"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,66,removeUnusedPrototypeProperties);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,68,return new CompilerPass() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,69,@Override
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,70,"public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,71,"specializeModule.process(externs, root);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,73,/* Make sure variables are declared before used */
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,74,"new VarCheck(compiler).process(externs, root);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,79,@Override
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,80,public void setUp() throws Exception {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,81,super.setUp();
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,83,enableNormalize();
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,86,public void testSpecializeInline() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,87,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,88,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,89,/* Recursion in A() prevents inline of A*/
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,90,"""var A = function() {alert(B());A()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,91,"""var B = function() {return 6};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,92,"""A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,93,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,94,"""A();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,95,"""B();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,96,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,97,"""A();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,98,"""B();"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,101,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,102,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,103,"""var A = function() {alert(6);A()};"" + /* Specialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,104,"""A();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,105,"""var B;"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,106,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,107,"""A = function() {alert(B());A()};"" + /* Unspecialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,108,"""B = function() {return 6};"" + /* Removed from m1, so add to m2 */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,109,"""A();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,110,"""B();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,111,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,112,"""A();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,113,"""B();"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,117,public void testSpecializeCascadedInline() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,118,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,119,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,120,/* Recursion in A() prevents inline of A*/
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,121,"""var A = function() {alert(B());A()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,122,"""var B = function() {return C()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,123,"""var C = function() {return 6};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,124,"""A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,125,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,126,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,127,"""A();"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,129,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,130,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,131,"""var A = function() {alert(6);A()};"" + /* Specialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,132,"""A();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,133,"""var B, C;"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,134,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,135,"""A = function() {alert(B());A()};"" + /* Unspecialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,136,"""B = function() {return C()};"" + /* Removed from m1, so add to m2 */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,137,"""C = function() {return 6};"" + /* Removed from m1, so add to m2 */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,138,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,139,"""A();"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,143,public void testSpecializeInlineWithMultipleDependents() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,144,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,145,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,146,/* Recursion in A() prevents inline of A*/
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,147,"""var A = function() {alert(B());A()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,148,"""var B = function() {return 6};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,149,"""A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,150,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,151,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,152,"""A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,153,// m3
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,154,"""A();"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,157,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,158,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,159,"""var A = function() {alert(6);A()};"" + /* Specialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,160,"""A();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,161,"""var B;"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,162,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,163,"""A = function() {alert(B());A()};"" + /* Unspecialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,164,"""B = function() {return 6};"" + /* Removed from m1, so add to m2 */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,165,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,166,"""A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,167,"""A = function() {alert(B());A()};"" + /* Unspecialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,168,"""B = function() {return 6};"" + /* Removed from m1, so add to m2 */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,169,"""A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,174,public void testSpecializeInlineWithNamespaces() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,175,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,176,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,177,"""var ns = {};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,178,/* Recursion in A() prevents inline of A*/
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,179,"""ns.A = function() {alert(B());ns.A()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,180,"""var B = function() {return 6};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,181,"""ns.A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,182,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,183,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,184,"""ns.A();"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,186,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,187,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,188,"""var ns = {};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,189,"""ns.A = function() {alert(6);ns.A()};"" + /* Specialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,190,"""ns.A();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,191,"""var B;"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,192,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,193,"""ns.A = function() {alert(B());ns.A()};"" + /* Unspecialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,194,"""B = function() {return 6};"" + /* Removed from m1, so add to m2 */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,195,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,196,"""ns.A();"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,200,public void testSpecializeInlineWithRegularFunctions() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,201,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,202,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,203,/* Recursion in A() prevents inline of A*/
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,204,"""function A() {alert(B());A()}"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,205,"""function B() {return 6}"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,206,"""A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,207,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,208,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,209,"""A();"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,211,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,212,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,213,"""function A() {alert(6);A()}"" + /* Specialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,214,"""A();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,215,"""var B;"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,216,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,217,"""A = function() {alert(B());A()};"" + /* Unspecialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,218,"""B = function() {return 6};"" + /* Removed from m1, so add to m2 */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,219,/* Start of original m2 */
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,220,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,221,"""A();"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,225,public void testDontSpecializeLocalNonAnonymousFunctions() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,226,"/* normalize result, but not expected */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,227,enableNormalize(false);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,229,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,230,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,231,"""(function(){var noSpecialize = "" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,232,"""function() {alert(6)};noSpecialize()})()"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,233,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,236,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,237,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,238,"""(function(){var noSpecialize = "" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,239,"""function() {alert(6)};noSpecialize()})()"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,240,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,245,public void testAddDummyVarsForRemovedFunctions() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,246,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,247,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,248,/* Recursion in A() prevents inline of A*/
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,249,"""var A = function() {alert(B() + C());A()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,250,"""var B = function() {return 6};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,251,"""var C = function() {return 8};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,252,"""A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,253,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,255,"""A();"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,257,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,258,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,259,"""var A = function() {alert(6 + 8);A()};"" + /* Specialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,260,"""A();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,261,"""var B, C;"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,262,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,263,"""A = function() {alert(B() + C());A()};"" + /* Unspecialized A */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,264,"""B = function() {return 6};"" + /* Removed from m1, so add to m2 */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,265,"""C = function() {return 8};"" + /* Removed from m1, so add to m2 */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,266,"""A();"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,270,public void testSpecializeRemoveUnusedProperties() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,271,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,272,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,273,/* Recursion in A() prevents inline of A*/
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,274,"""var Foo = function(){};"" + /* constructor */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,275,"""Foo.prototype.a = function() {this.a()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,276,"""Foo.prototype.b = function() {return 6};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,277,"""Foo.prototype.c = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,278,"""var aliasA = Foo.prototype.a;"" + // Prevents devirtualization of a"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,279,"""var x = new Foo();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,280,"""x.a();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,281,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,284,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,285,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,286,"""var Foo = function(){};"" + /* constructor */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,287,"""Foo.prototype.a = function() {this.a()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,288,"""var aliasA = Foo.prototype.a;"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,289,"""var x = new Foo();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,290,"""x.a();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,291,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,292,"""Foo.prototype.b = function() {return 6};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,293,"""Foo.prototype.c = function() {return 7};"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,297,public void testDontSpecializeAliasedFunctions_inline() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,298,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,299,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,300,/* Recursion in A() prevents inline of A*/
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,301,"""function A() {alert(B());A()}"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,302,"""function B() {return 6}"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,303,"""var aliasA = A;"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,304,"""A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,305,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,306,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,307,"""B();"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,309,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,310,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,311,/* Recursion in A() prevents inline of A*/
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,312,"""function A() {alert(B());A()}"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,313,"""function B() {return 6}"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,314,"""var aliasA = A;"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,315,"""A();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,316,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,317,"""B = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,318,"""B();"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,322,public void testDontSpecializeAliasedFunctions_remove_unused_properties() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,323,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,324,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,325,"""var Foo = function(){};"" + /* constructor */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,326,"""Foo.prototype.a = function() {this.a()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,327,"""Foo.prototype.b = function() {return 6};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,328,"""var aliasB = Foo.prototype.b;"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,329,"""Foo.prototype.c = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,330,"""Foo.prototype.d = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,331,"""var aliasA = Foo.prototype.a;"" + // Prevents devirtualization of a"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,332,"""var x = new Foo();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,333,"""x.a();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,334,"""var aliasC = (new Foo).c"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,335,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,338,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,339,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,340,"""var Foo = function(){};"" + /* constructor */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,341,"""Foo.prototype.a = function() {this.a()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,342,"""Foo.prototype.b = function() {return 6};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,343,"""var aliasB = Foo.prototype.b;"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,344,"""Foo.prototype.c = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,345,"""var aliasA = Foo.prototype.a;"" + // Prevents devirtualization of a"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,346,"""var x = new Foo();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,347,"""x.a();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,348,"""var aliasC = (new Foo).c"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,349,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,350,"""Foo.prototype.d = function() {return 7};"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,354,public void testSpecializeDevirtualizePrototypeMethods() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,355,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,356,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,357,"""/** @constructor */"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,358,"""var Foo = function(){};"" + /* constructor */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,359,"""Foo.prototype.a = function() {this.a();return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,360,"""Foo.prototype.b = function() {this.a()};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,361,"""var x = new Foo();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,362,"""x.a();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,363,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,366,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,367,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,368,"""var Foo = function(){};"" + /* constructor */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,369,"""var JSCompiler_StaticMethods_a ="" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,370,"""function(JSCompiler_StaticMethods_a$self) {"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,371,"""JSCompiler_StaticMethods_a(JSCompiler_StaticMethods_a$self);"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,372,"""return 7"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,374,"""var x = new Foo();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,375,"""JSCompiler_StaticMethods_a(x);"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,376,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,377,"""Foo.prototype.a = function() {this.a();return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,378,"""Foo.prototype.b = function() {this.a()};"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,382,public void testSpecializeDevirtualizePrototypeMethodsWithInline() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,383,JSModule[] modules = createModuleStar(
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,384,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,385,"""/** @constructor */"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,386,"""var Foo = function(){};"" + /* constructor */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,387,"""Foo.prototype.a = function() {return 7};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,388,"""var x = new Foo();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,389,"""var z = x.a();"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,390,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,393,"test(modules, new String[] {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,394,// m1
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,395,"""var Foo = function(){};"" + /* constructor */"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,396,"""var x = new Foo();"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,397,"""var z = 7;"","
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,398,// m2
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,399,"""Foo.prototype.a = function() {return 7};"""
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,404,* Tests for {@link SpecializeModule.SpecializationState}.
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,406,public static class SpecializeModuleSpecializationStateTest
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,407,extends CompilerTestCase {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,409,Compiler lastCompiler;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,411,SpecializationState lastState;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,413,@Override
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,414,public CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,415,lastCompiler = compiler;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,417,return new CompilerPass() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,419,@Override
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,420,"public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,421,SimpleDefinitionFinder defFinder =
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,422,new SimpleDefinitionFinder(compiler);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,424,"defFinder.process(externs, root);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,426,SimpleFunctionAliasAnalysis functionAliasAnalysis =
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,427,new SimpleFunctionAliasAnalysis();
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,429,functionAliasAnalysis.analyze(defFinder);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,431,lastState = new SpecializationState(functionAliasAnalysis);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,436,public void testRemovedFunctions() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,437,"testSame(""function F(){}\nvar G = function(a){};"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,439,"assertEquals(ImmutableSet.of(), lastState.getRemovedFunctions());"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,441,"Node functionF = findFunction(""F"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,443,lastState.reportRemovedFunction(functionF);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,444,"assertEquals(ImmutableSet.of(functionF), lastState.getRemovedFunctions());"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,446,"Node functionG = findFunction(""F"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,448,lastState.reportRemovedFunction(functionG);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,449,"assertEquals(ImmutableSet.of(functionF, functionG),"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,450,lastState.getRemovedFunctions());
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,452,"assertEquals(ImmutableSet.of(), lastState.getSpecializedFunctions());"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,455,public void testSpecializedFunctions() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,456,"testSame(""function F(){}\nvar G = function(a){};"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,458,"assertEquals(ImmutableSet.of(), lastState.getSpecializedFunctions());"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,460,"Node functionF = findFunction(""F"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,462,lastState.reportSpecializedFunction(functionF);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,463,"assertEquals(ImmutableSet.of(functionF),"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,464,lastState.getSpecializedFunctions());
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,466,"Node functionG = findFunction(""F"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,468,lastState.reportSpecializedFunction(functionG);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,469,"assertEquals(ImmutableSet.of(functionF, functionG),"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,470,lastState.getSpecializedFunctions());
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,472,"assertEquals(ImmutableSet.of(), lastState.getRemovedFunctions());"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,475,public void testCanFixupFunction() {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,476,"testSame(""function F(){}\n"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,477,"""var G = function(a){};\n"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,478,"""var ns = {};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,479,"""ns.H = function(){};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,480,"""var ns2 = {I : function anon1(){}};"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,481,"""(function anon2(){})();"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,483,"assertTrue(lastState.canFixupFunction(findFunction(""F"")));"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,484,"assertTrue(lastState.canFixupFunction(findFunction(""G"")));"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,485,"assertTrue(lastState.canFixupFunction(findFunction(""ns.H"")));"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,486,"assertFalse(lastState.canFixupFunction(findFunction(""anon1"")));"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,487,"assertFalse(lastState.canFixupFunction(findFunction(""anon2"")));"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,489,// Can't guarantee safe fixup for aliased functions
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,490,"testSame(""function A(){}\n"" +"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,491,"""var aliasA = A;\n"");"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,493,"assertFalse(lastState.canFixupFunction(findFunction(""A"")));"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,496,private Node findFunction(String name) {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,497,FunctionFinder f = new FunctionFinder(name);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,498,"new NodeTraversal(lastCompiler, f).traverse(lastCompiler.jsRoot);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,499,"assertNotNull(""Couldn't find "" + name, f.found);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,500,return f.found;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,504,* Quick Traversal to find a given function in the AST.
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,506,private class FunctionFinder extends AbstractPostOrderCallback {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,507,Node found = null;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,508,final String target;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,510,FunctionFinder(String target) {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,511,this.target = target;
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,514,@Override
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,515,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,516,if (NodeUtil.isFunction(n)
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,517,&& target.equals(NodeUtil.getFunctionName(n))) {
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,518,found = n;

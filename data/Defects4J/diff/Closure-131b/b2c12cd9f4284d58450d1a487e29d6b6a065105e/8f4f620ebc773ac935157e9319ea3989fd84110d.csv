is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,98,"rivate final Map<String, Property> props = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,98,"private final Map<String, Symbol> props = Maps.newHashMap();"
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,114,"rivate final Map<String, Property> globals = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,114,"private final Map<String, Symbol> globals = Maps.newHashMap();"
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,226,"rops.put(""prototype"", new Property(""prototype""));"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,226,"props.put(""prototype"", newSymbolForProperty(""prototype""));"
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,234,or (Property prop : props.values()) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,234,for (Symbol prop : props.values()) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,257,or (Property prop : props.values()) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,257,for (Symbol prop : props.values()) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,263,or (Property prop : props.values()) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,263,for (Symbol prop : props.values()) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,325,roperty prop = props.get(propNameNode.getString());
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,325,Symbol prop = props.get(propNameNode.getString());
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,483,"rops.put(dest.getString(), new Property(dest.getString()));"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,483,"props.put(dest.getString(), newSymbolForProperty(dest.getString()));"
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,578,or (Property global : globals.values()) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,578,for (Symbol global : globals.values()) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,598,or (Property global : globals.values()) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,598,for (Symbol global : globals.values()) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,600,"ddGlobalAliasNode(global.name,"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,600,"addGlobalAliasNode(global,"
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,623,"lobals.put(name, new Property(name));"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,623,"globals.put(name, newSymbolForGlobalVar(dest));"
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,661,roperty global = globals.get(name);
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,661,Symbol global = globals.get(name);
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,692,// None of the aliases are marked as @const.
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,693,"// Because we're reusing the original ref node,"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,694,// we need to update it to reflect this.
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,695,"globalUse.putBooleanProp(Node.IS_CONSTANT_NAME, false);"
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,703,"rivate void addGlobalAliasNode(String globalName, Node root) {"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,709,"private void addGlobalAliasNode(Symbol global, Node root) {"
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,711,"ode globalValue = Node.newString(Token.NAME, globalName);"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,718,String globalName = global.name;
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,719,"Node globalValue = Node.newString(Token.NAME, global.name);"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,720,"globalValue.putBooleanProp(Node.IS_CONSTANT_NAME, global.isConstant);"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,731,private Symbol newSymbolForGlobalVar(Node name) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,732,return new Symbol(
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,733,"name.getString(), name.getBooleanProp(Node.IS_CONSTANT_NAME));"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,736,private Symbol newSymbolForProperty(String name) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,737,"return new Symbol(name, false);"
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,722,rivate class Property {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,723,ublic String name;
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,741,private class Symbol {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,742,public final String name;
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,747,public final boolean isConstant;
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,732,ublic Property(String name) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,752,"private Symbol(String name, boolean isConstant) {"
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,754,this.isConstant = isConstant;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,47,rivate static final Logger logger_ =
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,47,private static final Logger logger =
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,50,rivate final AbstractCompiler compiler_;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,50,private final AbstractCompiler compiler;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,53,rivate int numRemoved_ = 0;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,53,private int numRemoved = 0;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,60," Keeps track of what variables we've warned about, so that we don't do it"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,61, on subsequent traversals.
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,63,rivate final Set<Var> warnedVars_ = Sets.newHashSet();
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,74,ompiler_ = compiler;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,68,this.compiler = compiler;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,84,arnedVars_.clear();
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,85,umRemoved_ = 0;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,78,numRemoved = 0;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,90,f (numRemoved_ > 0) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,91,ompiler_.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,83,if (numRemoved > 0) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,84,compiler.reportCodeChange();
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,99,"cope scope = new SyntacticScopeCreator(compiler_).createScope(root, null);"
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,92,"Scope scope = new SyntacticScopeCreator(compiler).createScope(root, null);"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,164,ompiler_.getCodingConvention().isExported(
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,157,compiler.getCodingConvention().isExported(
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,184,"cope fnScope = new SyntacticScopeCreator(compiler_).createScope(n, scope);"
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,177,"Scope fnScope = new SyntacticScopeCreator(compiler).createScope(n, scope);"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,211,umRemoved_++;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,204,numRemoved++;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,242,odingConvention convention = compiler_.getCodingConvention();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,235,CodingConvention convention = compiler.getCodingConvention();
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,250,"ompiler_.addToDebugLog(""Unreferenced var: "" + var.name);"
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,243,"compiler.addToDebugLog(""Unreferenced var: "" + var.name);"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,269,ompiler_.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,262,compiler.reportCodeChange();
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,279,f (!warnedVars_.contains(var)) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,280,arnedVars_.add(var);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,281,tring inputName = var.input != null
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,282, var.input.getName()
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,283," ""<unknown>"";"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,284,"ogger_.info(""Unused var "" + var.name +"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,285," declared in "" + inputName +"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,286," at line "" + toRemove.getLineno() +"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,287," may have side effects and can't be removed"");"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,296,umRemoved_++;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,278,numRemoved++;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,303,umRemoved_++;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,285,numRemoved++;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,306,umRemoved_++;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,288,numRemoved++;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,112, The list of input files which created the code on this line.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,114,ist<String> files = Lists.newArrayList();
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,161,"ut.append(current.basisMapping.id + """");"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,165,"ut.append(""]"");"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,169, Appends the line mapping's file map to the given
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,170, buffer.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,172,oid appendFileMapTo(Appendable out) throws IOException {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,173,/ Sort the files list for deterministic consistency.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,174,ollections.sort(files);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,176,"ut.append(""["");"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,178,or (int j = 0; j < files.size(); ++j) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,179,f (j > 0) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,180,"ut.append("","");"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,156,out.append(String.valueOf(current.basisMapping.id));
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,183,ut.append(escapeString(files.get(j)));
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,423,f (!lineMapping.files.contains(mapping.sourceFile)) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,424,ineMapping.files.add(mapping.sourceFile);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,545,/ The second section contains an array per generated line that contains
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,546,/ all the paths of the input source files that caused the code on the given
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,547,/ generated line to be generated. This is a simple array of Javascript
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,548,/ strings.
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,515,// The second section contains an array per generated line. Unused.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,562,"/ 5)  [""a.js"", ""b.js""]"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,563,"/ 6)  [""b.js"", ""c.js"", ""d.js""]"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,529,// 5)  []
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,530,// 6)  []
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,560,// Add legacy file mapping section.  This data is never used but it is
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,561,// need for the current file format.
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,594,ineMapping lineMapping = lineMappings.get(i);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,596,f (lineMapping == null) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,597,"ut.append(""[]"");"
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,598, else {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,599,ineMapping.appendFileMapTo(out);
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,602,"ut.append(""\n"");"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,563,"out.append(""[]\n"");"
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1171,odes.add(parameterType.getRoot());
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1171,if (parameterType != null) {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1172,nodes.add(parameterType.getRoot());
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1177,odes.add(thrownType.getRoot());
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1179,if (thrownType != null) {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1180,nodes.add(thrownType.getRoot());
False,test/com/google/javascript/jscomp/AliasExternalsTest.java,test/com/google/javascript/jscomp/AliasExternalsTest.java,28,"var window;var document;var arguments;var _USER_ID;var ActiveXObject;"" +"
True,test/com/google/javascript/jscomp/AliasExternalsTest.java,test/com/google/javascript/jscomp/AliasExternalsTest.java,28,"""/** @const */ var window;"" +"
True,test/com/google/javascript/jscomp/AliasExternalsTest.java,test/com/google/javascript/jscomp/AliasExternalsTest.java,29,"""/** @const */ var document;"" +"
True,test/com/google/javascript/jscomp/AliasExternalsTest.java,test/com/google/javascript/jscomp/AliasExternalsTest.java,30,"""var arguments;var _USER_ID;var ActiveXObject;"" +"
True,test/com/google/javascript/jscomp/AliasExternalsTest.java,test/com/google/javascript/jscomp/AliasExternalsTest.java,59,super.enableNormalize();
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,270,public void testNullType() {
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,271,testTypes(
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,272,"""var x = goog.Timer;"","
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,273,"""/** @param draggable */ types.actual;"""
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,274,"+ ""/** @param draggable */ types.expected;"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,64,public void testGoldenOutput0() throws Exception {
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,65,// Empty source map test
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,66,"checkSourceMap("""","
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,68,"""/** Begin line maps. **/{ \""file\"" : \""testMap\"","" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,69,""" \""count\"": 1 }\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,71,"""[0]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,73,"""/** Begin file information. **/\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,74,"""[]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,76,"""/** Begin mapping definitions. **/\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,77,"""[\""testcode\"",1,0]\n"");"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,74,"[\""testcode\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,90,"""[]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,104,"[\""testcode\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,120,"""[]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,132,"[\""c:\\\\myfile.js\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,148,"""[]\n"" +"

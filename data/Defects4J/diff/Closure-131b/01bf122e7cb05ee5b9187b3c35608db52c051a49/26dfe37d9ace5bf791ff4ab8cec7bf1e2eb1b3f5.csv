is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,336,"call.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,175,"aliasCall.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,474,if (parent.getType() == Token.CALL && n == parent.getFirstChild()) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,475,"// The node was a call target, we are deliberately flatten these as"
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,476,"// we node the ""this"" isn't provided by the namespace. Mark it as such:"
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,477,"parent.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,154,// example: JSCompiler_stubMethod(id);
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,155,"Node stubCall = new Node(Token.CALL,"
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,156,"Node.newString(Token.NAME, STUB_METHOD_NAME),"
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,157,Node.newNumber(stubId))
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,158,.copyInformationFromForTree(value);
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,159,"stubCall.putBooleanProp(Node.FREE_CALL, true);"
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,155,"alueParent.replaceChild(value,"
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,156,/ A.prototype.b = JSCompiler_stubMethod(id);
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,157,"ew Node(Token.CALL,"
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,158,"ode.newString(Token.NAME, STUB_METHOD_NAME),"
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,159,ode.newNumber(stubId))
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,160,copyInformationFromForTree(value));
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,162,// A.prototype.b = JSCompiler_stubMethod(id);
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,163,"valueParent.replaceChild(value, stubCall);"
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,168,"Node unstubCall = new Node(Token.CALL,"
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,169,"Node.newString(Token.NAME, UNSTUB_METHOD_NAME),"
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,170,"Node.newNumber(stubId),"
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,171,value);
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,172,"unstubCall.putBooleanProp(Node.FREE_CALL, true);"
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,172,"ew Node(Token.CALL,"
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,173,"ode.newString(Token.NAME, UNSTUB_METHOD_NAME),"
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,174,"ode.newNumber(stubId),"
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,175,alue)))
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,180,unstubCall))
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,303,Preconditions.checkState(parent.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,304,"parent.putBooleanProp(Node.FREE_CALL, true);"
False,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,100,"ode call = new Node(Token.CALL, NodeUtil.newQualifiedNameNode("
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,100,Node exportCallTarget = NodeUtil.newQualifiedNameNode(
False,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,102,"xportSymbolFunction, node, testFunctionName));"
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,102,"exportSymbolFunction, node, testFunctionName);"
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,103,"Node call = new Node(Token.CALL, exportCallTarget);"
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,104,if (exportCallTarget.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,105,"call.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,214,"call.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/jscomp/InstrumentFunctions.java,src/com/google/javascript/jscomp/InstrumentFunctions.java,143,"call.putBooleanProp(Node.FREE_CALL, true);"
False,src/com/google/javascript/jscomp/InstrumentFunctions.java,src/com/google/javascript/jscomp/InstrumentFunctions.java,257,"eturn new Node(Token.CALL,"
True,src/com/google/javascript/jscomp/InstrumentFunctions.java,src/com/google/javascript/jscomp/InstrumentFunctions.java,258,"Node call = new Node(Token.CALL,"
True,src/com/google/javascript/jscomp/InstrumentFunctions.java,src/com/google/javascript/jscomp/InstrumentFunctions.java,261,"call.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/jscomp/InstrumentFunctions.java,src/com/google/javascript/jscomp/InstrumentFunctions.java,262,return call;
True,src/com/google/javascript/jscomp/InstrumentFunctions.java,src/com/google/javascript/jscomp/InstrumentFunctions.java,305,"call.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/jscomp/InstrumentFunctions.java,src/com/google/javascript/jscomp/InstrumentFunctions.java,320,"call.putBooleanProp(Node.FREE_CALL, true);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2887,oolean isFreeCall = isName(callTarget);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2887,boolean isFreeCall = !isGet(callTarget);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1362,"replacement.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1231,"n.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,622,"// Keep track of of the ""this"" context of a call.  A call without an"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,623,"// explicit ""this"" is a free call."
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,624,Node first = node.getFirstChild();
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,625,if (first.getType() != Token.GETPROP && first.getType() != Token.GETELEM) {
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,626,"node.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,823,"node.putBooleanProp(Node.FREE_CALL, true);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1720,} else if (type == Token.CALL) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1721,if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1722,return false;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1761,public void testInlineObject() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1762,new StringCompare().testInlineObject();
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1765,private static class StringCompare extends CompilerTestCase {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1766,private boolean allowGlobalFunctionInlining = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1768,StringCompare() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1769,"super("""", false);"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1770,this.enableNormalize();
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1771,this.enableMarkNoSideEffects();
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1774,@Override
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1775,public void setUp() throws Exception {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1776,super.setUp();
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1777,super.enableLineNumberCheck(true);
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1778,allowGlobalFunctionInlining = true;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1781,@Override
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1782,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1783,compiler.resetUniqueNameId();
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1784,return new InlineFunctions(
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1785,"compiler,"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1786,"compiler.getUniqueNameIdSupplier(),"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1787,"allowGlobalFunctionInlining,"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1788,"true, // allowLocalFunctionInlining"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1789,"true, // allowBlockInlining"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1790,true); // assumeStrictThis
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1793,public void testInlineObject() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1794,allowGlobalFunctionInlining = false;
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1795,// TODO(johnlenz): normalize the AST so an AST comparison can be done.
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1796,"// As is, the expected AST does not match the actual correct result:"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1797,"// The AST matches ""g.a()"" with a FREE_CALL annotation, but this as"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1798,// expected string would fail as it won't be mark as a free call.
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1799,"// ""(0,g.a)()"" matches the output, but not the resulting AST."
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1800,"test(""function inner(){function f(){return g.a}(f())()}"","
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1801,"""function inner(){(0,g.a)()}"");"

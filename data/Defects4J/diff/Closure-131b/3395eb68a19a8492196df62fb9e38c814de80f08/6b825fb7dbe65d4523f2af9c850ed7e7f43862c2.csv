is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,566,* Return an iterable over all of the variables declared in this scope.
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,568,Iterable<Var> getVarIterable() {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,569,return vars.values();
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,29,import java.util.Collection;
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,115,or (Node aliasDefinition : traversal.getAliasDefinitions()) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,116,for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,136,raversal.getAliasDefinitions().size() > 0 ||
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,137,traversal.getAliasDefinitionsInOrder().size() > 0 ||
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,183,rivate final List<Node> aliasDefinitions = Lists.newArrayList();
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,185,// The order of this list determines the order that aliases are applied.
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,186,private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,196,ist<Node> getAliasDefinitions() {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,197,eturn aliasDefinitions;
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,199,Collection<Node> getAliasDefinitionsInOrder() {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,200,return aliasDefinitionsInOrder;
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,226,findAliases(t);
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,268,Override
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,269,"ublic void visit(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,270,f (isCallToScopeMethod(n)) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,271,f (preprocessorSymbolTable != null) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,272,reprocessorSymbolTable.addReference(n.getFirstChild());
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,274,f (!NodeUtil.isExpressionNode(parent)) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,275,"eport(t, n, GOOG_SCOPE_USED_IMPROPERLY);"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,277,f (n.getChildCount() != 2) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,278,/ The goog.scope call should have exactly 1 parameter.  The first
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,279,"/ child is the ""goog.scope"" and the second should be the parameter."
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,280,"eport(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,281, else {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,282,ode anonymousFnNode = n.getChildAtIndex(1);
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,283,f (!NodeUtil.isFunction(anonymousFnNode) ||
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,284,odeUtil.getFunctionName(anonymousFnNode) != null ||
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,285,odeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,286,"eport(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,287, else {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,288,copeCalls.add(n);
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,294,f (t.getScopeDepth() == 2) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,272,private void findAliases(NodeTraversal t) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,273,Scope scope = t.getScope();
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,274,for (Var v : scope.getVarIterable()) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,275,Node n = v.getNode();
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,296,f (type == Token.NAME && parent.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,277,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,278,if (parent.getType() == Token.VAR) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,299,ar aliasVar = t.getScope().getVar(name);
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,281,Var aliasVar = scope.getVar(name);
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,301,liasDefinitions.add(n);
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,305,eturn;
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,312,f (type == Token.NAME && NodeUtil.isAssignmentOp(parent) &&
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,313, == parent.getFirstChild()) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,314,"eport(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,295,"private void validateScopeCall(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,296,if (preprocessorSymbolTable != null) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,297,preprocessorSymbolTable.addReference(n.getFirstChild());
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,299,if (!NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,300,"report(t, n, GOOG_SCOPE_USED_IMPROPERLY);"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,302,if (n.getChildCount() != 2) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,303,// The goog.scope call should have exactly 1 parameter.  The first
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,304,"// child is the ""goog.scope"" and the second should be the parameter."
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,305,"report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,306,} else {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,307,Node anonymousFnNode = n.getChildAtIndex(1);
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,308,if (!NodeUtil.isFunction(anonymousFnNode) ||
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,309,NodeUtil.getFunctionName(anonymousFnNode) != null ||
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,310,NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,311,"report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,312,} else {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,313,scopeCalls.add(n);
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,318,@Override
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,319,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,320,if (isCallToScopeMethod(n)) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,321,"validateScopeCall(t, n, n.getParent());"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,324,if (t.getScopeDepth() < 2) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,325,return;
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,328,int type = n.getType();
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,329,Var aliasVar = null;
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,330,if (type == Token.NAME) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,331,String name = n.getString();
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,332,Var lexicalVar = t.getScope().getVar(n.getString());
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,333,if (lexicalVar != null && lexicalVar == aliases.get(name)) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,334,aliasVar = lexicalVar;
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,338,// Validate the top level of the goog.scope block.
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,339,if (t.getScopeDepth() == 2) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,340,if (aliasVar != null && NodeUtil.isLValue(n)) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,341,if (aliasVar.getNode() == n) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,342,aliasDefinitionsInOrder.add(n);
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,344,"// Return early, to ensure that we don't record a definition"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,345,// twice.
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,346,return;
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,347,} else {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,348,"report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,361,// Validate all descendent scopes of the goog.scope block.
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,327,f (n.getType() == Token.NAME) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,328,tring name = n.getString();
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,329,ar aliasVar = aliases.get(name);
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,331,/ Check if this name points to an alias.
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,332,f (aliasVar != null &&
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,333,.getScope().getVar(name) == aliasVar) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,334,"/ Note, to support the transitive case, it's important we don't"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,335,"/ clone aliasedNode here.  For example,"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,336,/ var g = goog; var d = g.dom; d.createElement('DIV');
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,337,"/ The node in aliasedNode (which is ""g"") will be replaced in the"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,338,"/ changes pass above with ""goog"".  If we cloned here, we'd end up"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,339,/ with <code>g.dom.createElement('DIV')</code>.
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,340,ode aliasedNode = aliasVar.getInitialValue();
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,341,"liasUsages.add(new AliasedNode(n, aliasedNode));"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,363,// Check if this name points to an alias.
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,364,if (aliasVar != null) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,365,"// Note, to support the transitive case, it's important we don't"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,366,"// clone aliasedNode here.  For example,"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,367,// var g = goog; var d = g.dom; d.createElement('DIV');
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,368,"// The node in aliasedNode (which is ""g"") will be replaced in the"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,369,"// changes pass above with ""goog"".  If we cloned here, we'd end up"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,370,// with <code>g.dom.createElement('DIV')</code>.
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,371,Node aliasedNode = aliasVar.getInitialValue();
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,372,"aliasUsages.add(new AliasedNode(n, aliasedNode));"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,180,verifyTypes();
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,183,private void verifyTypes() {
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,311,public void testForwardJsDoc() {
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,312,testScoped(
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,313,"""/**\n"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,314,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,315,""" */\n"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,316,"""foo.Foo = function() {};"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,317,"""/** @param {Foo.Bar} x */ function actual(x) {3}"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,318,"""var Foo = foo.Foo;"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,319,"""/** @constructor */ Foo.Bar = function() {};"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,320,"""/** @param {foo.Foo.Bar} x */ function expected(x) {}"","
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,322,"""/**\n"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,323,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,324,""" */\n"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,325,"""foo.Foo = function() {};"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,326,"""/** @param {foo.Foo.Bar} x */ function actual(x) {3}"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,327,"""/** @constructor */ foo.Foo.Bar = function() {};"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,328,"""/** @param {foo.Foo.Bar} x */ function expected(x) {}"");"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,329,verifyTypes();

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,30,* @autohr acleung@google.com (Alan Leung)
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,37,rivate Predicate<N> nodePredicate;
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,38,"rivate Predicate<DiGraphEdge<N, E>> edgePredicate;"
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,39,rivate boolean result;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,38,private final Predicate<N> nodePredicate;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,39,"private final Predicate<DiGraphEdge<N, E>> edgePredicate;"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,40,private final boolean inclusive;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,65,"private final DiGraph<N, E> graph;"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,66,"private final DiGraphNode<N, E> start;"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,67,"private final DiGraphNode<N, E> end;"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,83,* @param inclusive Includes node A and B in the test for the node predicate.
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,81,"redicate<DiGraphEdge<N, E>> edgePredicate) {"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,87,"Predicate<DiGraphEdge<N, E>> edgePredicate, boolean inclusive) {"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,88,this.graph = graph;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,89,this.start = a;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,90,this.end = b;
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,85,raph.pushNodeAnnotations();
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,86,raph.pushEdgeAnnotations();
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,88,iscoverBackEdges(a);
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,89,"esult = checkAllPathsWithoutBackEdges(a, b);"
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,91,raph.popNodeAnnotations();
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,92,raph.popEdgeAnnotations();
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,93,this.inclusive = inclusive;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,97,* Inclusive check.
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,99,"CheckPathsBetweenNodes(DiGraph<N, E> graph, DiGraphNode<N, E> a,"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,100,"DiGraphNode<N, E> b, Predicate<N> nodePredicate,"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,101,"Predicate<DiGraphEdge<N, E>> edgePredicate) {"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,102,"this(graph, a, b, nodePredicate, edgePredicate, true);"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,111,setUp();
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,112,"boolean result = checkAllPathsWithoutBackEdges(start, end);"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,113,tearDown();
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,114,return result;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,118,* @return true iff some paths contain at least one node that satisfy the
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,119,*     predicate
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,121,public boolean somePathsSatisfyPredicate() {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,122,setUp();
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,123,"boolean result = checkSomePathsWithoutBackEdges(start, end);"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,124,tearDown();
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,128,private void setUp() {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,129,graph.pushNodeAnnotations();
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,130,graph.pushEdgeAnnotations();
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,131,discoverBackEdges(this.start);
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,134,private void tearDown() {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,135,graph.popNodeAnnotations();
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,136,graph.popEdgeAnnotations();
False,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,129,f (nodePredicate.apply(a.getValue())) {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,165,if (nodePredicate.apply(a.getValue()) &&
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,166,(inclusive || (a != start && a != end))) {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,188,* Verify that some non-looping paths from {@code a} to {@code b} pass
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,189,* through at least one node where {@code nodePredicate} is true.
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,191,"private boolean checkSomePathsWithoutBackEdges(DiGraphNode<N, E> a,"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,192,"DiGraphNode<N, E> b) {"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,193,if (nodePredicate.apply(a.getValue()) &&
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,194,(inclusive || (a != start && a != end))) {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,195,return true;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,197,if (a == b) {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,198,return false;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,200,"for (DiGraphEdge<N, E> e : a.getOutEdges()) {"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,201,if (ignoreEdge(e)) {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,202,continue;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,204,if (e.getAnnotation() == BACK_EDGE) {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,205,continue;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,207,"DiGraphNode<N, E> next = e.getDestination();"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,208,"if (checkSomePathsWithoutBackEdges(next, b)) {"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,209,return true;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,212,return false;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,31,* @autohr acleung@google.com (Alan Leung)
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,201,* Much of the tests are done by testing all paths. We quickly verified
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,202,* that some paths are indeed correct for the some path case.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,204,public void testSomePath1() {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,205,"DiGraph<String, String> g = new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,206,"g.createDirectedGraphNode(""a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,207,"g.createDirectedGraphNode(""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,208,"g.createDirectedGraphNode(""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,209,"g.createDirectedGraphNode(""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,211,"g.connect(""a"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,212,"g.connect(""a"", ""-"", ""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,213,"g.connect(""b"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,214,"g.connect(""c"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,216,"assertTrue(createTest(g, ""a"", ""d"", Predicates.equalTo(""b""), ALL_EDGE)"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,217,.somePathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,218,"assertTrue(createTest(g, ""a"", ""d"", Predicates.equalTo(""c""), ALL_EDGE)"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,219,.somePathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,220,"assertTrue(createTest(g, ""a"", ""d"", Predicates.equalTo(""a""), ALL_EDGE)"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,221,.somePathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,222,"assertTrue(createTest(g, ""a"", ""d"", Predicates.equalTo(""d""), ALL_EDGE)"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,223,.somePathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,224,"assertFalse(createTest(g, ""a"", ""d"", Predicates.equalTo(""NONE""), ALL_EDGE)"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,225,.somePathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,228,public void testSomePath2() {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,229,"// No Paths between nodes, by definition, always false."
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,230,"DiGraph<String, String> g = new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,231,"g.createDirectedGraphNode(""a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,232,"g.createDirectedGraphNode(""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,234,"assertFalse(createTest(g, ""a"", ""b"", Predicates.equalTo(""b""), ALL_EDGE)"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,235,.somePathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,236,"assertFalse(createTest(g, ""a"", ""b"", Predicates.equalTo(""d""), ALL_EDGE)"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,237,.somePathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,238,"assertTrue(createTest(g, ""a"", ""b"", Predicates.equalTo(""a""), ALL_EDGE)"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,239,.somePathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,242,public void testNonInclusive() {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,243,"// No Paths between nodes, by definition, always false."
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,244,"DiGraph<String, String> g = new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,245,"g.createDirectedGraphNode(""a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,246,"g.createDirectedGraphNode(""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,247,"g.createDirectedGraphNode(""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,248,"g.connect(""a"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,249,"g.connect(""b"", ""-"", ""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,250,"assertFalse(createNonInclusiveTest(g, ""a"", ""b"","
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,251,"Predicates.equalTo(""a""), ALL_EDGE).somePathsSatisfyPredicate());"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,252,"assertFalse(createNonInclusiveTest(g, ""a"", ""b"","
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,253,"Predicates.equalTo(""b""), ALL_EDGE).somePathsSatisfyPredicate());"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,254,"assertTrue(createNonInclusiveTest(g, ""a"", ""c"","
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,255,"Predicates.equalTo(""b""), ALL_EDGE).somePathsSatisfyPredicate());"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,277,"private static CheckPathsBetweenNodes<String, String>"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,278,createNonInclusiveTest(
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,279,"DiGraph<String, String> graph,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,280,"String entry,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,281,"String exit,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,282,"Predicate<String> nodePredicate,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,283,"Predicate<DiGraphEdge<String, String>> edgePredicate) {"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,284,"return new CheckPathsBetweenNodes<String, String>(graph,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,285,"graph.getDirectedGraphNode(entry), graph.getDirectedGraphNode(exit),"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,286,"nodePredicate, edgePredicate, false);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,648,"efineSlot(keyNode, objLit, qualifiedName, keyType, keyType == null);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,648,boolean inferred = keyType == null;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,649,"defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1487,/ NOTE(nicksantos): Determining whether a property is declared or not
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1488,/ is really really obnoxious.
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1490,/ The problem is that there are two (equally valid) coding styles:
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1492,/ (function() {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1493,/   /* The authoritative definition of goog.bar. */
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1494,/   goog.bar = function() {};
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1497,/ function f() {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1498,/   goog.bar();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1499,/   /* Reset goog.bar to a no-op. */
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1500,/   goog.bar = function() {};
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1503,"/ In a dynamic language with first-class functions, it's very difficult"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1504,/ to know which one the user intended without looking at lots of
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1505,/ contextual information (the second example demonstrates a small case
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1506,"/ of this, but there are some really pathological cases as well)."
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1508,/ The current algorithm checks if either the declaration has
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1509,"/ jsdoc type information, or @const with a known type,"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1510,/ or a function literal with a name we haven't seen before.
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1511,oolean inferred = true;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1512,f (info != null) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1513,/ Determining declaration for #1 + #3 + #4
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1514,nferred = !(info.hasType()
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1515,| info.hasEnumParameterType()
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1516,| (info.isConstant() && valueType != null
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1517,& !valueType.isUnknownType())
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1518,| FunctionTypeBuilder.isFunctionTypeDeclaration(info));
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1521,f (inferred && rhsValue != null && rhsValue.isFunction()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1522,/ Determining declaration for #2
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1523,f (info != null) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1524,nferred = false;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1525," else if (!scope.isDeclared(qName, false) &&"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1526,.isUnscopedQualifiedName()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1527,nferred = false;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1488,boolean inferred = isQualifiedNameInferred(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1489,"qName, n, info, rhsValue, valueType);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1526,* Determines whether a qualified name is inferred.
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1527,* NOTE(nicksantos): Determining whether a property is declared or not
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1528,* is really really obnoxious.
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1530,* The problem is that there are two (equally valid) coding styles:
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1532,* (function() {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1533,*   /* The authoritative definition of goog.bar. /
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1534,*   goog.bar = function() {};
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1537,* function f() {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1538,*   goog.bar();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1539,*   /* Reset goog.bar to a no-op. /
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1540,*   goog.bar = function() {};
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1543,"* In a dynamic language with first-class functions, it's very difficult"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1544,* to know which one the user intended without looking at lots of
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1545,* contextual information (the second example demonstrates a small case
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1546,"* of this, but there are some really pathological cases as well)."
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1548,* The current algorithm checks if either the declaration has
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1549,"* jsdoc type information, or @const with a known type,"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1550,* or a function literal with a name we haven't seen before.
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1552,private boolean isQualifiedNameInferred(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1553,"String qName, Node n, JSDocInfo info,"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1554,"Node rhsValue, JSType valueType) {"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1555,if (valueType == null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1556,return true;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1559,boolean inferred = true;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1560,if (info != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1561,inferred = !(info.hasType()
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1562,|| info.hasEnumParameterType()
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1563,|| (info.isConstant() && valueType != null
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1564,&& !valueType.isUnknownType())
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1565,|| FunctionTypeBuilder.isFunctionTypeDeclaration(info));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1568,if (inferred && rhsValue != null && rhsValue.isFunction()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1569,if (info != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1570,inferred = false;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1571,"} else if (!scope.isDeclared(qName, false) &&"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1572,n.isUnscopedQualifiedName()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1573,inferred = false;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1576,return inferred;
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1041,public void testDeclaredObjectLitProperty6() throws Exception {
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1042,"testSame(""var x = {/** This is jsdoc */ prop: function(){}};"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1043,"Var prop = globalScope.getVar(""x.prop"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1044,JSType propType = prop.getType();
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1045,"assertEquals(""function (): undefined"", propType.toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1046,assertFalse(prop.isTypeInferred());
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1047,assertFalse(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1048,"ObjectType.cast(globalScope.getVar(""x"").getType())"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1049,".isPropertyTypeInferred(""prop""));"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1058,assertTrue(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1059,"ObjectType.cast(globalScope.getVar(""x"").getType())"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1060,".isPropertyTypeInferred(""prop""));"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1063,public void testInferredObjectLitProperty2() throws Exception {
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1064,"testSame(""var x = {prop: function(){}};"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1065,"Var prop = globalScope.getVar(""x.prop"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1066,JSType propType = prop.getType();
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1067,"assertEquals(""function (): undefined"", propType.toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1068,assertTrue(prop.isTypeInferred());
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1069,assertTrue(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1070,"ObjectType.cast(globalScope.getVar(""x"").getType())"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1071,".isPropertyTypeInferred(""prop""));"

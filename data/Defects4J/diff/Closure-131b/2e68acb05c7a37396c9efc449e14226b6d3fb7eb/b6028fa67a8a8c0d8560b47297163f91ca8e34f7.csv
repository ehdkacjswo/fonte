is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,115,/ Object literal keys may be strings or numbers.  Numbers are
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,116,/ skipped because name tokens may not start with a number.
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,115,"// Object literal keys may be STRING, GET, SET or NUMBER.  Numbers are"
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,116,// skipped because name tokens may not start with a number. Get and Set
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,117,// are skipped because they can not be named.
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,348,"eturn new Node(Token.GETPROP,"
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,349,"ew Node(Token.OBJECTLIT),"
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,350,ame.cloneNode());
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,349,switch (name.getType()) {
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,350,case Token.STRING:
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,351,"return new Node(Token.GETPROP,"
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,352,"new Node(Token.OBJECTLIT),"
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,353,name.cloneNode());
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,354,case Token.NUMBER:
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,355,"return new Node(Token.GETELEM,"
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,356,"new Node(Token.OBJECTLIT),"
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,357,name.cloneNode());
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,358,case Token.SET:
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,359,case Token.GET:
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,360,// TODO(johnlenz): revisit. Not sure what to do here.
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,361,"throw new IllegalStateException(""not yet implemented"");"
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,362,default:
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,363,"throw new IllegalStateException(""unexpected"");"
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,303,/ Never try to decompose anobject literal key.
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,303,// Never try to decompose an object literal key.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1629,/ TODO(nicksantos): What about NUMBER?
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1630,eturn node.getType() == Token.STRING &&
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1631,arent.getType() == Token.OBJECTLIT;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1629,switch (node.getType()) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1630,case Token.NUMBER:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1631,case Token.STRING:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1632,return parent.getType() == Token.OBJECTLIT;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1633,case Token.GET:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1634,case Token.SET:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1635,return true;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1637,return false;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,334,case Token.GET:
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,335,case Token.SET:
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,344,.getType() == Token.NAME || n.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,346,n.getType() == Token.NAME
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,347,|| n.getType() == Token.STRING
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,348,|| n.getType() == Token.GET
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,349,|| n.getType() == Token.SET);
False,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,86,f (key.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,86,if (key.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,21,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,70,| (NodeUtil.isString(node) &&
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,71,node.getParent().getType() == Token.OBJECTLIT ||
False,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,72,odeUtil.isGet(node.getParent())));
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,69,"|| NodeUtil.isObjectLitKey(node, node.getParent())"
True,src/com/google/javascript/jscomp/SourceMap.java,src/com/google/javascript/jscomp/SourceMap.java,70,|| (NodeUtil.isString(node) && NodeUtil.isGet(node.getParent()));
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,23,import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,86,* Whether to acceptES5 source.
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,88,private boolean acceptES5 = true;
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,148,if (this.acceptES5) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,149,options.languageIn = LanguageMode.ECMASCRIPT5;
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,187,* Whether to allow ECMASCRIPT5 source parsing.
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,189,protected void enableEcmaScript5(boolean acceptES5) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,190,this.acceptES5 = acceptES5;
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,387,if (this.acceptES5) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,388,options.languageIn = LanguageMode.ECMASCRIPT5;
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,20,import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,400,public void testExposeObjectLit1() {
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,401,// Validate that getter and setters methods are see as side-effect
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,402,// free and that values can move past them.  We don't need to be
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,403,// concerned with exposing the getter or setter here but the
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,404,// decomposer does not have a method of exposing properties only variables.
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,405,helperMoveExpression(
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,406,"""var x = {get a() {}, b: foo()};"","
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,407,"""foo"","
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,408,"""var temp$$0=foo();var x = {get a() {}, b: temp$$0};"");"
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,410,helperMoveExpression(
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,411,"""var x = {set a(p) {}, b: foo()};"","
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,412,"""foo"","
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,413,"""var temp$$0=foo();var x = {set a(p) {}, b: temp$$0};"");"
False,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,411,ompiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,428,Compiler compiler = getCompiler();
False,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,439,ompiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,456,Compiler compiler = getCompiler();
False,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,490,ompiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,507,Compiler compiler = getCompiler();
False,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,534,ompiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,551,Compiler compiler = getCompiler();
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,578,private static Compiler getCompiler() {
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,579,Compiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,580,CompilerOptions options = new CompilerOptions();
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,581,options.languageIn = LanguageMode.ECMASCRIPT5;
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,582,compiler.initOptions(options);
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,583,return compiler;
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,24,import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,214,public void testIsObjectLiteralKey1() throws Exception {
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,215,testIsObjectLiteralKey(
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,216,"parseExpr(""({})""), false);"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,217,testIsObjectLiteralKey(
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,218,"parseExpr(""a""), false);"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,219,testIsObjectLiteralKey(
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,220,"parseExpr(""'a'""), false);"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,221,testIsObjectLiteralKey(
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,222,"parseExpr(""1""), false);"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,223,testIsObjectLiteralKey(
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,224,"parseExpr(""({a: 1})"").getFirstChild(), true);"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,225,testIsObjectLiteralKey(
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,226,"parseExpr(""({1: 1})"").getFirstChild(), true);"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,227,testIsObjectLiteralKey(
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,228,"parseExpr(""({get a(){}})"").getFirstChild(), true);"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,229,testIsObjectLiteralKey(
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,230,"parseExpr(""({set a(b){}})"").getFirstChild(), true);"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,233,private Node parseExpr(String js) {
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,234,Compiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,235,CompilerOptions options = new CompilerOptions();
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,236,options.languageIn = LanguageMode.ECMASCRIPT5;
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,237,compiler.initOptions(options);
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,238,Node root = compiler.parseTestCode(js);
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,239,return root.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,242,"private void testIsObjectLiteralKey(Node node, boolean expected) {"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,243,"assertEquals(expected, NodeUtil.isObjectLitKey(node, node.getParent()));"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,407,ublic void testPropertyIsConstant() throws Exception {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,407,public void testPropertyIsConstant1() throws Exception {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,418,public void testPropertyIsConstant2() throws Exception {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,419,"testSame(""var a = {CONST: 3}; var b = a.CONST;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,420,Node n = getLastCompiler().getRoot();
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,422,"Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,423,"assertEquals(2, constantNodes.size());"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,424,for (Node hasProp : constantNodes) {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,425,"assertEquals(""CONST"", hasProp.getString());"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,429,public void testGetterPropertyIsConstant() throws Exception {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,430,"testSame(""var a = { get CONST() {return 3} }; "" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,431,"""var b = a.CONST;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,432,Node n = getLastCompiler().getRoot();
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,434,"Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,435,"assertEquals(2, constantNodes.size());"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,436,for (Node hasProp : constantNodes) {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,437,"assertEquals(""CONST"", hasProp.getString());"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,441,public void testSetterPropertyIsConstant() throws Exception {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,442,// Verifying that a SET is properly annotated.
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,443,"testSame(""var a = { set CONST(b) {throw 'invalid'} }; "" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,444,"""var c = a.CONST;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,445,Node n = getLastCompiler().getRoot();
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,447,"Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,448,"assertEquals(2, constantNodes.size());"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,449,for (Node hasProp : constantNodes) {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,450,"assertEquals(""CONST"", hasProp.getString());"
True,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,77,checkDefinitionsInJs(
True,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,78,"""({1 : 1}); o[1]"","
True,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,79,ImmutableSet.<String>of());

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ChainCalls.java,src/com/google/javascript/jscomp/ChainCalls.java,106,f (!NodeUtil.isExpressionNode(n)) {
True,src/com/google/javascript/jscomp/ChainCalls.java,src/com/google/javascript/jscomp/ChainCalls.java,106,if (!n.isExprResult()) {
False,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,108, else if (NodeUtil.isExpressionNode(n)) {
True,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,108,} else if (n.isExprResult()) {
False,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,123,f (NodeUtil.isExpressionNode(ancestor)) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,123,if (ancestor.isExprResult()) {
False,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,214,f (NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,214,if (parent.isExprResult()) {
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,361,f (NodeUtil.isExpressionNode(currentParent) &&
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,361,if (currentParent.isExprResult() &&
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,248,f (NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,248,if (parent.isExprResult()) {
False,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,73,f (!NodeUtil.isExpressionNode(n) && !n.isVar()) {
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,73,if (!n.isExprResult() && !n.isVar()) {
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,380,reconditions.checkState(NodeUtil.isExpressionNode(defParent));
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,380,Preconditions.checkState(defParent.isExprResult());
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,469,reconditions.checkState(NodeUtil.isExpressionNode(grandParent));
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,469,Preconditions.checkState(grandParent.isExprResult());
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,475,reconditions.checkState(NodeUtil.isExpressionNode(parent));
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,475,Preconditions.checkState(parent.isExprResult());
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,831,NodeUtil.isExpressionNode(parent.getParent());
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,831,!parent.getParent().isExprResult();
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,160,f (NodeUtil.isExpressionNode(parent) ||
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,160,if (parent.isExprResult() ||
False,src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java,src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java,126,f (NodeUtil.isExpressionNode(parent) &&
True,src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java,src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java,126,if (parent.isExprResult() &&
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,324,f (NodeUtil.isExpressionNode(containingNode)) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,324,if (containingNode.isExprResult()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,358,f (NodeUtil.isExpressionNode(gramps)) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,358,if (gramps.isExprResult()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,431,f (NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,431,if (parent.isExprResult()) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1483,tatic boolean isExpressionNode(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1484,eturn n.isExprResult();
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,827,odeUtil.isExpressionNode(node));
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,827,node.isExprResult());
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,841,reconditions.checkArgument(NodeUtil.isExpressionNode(node));
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,841,Preconditions.checkArgument(node.isExprResult());
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,859,reconditions.checkArgument(NodeUtil.isExpressionNode(node) || // assign
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,859,Preconditions.checkArgument(node.isExprResult() || // assign
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,863,f ((candidateDefinition == null) || !NodeUtil.isExpressionNode(node)) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,863,if ((candidateDefinition == null) || !node.isExprResult()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,905,f (NodeUtil.isExpressionNode(candidateDefinition) &&
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,905,if (candidateDefinition.isExprResult() &&
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,451,f (NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,451,if (parent.isExprResult()) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,299,f (!NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,299,if (!parent.isExprResult()) {
False,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,221,f (inExterns && (parent != null) && NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,221,if (inExterns && (parent != null) && parent.isExprResult()) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,60,f (!NodeUtil.isExpressionNode(c) && c != last) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,60,if (!c.isExprResult() && c != last) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,214,f (NodeUtil.isExpressionNode(gramps)) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,214,if (gramps.isExprResult()) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,257,f (NodeUtil.isExpressionNode(ancestor)) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,257,if (ancestor.isExprResult()) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,297,f (NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,297,if (parent.isExprResult()) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,326,f (NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,326,if (parent.isExprResult()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,553,ypeable = !NodeUtil.isExpressionNode(parent);
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,553,typeable = !parent.isExprResult();
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,714,ode StatementNode = root.getFirstChild();
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,715,ssertTrue(NodeUtil.isExpressionNode(StatementNode));
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,716,ode functionNode = StatementNode.getFirstChild();
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,714,Node statementNode = root.getFirstChild();
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,715,assertTrue(statementNode.isExprResult());
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,716,Node functionNode = statementNode.getFirstChild();

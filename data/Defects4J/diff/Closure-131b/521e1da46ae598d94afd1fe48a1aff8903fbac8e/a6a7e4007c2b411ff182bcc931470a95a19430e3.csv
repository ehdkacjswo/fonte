is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,19,import com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,20,import com.google.javascript.jscomp.NodeTraversal.Callback;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,22,import com.google.javascript.rhino.jstype.JSTypeRegistry;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,23,import com.google.javascript.rhino.jstype.ObjectType;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,37,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,40,this.compiler = compiler;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,45,String srcName = originalRoot.getSourceFileName();
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,46,Callback cb =
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,47,"new QualifiedNameSearchTraversal(compiler.getTypeRegistry(), srcName);"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,48,"new NodeTraversal(compiler, cb).traverse(originalRoot);"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,57,* Search for fields to cleanup by looking for nodes in the tree which are
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,58,* root nodes of qualified names and getting the final token of the qualified
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,59,* name as a candidate field.
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,60,* <p>
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,61,"* Once a candidate field is found, ask the {@code JSTypeRegistry} for all"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,62,"* JSTypes that have a field with the same name, and check if the field on"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,63,"* that type is defined in the file the compiler is cleaning up. If so, remove"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,64,"* the field, and update the {@code JSTypeRegistry} to no longer associate the"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,65,* type with the field.
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,66,* <p>
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,67,* This algorithm was chosen for simplicity and is less than optimally
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,68,* efficient in two ways:
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,69,* <p>
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,70,* 1) All types with a matching field name are iterated over (when only types
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,71,* that extend or implement the JSType indicated by the containing object in
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,72,* the found Qualified Name need to be checked).
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,73,* <p>
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,74,"* 2) All Qualified Names are checked, even those which are not L-Values or"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,75,* single declarations of an Type Expression. In general field should only be
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,76,* declared as part of an assignment ('ns.Type.a = 3;') or stand alone name
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,77,* declaration ('ns.Type.a;').
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,79,static class QualifiedNameSearchTraversal extends AbstractShallowCallback {
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,81,private final JSTypeRegistry typeRegistry;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,82,private final String srcName;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,84,public QualifiedNameSearchTraversal(
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,85,"JSTypeRegistry typeRegistry, String srcName) {"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,86,this.typeRegistry = typeRegistry;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,87,this.srcName = srcName;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,90,@Override
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,91,"public void visit(NodeTraversal t, Node n, Node p) {"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,92,// We are a root GetProp
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,93,if (NodeUtil.isGetProp(n) && !NodeUtil.isGetProp(p)) {
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,94,String propName = getFieldName(n);
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,95,Iterable<ObjectType> types =
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,96,typeRegistry.getEachReferenceTypeWithProperty(propName);
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,97,for (ObjectType type : types) {
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,98,Node pNode = type.getPropertyNode(propName);
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,99,if (srcName.equals(pNode.getSourceFileName())) {
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,100,"typeRegistry.unregisterPropertyOnType(propName, type);"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,101,type.removeProperty(propName);
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,107,private String getFieldName(Node n) {
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,108,return n.getLastChild().getString();
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,2, Copyright 2011 The Closure Compiler Authors.
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,5, you may not use this file except in compliance with the License.
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,6, You may obtain a copy of the License at
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,8,     http://www.apache.org/licenses/LICENSE-2.0
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,13, See the License for the specific language governing permissions and
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,14, limitations under the License.
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,17,ackage com.google.javascript.jscomp;
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,19,mport com.google.javascript.rhino.Node;
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,22, A CleanupPass implementation that will remove all Global Vars contributed by
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,23, the original file.
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,25, @author tylerg@google.com (Tyler Goodwin)
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,27,ublic class GlobalVarCleanupPass implements HotSwapCompilerPass {
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,29,ublic GlobalVarCleanupPass(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,32,Override
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,33,"ublic void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,36,Override
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,37,"ublic void process(Node externs, Node root) {"
False,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,src/com/google/javascript/jscomp/GlobalVarCleanupPass.java,38,/ GlobalVarCleanupPass should not do work during process.
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,652,* Removes the index's reference to a property on the given type (if it is
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,653,"* currently registered). If the property is not registered on the type yet,"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,654,* this method will not change internal state.
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,656,* @param propertyName the name of the property to unregister
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,657,* @param type the type to unregister the property on.
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,659,"public void unregisterPropertyOnType(String propertyName, JSType type) {"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,660,"Map<String, ObjectType> typeSet ="
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,661,eachRefTypeIndexedByProperty.get(propertyName);
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,662,if (typeSet != null) {
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,663,typeSet.remove(type.toObjectType().getReferenceName());
True,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,154,@Override
True,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,155,public boolean removeProperty(String name) {
True,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,156,return false;
False,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,335,oolean removeProperty(String propertyName) {
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,335,public boolean removeProperty(String propertyName) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,246,@Override
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,247,public boolean removeProperty(String name) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,248,return properties.remove(name) != null;
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,248,@Override
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,249,public boolean removeProperty(String name) {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,250,return referencedObjType == null ? false :
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,251,referencedObjType.removeProperty(name);

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,229,* Set if RegExp global properties are used.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,230,* @param references Whether there are references to the RegExp global object
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,231,*     properties.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,233,abstract void setHasRegExpGlobalReferences(boolean references);
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,236,* @return Whether the AST constains references to the RegExp global object
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,237,*     properties.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,239,abstract boolean hasRegExpGlobalReferences();
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,2,* Copyright 2010 Google Inc.
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,16,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,18,import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,19,import com.google.javascript.jscomp.mozilla.rhino.Token;
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,20,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,23,* Look for references to the global RegExp object that would cause
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,24,* regular expressions to be unoptimizable.
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,26,* @author johnlenz@google.com (John Lenz)
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,28,class CheckRegExp extends AbstractPostOrderCallback implements CompilerPass {
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,30,// TODO(johnlenz): Get this warning turned on by default.
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,31,static final DiagnosticType REGEXP_REFERENCE =
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,32,"DiagnosticType.disabled(""JSC_REGEXP_REFERENCE"","
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,33,"""References to the global RegExp object prevents "" +"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,34,"""optimization of regular expressions."");"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,36,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,37,private boolean globalRegExpPropertiesUsed = false;
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,39,public boolean isGlobalRegExpPropertiesUsed() {
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,40,return globalRegExpPropertiesUsed;
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,43,public CheckRegExp(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,44,this.compiler = compiler;
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,47,@Override
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,48,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,49,"NodeTraversal.traverse(compiler, root, this);"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,52,@Override
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,53,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,54,if (NodeUtil.isReferenceName(n)) {
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,55,String name = n.getString();
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,56,"if (name.equals(""RegExp"") && t.getScope().getVar(name) == null) {"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,57,if (parent.getType() != Token.NEW || n != parent.getFirstChild()) {
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,58,"t.report(n, REGEXP_REFERENCE);"
True,src/com/google/javascript/jscomp/CheckRegExp.java,src/com/google/javascript/jscomp/CheckRegExp.java,59,globalRegExpPropertiesUsed = true;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,115,* Whether to assume there are references to the RegExp Global object
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,116,* properties.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,118,private boolean hasRegExpGlobalReferences = true;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1745,@Override
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1746,boolean hasRegExpGlobalReferences() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1747,return hasRegExpGlobalReferences;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1750,@Override
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1751,void setHasRegExpGlobalReferences(boolean references) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1752,hasRegExpGlobalReferences = references;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,219,if (options.computeFunctionSideEffects) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,220,checks.add(checkRegExp);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,820,/** Checks for RegExp references. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,821,private final PassFactory checkRegExp =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,822,"new PassFactory(""checkRegExp"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,823,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,824,protected CompilerPass createInternal(final AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,825,final CheckRegExp pass = new CheckRegExp(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,827,return new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,828,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,829,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,830,"pass.process(externs, root);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,831,compiler.setHasRegExpGlobalReferences(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,832,pass.isGlobalRegExpPropertiesUsed());
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,50,"tatic final String DIAGNOSTIC_GROUP_NAMES = ""accessControls, checkVars, "" +"
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,51,"checkTypes, deprecated, fileoverviewTags, invalidCasts, "" +"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,50,"static final String DIAGNOSTIC_GROUP_NAMES = ""accessControls, checkRegExp,"" +"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,51,"""checkTypes, checkVars, deprecated, fileoverviewTags, invalidCasts, "" +"
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,107,ublic static DiagnosticGroup CHECK_VARIABLES =
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,108,"iagnosticGroups.registerGroup(""checkVars"","
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,109,ew DiagnosticGroup(
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,110,"arCheck.UNDEFINED_VAR_ERROR,"
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,111,yntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR));
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,107,public static DiagnosticGroup CHECK_REGEXP =
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,108,"DiagnosticGroups.registerGroup(""checkRegExp"","
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,109,new DiagnosticGroup(
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,110,CheckRegExp.REGEXP_REFERENCE));
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,118,public static DiagnosticGroup CHECK_VARIABLES =
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,119,"DiagnosticGroups.registerGroup(""checkVars"","
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,120,new DiagnosticGroup(
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,121,"VarCheck.UNDEFINED_VAR_ERROR,"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,122,SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR));
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,21,import com.google.common.base.Predicates;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,30,import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,82,private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,83,new Predicate<Node>() {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,84,@Override
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,85,public boolean apply(Node n) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,86,"// When the node is null it means, we reached the implicit return"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,87,// where the function returns (possibly without an return statement)
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,88,if (n == null) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,89,return false;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,92,// TODO(user): We only care about calls to functions that
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,93,// passes one of the dependent variable to a non-sideeffect free
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,94,// function.
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,95,if (NodeUtil.isCall(n) && NodeUtil.functionCallHasSideEffects(n)) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,96,return true;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,99,if (NodeUtil.isNew(n) && NodeUtil.constructorCallHasSideEffects(n)) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,100,return true;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,103,for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,104,if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,105,return true;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,108,return false;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,265,// The right of the definition has side effect:
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,266,"// Example, for x:"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,267,"// x = readProp(b), modifyProp(b); print(x);"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,268,"if (checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)) {"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,269,return false;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,272,"// Similar check as the above but this time, all the sub-expressions"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,273,// left of the use of the variable.
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,274,"// x = readProp(b); modifyProp(b), print(x);"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,275,"if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,276,return false;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,279,// Similar side effect check as above but this time the side effect is
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,280,// else where along the path.
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,281,// x = readProp(b); while(modifyProp(b)) {}; print(x);
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,282,"CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,283,"pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>("
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,284,"cfg,"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,285,"cfg.getDirectedGraphNode(defCfgNode),"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,286,"cfg.getDirectedGraphNode(useCfgNode),"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,287,"SIDE_EFFECT_PREDICATE,"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,288,Predicates.
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,289,"<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,290,false);
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,291,if (pathCheck.somePathsSatisfyPredicate()) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,292,return false;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,431,"* Given an expression by its root and sub-expression n, return true if there"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,432,* the predicate is true for some expression on the right of n.
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,434,* Example:
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,436,"* NotChecked(), NotChecked(), n, Checked(), Checked();"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,438,private static boolean checkRightOf(
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,439,"Node n, Node expressionRoot, Predicate<Node> predicate) {"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,440,for (Node p = n; p != expressionRoot; p = p.getParent()) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,441,for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,442,if (predicate.apply(cur)) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,443,return true;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,447,return false;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,451,"* Given an expression by its root and sub-expression n, return true if there"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,452,* the predicate is true for some expression on the left of n.
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,454,* Example:
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,456,"* Checked(), Checked(), n, NotChecked(), NotChecked();"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,458,private static boolean checkLeftOf(
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,459,"Node n, Node expressionRoot, Predicate<Node> predicate) {"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,460,for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,461,for (Node cur = p.getParent().getFirstChild(); cur != p;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,462,cur = cur.getNext()) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,463,if (predicate.apply(cur)) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,464,return true;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,468,return false;
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,41,f (parent.getType() == Token.BLOCK || parent.getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,41,if (parent != null
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,42,&& (parent.getType() == Token.BLOCK
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,43,|| parent.getType() == Token.SCRIPT)) {
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,2,* Copyright 2010 Google Inc.
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,20,* @author johnlenz@google.com (John Lenz)
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,22,public class CheckRegExpTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,23,CheckRegExp last = null;
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,25,public CheckRegExpTest() {
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,26,"super(""var RegExp;"", true);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,29,@Override
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,30,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,31,compiler.options.setWarningLevel(
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,32,"DiagnosticGroups.CHECK_REGEXP, CheckLevel.WARNING);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,33,last = new CheckRegExp(compiler);
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,34,return last;
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,37,"private void testReference(String code, boolean expected) {"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,38,"testSame(code, (expected) ? CheckRegExp.REGEXP_REFERENCE : null);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,39,"assertEquals(expected, last.isGlobalRegExpPropertiesUsed());"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,42,public void testRegExp() {
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,43,// creating regexp's is ok
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,44,"testReference(""new RegExp();"", false);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,45,"testReference(""var x = new RegExp();"", false);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,47,// Any other reference isn't
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,48,"testReference(""RegExp.test();"", true);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,49,"testReference(""var x = RegExp.test();"", true);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,50,"testReference(""RegExp.exec();"", true);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,51,"testReference(""RegExp.$1;"", true);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,52,"testReference(""RegExp.foobar;"", true);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,54,// Aliases aren't allowed
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,55,"testReference(""var x = RegExp;"", true);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,56,"testReference(""var x = RegExp; x.test()"", true);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,58,// No RegExp reference is ok
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,59,"testReference(""var x;"", false);"
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,61,// Local RegExp is ok
True,test/com/google/javascript/jscomp/CheckRegExpTest.java,test/com/google/javascript/jscomp/CheckRegExpTest.java,62,"testReference(""function f() {var RegExp; RegExp.test();}"", false);"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,19,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,28,"public static final String EXTERN_FUNCTIONS = """" +"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,29,"""/** @nosideeffects */ function noSFX() {} \n"" +"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,30,"""                      function hasSFX() {} \n"";"
False,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,32,rotected CompilerPass getProcessor(Compiler compiler) {
False,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,33,eturn new FlowSensitiveInlineVariables(compiler);
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,39,protected CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,40,//return new FlowSensitiveInlineVariables(compiler);
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,41,return new CompilerPass() {
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,42,@Override
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,43,"public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,44,"(new MarkNoSideEffectCalls(compiler)).process(externs, root);"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,45,"(new FlowSensitiveInlineVariables(compiler)).process(externs, root);"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,92,public void testAssignmentBeforeDefinition() {
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,93,"inline(""x = 1; var x = 0; print(x)"",""x = 1; var x; print(0)"" );"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,282,// TODO(user): These should be inlinable.
False,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,279,"for(var x = 0; x < 10; x++) {j = x.next()};"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,298,"""for(i = 0; i < 10; i++) {j = x.next()}"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,307,public void testInlineAcrossSideEffect1() {
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,308,"inline(""var y; var x = noSFX(y); print(x)"", ""var y;var x;print(noSFX(y))"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,311,public void testInlineAcrossSideEffect2() {
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,312,// Think noSFX() as a function that reads y.foo and return it
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,313,"// and SFX() write some new value of y.foo. If that's the case,"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,314,// inlining across hasSFX() is not valid.
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,316,// This is a case where hasSFX is right of the source of the inlining.
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,317,"noInline(""var y; var x = noSFX(y), z = hasSFX(y); print(x)"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,318,"noInline(""var y; var x = noSFX(y), z = new hasSFX(y); print(x)"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,319,"noInline(""var y; var x = new noSFX(y), z = new hasSFX(y); print(x)"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,322,public void testInlineAcrossSideEffect3() {
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,323,// This is a case where hasSFX is left of the destination of the inlining.
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,324,"noInline(""var y; var x = noSFX(y); hasSFX(y), print(x)"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,325,"noInline(""var y; var x = noSFX(y); new hasSFX(y), print(x)"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,326,"noInline(""var y; var x = new noSFX(y); new hasSFX(y), print(x)"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,329,public void testInlineAcrossSideEffect4() {
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,330,// This is a case where hasSFX is some control flow path between the
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,331,// source and its destination.
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,332,"noInline(""var y; var x = noSFX(y); hasSFX(y); print(x)"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,333,"noInline(""var y; var x = noSFX(y); new hasSFX(y); print(x)"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,334,"noInline(""var y; var x = new noSFX(y); new hasSFX(y); print(x)"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,337,public void testCanInlineAcrossNoSideEffect() {
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,338,"inline(""var y; var x = noSFX(Y), z = noSFX(); noSFX(); noSFX(), print(x)"","
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,339,"""var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(Y))"");"
False,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,304,"est(""function _func() {"" + input + ""}"","
False,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,305,"function _func() {"" + expected + ""}"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,358,"test(EXTERN_FUNCTIONS, ""function _func() {"" + input + ""}"","
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,359,"""function _func() {"" + expected + ""}"", null, null);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1175,bjectType constraintObj =
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1176,bjectType.cast(constraint.restrictByNotNullOrUndefined());
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1177,f (constraintObj != null) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1178,ype.matchConstraint(constraintObj);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1175,type.matchConstraint(constraint);
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1243,ublic void matchConstraint(ObjectType constraint) {}
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1243,public void matchConstraint(JSType constraint) {}
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,556,ublic void matchConstraint(ObjectType constraintObj) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,556,public void matchConstraint(JSType constraint) {
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,564,/ param constraintObj {{prop: (number|undefined)}}
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,565,/ function f(constraintObj) {}
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,564,// param constraint {{prop: (number|undefined)}}
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,565,// function f(constraint) {}
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,571,f (constraintObj.isRecordType()) {
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,572,or (String prop : constraintObj.getOwnPropertyNames()) {
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,573,SType propType = constraintObj.getPropertyType(prop);
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,574,f (!isPropertyTypeDeclared(prop)) {
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,575,SType typeToInfer = propType;
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,576,f (!hasProperty(prop)) {
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,577,ypeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,578,getLeastSupertype(propType);
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,580,"efineInferredProperty(prop, typeToInfer, null);"
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,571,if (constraint.isRecordType()) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,572,matchRecordTypeConstraint(constraint.toObjectType());
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,573,} else if (constraint.isUnionType()) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,574,for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,575,if (alt.isRecordType()) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,576,matchRecordTypeConstraint(alt.toObjectType());
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,582,public void matchRecordTypeConstraint(ObjectType constraintObj) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,583,for (String prop : constraintObj.getOwnPropertyNames()) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,584,JSType propType = constraintObj.getPropertyType(prop);
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,585,if (!isPropertyTypeDeclared(prop)) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,586,JSType typeToInfer = propType;
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,587,if (!hasProperty(prop)) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,588,typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,589,.getLeastSupertype(propType);
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,591,"defineInferredProperty(prop, typeToInfer, null);"
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,424,ublic void matchConstraint(ObjectType constraint) {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,424,public void matchConstraint(JSType constraint) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,591,ublic void matchConstraint(ObjectType constraintObj) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,591,public void matchConstraint(JSType constraint) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,593,lternate.matchConstraint(constraintObj);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,593,alternate.matchConstraint(constraint);
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1007,public void testRecordInference() {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1008,inFunction(
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1009,"""/** @param {{a: (boolean|undefined)}|{b: (string|undefined)}} x */"" +"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1010,"""function f(x) {}"" +"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1011,"""var out = {};"" +"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1012,"""f(out);"");"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1013,"assertEquals(""{a: (boolean|undefined), b: (string|undefined)}"","
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1014,"getType(""out"").toString());"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1017,public void testIssue785() {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1018,"inFunction(""/** @param {string|{prop: (string|undefined)}} x */"" +"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1019,"""function f(x) {}"" +"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1020,"""var out = {};"" +"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1021,"""f(out);"");"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1022,"assertEquals(""{prop: (string|undefined)}"", getType(""out"").toString());"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,19,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,23,* Records whether the code has changed since the last reset.
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,25,* @author dimvar@google.com (Dimitris Vardoulakis)
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,23,nterface CodeChangeHandler {
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,25,"/ TODO(nicksantos): Add more to this interface, for more fine-grained"
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,26,/ change reporting.
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,28,** Report a change to the AST. */
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,29,oid reportChange();
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,27,class CodeChangeHandler {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,28,private boolean hasChanged = false;
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,32, A trivial change handler that just records whether the code
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,33, has changed since the last reset.
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,35,tatic final class RecentChange implements CodeChangeHandler {
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,36,rivate boolean hasChanged = false;
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,30,/** Report a change to some unspecified node of the AST. */
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,31,public void reportChange() {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,32,hasChanged = true;
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,38,Override
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,39,ublic void reportChange() {
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,40,asChanged = true;
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,35,/** Report a change to a specific function in the AST. */
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,36,public void reportChangedFun(Node n) {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,37,hasChanged = true;
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,43,oolean hasCodeChanged() {
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,44,eturn hasChanged;
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,40,/** Report that a function node has been removed from the AST */
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,41,public void reportDeletedFun(Node n) {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,42,hasChanged = true;
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,47,oid reset() {
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,48,asChanged = false;
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,45,void reset() {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,46,hasChanged = false;
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,53, A change handler that throws an exception if any changes are made.
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,55,tatic final class ForbiddenChange implements CodeChangeHandler {
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,56,Override
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,57,ublic void reportChange() {
False,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,58,"hrow new IllegalStateException(""Code changes forbidden"");"
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,49,boolean hasCodeChanged() {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,50,return hasChanged;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,237, Creates n Compiler that reports errors and warnings to an output
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,238, stream.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,237,* Creates a Compiler that reports errors and warnings to an output stream.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1965,rotected final CodeChangeHandler.RecentChange recentChange =
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1966,ew CodeChangeHandler.RecentChange();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1964,protected final CodeChangeHandler recentChange = new CodeChangeHandler();
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,2,* Copyright 2013 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,19,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,22,* A change handler that throws an exception if any changes are made.
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,23,* @author nicksantos@google.com (Nick Santos)
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,24,* @author dimvar@google.com (Dimitris Vardoulakis)
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,26,final class ForbiddenChange extends CodeChangeHandler {
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,28,@Override
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,29,public void reportChange() {
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,30,"throw new IllegalStateException(""Code changes forbidden"");"
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,33,@Override
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,34,public void reportChangedFun(Node n) {
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,35,"throw new IllegalStateException(""Code changes forbidden"");"
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,38,@Override
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,39,public void reportDeletedFun(Node n) {
True,src/com/google/javascript/jscomp/ForbiddenChange.java,src/com/google/javascript/jscomp/ForbiddenChange.java,40,"throw new IllegalStateException(""Code changes forbidden"");"
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,45,tatic private class ScopeState {
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,45,private static class ScopeState {
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,58,tatic private class StateStack {
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,58,private static class StateStack {
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,84,rivate class PeepholeChangeHandler implements CodeChangeHandler {
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,84,private class PeepholeChangeHandler extends CodeChangeHandler {
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,132,hile(c != null) {
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,132,while (c != null) {
False,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,149,& node.getParent() != null
True,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java,149,&& node.getParent() != null
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,23,mport com.google.javascript.jscomp.CodeChangeHandler.RecentChange;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,51,rivate final RecentChange codeChange = new RecentChange();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,50,private final CodeChangeHandler codeChange = new CodeChangeHandler();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,68,"/** For each pass, keep track of the runtime, the size changes, etc */"
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,68,rivate final CodeChangeHandler.RecentChange recentChange =
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,69,ew CodeChangeHandler.RecentChange();
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,68,private final CodeChangeHandler recentChange = new CodeChangeHandler();
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,114,odeChangeHandler handler =
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,115,ew CodeChangeHandler.ForbiddenChange();
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,114,CodeChangeHandler handler = new ForbiddenChange();
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,24,mport com.google.javascript.jscomp.CodeChangeHandler.RecentChange;
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,744,ecentChange recentChange = new RecentChange();
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,743,CodeChangeHandler recentChange = new  CodeChangeHandler();

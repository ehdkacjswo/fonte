is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,175,"{ ""cannot solve degree {0} equation"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,176,"""impossible de r\u00e9soudre une \u00e9quation de degr\u00e9 {0}"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,177," ""internal error: please file a bug report at https://issues.apache.org/jira/browse/MATH"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,178,"erreur interne : veuillez enregistrer un rapport de bogue sur https://issues.apache.org/jira/browse/MATH"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,241,"{ ""cannot substitute an element from an empty array"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,242,"""impossible de substituer un \u00e9l\u00e9ment dans un tableau vide"" },"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,142,* Removes the most recent value from the dataset.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,144,public void removeMostRecentValue() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,145,eDA.discardMostRecentElements(1);
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,149,* Replaces the most recently stored value with the given value.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,150,* There must be at least one element stored to call this method.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,152,* @param v the value to replace the most recent stored value
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,153,* @return replaced value
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,155,public double replaceMostRecentValue(double v) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,156,return eDA.substituteMostRecentElement(v);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,298,public synchronized double substituteMostRecentElement(double value) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,299,if (numElements < 1) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,300,"throw MathRuntimeException.createArrayIndexOutOfBoundsException(""cannot substitute an element from an empty array"","
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,301,null);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,304,double discarded = internalArray[startIndex + (numElements - 1)];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,306,internalArray[startIndex + (numElements - 1)] = value;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,308,return discarded;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,389,"discardExtremeElements(i,true);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,394,"* Discards the <code>i<code> last elements of the array.  For example,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,395,"* if the array contains the elements 1,2,3,4, invoking"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,396,* <code>discardMostRecentElements(2)</code> will cause the last two elements
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,397,"* to be discarded, leaving 1,2 in the array.  Throws illegalArgumentException"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,398,* if i exceeds numElements.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,400,* @param i  the number of elements to discard from the end of the array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,401,* @throws IllegalArgumentException if i is greater than numElements.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,403,public synchronized void discardMostRecentElements(int i) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,405,"discardExtremeElements(i,false);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,410,"* Discards the <code>i<code> first or last elements of the array,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,411,* depending on the value of <code>front</code>.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,412,"* For example, if the array contains the elements 1,2,3,4, invoking"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,413,"* <code>discardExtremeElements(2,false)</code> will cause the last two elements"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,414,"* to be discarded, leaving 1,2 in the array."
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,415,"* For example, if the array contains the elements 1,2,3,4, invoking"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,416,"* <code>discardExtremeElements(2,true)</code> will cause the first two elements"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,417,"* to be discarded, leaving 3,4 in the array."
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,418,* Throws illegalArgumentException
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,419,* if i exceeds numElements.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,421,* @param i  the number of elements to discard from the front/end of the array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,422,* @param front true if elements are to be discarded from the front
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,423,"* of the array, false if elements are to be discarded from the end"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,424,* of the array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,425,* @throws IllegalArgumentException if i is greater than numElements.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,427,"private synchronized void discardExtremeElements(int i,boolean front) {"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,385,tartIndex += i;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,438,if (front) startIndex += i;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,21,import org.apache.commons.math.util.MathUtils;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,78,public void testRemoval() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,80,final DescriptiveStatistics dstat = new DescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,82,"checkremoval(dstat, 1, 6.0, 0.0, Double.NaN);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,83,"checkremoval(dstat, 3, 5.0, 3.0, 4.5);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,84,"checkremoval(dstat, 6, 3.5, 2.5, 3.0);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,85,"checkremoval(dstat, 9, 3.5, 2.5, 3.0);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,86,"checkremoval(dstat, DescriptiveStatistics.INFINITE_WINDOW, 3.5, 2.5, 3.0);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,90,"public void checkremoval(DescriptiveStatistics dstat, int wsize,"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,91,"double mean1, double mean2, double mean3) {"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,93,dstat.setWindowSize(wsize);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,94,dstat.clear();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,96,for (int i = 1 ; i <= 6 ; ++i) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,97,dstat.addValue(i);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,100,"assertTrue(MathUtils.equals(mean1, dstat.getMean()));"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,101,dstat.replaceMostRecentValue(0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,102,"assertTrue(MathUtils.equals(mean2, dstat.getMean()));"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,103,dstat.removeMostRecentValue();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,104,"assertTrue(MathUtils.equals(mean3, dstat.getMean()));"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,317,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,318,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,319,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,320,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,321,"assertEquals( ""Number of elements should be 10"", 10, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,323,((ResizableDoubleArray)da).discardMostRecentElements(2);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,324,"assertEquals( ""Number of elements should be 8"", 8, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,332,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,333,((ResizableDoubleArray)da).discardMostRecentElements(-1);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,334,"fail( ""Trying to discard a negative number of element is not allowed"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,335,} catch( Exception e ){
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,344,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,345,((ResizableDoubleArray)da).discardMostRecentElements( 10000 );
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,346,"fail( ""You can't discard more elements than the array contains"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,347,} catch( Exception e ){
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,352,public void testSubstitute() {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,354,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,355,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,356,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,357,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,358,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,359,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,360,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,361,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,362,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,363,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,364,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,365,"assertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,367,((ResizableDoubleArray)da).substituteMostRecentElement(24);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,369,"assertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,371,try {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,372,((ResizableDoubleArray)da).discardMostRecentElements(10);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,373,} catch( Exception e ){
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,374,"fail( ""Trying to discard a negative number of element is not allowed"");"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,377,((ResizableDoubleArray)da).substituteMostRecentElement(24);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,379,"assertEquals( ""Number of elements should be 1"", 1, da.getNumElements());"

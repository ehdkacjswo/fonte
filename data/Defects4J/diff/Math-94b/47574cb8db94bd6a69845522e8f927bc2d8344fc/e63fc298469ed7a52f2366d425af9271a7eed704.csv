is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,33,import org.apache.commons.math.util.ResizableDoubleArray;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,36, Abstract factory class for univariate statistical summaries.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,37,* Maintains a dataset of values of a single variable and computes descriptive
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,38,* statistics based on stored data. The {@link #getWindowSize() windowSize}
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,39,* property sets a limit on the number of values that can be stored in the
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,40,"* dataset.  The default value, INFINITE_WINDOW, puts no limit on the size of"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,41,"* the dataset.  This value should be used with caution, as the backing store"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,42,"* will grow without bound in this case.  For very large datasets,"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,43,"* {@link SummaryStatistics}, which does not store the dataset, should be used"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,44,* instead of this class. If <code>windowSize</code> is not INFINITE_WINDOW and
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,45,"* more values are added than can be stored in the dataset, new values are"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,46,"* added in a ""rolling"" manner, with new values replacing the ""oldest"" values"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,47,* in the dataset.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,49,* Note: this class is not threadsafe.  Use
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,50,* {@link SynchronizedDescriptiveStatistics} if concurrent access from multiple
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,51,* threads is required.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,40,"ublic abstract class DescriptiveStatistics implements StatisticalSummary, Serializable {"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,55,"public class DescriptiveStatistics implements StatisticalSummary, Serializable {"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,60,/** hold the window size **/
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,61,protected int windowSize = INFINITE_WINDOW;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,64,*  Stored data values
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,66,protected ResizableDoubleArray eDA = new ResizableDoubleArray();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,68,// Cached implementation instances
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,69,// Can be reset by setters
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,70,private UnivariateStatistic meanImpl = null;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,71,private UnivariateStatistic geometricMeanImpl = null;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,72,private UnivariateStatistic kurtosisImpl = null;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,73,private UnivariateStatistic maxImpl = null;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,74,private UnivariateStatistic minImpl = null;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,75,private UnivariateStatistic percentileImpl = null;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,76,private UnivariateStatistic skewnessImpl = null;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,77,private UnivariateStatistic varianceImpl = null;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,78,private UnivariateStatistic sumsqImpl = null;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,79,private UnivariateStatistic sumImpl = null;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,82,* Construct a DescriptiveStatistics instance with an infinite window
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,84,public DescriptiveStatistics() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,88,* Construct a DescriptiveStatistics instance with the specified window
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,90,* @param window the window size.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,92,public DescriptiveStatistics(int window) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,93,super();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,94,setWindowSize(window);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,49, @return a new factory.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,101,* @return a new instance.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,106,* @deprecated to be removed in commons-math 2.0
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,61, @return a new factory.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,114,* @return a new DescriptiveStatistics instance.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,115,* @deprecated to be removed in commons-math 2.0
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,85, Adds the value to the set of numbers
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,139,* Adds the value to the dataset. If the dataset is at the maximum size
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,140,"* (i.e., the number of stored elements equals the currently configured"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,141,"* windowSize), the first (oldest) element in the dataset is discarded"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,142,* to make room for the new value.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,88,ublic abstract void addValue(double v);
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,146,public void addValue(double v) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,147,if (windowSize != INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,148,if (getN() == windowSize) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,149,eDA.addElementRolling(v);
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,150,} else if (getN() < windowSize) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,151,eDA.addElement(v);
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,153,} else {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,154,eDA.addElement(v);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,96,eturn apply(new Mean());
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,164,return apply(getMeanImpl());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,106,eturn apply(new GeometricMean());
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,174,return apply(getGeometricMeanImpl());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,115,eturn apply(new Variance());
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,183,return apply(getVarianceImpl());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,137, measure of the assymetry of a given distribution.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,205,* measure of the asymmetry of a given distribution.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,142,eturn apply(new Skewness());
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,210,return apply(getSkewnessImpl());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,152,eturn apply(new Kurtosis());
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,220,return apply(getKurtosisImpl());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,160,eturn apply(new Max());
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,228,return apply(getMaxImpl());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,168,eturn apply(new Min());
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,236,return apply(getMinImpl());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,175,ublic abstract long getN();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,243,public long getN() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,244,return eDA.getNumElements();
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,182,eturn apply(new Sum());
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,252,return apply(getSumImpl());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,191,eturn apply(new SumOfSquares());
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,261,return apply(getSumsqImpl());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,197,ublic abstract void clear();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,267,public void clear() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,268,eDA.clear();
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,200, Univariate has the ability to return only measures for the
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,201, last N elements added to the set of values.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,273,* Returns the maximum number of values that can be stored in the
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,274,"* dataset, or INFINITE_WINDOW (-1) if there is no limit."
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,205,ublic abstract int getWindowSize();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,278,public int getWindowSize() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,279,return windowSize;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,209," to the values returned by Univariate.  For example, if"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,284,"* to the reported statistics.  For example, if"
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,216,ublic abstract void setWindowSize(int windowSize);
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,291,public void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,292,if (windowSize < 1) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,293,if (windowSize != INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,294,"throw new IllegalArgumentException(""window size must be positive."");"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,298,this.windowSize = windowSize;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,300,// We need to check to see if we need to discard elements
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,301,// from the front of the array.  If the windowSize is less than
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,302,// the current number of elements.
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,303,if (windowSize != INFINITE_WINDOW && windowSize < eDA.getNumElements()) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,304,eDA.discardFrontElements(eDA.getNumElements() - windowSize);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,227,ublic abstract double[] getValues();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,317,public double[] getValues() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,318,double[] copiedArray = new double[eDA.getNumElements()];
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,319,"System.arraycopy(eDA.getElements(), 0, copiedArray,"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,320,"0, eDA.getNumElements());"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,321,return copiedArray;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,248,ublic abstract double getElement(int index);
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,343,public double getElement(int index) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,344,return eDA.getElement(index);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,297,ublic abstract double apply(UnivariateStatistic stat);
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,394,public double apply(UnivariateStatistic stat) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,395,"return stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,398,// Implementation getters and setter
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,401,* @return the meanImpl
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,403,public UnivariateStatistic getMeanImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,404,if (meanImpl == null) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,405,meanImpl = new Mean();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,407,return meanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,411,* @param meanImpl the meanImpl to set
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,413,public void setMeanImpl(UnivariateStatistic meanImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,414,this.meanImpl = meanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,418,* @return the geometricMeanImpl
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,420,public UnivariateStatistic getGeometricMeanImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,421,if (geometricMeanImpl == null) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,422,geometricMeanImpl = new GeometricMean();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,424,return geometricMeanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,428,* @param geometricMeanImpl the geometricMeanImpl to set
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,430,public void setGeometricMeanImpl(UnivariateStatistic geometricMeanImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,431,this.geometricMeanImpl = geometricMeanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,435,* @return the kurtosisImpl
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,437,public UnivariateStatistic getKurtosisImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,438,if (kurtosisImpl == null) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,439,kurtosisImpl = new Kurtosis();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,441,return kurtosisImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,445,* @param kurtosisImpl the kurtosisImpl to set
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,447,public void setKurtosisImpl(UnivariateStatistic kurtosisImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,448,this.kurtosisImpl = kurtosisImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,452,* @return the maxImpl
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,454,public UnivariateStatistic getMaxImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,455,if (maxImpl == null) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,456,maxImpl = new Max();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,458,return maxImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,462,* @param maxImpl the maxImpl to set
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,464,public void setMaxImpl(UnivariateStatistic maxImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,465,this.maxImpl = maxImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,469,* @return the minImpl
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,471,public UnivariateStatistic getMinImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,472,if (minImpl == null) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,473,minImpl =  new Min();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,475,return minImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,479,* @param minImpl the minImpl to set
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,481,public void setMinImpl(UnivariateStatistic minImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,482,this.minImpl = minImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,486,* @return the percentileImpl
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,488,public UnivariateStatistic getPercentileImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,489,if (percentileImpl == null) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,490,percentileImpl = new Percentile();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,492,return percentileImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,496,* @param percentileImpl the percentileImpl to set
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,498,public void setPercentileImpl(UnivariateStatistic percentileImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,499,this.percentileImpl = percentileImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,503,* @return the skewnessImpl
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,505,public UnivariateStatistic getSkewnessImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,506,if (skewnessImpl == null) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,507,skewnessImpl = new Skewness();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,509,return skewnessImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,513,* @param skewnessImpl the skewnessImpl to set
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,515,public void setSkewnessImpl(UnivariateStatistic skewnessImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,516,this.skewnessImpl = skewnessImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,520,* @return the varianceImpl
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,522,public UnivariateStatistic getVarianceImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,523,if (varianceImpl == null) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,524,varianceImpl =  new Variance();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,526,return varianceImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,530,* @param varianceImpl the varianceImpl to set
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,532,public void setVarianceImpl(UnivariateStatistic varianceImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,533,this.varianceImpl = varianceImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,537,* @return the sumsqImpl
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,539,public UnivariateStatistic getSumsqImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,540,if (sumsqImpl == null) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,541,sumsqImpl = new SumOfSquares();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,543,return sumsqImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,547,* @param sumsqImpl the sumsqImpl to set
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,549,public void setSumsqImpl(UnivariateStatistic sumsqImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,550,this.sumsqImpl = sumsqImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,554,* @return the sumImpl
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,556,public UnivariateStatistic getSumImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,557,if (sumImpl == null) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,558,sumImpl = new Sum();
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,560,return sumImpl;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,564,* @param sumImpl the sumImpl to set
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,566,public void setSumImpl(UnivariateStatistic sumImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,567,this.sumImpl = sumImpl;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,34,** hold the window size **/
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,35,rotected int windowSize;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,38,  Stored data values
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,40,rotected ResizableDoubleArray eDA;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,46,his(INFINITE_WINDOW);
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,38,super();
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,54,uper();
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,55,DA = new ResizableDoubleArray();
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,56,etWindowSize(window);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,60, Access the window size.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,61, @return the current window size.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,63,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,64,eturn windowSize;
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,46,super(window);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,68, @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getValues()
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,70,ublic double[] getValues() {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,72,ouble[] copiedArray = new double[eDA.getNumElements()];
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,73,ystem.arraycopy(
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,74,"DA.getElements(),"
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,75,","
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,76,"opiedArray,"
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,77,","
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,78,DA.getNumElements());
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,79,eturn copiedArray;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,83, @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getElement(int)
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,85,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,86,eturn eDA.getElement(index);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,90, @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getN()
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,92,ublic long getN() {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,93,eturn eDA.getNumElements();
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,97, @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#addValue(double)
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,99,ublic void addValue(double v) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,100,f (windowSize != INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,101,f (getN() == windowSize) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,102,DA.addElementRolling(v);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,103, else if (getN() < windowSize) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,104,DA.addElement(v);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,106, else {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,107,DA.addElement(v);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,112, @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#clear()
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,50,* Resets all statistics and storage
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,115,DA.clear();
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,119, @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#setWindowSize(int)
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,121,ublic void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,122,f (windowSize < 1) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,123,f (windowSize != INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,124,"hrow new IllegalArgumentException(""window size must be positive."");"
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,128,his.windowSize = windowSize;
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,130,/ We need to check to see if we need to discard elements
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,131,/ from the front of the array.  If the windowSize is less than
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,132,/ the current number of elements.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,133,f (windowSize != INFINITE_WINDOW && windowSize < eDA.getNumElements()) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,134,DA.discardFrontElements(eDA.getNumElements() - windowSize);
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,139, Apply the given statistic to this univariate collection.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,140, @param stat the statistic to apply
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,141, @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,143,ublic double apply(UnivariateStatistic stat) {
False,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,144,"eturn stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());"
True,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImpl.java,53,super.clear();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,28, Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,28,* Test cases for the DescriptiveStatistics implementations.
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,31,* @deprecated should be moved down into DescriptiveStatisticsTest
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsAbstractTest.java,32,*   when DescriptiveStatisticsImpl is removed in 2.0
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,20, Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,20,* Test cases for the DescriptiveStatisticsImpl class.
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,21,* @deprecated - to be removed in 2.0 with DescriptiveStatisticsImpl
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,7,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,12,* governing permissions and limitations under the License.
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,14,package org.apache.commons.math.stat.descriptive;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,16,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,17,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,20,* Test cases for the DescriptiveStatistics class.
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,21,"* When DescriptiveStatisticsImpl is removed, this class should replace"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,22,* DescriptiveStatisticsAbstractTest
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,24,"* @version $Revision: 592121 $ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,25,*          2007) $
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,27,public final class DescriptiveStatisticsTest extends DescriptiveStatisticsAbstractTest {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,29,public DescriptiveStatisticsTest(String name) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,30,super(name);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,33,public static Test suite() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,34,TestSuite suite = new TestSuite(DescriptiveStatisticsTest.class);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,35,"suite.setName(""DescriptiveStatistics Tests"");"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,36,return suite;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,39,protected DescriptiveStatistics createDescriptiveStatistics() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,40,return new DescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,43,public void testSetterInjection() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,44,DescriptiveStatistics stats = new DescriptiveStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,45,stats.addValue(1);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,46,stats.addValue(3);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,47,"assertEquals(2, stats.getMean(), 1E-10);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,48,// Now lets try some new math
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,49,stats.setMeanImpl(new deepMean());
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,50,"assertEquals(42, stats.getMean(), 1E-10);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,54,* A new way to compute the mean
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,56,class deepMean implements UnivariateStatistic {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,57,"public double evaluate(double[] values, int begin, int length) {"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,58,return 42;
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,61,public double evaluate(double[] values) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,62,return 42;
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,46,** hold the window size **/
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,47,rotected int windowSize = DescriptiveStatistics.INFINITE_WINDOW;

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,28, @version $Revision: 1.12 $ $Date: 2004/02/20 06:22:39 $
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,28,* @version $Revision: 1.13 $ $Date: 2004/04/08 21:19:17 $
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,71," = midpoint(min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,71,"m = UnivariateRealSolverUtils.midpoint(min, max);"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,85," = midpoint(min, max);"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,85,"m = UnivariateRealSolverUtils.midpoint(min, max);"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,96, Compute the midpoint of two values.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,97, @param a first value.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,98, @param b second value.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,99, @return the midpoint.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,101,"ublic static double midpoint(double a, double b) {"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,102,eturn (a + b) * .5;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,3,* Copyright 2004 The Apache Software Foundation
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,5,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,6,*  you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,7,*  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,9,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,14,*  See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,15,*  limitations under the License.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,18,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,22,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,25,"* Implements <a href=""http://mathworld.wolfram.com/NewtonsMethod.html"">\"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,26,* Newton's Method</a> for finding zeros of real univariate functions. This
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,27,* algorithm will find only one zero in the given interval.  The function should
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,28,* be continuous but not necessarily smooth.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,30,* @version $Revision: 1.1 $ $Date: 2004/04/08 21:19:17 $
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,32,public class NewtonSolver extends UnivariateRealSolverImpl implements Serializable {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,34,/** The first derivative of the target function. */
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,35,private UnivariateRealFunction derivative;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,38,* Construct a solver for the given function.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,39,* @param f function to solve.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,41,public NewtonSolver(DifferentiableUnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,42,"super(f, 100, 1E-6);"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,43,derivative = f.derivative();
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,47,* Find a zero near the midpoint of <code>min</code> and <code>max</code>.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,48,* @param min the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,49,* @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,50,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,51,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,52,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,54,"public double solve(double min, double max) throws MathException {"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,55,"return solve(min, max, UnivariateRealSolverUtils.midpoint(min, max));"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,59,* Find a zero near the value <code>startValue</code>.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,60,* @param min the lower bound for the interval (ignored).
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,61,* @param max the upper bound for the interval (ignored).
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,62,* @param startValue the start value to use.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,63,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,64,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,65,*  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,67,"public double solve(double min, double max, double startValue)"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,68,throws MathException {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,70,clearResult();
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,72,double x0 = startValue;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,73,double x1;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,75,int i = 0;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,76,while (i < maximalIterationCount) {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,77,x1 = x0 - (f.value(x0) / derivative.value(x0));
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,79,if (Math.abs(x1 - x0) <= absoluteAccuracy) {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,81,"setResult(x1, i);"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,82,return x1;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,85,x0 = x1;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,86,++i;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,89,"throw new MathException(""Maximum number of iterations exceeded"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,44, @version $Revision: 1.13 $ $Date: 2004/02/22 22:01:29 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,44,* @version $Revision: 1.14 $ $Date: 2004/04/08 21:19:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,98,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,99,* solver is an implementation of Newton's Method.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,100,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,101,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,103,public abstract UnivariateRealSolver newNewtonSolver(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,104,DifferentiableUnivariateRealFunction f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,27, @version $Revision: 1.10 $ $Date: 2004/02/22 22:01:29 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,26,* @version $Revision: 1.11 $ $Date: 2004/04/08 21:19:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,71,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,72,* solver is an implementation of Newton's Method.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,73,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,74,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,76,public UnivariateRealSolver newNewtonSolver(
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,77,DifferentiableUnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,79,return new NewtonSolver(f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,22, @version $Revision: 1.7 $ $Date: 2004/02/21 21:35:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,22,* @version $Revision: 1.8 $ $Date: 2004/04/08 21:19:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,140,* Compute the midpoint of two values.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,141,* @param a first value.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,142,* @param b second value.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,143,* @return the midpoint.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,145,"public static double midpoint(double a, double b) {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,146,return (a + b) * .5;
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,3,* Copyright (c) 2003-2004 The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,5,"* Licensed under the Apache License, Version 2.0 (the ""License""); you may not"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,6,* use this file except in compliance with the License. You may obtain a copy
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,7,* of the License at
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,9,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,13,"* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,14,* License for the specific language governing permissions and limitations
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,15,* under the License.
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,18,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,20,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,22,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,25,* @version $Revision: 1.1 $ $Date: 2004/04/08 21:19:17 $
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,27,public final class NewtonSolverTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,31,public void testSinZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,32,DifferentiableUnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,33,double result;
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,35,UnivariateRealSolver solver = new NewtonSolver(f);
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,36,"result = solver.solve(3, 4);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,37,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,39,"result = solver.solve(1, 4);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,40,"assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,46,public void testQuinticZero() throws MathException {
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,47,DifferentiableUnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,48,double result;
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,50,UnivariateRealSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,51,"result = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,52,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,54,"result = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,55,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,57,"result = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,58,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,60,"result = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,61,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,63,"result = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,64,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,66,"result = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,67,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,69,"result = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,70,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,72,"result = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,73,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,75,"result = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,76,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,78,"result = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,79,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,81,"result = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,82,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,23, @version $Revision: 1.11 $ $Date: 2004/02/21 21:35:16 $
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,23,* @version $Revision: 1.12 $ $Date: 2004/04/08 21:19:17 $
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,25,ublic class QuinticFunction implements UnivariateRealFunction {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,25,public class QuinticFunction implements DifferentiableUnivariateRealFunction {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,34,* First derivative of quintic.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,36,ublic double firstDerivative(double x) throws MathException {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,37,eturn (5*x*x-3.75)*x*x+0.25;
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,34,public UnivariateRealFunction derivative() {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,35,return new UnivariateRealFunction() {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,36,public double value(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,37,return (5*x*x-3.75)*x*x+0.25;
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,28, @version $Revision: 1.11 $ $Date: 2004/02/21 21:35:16 $
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,28,* @version $Revision: 1.12 $ $Date: 2004/04/08 21:19:17 $
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,30,ublic class SinFunction implements UnivariateRealFunction {
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,30,public class SinFunction implements DifferentiableUnivariateRealFunction {
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,41,ublic double firstDerivative(double x) throws MathException {
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,42,eturn Math.cos(x);
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,41,public UnivariateRealFunction derivative() {
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,42,return new UnivariateRealFunction() {
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,43,public double value(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,44,return Math.cos(x);

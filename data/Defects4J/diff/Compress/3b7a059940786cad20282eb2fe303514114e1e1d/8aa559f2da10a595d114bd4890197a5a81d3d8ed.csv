is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,35,import static org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest;
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,135,ublic void submit(Callable<Object> callable) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,136,public final void submit(Callable<Object> callable) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,152,"ublic Callable<Object> createCallable(final ZipArchiveEntry zipArchiveEntry, final InputStreamSupplier source) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,153,"public final Callable<Object> createCallable(ZipArchiveEntry zipArchiveEntry, InputStreamSupplier source) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,158,"final ZipArchiveEntryRequest zipArchiveEntryRequest = createZipArchiveEntryRequest(zipArchiveEntry, source);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,159,inal ScatterZipOutputStream streamToUse = tlScatterStreams.get();
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,160,nputStream payload = source.get();
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,161,ry {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,162,"treamToUse.addArchiveEntry(zipArchiveEntry, payload, method);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,163, finally {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,164,ayload.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,161,tlScatterStreams.get().addArchiveEntry(zipArchiveEntryRequest);
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,52,inal ZipArchiveEntry entry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,52,final ZipArchiveEntryRequest zipArchiveEntryRequest;
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,55,inal int method;
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,58,"ublic CompressedEntry(ZipArchiveEntry entry, long crc, long compressedSize, int method, long size) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,59,his.entry = entry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,57,"public CompressedEntry(ZipArchiveEntryRequest zipArchiveEntryRequest, long crc, long compressedSize, long size) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,58,this.zipArchiveEntryRequest = zipArchiveEntryRequest;
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,62,his.method = method;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,65,* Update the original ZipArchiveEntry witg sizes/crc
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,66,* Do not use this methods from threads that did not create the instance itself !
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,67,* @return the zipeArchiveEntry that is basis for this request
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,71,ZipArchiveEntry entry = zipArchiveEntryRequest.getZipArchiveEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,70,ntry.setMethod(method);
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,75,entry.setMethod(zipArchiveEntryRequest.getMethod());
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,84, @param zipArchiveEntry The entry to write
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,85, @param payload         The content to write for the entry. The caller is responsible for closing this.
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,86, @param method          The compression method
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,89,* @param zipArchiveEntryRequest The entry to write.
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,89,"ublic void addArchiveEntry(ZipArchiveEntry zipArchiveEntry, InputStream payload, int method) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,90,"treamCompressor.deflate(payload, method);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,91,"tems.add(new CompressedEntry(zipArchiveEntry, streamCompressor.getCrc32(),"
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,92,"treamCompressor.getBytesWrittenForLastEntry(), method,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,93,treamCompressor.getBytesRead()));
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,92,public void addArchiveEntry(ZipArchiveEntryRequest zipArchiveEntryRequest) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,93,final InputStream payloadStream = zipArchiveEntryRequest.getPayloadStream();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,94,try {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,95,"streamCompressor.deflate(payloadStream, zipArchiveEntryRequest.getMethod());"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,96,} finally {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,97,payloadStream.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,99,"items.add(new CompressedEntry(zipArchiveEntryRequest, streamCompressor.getCrc32(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,100,"streamCompressor.getBytesWrittenForLastEntry(), streamCompressor.getBytesRead()));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,18,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,20,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,23,* A Thread-safe representation of a ZipArchiveEntry that is used to add entries to parallel archives.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,25,public class ZipArchiveEntryRequest {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,27,"The zipArchiveEntry is not thread safe, and cannot be safely accessed by the getters of this class."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,28,It is safely accessible during the construction part of this class and also after the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,29,thread pools have been shut down.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,31,private final ZipArchiveEntry zipArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,32,private final InputStreamSupplier payloadSupplier;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,33,private final int method;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,36,"private ZipArchiveEntryRequest(ZipArchiveEntry zipArchiveEntry, InputStreamSupplier payloadSupplier) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,37,"// this constructor has ""safe"" access to all member variables on zipArchiveEntry"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,38,this.zipArchiveEntry = zipArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,39,this.payloadSupplier = payloadSupplier;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,40,this.method = zipArchiveEntry.getMethod();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,44,* Create a ZipArchiveEntryRequest
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,45,* @param zipArchiveEntry The entry to use
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,46,* @param payloadSupplier The payload that will be added to the zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,47,* @return The newly created request
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,49,"public static ZipArchiveEntryRequest createZipArchiveEntryRequest(ZipArchiveEntry zipArchiveEntry, InputStreamSupplier payloadSupplier) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,50,"return new ZipArchiveEntryRequest(zipArchiveEntry, payloadSupplier);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,54,* The paylaod that will be added to this zip entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,55,* @return The input stream.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,57,public InputStream getPayloadStream() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,58,return payloadSupplier.get();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,62,* The compression method to use
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,63,* @return The compression method to use
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,65,public int getMethod(){
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,66,return method;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,71,* Gets the underlying entry. Do not use this methods from threads that did not create the instance itself !
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,72,* @return the zipeArchiveEntry that is basis for this request
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,74,ZipArchiveEntry getZipArchiveEntry() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java,75,return zipArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,25,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,27,import static org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest;
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,39,yteArrayInputStream payload = new ByteArrayInputStream(B_PAYLOAD);
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,40,"catterZipOutputStream.addArchiveEntry(zab, payload, ZipArchiveEntry.DEFLATED);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,41,zab.setMethod(ZipArchiveEntry.DEFLATED);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,42,final ByteArrayInputStream payload = new ByteArrayInputStream(B_PAYLOAD);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,43,"scatterZipOutputStream.addArchiveEntry(createZipArchiveEntryRequest(zab, createPayloadSupplier(payload)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,46,zae.setMethod(ZipArchiveEntry.DEFLATED);
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,44,"catterZipOutputStream.addArchiveEntry(zae, payload1, ZipArchiveEntry.DEFLATED);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,48,"scatterZipOutputStream.addArchiveEntry(createZipArchiveEntryRequest(zae, createPayloadSupplier(payload1)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,66,private InputStreamSupplier createPayloadSupplier(final ByteArrayInputStream payload) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,67,return new InputStreamSupplier() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,68,public InputStream get() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,69,return payload;

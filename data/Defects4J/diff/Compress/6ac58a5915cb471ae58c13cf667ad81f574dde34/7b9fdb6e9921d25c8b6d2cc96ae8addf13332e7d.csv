is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,46,import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream;
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,500,"            {@value #XZ}, {@value #PACK200} or {@value #DEFLATE}"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,501,"*            {@value #XZ}, {@value #PACK200}, {@value SNAPPY_FRAMED}"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,502,*            or {@value #DEFLATE}
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,544,if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,545,return new FramedSnappyCompressorOutputStream(out);
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,46,rivate static final int COMPRESSED_CHUNK_TYPE = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,46,static final int COMPRESSED_CHUNK_TYPE = 0;
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,53,rivate static final byte[] SZ_SIGNATURE = new byte[] {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,53,// used by FramedSnappyCompressorOutputStream as well
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,54,static final byte[] SZ_SIGNATURE = new byte[] {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,19,package org.apache.commons.compress.compressors.snappy;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,21,import java.io.ByteArrayOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,23,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,25,import org.apache.commons.compress.compressors.CompressorOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,28,* CompressorOutputStream for the framing Snappy format.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,30,"* <p>Based on the ""spec"" in the version ""Last revised: 2013-10-25""</p>"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,32,"* @see <a href=""https://github.com/google/snappy/blob/master/framing_format.txt"">Snappy framing format description</a>"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,33,* @since 1.14
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,34,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,36,public class FramedSnappyCompressorOutputStream extends CompressorOutputStream {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,37,// see spec:
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,38,"// > However, we place an additional restriction that the uncompressed data"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,39,// > in a chunk must be no longer than 65536 bytes. This allows consumers to
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,40,// > easily use small fixed-size buffers.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,41,private static final int MAX_COMPRESSED_BUFFER_SIZE = 1 << 16;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,43,private final OutputStream out;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,44,private final PureJavaCrc32C checksum = new PureJavaCrc32C();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,45,// used in one-arg write method
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,46,private final byte[] oneByte = new byte[1];
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,47,private final byte[] buffer = new byte[MAX_COMPRESSED_BUFFER_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,48,private int currentIndex = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,51,* Constructs a new output stream that compresses
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,52,* snappy-framed-compressed data to the specified output stream.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,53,* @param out the OutputStream to which to write the compressed data
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,54,* @throws IOException if writing the signature fails
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,56,public FramedSnappyCompressorOutputStream(final OutputStream out) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,57,this.out = out;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,58,out.write(FramedSnappyCompressorInputStream.SZ_SIGNATURE);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,61,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,62,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,63,oneByte[0] = (byte) (b & 0xff);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,64,write(oneByte);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,67,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,68,"public void write(byte[] data, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,69,if (currentIndex + len > MAX_COMPRESSED_BUFFER_SIZE) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,70,flushBuffer();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,71,while (len > MAX_COMPRESSED_BUFFER_SIZE) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,72,"System.arraycopy(data, off, buffer, 0, MAX_COMPRESSED_BUFFER_SIZE);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,73,off += MAX_COMPRESSED_BUFFER_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,74,len -= MAX_COMPRESSED_BUFFER_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,75,currentIndex = MAX_COMPRESSED_BUFFER_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,76,flushBuffer();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,79,"System.arraycopy(data, off, buffer, currentIndex, len);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,80,currentIndex += len;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,83,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,84,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,85,finish();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,86,out.close();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,90,"* Compresses all remaining data and writes it to the stream,"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,91,* doesn't close the underlying stream.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,92,* @throws IOException if an error occurs
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,94,public void finish() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,95,if (currentIndex > 0) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,96,flushBuffer();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,100,private void flushBuffer() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,101,out.write(FramedSnappyCompressorInputStream.COMPRESSED_CHUNK_TYPE);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,102,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,103,"try (OutputStream o = new SnappyCompressorOutputStream(baos, currentIndex)) {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,104,"o.write(buffer, 0, currentIndex);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,106,byte[] b = baos.toByteArray();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,107,"writeLittleEndian(3, b.length + 4 /* CRC */);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,108,writeCrc();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,109,out.write(b);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,110,currentIndex = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,113,"private void writeLittleEndian(final int numBytes, long num) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,114,for (int i = 0; i < numBytes; i++) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,115,out.write((int) (num & 0xff));
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,116,num >>= 8;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,120,private void writeCrc() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,121,"checksum.update(buffer, 0, currentIndex);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,122,"writeLittleEndian(4, mask(checksum.getValue()));"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,123,checksum.reset();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,126,static long mask(long x) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,127,"// ugly, maybe we should just have used ints and deal with the"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,128,// overflow
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,129,x = ((x >> 15) | (x << 17));
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,130,x += FramedSnappyCompressorInputStream.MASK_OFFSET;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,131,x &= 0xffffFFFFL;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java,132,return x;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,29,import java.io.OutputStream;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,30,import java.util.Random;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,100,@Test
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,101,public void testRoundtrip() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,102,"testRoundtrip(getFile(""test.txt""));"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,103,"testRoundtrip(getFile(""bla.tar""));"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,104,"testRoundtrip(getFile(""COMPRESS-256.7z""));"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,107,@Test
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,108,public void testRoundtripWithOneBigWrite() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,109,Random r = new Random();
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,110,"File input = new File(dir, ""bigChunkTest"");"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,111,try (FileOutputStream fs = new FileOutputStream(input)) {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,112,for (int i = 0 ; i < 1 << 17; i++) {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,113,fs.write(r.nextInt(256));
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,116,long start = System.currentTimeMillis();
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,117,"final File outputSz = new File(dir, input.getName() + "".sz"");"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,118,try (FileInputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,119,FileOutputStream os = new FileOutputStream(outputSz);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,120,CompressorOutputStream sos = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,121,".createCompressorOutputStream(""snappy-framed"", os)) {"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,122,byte[] b = IOUtils.toByteArray(is);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,123,sos.write(b[0]);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,124,"sos.write(b, 1, b.length - 1); // must be split into multiple compressed chunks"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,126,"System.err.println(input.getName() + "" written, uncompressed bytes: "" + input.length()"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,127,"+ "", compressed bytes: "" + outputSz.length() + "" after "" + (System.currentTimeMillis() - start) + ""ms"");"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,128,try (FileInputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,129,CompressorInputStream sis = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,130,".createCompressorInputStream(""snappy-framed"", new FileInputStream(outputSz))) {"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,131,byte[] expected = IOUtils.toByteArray(is);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,132,byte[] actual = IOUtils.toByteArray(sis);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,133,"assertArrayEquals(expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,137,private void testRoundtrip(File input)  throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,138,long start = System.currentTimeMillis();
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,139,"final File outputSz = new File(dir, input.getName() + "".sz"");"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,140,try (FileInputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,141,FileOutputStream os = new FileOutputStream(outputSz);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,142,CompressorOutputStream sos = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,143,".createCompressorOutputStream(""snappy-framed"", os)) {"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,144,"IOUtils.copy(is, sos);"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,146,"System.err.println(input.getName() + "" written, uncompressed bytes: "" + input.length()"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,147,"+ "", compressed bytes: "" + outputSz.length() + "" after "" + (System.currentTimeMillis() - start) + ""ms"");"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,148,try (FileInputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,149,CompressorInputStream sis = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,150,".createCompressorInputStream(""snappy-framed"", new FileInputStream(outputSz))) {"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,151,byte[] expected = IOUtils.toByteArray(is);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,152,byte[] actual = IOUtils.toByteArray(sis);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,153,"assertArrayEquals(expected, actual);"

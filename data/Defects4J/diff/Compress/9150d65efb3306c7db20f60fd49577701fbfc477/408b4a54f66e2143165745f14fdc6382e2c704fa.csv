is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,24,mport org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,24,import org.apache.commons.compress.compressors.z.AbstractLZWInputStream;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,31,lass UnshrinkingInputStream extends CompressorInputStream {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,32,rivate final InputStream in;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,33,rivate final int clearCode;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,34,rivate final int MAX_CODE_SIZE = 13;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,35,rivate int codeSize = 9;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,36,rivate int bitsCached = 0;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,37,rivate int bitsCachedSize = 0;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,38,rivate int previousCode = -1;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,39,rivate int tableSize = 0;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,40,rivate final int[] prefixes;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,41,rivate final byte[] characters;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,31,class UnshrinkingInputStream extends AbstractLZWInputStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,32,private static final int MAX_CODE_SIZE = 13;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,33,private static final int MAX_TABLE_SIZE = 1 << MAX_CODE_SIZE;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,43,rivate final byte[] outputStack;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,44,rivate int outputStackLocation;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,47,his.in = inputStream;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,48,learCode = (1 << (codeSize - 1));
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,49,inal int maxTableSize = 1 << MAX_CODE_SIZE;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,50,refixes = new int[maxTableSize];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,51,haracters = new byte[maxTableSize];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,52,sUsed = new boolean[maxTableSize];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,53,utputStack = new byte[maxTableSize];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,54,utputStackLocation = maxTableSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,37,super(inputStream);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,38,setClearCode(codeSize);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,39,initializeTables(MAX_CODE_SIZE);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,40,isUsed = new boolean[prefixes.length];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,56,refixes[i] = -1;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,57,haracters[i] = (byte)i;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,63,ublic void close() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,64,n.close();
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,67,rivate int readNextCode() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,68,hile (bitsCachedSize < codeSize) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,69,inal int nextByte = in.read();
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,70,f (nextByte < 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,71,eturn nextByte;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,73,itsCached |= (nextByte << bitsCachedSize);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,74,itsCachedSize += 8;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,76,inal int mask = (1 << codeSize) - 1;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,77,inal int code = (bitsCached & mask);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,78,itsCached >>>= codeSize;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,79,itsCachedSize -= codeSize;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,80,eturn code;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,83,"rivate int addEntry(int previousCode, byte character) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,84,inal int maxTableSize = 1 << MAX_CODE_SIZE;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,85,hile ((tableSize < maxTableSize) && isUsed[tableSize]) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,47,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,48,"protected int addEntry(int previousCode, byte character) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,49,while ((tableSize < MAX_TABLE_SIZE) && isUsed[tableSize]) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,88,f (tableSize < maxTableSize) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,89,inal int index = tableSize;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,90,refixes[tableSize] = previousCode;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,91,haracters[tableSize] = character;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,92,sUsed[tableSize] = true;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,93,ableSize++;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,94,eturn index;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,95, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,96,eturn -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,52,"int idx = addEntry(previousCode, character, MAX_TABLE_SIZE);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,53,if (idx >= 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,54,isUsed[idx] = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,56,return idx;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,101,inal boolean[] isParent = new boolean[1 << MAX_CODE_SIZE];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,60,final boolean[] isParent = new boolean[MAX_TABLE_SIZE];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,115,rivate int decompressNextSymbol() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,74,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,75,protected int decompressNextSymbol() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,150,inal int effectiveCode;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,151,f (isUsed[code]) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,152,ffectiveCode = code;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,153, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,154,/ must be a repeat of the previous entry we haven't added yet
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,155,f (previousCode == -1) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,156,/ ... which isn't possible for the very first code
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,157,"hrow new IOException(""The first code can't be a reference to its preceding code"");"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,159,yte firstCharacter = 0;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,160,or (int last = previousCode; last >= 0; last = prefixes[last]) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,161,irstCharacter = characters[last];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,163,"ffectiveCode = addEntry(previousCode, firstCharacter);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,110,int effectiveCode = code;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,111,if (!isUsed[code]) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,112,effectiveCode = addRepeatOfPreviousCode();
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,166,or (int entry = effectiveCode; entry >= 0; entry = prefixes[entry]) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,167,utputStack[--outputStackLocation] = characters[entry];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,169,f (previousCode != -1 && !addedUnfinishedEntry) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,170,"ddEntry(previousCode, outputStack[outputStackLocation]);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,172,reviousCode = code;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,173,eturn outputStackLocation;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,177,ublic int read() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,178,yte[] b = new byte[1];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,179,nt ret;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,180,hile ((ret = read(b)) == 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,182,f (ret < 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,183,eturn ret;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,185,eturn 0xff & b[0];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,188,"ublic int read(byte[] b, int off, int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,189,nt bytesRead = 0;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,190,nt remainingInStack = outputStack.length - outputStackLocation;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,191,f (remainingInStack > 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,192,"nt maxLength = Math.min(remainingInStack, len);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,193,"ystem.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,194,utputStackLocation += maxLength;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,195,ff += maxLength;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,196,en -= maxLength;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,197,ytesRead += maxLength;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,199,hile (len > 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,200,nt result = decompressNextSymbol();
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,201,f (result < 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,202,f (bytesRead > 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,203,ount(bytesRead);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,204,eturn bytesRead;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,205, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,206,eturn result;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,209,emainingInStack = outputStack.length - outputStackLocation;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,210,f (remainingInStack > 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,211,"nt maxLength = Math.min(remainingInStack, len);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,212,"ystem.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,213,utputStackLocation += maxLength;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,214,ff += maxLength;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,215,en -= maxLength;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,216,ytesRead += maxLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,115,"return expandCodeToOutputStack(effectiveCode, addedUnfinishedEntry);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,219,ount(bytesRead);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,220,eturn bytesRead;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,19,package org.apache.commons.compress.compressors.z;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,24,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,27,"* Base-class for traditional Unix "".Z"" compression and the"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,28,* Unshrinking method of ZIP archive.
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,29,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,30,* @since 1.7
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,32,public abstract class AbstractLZWInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,33,private final byte[] oneByte = new byte[1];
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,35,protected final InputStream in;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,36,protected int clearCode = -1;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,37,protected int codeSize = 9;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,38,protected int bitsCached = 0;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,39,protected int bitsCachedSize = 0;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,40,protected int previousCode = -1;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,41,protected int tableSize = 0;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,42,protected int[] prefixes;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,43,protected byte[] characters;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,44,private byte[] outputStack;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,45,private int outputStackLocation;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,47,public AbstractLZWInputStream(InputStream inputStream) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,48,this.in = inputStream;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,51,@Override
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,52,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,53,in.close();
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,56,@Override
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,57,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,58,int ret;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,59,while ((ret = read(oneByte)) == 0) { // NOPMD
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,61,if (ret < 0) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,62,return ret;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,64,return 0xff & oneByte[0];
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,67,@Override
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,68,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,69,int bytesRead = 0;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,70,int remainingInStack = outputStack.length - outputStackLocation;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,71,if (remainingInStack > 0) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,72,"int maxLength = Math.min(remainingInStack, len);"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,73,"System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,74,outputStackLocation += maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,75,off += maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,76,len -= maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,77,bytesRead += maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,79,while (len > 0) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,80,int result = decompressNextSymbol();
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,81,if (result < 0) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,82,if (bytesRead > 0) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,83,count(bytesRead);
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,84,return bytesRead;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,85,} else {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,86,return result;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,89,remainingInStack = outputStack.length - outputStackLocation;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,90,if (remainingInStack > 0) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,91,"int maxLength = Math.min(remainingInStack, len);"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,92,"System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,93,outputStackLocation += maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,94,off += maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,95,len -= maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,96,bytesRead += maxLength;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,99,count(bytesRead);
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,100,return bytesRead;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,104,* Read the next code and expand it.
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,106,protected abstract int decompressNextSymbol() throws IOException;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,109,* Add a new entry to the dictionary.
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,111,"protected abstract int addEntry(int previousCode, byte character)"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,112,throws IOException;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,115,* Sets the clear code based on the code size.
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,117,protected void setClearCode(int codeSize) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,118,clearCode = (1 << (codeSize - 1));
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,122,* Initializes the arrays based on the maximum code size.
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,124,protected void initializeTables(int maxCodeSize) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,125,final int maxTableSize = 1 << maxCodeSize;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,126,prefixes = new int[maxTableSize];
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,127,characters = new byte[maxTableSize];
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,128,outputStack = new byte[maxTableSize];
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,129,outputStackLocation = maxTableSize;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,130,final int max = 1 << 8;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,131,for (int i = 0; i < max; i++) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,132,prefixes[i] = -1;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,133,characters[i] = (byte) i;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,138,* Reads the next code from the stream.
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,140,protected int readNextCode() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,141,while (bitsCachedSize < codeSize) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,142,final int nextByte = in.read();
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,143,if (nextByte < 0) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,144,return nextByte;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,146,bitsCached |= (nextByte << bitsCachedSize);
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,147,bitsCachedSize += 8;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,149,final int mask = (1 << codeSize) - 1;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,150,final int code = (bitsCached & mask);
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,151,bitsCached >>>= codeSize;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,152,bitsCachedSize -= codeSize;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,153,return code;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,157,* Adds a new entry if the maximum table size hasn't been exceeded
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,158,* and returns the new index.
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,160,"protected int addEntry(int previousCode, byte character, int maxTableSize) {"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,161,if (tableSize < maxTableSize) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,162,final int index = tableSize;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,163,prefixes[tableSize] = previousCode;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,164,characters[tableSize] = character;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,165,tableSize++;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,166,return index;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,168,return -1;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,172,"* Add entry for repeat of previousCode we haven't added, yet."
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,174,protected int addRepeatOfPreviousCode() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,175,if (previousCode == -1) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,176,// can't have a repeat for the very first code
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,177,"throw new IOException(""The first code can't be a reference to its preceding code"");"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,179,byte firstCharacter = 0;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,180,for (int last = previousCode; last >= 0; last = prefixes[last]) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,181,firstCharacter = characters[last];
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,183,"return addEntry(previousCode, firstCharacter);"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,187,* Expands the entry with index code to the output stack and may
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,188,* create a new entry
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,190,"protected int expandCodeToOutputStack(int code, boolean addedUnfinishedEntry)"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,191,throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,192,for (int entry = code; entry >= 0; entry = prefixes[entry]) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,193,outputStack[--outputStackLocation] = characters[entry];
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,195,if (previousCode != -1 && !addedUnfinishedEntry) {
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,196,"addEntry(previousCode, outputStack[outputStackLocation]);"
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,198,previousCode = code;
True,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java,199,return outputStackLocation;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,24,mport org.apache.commons.compress.compressors.CompressorInputStream;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,31,ublic class ZCompressorInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,29,public class ZCompressorInputStream extends AbstractLZWInputStream {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,36,rivate final InputStream in;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,38,rivate final int clearCode;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,40,rivate int codeSize = 9;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,41,rivate int bitsCached = 0;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,42,rivate int bitsCachedSize = 0;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,44,rivate int previousCode = -1;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,45,rivate int tableSize = 0;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,46,rivate final int[] prefixes;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,47,rivate final byte[] characters;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,48,rivate final byte[] outputStack;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,49,rivate int outputStackLocation;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,52,his.in = inputStream;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,39,super(inputStream);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,62,learCode = (1 << (codeSize - 1));
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,63, else {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,64,learCode = -1; // unused
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,66,inal int maxTableSize = 1 << maxCodeSize;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,67,refixes = new int[maxTableSize];
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,68,haracters = new byte[maxTableSize];
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,69,utputStack = new byte[maxTableSize];
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,70,utputStackLocation = maxTableSize;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,71,or (int i = 0; i < (1 << 8); i++) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,72,refixes[i] = -1;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,73,haracters[i] = (byte)i;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,49,setClearCode(codeSize);
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,51,initializeTables(maxCodeSize);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,78,ublic void close() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,79,n.close();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,89,rivate int readNextCode() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,90,hile (bitsCachedSize < codeSize) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,91,inal int nextByte = in.read();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,92,f (nextByte < 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,93,eturn nextByte;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,95,itsCached |= (nextByte << bitsCachedSize);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,96,itsCachedSize += 8;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,62,@Override
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,63,protected int readNextCode() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,64,int code = super.readNextCode();
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,65,if (code >= 0) {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,66,++totalCodesRead;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,98,inal int mask = (1 << codeSize) - 1;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,99,inal int code = (bitsCached & mask);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,100,itsCached >>>= codeSize;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,101,itsCachedSize -= codeSize;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,102,+totalCodesRead;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,122,"rivate void addEntry(int previousCode, byte character) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,87,@Override
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,88,"protected int addEntry(int previousCode, byte character) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,124,f (tableSize < maxTableSize) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,125,refixes[tableSize] = previousCode;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,126,haracters[tableSize] = character;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,127,ableSize++;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,129,f (tableSize == maxTableSize) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,130,f (codeSize < maxCodeSize) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,131,eAlignReading();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,132,odeSize++;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,90,"int r = addEntry(previousCode, character, maxTableSize);"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,91,if (tableSize == maxTableSize && codeSize < maxCodeSize) {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,92,reAlignReading();
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,93,codeSize++;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,95,return r;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,137,rivate int decompressNextSymbol() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,98,@Override
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,99,protected int decompressNextSymbol() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,162,/ must be a repeat of the previous entry we haven't added yet
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,163,f (previousCode == -1) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,164,/ ... which isn't possible for the very first code
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,165,"hrow new IOException(""The first code can't be a reference to its preceding code"");"
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,167,yte firstCharacter = 0;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,168,or (int last = previousCode; last >= 0; last = prefixes[last]) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,169,irstCharacter = characters[last];
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,171,"ddEntry(previousCode, firstCharacter);"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,124,addRepeatOfPreviousCode();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,176,or (int entry = code; entry >= 0; entry = prefixes[entry]) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,177,utputStack[--outputStackLocation] = characters[entry];
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,179,f (previousCode != -1 && !addedUnfinishedEntry) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,180,"ddEntry(previousCode, outputStack[outputStackLocation]);"
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,182,reviousCode = code;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,183,eturn outputStackLocation;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,187,ublic int read() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,188,yte[] b = new byte[1];
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,189,nt ret;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,190,hile ((ret = read(b)) == 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,192,f (ret < 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,193,eturn ret;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,129,"return expandCodeToOutputStack(code, addedUnfinishedEntry);"
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,195,eturn 0xff & b[0];
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,198,"ublic int read(byte[] b, int off, int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,199,nt bytesRead = 0;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,200,nt remainingInStack = outputStack.length - outputStackLocation;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,201,f (remainingInStack > 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,202,"nt maxLength = Math.min(remainingInStack, len);"
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,203,"ystem.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,204,utputStackLocation += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,205,ff += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,206,en -= maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,207,ytesRead += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,209,hile (len > 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,210,nt result = decompressNextSymbol();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,211,f (result < 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,212,f (bytesRead > 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,213,ount(bytesRead);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,214,eturn bytesRead;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,215, else {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,216,eturn result;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,219,emainingInStack = outputStack.length - outputStackLocation;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,220,f (remainingInStack > 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,221,"nt maxLength = Math.min(remainingInStack, len);"
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,222,"ystem.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,223,utputStackLocation += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,224,ff += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,225,en -= maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,226,ytesRead += maxLength;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,229,ount(bytesRead);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,230,eturn bytesRead;

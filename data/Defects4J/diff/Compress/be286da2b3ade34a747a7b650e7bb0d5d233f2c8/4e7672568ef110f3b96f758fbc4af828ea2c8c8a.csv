is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,758, extension for the size field if the size is bigger than 8GiB
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,758,* extension for numeric fields if their value doesn't fit in the
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,759,* maximum size of standard tar archives
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,765,"ffset = TarUtils.formatOctalBytes(mode, outbuf, offset, MODELEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,766,"ffset = TarUtils.formatOctalBytes(userId, outbuf, offset, UIDLEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,767,"ffset = TarUtils.formatOctalBytes(groupId, outbuf, offset, GIDLEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,768,f (size > TarConstants.MAXSIZE && !starMode) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,769,/ size is in PAX header
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,770,"ffset = TarUtils.formatLongOctalBytes(0, outbuf, offset, SIZELEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,771, else {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,772,"ffset = TarUtils.formatLongOctalOrBinaryBytes(size, outbuf, offset, SIZELEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,774,"ffset = TarUtils.formatLongOctalBytes(modTime, outbuf, offset, MODTIMELEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,766,"offset = writeEntryHeaderField(mode, outbuf, offset, MODELEN, starMode);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,767,"offset = writeEntryHeaderField(userId, outbuf, offset, UIDLEN,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,768,starMode);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,769,"offset = writeEntryHeaderField(groupId, outbuf, offset, GIDLEN,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,770,starMode);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,771,"offset = writeEntryHeaderField(size, outbuf, offset, SIZELEN, starMode);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,772,"offset = writeEntryHeaderField(modTime, outbuf, offset, MODTIMELEN,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,773,starMode);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,788,"ffset = TarUtils.formatOctalBytes(devMajor, outbuf, offset, DEVLEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,789,"ffset = TarUtils.formatOctalBytes(devMinor, outbuf, offset, DEVLEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,787,"offset = writeEntryHeaderField(devMajor, outbuf, offset, DEVLEN,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,788,starMode);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,789,"offset = writeEntryHeaderField(devMinor, outbuf, offset, DEVLEN,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,790,starMode);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,801,"private int writeEntryHeaderField(long value, byte[] outbuf, int offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,802,"int length, boolean starMode) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,803,if (!starMode && (value < 0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,804,|| value >= (1l << (3 * (length - 1))))) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,805,// value doesn't fit into field when written as octal
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,806,"// number, will be written to PAX header or causes an"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,807,// error
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,808,"return TarUtils.formatLongOctalBytes(0, outbuf, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,810,"return TarUtils.formatLongOctalOrBinaryBytes(value, outbuf, offset,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,811,length);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,72,"atePriorToEpoch(""/preepoch-gnu.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,72,"datePriorToEpoch(""/preepoch-star.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,26,import java.util.Calendar;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,29,import java.util.TimeZone;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,210,public void testOldEntryStarMode() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,211,"TarArchiveEntry t = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,212,t.setSize(Integer.MAX_VALUE);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,213,t.setModTime(-1000);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,214,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,215,TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,216,tos.setBigFileMode(TarArchiveOutputStream.BIGFILE_STAR);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,217,tos.putArchiveEntry(t);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,218,// make sure header is written to byte array
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,219,tos.write(new byte[10 * 1024]);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,220,byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,221,"assertEquals((byte) 0xff,"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,222,data[TarConstants.NAMELEN
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,223,+ TarConstants.MODELEN
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,224,+ TarConstants.UIDLEN
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,225,+ TarConstants.GIDLEN
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,226,+ TarConstants.SIZELEN]);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,227,TarArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,228,new TarArchiveInputStream(new ByteArrayInputStream(data));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,229,TarArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,230,"Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,231,"cal.set(1969, 11, 31, 23, 59, 59);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,232,"cal.set(Calendar.MILLISECOND, 0);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,233,"assertEquals(cal.getTime(), e.getLastModifiedDate());"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,20,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,22,import java.security.GeneralSecurityException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,23,import java.security.MessageDigest;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,24,import java.security.NoSuchAlgorithmException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,25,import javax.crypto.Cipher;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,26,import javax.crypto.CipherInputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,27,import javax.crypto.SecretKey;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,28,import javax.crypto.spec.IvParameterSpec;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,29,import javax.crypto.spec.SecretKeySpec;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,31,class AES256SHA256Decoder extends CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,32,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,33,"InputStream decode(final InputStream in, final Coder coder, final byte[] passwordBytes) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,34,return new InputStream() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,35,private boolean isInitialized = false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,36,private CipherInputStream cipherInputStream = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,38,private CipherInputStream init() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,39,if (isInitialized) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,40,return cipherInputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,42,final int byte0 = 0xff & coder.properties[0];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,43,final int numCyclesPower = byte0 & 0x3f;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,44,final int byte1 = 0xff & coder.properties[1];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,45,final int ivSize = ((byte0 >> 6) & 1) + (byte1 & 0x0f);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,46,final int saltSize = ((byte0 >> 7) & 1) + (byte1 >> 4);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,47,if (2 + saltSize + ivSize > coder.properties.length) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,48,"throw new IOException(""Salt size + IV size too long"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,50,final byte[] salt = new byte[saltSize];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,51,"System.arraycopy(coder.properties, 2, salt, 0, saltSize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,52,final byte[] iv = new byte[16];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,53,"System.arraycopy(coder.properties, 2 + saltSize, iv, 0, ivSize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,55,if (passwordBytes == null) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,56,"throw new IOException(""Cannot read encrypted files without a password"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,58,final byte[] aesKeyBytes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,59,if (numCyclesPower == 0x3f) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,60,aesKeyBytes = new byte[32];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,61,"System.arraycopy(salt, 0, aesKeyBytes, 0, saltSize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,62,"System.arraycopy(passwordBytes, 0, aesKeyBytes, saltSize,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,63,"Math.min(passwordBytes.length, aesKeyBytes.length - saltSize));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,64,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,65,final MessageDigest digest;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,66,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,67,"digest = MessageDigest.getInstance(""SHA-256"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,68,} catch (NoSuchAlgorithmException noSuchAlgorithmException) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,69,"IOException ioe = new IOException(""SHA-256 is unsupported by your Java implementation"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,70,ioe.initCause(noSuchAlgorithmException);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,71,throw ioe;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,72,// TODO: simplify when Compress requires Java 1.6
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,73,"//                      throw new IOException(""SHA-256 is unsupported by your Java implementation"","
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,74,//                              noSuchAlgorithmException);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,76,final byte[] extra = new byte[8];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,77,for (long j = 0; j < (1L << numCyclesPower); j++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,78,digest.update(salt);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,79,digest.update(passwordBytes);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,80,digest.update(extra);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,81,for (int k = 0; k < extra.length; k++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,82,++extra[k];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,83,if (extra[k] != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,84,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,88,aesKeyBytes = digest.digest();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,91,"final SecretKey aesKey = new SecretKeySpec(aesKeyBytes, ""AES"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,92,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,93,"final Cipher cipher = Cipher.getInstance(""AES/CBC/NoPadding"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,94,"cipher.init(Cipher.DECRYPT_MODE, aesKey, new IvParameterSpec(iv));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,95,"cipherInputStream = new CipherInputStream(in, cipher);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,96,isInitialized = true;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,97,return cipherInputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,98,} catch (GeneralSecurityException generalSecurityException) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,99,"IOException ioe = new IOException(""Decryption error "" +"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,100,"""(do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,101,ioe.initCause(generalSecurityException);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,102,throw ioe;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,103,// TODO: simplify when Compress requires Java 1.6
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,104,"//                  throw new IOException(""Decryption error "" +"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,105,"//                          ""(do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)"","
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,106,//                          generalSecurityException);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,110,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,111,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,112,return init().read();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,115,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,116,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,117,"return init().read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,120,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,121,public void close() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,20,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,25,* Base Codec class.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,27,abstract class CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,28,private final Class<?>[] acceptableOptions;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,29,private static final byte[] NONE = new byte[0];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,32,* @param acceptableOptions types that can be used as options for this codec.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,34,protected CoderBase(Class<?>... acceptableOptions) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,35,this.acceptableOptions = acceptableOptions;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,39,* @return whether this method can extract options from the given object.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,41,boolean canAcceptOptions(Object opts) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,42,for (Class<?> c : acceptableOptions) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,43,if (c.isInstance(opts)) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,44,return true;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,47,return false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,51,* @return property-bytes to write in a Folder block
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,53,byte[] getOptionsAsProperties(Object options) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,54,return NONE;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,58,* @return a stream that reads from in using the configured coder and password.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,60,"abstract InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException;"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,63,* @return a stream that writes to out using the given configuration.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,65,"OutputStream encode(final OutputStream out, final Object options) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,66,"throw new UnsupportedOperationException(""method doesn't support writing"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,70,"* If the option represents a number, return its integer"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,71,"* value, otherwise return the given default value."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,73,"protected static int numberOptionOrDefault(Object options, int defaultValue) {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,74,return options instanceof Number ? ((Number) options).intValue() : defaultValue;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,24,mport java.security.GeneralSecurityException;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,25,mport java.security.MessageDigest;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,26,mport java.security.NoSuchAlgorithmException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,25,import java.util.HashMap;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,26,import java.util.Map;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,33,mport javax.crypto.Cipher;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,34,mport javax.crypto.CipherInputStream;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,35,mport javax.crypto.SecretKey;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,36,mport javax.crypto.spec.IvParameterSpec;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,37,mport javax.crypto.spec.SecretKeySpec;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,37,"private static final Map<SevenZMethod, CoderBase> CODER_MAP = new HashMap<SevenZMethod, CoderBase>() {{"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,38,"put(SevenZMethod.COPY, new CopyDecoder());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,39,"put(SevenZMethod.LZMA, new LZMADecoder());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,40,"put(SevenZMethod.LZMA2, new LZMA2Decoder());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,41,"put(SevenZMethod.DEFLATE, new DeflateDecoder());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,42,"put(SevenZMethod.BZIP2, new BZIP2Decoder());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,43,"put(SevenZMethod.AES256SHA256, new AES256SHA256Decoder());"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,45,or (final CoderId coderId : coderTable) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,46,f (coderId.method.equals(method)) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,47,eturn coderId.coder;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,50,eturn null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,47,return CODER_MAP.get(method);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,72,tatic CoderId[] coderTable = new CoderId[] {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,73,"ew CoderId(SevenZMethod.COPY, new CopyDecoder()),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,74,"ew CoderId(SevenZMethod.LZMA, new LZMADecoder()),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,75,"ew CoderId(SevenZMethod.LZMA2, new LZMA2Decoder()),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,76,"ew CoderId(SevenZMethod.DEFLATE, new DeflateDecoder()),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,77,"ew CoderId(SevenZMethod.BZIP2, new BZIP2Decoder()),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,78,"ew CoderId(SevenZMethod.AES256SHA256, new AES256SHA256Decoder())"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,81,tatic class CoderId {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,82,"oderId(SevenZMethod method, final CoderBase coder) {"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,83,his.method = method;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,84,his.coder = coder;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,87,inal SevenZMethod method;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,88,inal CoderBase coder;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,91,tatic abstract class CoderBase {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,92,rivate final Class<?>[] acceptableOptions;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,93,rivate static final byte[] NONE = new byte[0];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,95,rotected CoderBase(Class<?>... acceptableOptions) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,96,his.acceptableOptions = acceptableOptions;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,100, @return whether this method can extract options from the given object.
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,102,oolean canAcceptOptions(Object opts) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,103,or (Class<?> c : acceptableOptions) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,104,f (c.isInstance(opts)) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,105,eturn true;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,108,eturn false;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,112, @return property-bytes to write in a Folder block
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,114,yte[] getOptionsAsProperties(Object options) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,115,eturn NONE;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,118,"bstract InputStream decode(final InputStream in, final Coder coder,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,119,yte[] password) throws IOException;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,120,"utputStream encode(final OutputStream out, final Object options)"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,121,hrows IOException {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,122,"hrow new UnsupportedOperationException(""method doesn't support writing"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,126," If the option represents a number, return its integer"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,127," value, otherwise return the given default value."
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,129,"rotected int numberOptionOrDefault(Object options, int defaultValue) {"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,130,eturn options instanceof Number ? ((Number) options).intValue() : defaultValue;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,198,tatic class AES256SHA256Decoder extends CoderBase {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,199,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,200,"nputStream decode(final InputStream in, final Coder coder,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,201,inal byte[] passwordBytes) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,202,eturn new InputStream() {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,203,rivate boolean isInitialized = false;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,204,rivate CipherInputStream cipherInputStream = null;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,206,rivate CipherInputStream init() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,207,f (isInitialized) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,208,eturn cipherInputStream;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,210,inal int byte0 = 0xff & coder.properties[0];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,211,inal int numCyclesPower = byte0 & 0x3f;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,212,inal int byte1 = 0xff & coder.properties[1];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,213,inal int ivSize = ((byte0 >> 6) & 1) + (byte1 & 0x0f);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,214,inal int saltSize = ((byte0 >> 7) & 1) + (byte1 >> 4);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,215,f (2 + saltSize + ivSize > coder.properties.length) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,216,"hrow new IOException(""Salt size + IV size too long"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,218,inal byte[] salt = new byte[saltSize];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,219,"ystem.arraycopy(coder.properties, 2, salt, 0, saltSize);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,220,inal byte[] iv = new byte[16];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,221,"ystem.arraycopy(coder.properties, 2 + saltSize, iv, 0, ivSize);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,223,f (passwordBytes == null) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,224,"hrow new IOException(""Cannot read encrypted files without a password"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,226,inal byte[] aesKeyBytes;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,227,f (numCyclesPower == 0x3f) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,228,esKeyBytes = new byte[32];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,229,"ystem.arraycopy(salt, 0, aesKeyBytes, 0, saltSize);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,230,"ystem.arraycopy(passwordBytes, 0, aesKeyBytes, saltSize,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,231,"ath.min(passwordBytes.length, aesKeyBytes.length - saltSize));"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,232, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,233,inal MessageDigest digest;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,234,ry {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,235,"igest = MessageDigest.getInstance(""SHA-256"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,236, catch (NoSuchAlgorithmException noSuchAlgorithmException) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,237,"OException ioe = new IOException(""SHA-256 is unsupported by your Java implementation"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,238,oe.initCause(noSuchAlgorithmException);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,239,hrow ioe;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,240,/ TODO: simplify when Compress requires Java 1.6
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,241,"/                            throw new IOException(""SHA-256 is unsupported by your Java implementation"","
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,242,/                                    noSuchAlgorithmException);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,244,inal byte[] extra = new byte[8];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,245,or (long j = 0; j < (1L << numCyclesPower); j++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,246,igest.update(salt);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,247,igest.update(passwordBytes);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,248,igest.update(extra);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,249,or (int k = 0; k < extra.length; k++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,250,+extra[k];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,251,f (extra[k] != 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,252,reak;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,256,esKeyBytes = digest.digest();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,259,"inal SecretKey aesKey = new SecretKeySpec(aesKeyBytes, ""AES"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,260,ry {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,261,"inal Cipher cipher = Cipher.getInstance(""AES/CBC/NoPadding"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,262,"ipher.init(Cipher.DECRYPT_MODE, aesKey, new IvParameterSpec(iv));"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,263,"ipherInputStream = new CipherInputStream(in, cipher);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,264,sInitialized = true;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,265,eturn cipherInputStream;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,266, catch (GeneralSecurityException generalSecurityException) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,267,"OException ioe = new IOException(""Decryption error "" +"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,268,"(do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,269,oe.initCause(generalSecurityException);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,270,hrow ioe;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,271,/ TODO: simplify when Compress requires Java 1.6
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,272,"/                        throw new IOException(""Decryption error "" +"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,273,"/                                ""(do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)"","
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,274,/                                generalSecurityException);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,278,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,279,ublic int read() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,280,eturn init().read();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,283,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,284,"ublic int read(byte[] b, int off, int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,285,"eturn init().read(b, off, len);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,288,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,289,ublic void close() {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,28,lass LZMA2Decoder extends Coders.CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,28,class LZMA2Decoder extends CoderBase {

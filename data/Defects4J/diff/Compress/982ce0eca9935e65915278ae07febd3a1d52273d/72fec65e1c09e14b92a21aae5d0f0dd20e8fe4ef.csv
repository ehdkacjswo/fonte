is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,28,import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,84,"// used for block checksum, if present"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,85,private final XXHash32 blockHash = new XXHash32();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,246,if (expectBlockChecksum) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,247,"capped = new ChecksumCalculatingInputStream(blockHash, capped);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,260,"nt skipped = (int) IOUtils.skip(in, 4);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,261,ount(skipped);
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,262,f (4 != skipped) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,263,"hrow new IOException(""Premature end of stream while reading block checksum"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,267,"verifyChecksum(blockHash, ""block"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,268,blockHash.reset();
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,271,yte[] checksum = new byte[4];
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,272,"nt read = IOUtils.readFully(in, checksum);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,273,ount(read);
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,274,f (4 != read) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,275,"hrow new IOException(""Premature end of stream while reading content checksum"");"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,277,ong expectedHash = contentHash.getValue();
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,278,f (expectedHash != ByteUtils.fromLittleEndian(checksum)) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,279,"hrow new IOException(""content checksum mismatch."");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,275,"verifyChecksum(contentHash, ""content"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,280,"private void verifyChecksum(XXHash32 hash, String kind) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,281,byte[] checksum = new byte[4];
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,282,"int read = IOUtils.readFully(in, checksum);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,283,count(read);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,284,if (4 != read) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,285,"throw new IOException(""Premature end of stream while reading "" + kind + "" checksum"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,287,long expectedHash = hash.getValue();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,288,if (expectedHash != ByteUtils.fromLittleEndian(checksum)) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,289,"throw new IOException(kind + "" checksum mismatch."");"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,18,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,20,import java.io.FilterInputStream;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,23,import java.util.zip.Checksum;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,26,* A stream that calculates the checksum of the data read.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,27,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,28,* @since 1.14
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,30,public class ChecksumCalculatingInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,31,private final InputStream in;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,32,private final Checksum checksum;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,34,"public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,35,this.checksum = checksum;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,36,this.in = in;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,40,* Reads a single byte from the stream
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,41,* @throws IOException if the underlying stream throws or the
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,42,* stream is exhausted and the Checksum doesn't match the expected
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,43,* value
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,45,@Override
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,46,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,47,final int ret = in.read();
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,48,if (ret >= 0) {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,49,checksum.update(ret);
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,51,return ret;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,55,* Reads a byte array from the stream
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,56,* @throws IOException if the underlying stream throws or the
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,57,* stream is exhausted and the Checksum doesn't match the expected
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,58,* value
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,60,@Override
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,61,public int read(final byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,62,"return read(b, 0, b.length);"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,66,* Reads from the stream into a byte array.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,67,* @throws IOException if the underlying stream throws or the
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,68,* stream is exhausted and the Checksum doesn't match the expected
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,69,* value
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,71,@Override
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,72,"public int read(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,73,"final int ret = in.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,74,if (ret >= 0) {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,75,"checksum.update(b, off, ret);"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,77,return ret;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,80,@Override
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,81,public long skip(final long n) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,82,"// Can't really skip, we have to hash everything to verify the checksum"
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,83,if (read() >= 0) {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,84,return 1;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,86,return 0;
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,90,* Returns the calculated checksum.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,91,* @return the calculated checksum.
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,93,public long getValue() {
True,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java,94,return checksum.getValue();

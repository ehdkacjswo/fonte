is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,72,rivate static final int SIGNATURE_HEADER_SIZE = 32;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,72,static final int SIGNATURE_HEADER_SIZE = 32;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,81,rivate static final byte[] sevenZSignature = {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,81,static final byte[] sevenZSignature = {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,20,import java.io.ByteArrayOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,21,import java.io.DataOutput;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,22,import java.io.DataOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,23,import java.io.File;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,24,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,25,import java.io.RandomAccessFile;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,26,import java.util.ArrayList;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,27,import java.util.BitSet;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,28,import java.util.Date;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,29,import java.util.List;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,30,import java.util.zip.CRC32;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,32,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,35,* Writes a 7z file.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,37,public class SevenZOutputFile {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,38,private final RandomAccessFile file;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,39,private final List<SevenZArchiveEntry> files = new ArrayList<SevenZArchiveEntry>();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,40,private int numNonEmptyStreams = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,41,private CRC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,42,private long fileBytesWritten = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,43,private boolean finished = false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,45,public SevenZOutputFile(final File filename) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,46,"file = new RandomAccessFile(filename, ""rw"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,47,file.seek(SevenZFile.SIGNATURE_HEADER_SIZE);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,50,public void close() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,51,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,52,if (!finished) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,53,finish();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,55,file.close();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,56,} catch (IOException ioEx) { // NOPMD
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,60,"public SevenZArchiveEntry createArchiveEntry(final File inputFile,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,61,final String entryName) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,62,final SevenZArchiveEntry entry = new SevenZArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,63,entry.setDirectory(inputFile.isDirectory());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,64,entry.setName(entryName);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,65,entry.setHasLastModifiedDate(true);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,66,entry.setLastModifiedDate(new Date(inputFile.lastModified()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,67,return entry;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,70,public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,71,final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,72,files.add(entry);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,75,public void closeArchiveEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,76,final SevenZArchiveEntry entry = files.get(files.size() - 1);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,77,if (fileBytesWritten > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,78,entry.setHasStream(true);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,79,++numNonEmptyStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,80,entry.setSize(fileBytesWritten);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,81,entry.setCrc((int) crc32.getValue());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,82,entry.setHasCrc(true);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,83,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,84,entry.setHasStream(false);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,85,entry.setSize(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,86,entry.setHasCrc(false);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,88,crc32.reset();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,89,fileBytesWritten = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,92,public void write(final int b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,93,file.write(b);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,94,crc32.update(b);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,95,fileBytesWritten++;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,98,public void write(final byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,99,"write(b, 0, b.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,102,"public void write(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,103,"file.write(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,104,"crc32.update(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,105,fileBytesWritten += len;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,108,public void finish() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,109,if (finished) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,110,"throw new IOException(""This archive has already been finished"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,112,finished = true;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,114,final long headerPosition = file.getFilePointer();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,116,final ByteArrayOutputStream headerBaos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,117,final DataOutputStream header = new DataOutputStream(headerBaos);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,119,writeHeader(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,120,header.flush();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,121,final byte[] headerBytes = headerBaos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,122,file.write(headerBytes);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,124,final CRC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,126,// signature header
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,127,file.seek(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,128,file.write(SevenZFile.sevenZSignature);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,129,// version
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,130,file.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,131,file.write(2);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,133,// start header
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,134,final ByteArrayOutputStream startHeaderBaos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,135,final DataOutputStream startHeaderStream = new DataOutputStream(startHeaderBaos);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,136,startHeaderStream.writeLong(Long.reverseBytes(headerPosition - SevenZFile.SIGNATURE_HEADER_SIZE));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,137,startHeaderStream.writeLong(Long.reverseBytes(0xffffFFFFL & headerBytes.length));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,138,crc32.reset();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,139,crc32.update(headerBytes);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,140,startHeaderStream.writeInt(Integer.reverseBytes((int)crc32.getValue()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,141,startHeaderStream.flush();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,142,final byte[] startHeaderBytes = startHeaderBaos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,143,crc32.reset();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,144,crc32.update(startHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,145,file.writeInt(Integer.reverseBytes((int)crc32.getValue()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,146,file.write(startHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,149,private void writeHeader(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,150,header.write(NID.kHeader);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,152,header.write(NID.kMainStreamsInfo);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,153,writeStreamsInfo(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,154,writeFilesInfo(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,155,header.write(NID.kEnd);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,158,private void writeStreamsInfo(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,159,if (numNonEmptyStreams > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,160,writePackInfo(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,161,writeUnpackInfo(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,164,writeSubStreamsInfo(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,166,header.write(NID.kEnd);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,169,private void writePackInfo(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,170,// FIXME: this needs to use the compressed sizes/CRCs when we start supporting compression.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,171,header.write(NID.kPackInfo);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,173,"writeUint64(header, 0);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,174,"writeUint64(header, 0xffffFFFFL & numNonEmptyStreams);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,176,header.write(NID.kSize);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,177,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,178,if (entry.hasStream()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,179,"writeUint64(header, entry.getSize());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,183,header.write(NID.kCRC);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,184,header.write(1);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,185,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,186,if (entry.hasStream()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,187,header.writeInt(Integer.reverseBytes(entry.getCrc()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,191,header.write(NID.kEnd);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,194,private void writeUnpackInfo(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,195,header.write(NID.kUnpackInfo);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,197,header.write(NID.kFolder);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,198,"// FIXME: add real support for solid compression, and actual compression methods"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,199,"writeUint64(header, numNonEmptyStreams);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,200,header.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,201,for (int i = 0; i < numNonEmptyStreams; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,202,writeFolder(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,205,header.write(NID.kCodersUnpackSize);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,206,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,207,if (entry.hasStream()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,208,"writeUint64(header, entry.getSize());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,212,header.write(NID.kCRC);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,213,header.write(1);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,214,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,215,if (entry.hasStream()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,216,header.writeInt(Integer.reverseBytes(entry.getCrc()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,220,header.write(NID.kEnd);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,223,private void writeFolder(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,224,"writeUint64(header, 1);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,225,header.write(1);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,226,header.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,229,private void writeSubStreamsInfo(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,230,header.write(NID.kSubStreamsInfo);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,232,//        header.write(NID.kCRC);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,233,//        header.write(1);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,234,//        for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,235,//            if (entry.getHasCrc()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,236,//                header.writeInt(Integer.reverseBytes(entry.getCrc()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,240,header.write(NID.kEnd);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,243,private void writeFilesInfo(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,244,header.write(NID.kFilesInfo);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,246,"writeUint64(header, files.size());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,248,writeFileEmptyStreams(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,249,writeFileEmptyFiles(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,250,writeFileAntiItems(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,251,writeFileNames(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,252,writeFileCTimes(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,253,writeFileATimes(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,254,writeFileMTimes(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,255,writeFileWindowsAttributes(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,256,header.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,259,private void writeFileEmptyStreams(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,260,boolean hasEmptyStreams = false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,261,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,262,if (!entry.hasStream()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,263,hasEmptyStreams = true;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,264,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,267,if (hasEmptyStreams) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,268,header.write(NID.kEmptyStream);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,269,final BitSet emptyStreams = new BitSet(files.size());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,270,for (int i = 0; i < files.size(); i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,271,"emptyStreams.set(i, !files.get(i).hasStream());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,273,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,274,final DataOutputStream out = new DataOutputStream(baos);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,275,"writeBits(out, emptyStreams, files.size());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,276,out.flush();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,277,final byte[] contents = baos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,278,"writeUint64(header, contents.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,279,header.write(contents);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,283,private void writeFileEmptyFiles(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,284,boolean hasEmptyFiles = false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,285,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,286,if (!entry.hasStream() && !entry.isDirectory()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,287,hasEmptyFiles = true;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,288,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,291,if (hasEmptyFiles) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,292,header.write(NID.kEmptyFile);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,293,final BitSet emptyFiles = new BitSet(files.size());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,294,for (int i = 0; i < files.size(); i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,295,"emptyFiles.set(i, !files.get(i).hasStream() && !files.get(i).isDirectory());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,297,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,298,final DataOutputStream out = new DataOutputStream(baos);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,299,"writeBits(out, emptyFiles, files.size());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,300,out.flush();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,301,final byte[] contents = baos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,302,"writeUint64(header, contents.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,303,header.write(contents);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,307,private void writeFileAntiItems(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,308,boolean hasAntiItems = false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,309,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,310,if (entry.isAntiItem()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,311,hasAntiItems = true;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,312,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,315,if (hasAntiItems) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,316,header.write(NID.kAnti);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,317,final BitSet antiItems = new BitSet(files.size());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,318,for (int i = 0; i < files.size(); i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,319,"antiItems.set(i, files.get(i).isAntiItem());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,321,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,322,final DataOutputStream out = new DataOutputStream(baos);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,323,"writeBits(out, antiItems, files.size());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,324,out.flush();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,325,final byte[] contents = baos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,326,"writeUint64(header, contents.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,327,header.write(contents);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,331,private void writeFileNames(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,332,header.write(NID.kName);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,334,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,335,final DataOutputStream out = new DataOutputStream(baos);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,336,out.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,337,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,338,"out.write(entry.getName().getBytes(""UTF-16LE""));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,339,out.writeShort(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,341,out.flush();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,342,final byte[] contents = baos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,343,"writeUint64(header, contents.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,344,header.write(contents);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,347,private void writeFileCTimes(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,348,int numCreationDates = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,349,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,350,if (entry.getHasCreationDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,351,++numCreationDates;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,354,if (numCreationDates > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,355,header.write(NID.kCTime);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,357,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,358,final DataOutputStream out = new DataOutputStream(baos);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,359,if (numCreationDates != files.size()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,360,out.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,361,final BitSet cTimes = new BitSet(files.size());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,362,for (int i = 0; i < files.size(); i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,363,"cTimes.set(i, files.get(i).getHasCreationDate());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,365,"writeBits(out, cTimes, files.size());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,366,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,367,out.write(1);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,369,out.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,370,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,371,if (entry.getHasCreationDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,372,out.writeLong(Long.reverseBytes(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,373,SevenZArchiveEntry.javaTimeToNtfsTime(entry.getCreationDate())));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,376,out.flush();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,377,final byte[] contents = baos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,378,"writeUint64(header, contents.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,379,header.write(contents);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,383,private void writeFileATimes(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,384,int numAccessDates = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,385,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,386,if (entry.getHasAccessDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,387,++numAccessDates;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,390,if (numAccessDates > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,391,header.write(NID.kATime);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,393,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,394,final DataOutputStream out = new DataOutputStream(baos);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,395,if (numAccessDates != files.size()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,396,out.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,397,final BitSet aTimes = new BitSet(files.size());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,398,for (int i = 0; i < files.size(); i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,399,"aTimes.set(i, files.get(i).getHasAccessDate());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,401,"writeBits(out, aTimes, files.size());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,402,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,403,out.write(1);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,405,out.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,406,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,407,if (entry.getHasAccessDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,408,out.writeLong(Long.reverseBytes(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,409,SevenZArchiveEntry.javaTimeToNtfsTime(entry.getAccessDate())));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,412,out.flush();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,413,final byte[] contents = baos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,414,"writeUint64(header, contents.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,415,header.write(contents);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,419,private void writeFileMTimes(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,420,int numLastModifiedDates = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,421,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,422,if (entry.getHasLastModifiedDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,423,++numLastModifiedDates;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,426,if (numLastModifiedDates > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,427,header.write(NID.kMTime);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,429,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,430,final DataOutputStream out = new DataOutputStream(baos);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,431,if (numLastModifiedDates != files.size()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,432,out.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,433,final BitSet mTimes = new BitSet(files.size());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,434,for (int i = 0; i < files.size(); i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,435,"mTimes.set(i, files.get(i).getHasLastModifiedDate());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,437,"writeBits(out, mTimes, files.size());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,438,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,439,out.write(1);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,441,out.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,442,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,443,if (entry.getHasLastModifiedDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,444,out.writeLong(Long.reverseBytes(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,445,SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate())));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,448,out.flush();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,449,final byte[] contents = baos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,450,"writeUint64(header, contents.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,451,header.write(contents);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,455,private void writeFileWindowsAttributes(final DataOutput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,456,int numWindowsAttributes = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,457,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,458,if (entry.getHasWindowsAttributes()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,459,++numWindowsAttributes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,462,if (numWindowsAttributes > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,463,header.write(NID.kWinAttributes);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,465,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,466,final DataOutputStream out = new DataOutputStream(baos);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,467,if (numWindowsAttributes != files.size()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,468,out.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,469,final BitSet attributes = new BitSet(files.size());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,470,for (int i = 0; i < files.size(); i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,471,"attributes.set(i, files.get(i).getHasWindowsAttributes());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,473,"writeBits(out, attributes, files.size());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,474,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,475,out.write(1);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,477,out.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,478,for (final SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,479,if (entry.getHasWindowsAttributes()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,480,out.writeInt(Integer.reverseBytes(entry.getWindowsAttributes()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,483,out.flush();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,484,final byte[] contents = baos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,485,"writeUint64(header, contents.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,486,header.write(contents);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,490,"private void writeUint64(final DataOutput header, long value) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,491,int firstByte = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,492,int mask = 0x80;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,493,int i;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,494,for (i = 0; i < 8; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,495,if (value < ((1L << ( 7  * (i + 1))))) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,496,firstByte |= (value >>> (8 * i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,497,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,499,firstByte |= mask;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,500,mask >>>= 1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,502,header.write(firstByte);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,503,for (; i > 0; i--) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,504,header.write((int) (0xff & value));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,505,value >>>= 8;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,509,"private void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,510,int cache = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,511,int shift = 7;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,512,for (int i = 0; i < length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,513,cache |= ((bits.get(i) ? 1 : 0) << shift);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,514,--shift;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,515,if (shift == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,516,header.write(cache);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,517,shift = 7;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,518,cache = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,521,if (length > 0 && shift > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,522,header.write(cache);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,4,*  this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,7,*  the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,14,*  See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,15,*  limitations under the License.
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,18,package org.apache.commons.compress.archivers;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,20,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,21,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,22,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,24,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,25,import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,26,import org.apache.commons.compress.archivers.sevenz.SevenZFile;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,27,import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,29,public class SevenZTestCase extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,30,public void testSevenZArchiveCreation() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,31,"final File output = new File(dir, ""bla.7z"");"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,32,"final File file1 = getFile(""test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,33,"final File file2 = getFile(""test2.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,35,final SevenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,36,try {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,37,SevenZArchiveEntry entry;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,39,"entry = outArchive.createArchiveEntry(file1, file1.getName());"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,40,outArchive.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,41,"copy(file1, outArchive);"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,42,outArchive.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,44,"entry = outArchive.createArchiveEntry(file2, file2.getName());"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,45,outArchive.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,46,"copy(file2, outArchive);"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,47,outArchive.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,48,} finally {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,49,outArchive.close();
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,52,final SevenZFile archive = new SevenZFile(output);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,53,try {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,54,SevenZArchiveEntry entry;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,56,entry = archive.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,57,assert(entry != null);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,58,"assertEquals(entry.getName(), file1.getName());"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,60,entry = archive.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,61,assert(entry != null);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,62,"assertEquals(entry.getName(), file2.getName());"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,64,assert(archive.getNextEntry() == null);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,65,} finally {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,66,archive.close();
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,70,"private void copy(final File src, final SevenZOutputFile dst) throws IOException {"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,71,FileInputStream fis = null;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,72,try {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,73,fis = new FileInputStream(src);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,74,final byte[] buffer = new byte[8*1024];
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,75,int bytesRead;
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,76,while ((bytesRead = fis.read(buffer)) >= 0) {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,77,"dst.write(buffer, 0, bytesRead);"
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,79,} finally {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,80,if (fis != null) {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,81,fis.close();

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,240,f (entry.getSize() > TarConstants.MAXSIZE) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,241,f (bigFileMode == BIGFILE_POSIX) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,242,"axHeaders.put(""size"", String.valueOf(entry.getSize()));"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,243, else if (bigFileMode != BIGFILE_STAR) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,244,"hrow new RuntimeException(""file size '"" + entry.getSize()"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,245," ""' is too big ( > """
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,246," TarConstants.MAXSIZE + "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,240,if (bigFileMode == BIGFILE_POSIX) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,241,"addPaxHeadersForBigNumbers(paxHeaders, entry);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,242,} else if (bigFileMode != BIGFILE_STAR) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,243,failForBigNumbers(entry);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,450,"private void addPaxHeadersForBigNumbers(Map<String, String> paxHeaders,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,451,TarArchiveEntry entry) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,452,if (entry.getSize() > TarConstants.MAXSIZE) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,453,"paxHeaders.put(""size"", String.valueOf(entry.getSize()));"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,455,if (entry.getGroupId() > TarConstants.MAXID) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,456,"paxHeaders.put(""gid"", String.valueOf(entry.getGroupId()));"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,458,final long mtime =  entry.getModTime().getTime() / 1000;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,459,if (mtime < 0 || mtime > TarConstants.MAXSIZE) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,460,"paxHeaders.put(""mtime"", String.valueOf(mtime));"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,462,if (entry.getUserId() > TarConstants.MAXID) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,463,"paxHeaders.put(""uid"", String.valueOf(entry.getUserId()));"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,465,if (entry.getMode() > TarConstants.MAXID) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,466,"throw new RuntimeException(""mode '"" + entry.getMode()"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,467,"+ ""' is too big ( > """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,468,"+ TarConstants.MAXID + "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,470,// TODO add devMajor and devMinor
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,473,private void failForBigNumbers(TarArchiveEntry entry) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,474,if (entry.getSize() > TarConstants.MAXSIZE) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,475,"throw new RuntimeException(""file size '"" + entry.getSize()"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,476,"+ ""' is too big ( > """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,477,"+ TarConstants.MAXSIZE + "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,479,if (entry.getGroupId() > TarConstants.MAXID) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,480,"throw new RuntimeException(""group id '"" + entry.getGroupId()"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,481,"+ ""' is too big ( > """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,482,"+ TarConstants.MAXID + "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,484,final long mtime =  entry.getModTime().getTime() / 1000;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,485,if (mtime < 0 || mtime > TarConstants.MAXSIZE) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,486,"throw new RuntimeException(""last modification time '"""
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,487,+ entry.getModTime()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,488,"+ ""' is too big ( > """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,489,"+ TarConstants.MAXSIZE + "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,491,if (entry.getUserId() > TarConstants.MAXID) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,492,"throw new RuntimeException(""user id '"" + entry.getUserId()"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,493,"+ ""' is too big ( > """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,494,"+ TarConstants.MAXID + "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,496,if (entry.getMode() > TarConstants.MAXID) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,497,"throw new RuntimeException(""mode '"" + entry.getMode()"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,498,"+ ""' is too big ( > """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,499,"+ TarConstants.MAXID + "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,501,// TODO add devMajor and devMinor
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,236,public void testOldEntryPosixMode() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,237,"TarArchiveEntry t = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,238,t.setSize(Integer.MAX_VALUE);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,239,t.setModTime(-1000);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,240,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,241,TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,242,tos.setBigFileMode(TarArchiveOutputStream.BIGFILE_POSIX);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,243,tos.putArchiveEntry(t);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,244,// make sure header is written to byte array
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,245,tos.write(new byte[10 * 1024]);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,246,byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,247,"assertEquals(""00000000000 "","
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,248,"new String(data,"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,249,1024 + TarConstants.NAMELEN
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,250,+ TarConstants.MODELEN
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,251,+ TarConstants.UIDLEN
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,252,+ TarConstants.GIDLEN
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,253,"+ TarConstants.SIZELEN, 12,"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,254,"""UTF-8""));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,255,TarArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,256,new TarArchiveInputStream(new ByteArrayInputStream(data));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,257,TarArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,258,"Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,259,"cal.set(1969, 11, 31, 23, 59, 59);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,260,"cal.set(Calendar.MILLISECOND, 0);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,261,"assertEquals(cal.getTime(), e.getLastModifiedDate());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,264,public void testOldEntryError() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,265,"TarArchiveEntry t = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,266,t.setSize(Integer.MAX_VALUE);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,267,t.setModTime(-1000);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,268,TarArchiveOutputStream tos =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,269,new TarArchiveOutputStream(new ByteArrayOutputStream());
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,270,try {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,271,tos.putArchiveEntry(t);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,272,"fail(""Should have generated RuntimeException"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,273,} catch (RuntimeException expected) {

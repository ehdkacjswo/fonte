is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,53, else {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,54,eturn localFileHeader.name;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,54,return localFileHeader.name;
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,117, else {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,118,/ intentionally using the default encoding as that's the contract for a null charsetName
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,119,eturn new String(buffer.toByteArray());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,118,// intentionally using the default encoding as that's the contract for a null charsetName
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,119,return new String(buffer.toByteArray());
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,333, else {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,334,urrentInputStream = null;
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,335,eturn null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,333,currentInputStream = null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,334,return null;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,39, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,40,eturn -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java,40,return -1;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,150, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,151,hrow new UnsupportedOperationException(
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,152,"The entry doesn't have this timestamp"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,151,throw new UnsupportedOperationException(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,152,"""The entry doesn't have this timestamp"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,202, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,203,hrow new UnsupportedOperationException(
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,204,"The entry doesn't have this timestamp"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,202,throw new UnsupportedOperationException(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,203,"""The entry doesn't have this timestamp"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,253, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,254,hrow new UnsupportedOperationException(
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,255,"The entry doesn't have this timestamp"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,252,throw new UnsupportedOperationException(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,253,"""The entry doesn't have this timestamp"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,384, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,385,or (int i = 0; i < (int)numFolders; i++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,386,olders[i] = readFolder(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,385,for (int i = 0; i < (int)numFolders; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,386,folders[i] = readFolder(header);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,650, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,651,f (((size - 1) & 1) != 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,652,"hrow new IOException(""File names length invalid"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,654,inal byte[] names = new byte[(int)(size - 1)];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,655,eader.readFully(names);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,656,nt nextFile = 0;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,657,nt nextName = 0;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,658,or (int i = 0; i < names.length; i += 2) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,659,f (names[i] == 0 && names[i+1] == 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,660,"iles[nextFile++].setName(new String(names, nextName, i-nextName, CharsetNames.UTF_16LE));"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,661,extName = i + 2;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,664,f (nextName != names.length || nextFile != files.length) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,665,"hrow new IOException(""Error parsing file names"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,650,if (((size - 1) & 1) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,651,"throw new IOException(""File names length invalid"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,653,final byte[] names = new byte[(int)(size - 1)];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,654,header.readFully(names);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,655,int nextFile = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,656,int nextName = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,657,for (int i = 0; i < names.length; i += 2) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,658,if (names[i] == 0 && names[i+1] == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,659,"files[nextFile++].setName(new String(names, nextName, i-nextName, CharsetNames.UTF_16LE));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,660,nextName = i + 2;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,663,if (nextName != names.length || nextFile != files.length) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,664,"throw new IOException(""Error parsing file names"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,675, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,676,or (int i = 0; i < files.length; i++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,677,iles[i].setHasCreationDate(timesDefined.get(i));
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,678,f (files[i].getHasCreationDate()) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,679,iles[i].setCreationDate(Long.reverseBytes(header.readLong()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,674,for (int i = 0; i < files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,675,files[i].setHasCreationDate(timesDefined.get(i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,676,if (files[i].getHasCreationDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,677,files[i].setCreationDate(Long.reverseBytes(header.readLong()));
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,690, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,691,or (int i = 0; i < files.length; i++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,692,iles[i].setHasAccessDate(timesDefined.get(i));
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,693,f (files[i].getHasAccessDate()) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,694,iles[i].setAccessDate(Long.reverseBytes(header.readLong()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,688,for (int i = 0; i < files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,689,files[i].setHasAccessDate(timesDefined.get(i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,690,if (files[i].getHasAccessDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,691,files[i].setAccessDate(Long.reverseBytes(header.readLong()));
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,705, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,706,or (int i = 0; i < files.length; i++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,707,iles[i].setHasLastModifiedDate(timesDefined.get(i));
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,708,f (files[i].getHasLastModifiedDate()) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,709,iles[i].setLastModifiedDate(Long.reverseBytes(header.readLong()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,702,for (int i = 0; i < files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,703,files[i].setHasLastModifiedDate(timesDefined.get(i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,704,if (files[i].getHasLastModifiedDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,705,files[i].setLastModifiedDate(Long.reverseBytes(header.readLong()));
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,720, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,721,or (int i = 0; i < files.length; i++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,722,iles[i].setHasWindowsAttributes(attributesDefined.get(i));
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,723,f (files[i].getHasWindowsAttributes()) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,724,iles[i].setWindowsAttributes(Integer.reverseBytes(header.readInt()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,716,for (int i = 0; i < files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,717,files[i].setHasWindowsAttributes(attributesDefined.get(i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,718,if (files[i].getHasWindowsAttributes()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,719,files[i].setWindowsAttributes(Integer.reverseBytes(header.readInt()));
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,891, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,892,eturn inputStreamStack;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,886,return inputStreamStack;
False,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,70, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,71,eturn -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,71,return -1;
False,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,79, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,80,eturn ByteBuffer.wrap(name.getBytes(this.charsetName));
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,80,return ByteBuffer.wrap(name.getBytes(this.charsetName));
False,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,91, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,92,"eturn new String(data,this.charsetName);"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,91,"return new String(data,this.charsetName);"
False,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,324, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,325,eturn false;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,325,return false;
False,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,565, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,566,eturn false;
True,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,566,return false;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,657, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,658,ount(n);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,659,emaining -= n;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,658,count(n);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,659,remaining -= n;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,478, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,479,eturn null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,479,return null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,102, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,103,eturn i;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,103,return i;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,138, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,139,"hrow new NumberFormatException(""The BigInteger cannot fit inside a 64 bit java long: ["" + big + ""]"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,138,"throw new NumberFormatException(""The BigInteger cannot fit inside a 64 bit java long: ["" + big + ""]"");"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,176, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,177,eturn 256 + b;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,175,return 256 + b;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,195, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,196,eturn (byte) (i - 256);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,193,return (byte) (i - 256);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,357, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,358,"hrow new UnsupportedZipFeatureException(m, ze);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,354,"throw new UnsupportedZipFeatureException(m, ze);"
False,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,111, else {
False,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,112,/ do not add this change
False,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,113,eturn;
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,112,// do not add this change
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,113,return;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,143, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,144,"hrow new IOException(""stream closed"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,144,"throw new IOException(""stream closed"");"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,302, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,303,his.storedBlockCRC = bsGetInt();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,304,his.blockRandomised = bsR(1) == 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,307," Allocate data here instead in constructor, so we do not allocate"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,308, it if the input file is empty.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,310,f (this.data == null) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,311,his.data = new Data(this.blockSize100k);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,314,/ currBlockNo++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,315,etAndMoveToFrontDecode();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,302,this.storedBlockCRC = bsGetInt();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,303,this.blockRandomised = bsR(1) == 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,317,his.crc.initialiseCRC();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,318,his.currentState = START_BLOCK_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,306,"* Allocate data here instead in constructor, so we do not allocate"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,307,* it if the input file is empty.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,309,if (this.data == null) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,310,this.data = new Data(this.blockSize100k);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,313,// currBlockNo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,314,getAndMoveToFrontDecode();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,316,this.crc.initialiseCRC();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,317,this.currentState = START_BLOCK_STATE;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,633, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,634,"hrow new IOException(""unexpected end of stream"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,632,"throw new IOException(""unexpected end of stream"");"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,649, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,650,hrow new IOException(
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,651,"unexpected end of stream"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,647,throw new IOException(
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,648,"""unexpected end of stream"");"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,716, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,717,"hrow new IOException(""unexpected end of stream"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,713,"throw new IOException(""unexpected end of stream"");"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,732, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,733,"hrow new IOException(""unexpected end of stream"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,728,"throw new IOException(""unexpected end of stream"");"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,767, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,768,"hrow new IOException(""unexpected end of stream"");"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,762,"throw new IOException(""unexpected end of stream"");"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,836, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,837,ndBlock();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,838,nitBlock();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,839,eturn setupBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,830,endBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,831,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,832,return setupBlock();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,853, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,854,his.currentState = NO_RAND_PART_A_STATE;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,855,ndBlock();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,856,nitBlock();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,857,eturn setupBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,846,this.currentState = NO_RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,847,endBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,848,initBlock();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,849,return setupBlock();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,894, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,895,his.currentState = RAND_PART_A_STATE;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,896,his.su_i2++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,897,his.su_count = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,898,eturn setupRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,886,this.currentState = RAND_PART_A_STATE;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,887,this.su_i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,888,this.su_count = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,889,return setupRandPartA();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,923, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,924,his.su_i2++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,925,his.su_count = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,926,eturn setupNoRandPartA();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,914,this.su_i2++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,915,this.su_count = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,916,return setupNoRandPartA();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,728,lse {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,729,f ((block[i1] & 0xff) > (block[i2] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,730,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,731, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,732,reak HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,728,if ((block[i1] & 0xff) > (block[i2] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,729,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,731,break HAMMER;
False,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,48, else {
False,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,49,eturn -1;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,49,return -1;
False,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,101, else {
False,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,102,eturn 0;
True,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,102,return 0;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,1,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,3,import java.io.FileOutputStream;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,4,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,5,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,6,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,7,import java.nio.ByteOrder;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,8,import java.nio.channels.ClosedChannelException;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,9,import java.nio.channels.WritableByteChannel;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,10,import java.util.concurrent.atomic.AtomicBoolean;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,12,"public class FixedLengthBlockOutputStream extends OutputStream implements WritableByteChannel,"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,13,AutoCloseable {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,15,private final WritableByteChannel out;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,16,private final int blockSize;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,17,private final ByteBuffer buffer;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,18,private final AtomicBoolean closed = new AtomicBoolean(false);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,20,"public FixedLengthBlockOutputStream(OutputStream os, int blockSize) {"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,21,if (os instanceof FileOutputStream) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,22,FileOutputStream fileOutputStream = (FileOutputStream) os;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,23,out = fileOutputStream.getChannel();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,24,buffer = ByteBuffer.allocateDirect(blockSize);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,25,} else {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,26,out = new BufferAtATimeOutputChannel(os);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,27,buffer = ByteBuffer.allocate(blockSize);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,29,this.blockSize = blockSize;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,32,"public FixedLengthBlockOutputStream(WritableByteChannel out, int blockSize) {"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,33,this.out = out;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,34,this.blockSize = blockSize;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,35,this.buffer = ByteBuffer.allocateDirect(blockSize);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,38,private void maybeFlush() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,39,if (!buffer.hasRemaining()) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,40,writeBlock();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,44,private void writeBlock() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,45,buffer.flip();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,46,int i = out.write(buffer);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,47,boolean hasRemaining = buffer.hasRemaining();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,48,if (i != blockSize || hasRemaining) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,49,String msg = String
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,50,".format(""Failed to write %,d bytes atomically. Only wrote  %,d"","
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,51,"blockSize, i);"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,52,throw new IOException(msg);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,54,buffer.clear();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,57,@Override
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,58,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,59,if(!isOpen()) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,60,throw new ClosedChannelException();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,62,buffer.put((byte) b);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,63,maybeFlush();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,66,@Override
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,67,"public void write(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,68,if(!isOpen()) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,69,throw new ClosedChannelException();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,71,while (len > 0) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,72,"int n = Math.min(len, buffer.remaining());"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,73,"buffer.put(b, off, n);"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,74,maybeFlush();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,75,len -= n;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,76,off += n;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,80,@Override
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,81,public int write(ByteBuffer src) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,82,if(!isOpen()) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,83,throw new ClosedChannelException();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,85,int srcRemaining = src.remaining();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,87,if (srcRemaining < buffer.remaining()) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,88,// if don't have enough bytes in src to fill up a block we must buffer
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,89,buffer.put(src);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,90,} else {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,91,int srcLeft = srcRemaining;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,92,int savedLimit = src.limit();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,93,"// If we're not at the start of buffer, we have some bytes already  buffered"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,94,// fill up the reset of buffer and write the block.
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,95,if (buffer.position() != 0) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,96,int n = buffer.remaining();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,97,src.limit(src.position() + n);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,98,buffer.put(src);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,99,writeBlock();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,100,srcLeft -= n;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,102,"// whilst we have enough bytes in src for complete blocks,"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,103,// write them directly from src without copying them to buffer
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,104,while (srcLeft >= blockSize) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,105,src.limit(src.position() + blockSize);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,106,out.write(src);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,107,srcLeft -= blockSize;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,109,// copy any remaining bytes into buffer
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,110,src.limit(savedLimit);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,111,buffer.put(src);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,113,return srcRemaining;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,116,@Override
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,117,public boolean isOpen() {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,118,if(!out.isOpen()) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,119,closed.set(true);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,121,return !closed.get();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,124,@Override
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,125,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,126,"if (closed.compareAndSet(false, true)) {"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,127,if (buffer.position() != 0) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,128,padLastBlock();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,129,writeBlock();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,131,out.close();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,135,private void padLastBlock() {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,136,buffer.order(ByteOrder.nativeOrder());
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,137,int bytesToWrite = buffer.remaining();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,138,if (bytesToWrite > 8) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,139,int align = (buffer.position() & 7);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,140,if (align != 0) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,141,int limit = 8 - align;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,142,for (int i = 0; i < limit; i++) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,143,buffer.put((byte) 0);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,145,bytesToWrite -= limit;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,148,while (bytesToWrite >= 8) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,149,buffer.putLong(0L);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,150,bytesToWrite -= 8;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,153,while (buffer.hasRemaining()) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,154,buffer.put((byte) 0);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,159,* Helper class to provide channel wrapper for arbitrary output stream that doesn't alter the
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,160,"* size of writes.  We can't use Channels.newChannel, because for non FileOutputStreams, it"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,161,* breaks up writes into 8KB max chunks. Since the purpose of this class is to always write
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,162,"* complete blocks, we need to write a simple class to take care of it."
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,164,private static class BufferAtATimeOutputChannel implements WritableByteChannel {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,166,private final OutputStream out;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,167,private final AtomicBoolean closed = new AtomicBoolean(false);
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,169,private BufferAtATimeOutputChannel(OutputStream out) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,170,this.out = out;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,173,@Override
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,174,public int write(ByteBuffer buffer) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,175,"assert isOpen() : ""somehow trying to write to closed BufferAtATimeOutputChannel"";"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,176,assert buffer.hasArray() :
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,177,"""direct buffer somehow written to BufferAtATimeOutputChannel"";"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,179,try {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,180,int pos = buffer.position();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,181,int len = buffer.limit() - pos;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,182,"out.write(buffer.array(), buffer.arrayOffset() + pos, len);"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,183,buffer.position(buffer.limit());
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,184,return len;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,185,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,186,try {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,187,close();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,188,} finally {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,189,throw e;
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,194,@Override
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,195,public boolean isOpen() {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,196,return !closed.get();
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,199,@Override
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,200,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,201,"if (closed.compareAndSet(false, true)) {"
True,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java,202,out.close();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,1,package org.apache.commons.compress.utils;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,3,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,4,import static org.junit.Assert.assertFalse;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,5,import static org.junit.Assert.assertThat;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,6,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,7,import static org.junit.Assert.fail;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,9,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,10,import java.io.DataInputStream;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,11,import java.io.DataOutputStream;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,12,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,13,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,14,import java.io.OutputStream;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,15,import java.nio.ByteBuffer;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,16,import java.nio.channels.ClosedChannelException;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,17,import java.nio.channels.WritableByteChannel;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,18,import java.nio.charset.StandardCharsets;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,19,import java.nio.file.Files;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,20,import java.nio.file.Path;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,21,import java.util.concurrent.atomic.AtomicBoolean;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,22,import org.hamcrest.core.IsInstanceOf;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,24,import org.mockito.internal.matchers.GreaterOrEqual;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,26,public class FixedLengthBlockOutputStreamTest {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,28,@Test
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,29,public void testSmallWrite() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,30,"testWriteAndPad(10240, ""hello world!\n"", false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,31,"testWriteAndPad(512, ""hello world!\n"", false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,32,"testWriteAndPad(11, ""hello world!\n"", false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,33,"testWriteAndPad(3, ""hello world!\n"", false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,36,@Test
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,37,public void testSmallWriteToStream() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,38,"testWriteAndPadToStream(10240, ""hello world!\n"", false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,39,"testWriteAndPadToStream(512, ""hello world!\n"", false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,40,"testWriteAndPadToStream(11, ""hello world!\n"", false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,41,"testWriteAndPadToStream(3, ""hello     world!\n"", false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,44,@Test
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,45,public void testWriteSingleBytes() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,46,int blockSize = 4;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,47,"MockWritableByteChannel mock = new MockWritableByteChannel(blockSize, false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,48,ByteArrayOutputStream bos = mock.bos;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,49,"String text = ""hello world avengers"";"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,50,byte msg[] = text.getBytes();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,51,int len = msg.length;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,52,"try (FixedLengthBlockOutputStream out = new FixedLengthBlockOutputStream(mock, blockSize)) {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,53,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,54,out.write(msg[i]);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,57,byte[] output = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,59,"validate(blockSize, msg, output);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,63,@Test
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,64,public void testWriteBuf() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,65,"String hwa = ""hello world avengers"";"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,66,"testBuf(4, hwa);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,67,"testBuf(512, hwa);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,68,"testBuf(10240, hwa);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,69,"testBuf(11, hwa + hwa + hwa);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,72,@Test
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,73,public void testMultiWriteBuf() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,74,int blockSize = 13;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,75,"MockWritableByteChannel mock = new MockWritableByteChannel(blockSize, false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,76,"String testString = ""hello world"";"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,77,byte msg[] = testString.getBytes();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,78,int reps = 17;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,80,"try (FixedLengthBlockOutputStream out = new FixedLengthBlockOutputStream(mock, blockSize)) {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,81,for (int i = 0; i < reps; i++) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,82,ByteBuffer buf = getByteBuffer(msg);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,83,out.write(buf);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,86,ByteArrayOutputStream bos = mock.bos;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,87,double v = Math.ceil((reps * msg.length) / (double) blockSize) * blockSize;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,88,"assertEquals(""wrong size"", (long) v, bos.size());"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,89,int strLen = msg.length * reps;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,90,byte[] output = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,91,"String l = new String(output, 0, strLen);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,92,StringBuilder buf = new StringBuilder(strLen);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,93,for (int i = 0; i < reps; i++) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,94,buf.append(testString);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,96,"assertEquals(buf.toString(), l);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,97,for (int i = strLen; i < output.length; i++) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,98,"assertEquals(0, output[i]);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,102,@Test
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,103,public void testPartialWritingThrowsException() {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,104,try {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,105,"testWriteAndPad(512, ""hello world!\n"", true);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,106,"fail(""Exception for partial write not thrown"");"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,107,} catch (IOException e) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,108,String msg = e.getMessage();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,109,"assertEquals(""exception message"","
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,110,"""Failed to write 512 bytes atomically. Only wrote  511"", msg);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,115,@Test
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,116,public void testWriteFailsAfterFLClosedThrowsException() {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,117,try {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,118,FixedLengthBlockOutputStream out = getClosedFLBOS();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,119,out.write(1);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,120,"fail(""expected Closed Channel Exception"");"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,121,} catch (IOException e) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,122,"assertThat(e, IsInstanceOf.instanceOf(ClosedChannelException.class));"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,123,// expected
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,125,try {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,126,FixedLengthBlockOutputStream out = getClosedFLBOS();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,127,"out.write(new byte[] {0,1,2,3});"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,128,"fail(""expected Closed Channel Exception"");"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,129,} catch (IOException e) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,130,"assertThat(e, IsInstanceOf.instanceOf(ClosedChannelException.class));"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,131,// expected
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,134,try {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,135,FixedLengthBlockOutputStream out = getClosedFLBOS();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,136,"out.write(ByteBuffer.wrap(new byte[] {0,1,2,3}));"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,137,"fail(""expected Closed Channel Exception"");"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,138,} catch (IOException e) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,139,"assertThat(e, IsInstanceOf.instanceOf(ClosedChannelException.class));"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,140,// expected
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,145,private FixedLengthBlockOutputStream getClosedFLBOS() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,146,int blockSize = 512;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,147,FixedLengthBlockOutputStream out = new FixedLengthBlockOutputStream(
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,148,"new MockOutputStream(blockSize, false), blockSize);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,149,out.write(1);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,150,assertTrue(out.isOpen());
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,151,out.close();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,152,assertFalse(out.isOpen());
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,153,return out;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,156,@Test
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,157,public void testWriteFailsAfterDestClosedThrowsException() {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,158,int blockSize = 2;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,159,"MockOutputStream mock = new MockOutputStream(blockSize, false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,160,FixedLengthBlockOutputStream out =
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,161,"new FixedLengthBlockOutputStream(mock, blockSize);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,162,try {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,163,out.write(1);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,164,assertTrue(out.isOpen());
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,165,mock.close();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,166,out.write(1);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,167,"fail(""expected IO Exception"");"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,168,} catch (IOException e) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,169,// expected
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,171,assertFalse(out.isOpen());
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,174,@Test
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,175,public void testWithFileOutputStream() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,176,"final Path tempFile = Files.createTempFile(""xxx"", ""yyy"");"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,177,Runtime.getRuntime().addShutdownHook(new Thread() {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,178,@Override
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,179,public void run() {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,180,try {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,181,Files.deleteIfExists(tempFile);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,182,} catch (IOException e) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,186,int blockSize = 512;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,187,int reps = 1000;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,188,OutputStream os = new FileOutputStream(tempFile.toFile());
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,189,try (FixedLengthBlockOutputStream out = new FixedLengthBlockOutputStream(
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,190,"os, blockSize)) {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,191,DataOutputStream dos = new DataOutputStream(out);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,192,for (int i = 0; i < reps; i++) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,193,dos.writeInt(i);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,196,long expectedDataSize = reps * 4L;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,197,long expectedFileSize = (long)Math.ceil(expectedDataSize/(double)blockSize)*blockSize;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,198,"assertEquals(""file size"",expectedFileSize, Files.size(tempFile));"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,199,DataInputStream din = new DataInputStream(Files.newInputStream(tempFile));
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,200,for(int i=0;i<reps;i++) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,201,"assertEquals(""file int"",i,din.readInt());"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,203,for(int i=0;i<expectedFileSize - expectedDataSize;i++) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,204,"assertEquals(0,din.read());"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,206,"assertEquals(-1,din.read());"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,209,"private void testBuf(int blockSize, String text) throws IOException {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,210,"MockWritableByteChannel mock = new MockWritableByteChannel(blockSize, false);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,212,ByteArrayOutputStream bos = mock.bos;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,213,byte msg[] = text.getBytes();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,214,ByteBuffer buf = getByteBuffer(msg);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,215,"try (FixedLengthBlockOutputStream out = new FixedLengthBlockOutputStream(mock, blockSize)) {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,216,out.write(buf);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,218,double v = Math.ceil(msg.length / (double) blockSize) * blockSize;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,219,"assertEquals(""wrong size"", (long) v, bos.size());"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,220,byte[] output = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,221,"String l = new String(output, 0, msg.length);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,222,"assertEquals(text, l);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,223,for (int i = msg.length; i < bos.size(); i++) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,224,"assertEquals(String.format(""output[%d]"", i), 0, output[i]);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,229,private ByteBuffer getByteBuffer(byte[] msg) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,230,int len = msg.length;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,231,ByteBuffer buf = ByteBuffer.allocate(len);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,232,buf.put(msg);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,233,buf.flip();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,234,return buf;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,238,"private void testWriteAndPad(int blockSize, String text, boolean doPartialWrite)"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,239,throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,240,"MockWritableByteChannel mock = new MockWritableByteChannel(blockSize, doPartialWrite);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,241,byte[] msg = text.getBytes(StandardCharsets.US_ASCII);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,243,ByteArrayOutputStream bos = mock.bos;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,244,"try (FixedLengthBlockOutputStream out = new FixedLengthBlockOutputStream(mock, blockSize)) {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,246,out.write(msg);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,247,"assertEquals(""no partial write"", (msg.length / blockSize) * blockSize, bos.size());"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,249,"validate(blockSize, msg, bos.toByteArray());"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,252,"private void testWriteAndPadToStream(int blockSize, String text, boolean doPartialWrite)"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,253,throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,254,"MockOutputStream mock = new MockOutputStream(blockSize, doPartialWrite);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,255,byte[] msg = text.getBytes(StandardCharsets.US_ASCII);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,257,ByteArrayOutputStream bos = mock.bos;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,258,"try (FixedLengthBlockOutputStream out = new FixedLengthBlockOutputStream(mock, blockSize)) {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,259,out.write(msg);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,260,"assertEquals(""no partial write"", (msg.length / blockSize) * blockSize, bos.size());"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,262,"validate(blockSize, msg, bos.toByteArray());"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,267,"private void validate(int blockSize, byte[] expectedBytes, byte[] actualBytes) {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,268,double v = Math.ceil(expectedBytes.length / (double) blockSize) * blockSize;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,269,"assertEquals(""wrong size"", (long) v, actualBytes.length);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,270,"assertContainsAtOffset(""output"", expectedBytes, 0, actualBytes);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,271,for (int i = expectedBytes.length; i < actualBytes.length; i++) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,272,"assertEquals(String.format(""output[%d]"", i), 0, actualBytes[i]);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,277,"private static void assertContainsAtOffset(String msg, byte[] expected, int offset,"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,278,byte[] actual) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,279,"assertThat(actual.length, new GreaterOrEqual<>(offset + expected.length));"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,280,for (int i = 0; i < expected.length; i++) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,281,"assertEquals(String.format(""%s ([%d])"", msg, i), expected[i], actual[i + offset]);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,285,private static class MockOutputStream extends OutputStream {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,287,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,288,private final int requiredWriteSize;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,289,private final boolean doPartialWrite;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,290,private AtomicBoolean closed = new AtomicBoolean();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,292,"private MockOutputStream(int requiredWriteSize, boolean doPartialWrite) {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,293,this.requiredWriteSize = requiredWriteSize;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,294,this.doPartialWrite = doPartialWrite;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,297,@Override
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,298,"public void write(byte[] b, int off, int len) throws IOException {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,299,checkIsOpen();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,300,"assertEquals(""write size"", requiredWriteSize, len);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,301,if (doPartialWrite) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,302,len--;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,304,"bos.write(b, off, len);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,307,private void checkIsOpen() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,308,if (closed.get()) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,309,"IOException e = new IOException(""Closed"");"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,310,throw e;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,314,@Override
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,315,public void write(int b) throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,316,checkIsOpen();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,317,"assertEquals(""write size"", requiredWriteSize, 1);"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,318,bos.write(b);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,321,@Override
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,322,public void close() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,323,"if (closed.compareAndSet(false, true)) {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,324,bos.close();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,329,private static class MockWritableByteChannel implements WritableByteChannel {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,331,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,332,private final int requiredWriteSize;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,333,private final boolean doPartialWrite;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,335,"private MockWritableByteChannel(int requiredWriteSize, boolean doPartialWrite) {"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,336,this.requiredWriteSize = requiredWriteSize;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,337,this.doPartialWrite = doPartialWrite;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,340,@Override
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,341,public int write(ByteBuffer src) throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,342,"assertEquals(""write size"", requiredWriteSize, src.remaining());"
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,343,if (doPartialWrite) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,344,src.limit(src.limit() - 1);
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,346,int bytesOut = src.remaining();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,347,while (src.hasRemaining()) {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,348,bos.write(src.get());
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,350,return bytesOut;
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,353,AtomicBoolean closed = new AtomicBoolean();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,355,@Override
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,356,public boolean isOpen() {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,357,return !closed.get();
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,360,@Override
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,361,public void close() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java,362,"closed.compareAndSet(false, true);"

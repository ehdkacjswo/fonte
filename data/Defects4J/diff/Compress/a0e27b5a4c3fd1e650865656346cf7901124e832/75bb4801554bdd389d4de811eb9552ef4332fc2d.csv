is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,301,* Adds some initial data to fill the window with.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,303,* <p>This is used if the stream has been cut into blocks and
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,304,* back-references of one block may refer to data of the previous
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,305,* block(s). One such example is the LZ4 frame format using block
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,306,* dependency.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,308,* @param data the data to fill the window with.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,309,* @throws IllegalStateException if the compressor has already started to accept data
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,311,public void prefill(byte[] data) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,312,if (currentPosition != 0 || lookahead != 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,313,"throw new IllegalStateException(""the compressor has already started to accept data, can't prefill anymore"");"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,315,"final int len = Math.min(params.getWindowSize(), data.length);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,316,"System.arraycopy(data, data.length - len, window, 0, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,317,if (len >= NUMBER_OF_BYTES_IN_HASH) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,318,initialize();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,319,final int stop = len - NUMBER_OF_BYTES_IN_HASH + 1;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,320,for (int i = 0; i < stop; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,321,insertString(i);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,323,missedInserts = NUMBER_OF_BYTES_IN_HASH - 1;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,324,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,325,missedInserts = len;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,327,blockStart = currentPosition = len;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,397, returns the previous previous head of the hash-chain.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,427,* returns the previous head of the hash-chain.
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,199,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,200,public void blaExampleWithPrefill() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,201,final List<LZ77Compressor.Block> blocks = new ArrayList<>();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,202,"LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,203,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,204,public void accept(LZ77Compressor.Block block) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,205,//System.err.println(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,206,if (block instanceof LZ77Compressor.LiteralBlock) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,207,// replace with a real copy of data so tests
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,208,// can see the results as they've been when
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,209,// the callback has been called
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,210,LZ77Compressor.LiteralBlock b = (LZ77Compressor.LiteralBlock) block;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,211,int len = b.getLength();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,212,block = new LZ77Compressor.LiteralBlock(
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,213,"Arrays.copyOfRange(b.getData(), b.getOffset(), b.getOffset() + len),"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,214,"0, len);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,216,blocks.add(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,219,"c.prefill(Arrays.copyOfRange(BLA, 0, 6));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,220,"c.compress(Arrays.copyOfRange(BLA, 6, BLA.length));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,221,c.finish();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,222,"assertSize(3, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,223,"assertBackReference(5, 18, blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,224,"assertLiteralBlock(""!"", blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,227,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,228,public void blaExampleWithShortPrefill() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,229,final List<LZ77Compressor.Block> blocks = new ArrayList<>();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,230,"LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,231,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,232,public void accept(LZ77Compressor.Block block) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,233,//System.err.println(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,234,if (block instanceof LZ77Compressor.LiteralBlock) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,235,// replace with a real copy of data so tests
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,236,// can see the results as they've been when
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,237,// the callback has been called
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,238,LZ77Compressor.LiteralBlock b = (LZ77Compressor.LiteralBlock) block;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,239,int len = b.getLength();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,240,block = new LZ77Compressor.LiteralBlock(
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,241,"Arrays.copyOfRange(b.getData(), b.getOffset(), b.getOffset() + len),"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,242,"0, len);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,244,blocks.add(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,247,"c.prefill(Arrays.copyOfRange(BLA, 0, 2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,248,"c.compress(Arrays.copyOfRange(BLA, 2, BLA.length));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,249,c.finish();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,250,"assertSize(4, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,251,"assertLiteralBlock(""ah b"", blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,252,"assertBackReference(5, 18, blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,253,"assertLiteralBlock(""!"", blocks.get(2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,256,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,257,public void blaExampleWithPrefillBiggerThanWindowSize() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,258,final List<LZ77Compressor.Block> blocks = new ArrayList<>();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,259,"LZ77Compressor c = new LZ77Compressor(new Parameters(4), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,260,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,261,public void accept(LZ77Compressor.Block block) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,262,//System.err.println(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,263,if (block instanceof LZ77Compressor.LiteralBlock) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,264,// replace with a real copy of data so tests
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,265,// can see the results as they've been when
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,266,// the callback has been called
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,267,LZ77Compressor.LiteralBlock b = (LZ77Compressor.LiteralBlock) block;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,268,int len = b.getLength();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,269,block = new LZ77Compressor.LiteralBlock(
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,270,"Arrays.copyOfRange(b.getData(), b.getOffset(), b.getOffset() + len),"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,271,"0, len);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,273,blocks.add(block);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,276,"c.prefill(Arrays.copyOfRange(BLA, 0, 6));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,277,"c.compress(Arrays.copyOfRange(BLA, 6, BLA.length));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,278,c.finish();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,279,"assertSize(6, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,280,"assertLiteralBlock(""lah "", blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,281,"assertLiteralBlock(""blah"", blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,282,"assertLiteralBlock("" bla"", blocks.get(2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,283,"assertLiteralBlock(""h bl"", blocks.get(3));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,284,"assertLiteralBlock(""ah!"", blocks.get(4));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,287,@Test(expected = IllegalStateException.class)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,288,public void cantPrefillTwice() {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,289,"LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,290,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,291,public void accept(LZ77Compressor.Block block) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,294,"c.prefill(Arrays.copyOfRange(BLA, 0, 2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,295,"c.prefill(Arrays.copyOfRange(BLA, 2, 4));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,298,@Test(expected = IllegalStateException.class)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,299,public void cantPrefillAfterCompress() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,300,"LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,301,@Override
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,302,public void accept(LZ77Compressor.Block block) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,305,"c.compress(Arrays.copyOfRange(BLA, 0, 2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,306,"c.prefill(Arrays.copyOfRange(BLA, 2, 4));"

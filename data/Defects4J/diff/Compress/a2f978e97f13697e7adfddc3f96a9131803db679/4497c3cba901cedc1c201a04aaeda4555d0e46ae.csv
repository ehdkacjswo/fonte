is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,56,// cached buffers
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,57,private final byte[] NAME_BUF = new byte[16];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,58,private final byte[] LAST_MODIFIED_BUF = new byte[12];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,59,private final byte[] ID_BUF = new byte[6];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,60,private final byte[] FILE_MODE_BUF = new byte[8];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,61,private final byte[] LENGTH_BUF = new byte[10];
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,111,inal byte[] name = new byte[16];
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,112,inal byte[] lastmodified = new byte[12];
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,113,inal byte[] userid = new byte[6];
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,114,inal byte[] groupid = new byte[6];
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,115,inal byte[] filemode = new byte[8];
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,116,inal byte[] length = new byte[10];
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,118,ead(name);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,119,ead(lastmodified);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,120,ead(userid);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,121,ead(groupid);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,122,ead(filemode);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,123,ead(length);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,118,read(NAME_BUF);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,119,read(LAST_MODIFIED_BUF);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,120,read(ID_BUF);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,121,"int userId = asInt(ID_BUF, true);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,122,read(ID_BUF);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,123,read(FILE_MODE_BUF);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,124,read(LENGTH_BUF);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,144,tring temp = ArchiveUtils.toAsciiString(name).trim();
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,145,ong len = asLong(length);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,145,String temp = ArchiveUtils.toAsciiString(NAME_BUF).trim();
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,148,urrentEntry = readGNUStringTable(length);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,147,currentEntry = readGNUStringTable(LENGTH_BUF);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,150," else if (temp.endsWith(""/"")) { // GNU terminator"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,151,long len = asLong(LENGTH_BUF);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,152,"if (temp.endsWith(""/"")) { // GNU terminator"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,165,"urrentEntry = new ArArchiveEntry(temp, len, asInt(userid, true),"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,166,"sInt(groupid, true), asInt(filemode, 8),"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,167,sLong(lastmodified));
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,167,"currentEntry = new ArArchiveEntry(temp, len, userId,"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,168,"asInt(ID_BUF, true),"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,169,"asInt(FILE_MODE_BUF, 8),"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,170,asLong(LAST_MODIFIED_BUF));
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,80,// cached buffers
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,81,private final byte[] TWO_BYTES_BUF = new byte[2];
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,82,private final byte[] FOUR_BYTES_BUF = new byte[4];
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,83,private final byte[] SIX_BYTES_BUF = new byte[6];
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,168,yte magic[] = new byte[2];
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,169,"eadFully(magic, 0, magic.length);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,170,"f (CpioUtil.byteArray2long(magic, false) == MAGIC_OLD_BINARY) {"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,173,"readFully(TWO_BYTES_BUF, 0, TWO_BYTES_BUF.length);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,174,"if (CpioUtil.byteArray2long(TWO_BYTES_BUF, false) == MAGIC_OLD_BINARY) {"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,172," else if (CpioUtil.byteArray2long(magic, true) == MAGIC_OLD_BINARY) {"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,176,"} else if (CpioUtil.byteArray2long(TWO_BYTES_BUF, true)"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,177,== MAGIC_OLD_BINARY) {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,175,yte more_magic[] = new byte[4];
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,176,"eadFully(more_magic, 0, more_magic.length);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,177,yte tmp[] = new byte[6];
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,178,"ystem.arraycopy(magic, 0, tmp, 0, magic.length);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,179,"ystem.arraycopy(more_magic, 0, tmp, magic.length,"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,180,ore_magic.length);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,181,tring magicString = ArchiveUtils.toAsciiString(tmp);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,180,"System.arraycopy(TWO_BYTES_BUF, 0, SIX_BYTES_BUF, 0,"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,181,TWO_BYTES_BUF.length);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,182,"readFully(SIX_BYTES_BUF, TWO_BYTES_BUF.length,"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,183,FOUR_BYTES_BUF.length);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,184,String magicString = ArchiveUtils.toAsciiString(SIX_BYTES_BUF);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,205,inal byte[] buff = new byte[4]; // Cannot be more than 3 bytes
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,208,// bytes cannot be more than 3 bytes
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,207,"eadFully(buff, 0, bytes);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,210,"readFully(FOUR_BYTES_BUF, 0, bytes);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,51,private final byte[] SKIP_BUF = new byte[BUFFER_SIZE];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,52,private final byte[] SMALL_BUF = new byte[SMALL_BUFFER_SIZE];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,178,yte[] skipBuf = new byte[BUFFER_SIZE];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,181,nt realSkip = (int) (skip > skipBuf.length ? skipBuf.length : skip);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,182,"nt numRead = read(skipBuf, 0, realSkip);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,183,int realSkip = (int) (skip > SKIP_BUF.length
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,184,? SKIP_BUF.length : skip);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,185,"int numRead = read(SKIP_BUF, 0, realSkip);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,251,yte[] buf = new byte[SMALL_BUFFER_SIZE];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,253,hile ((length = read(buf)) >= 0) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,254,"ongName.write(buf, 0, length);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,255,while ((length = read(SMALL_BUF)) >= 0) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,256,"longName.write(SMALL_BUF, 0, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,83,private static final byte[] EMPTY = new byte[0];
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,164,eturn new byte[0];
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,165,return EMPTY;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,58,private static final byte[] EMPTY = new byte[0];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,478,eturn extra != null ? extra : new byte[0];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,479,return extra != null ? extra : EMPTY;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,131,// cached buffers
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,132,private final byte[] LFH_BUF = new byte[LFH_LEN];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,133,private final byte[] SKIP_BUF = new byte[1024];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,134,private final byte[] WORD_BUF = new byte[WORD];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,135,private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,186,yte[] lfh = new byte[LFH_LEN];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,193,eadFirstLocalFileHeader(lfh);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,198,readFirstLocalFileHeader(LFH_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,195,eadFully(lfh);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,200,readFully(LFH_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,201,ipLong sig = new ZipLong(lfh);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,206,ZipLong sig = new ZipLong(LFH_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,213,"nt versionMadeBy = ZipShort.getValue(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,218,"int versionMadeBy = ZipShort.getValue(LFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,218,"inal GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,223,"final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(LFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,227,"urrent.entry.setMethod(ZipShort.getValue(lfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,232,"current.entry.setMethod(ZipShort.getValue(LFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,230,"ong time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,235,"long time = ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,236,"urrent.entry.setCrc(ZipLong.getValue(lfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,241,"current.entry.setCrc(ZipLong.getValue(LFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,239,"Size = new ZipLong(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,244,"cSize = new ZipLong(LFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,242,"ize = new ZipLong(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,247,"size = new ZipLong(LFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,248,"nt fileNameLen = ZipShort.getValue(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,253,"int fileNameLen = ZipShort.getValue(LFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,252,"nt extraLen = ZipShort.getValue(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,257,"int extraLen = ZipShort.getValue(LFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,487,yte[] b = new byte[1024];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,490,"nt x = read(b, 0, (int) (b.length > rem ? rem : b.length));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,494,"int x = read(SKIP_BUF, 0,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,495,(int) (SKIP_BUF.length > rem ? rem
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,496,: SKIP_BUF.length));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,658,yte[] b = new byte[WORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,659,eadFully(b);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,660,ipLong val = new ZipLong(b);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,664,readFully(WORD_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,665,ZipLong val = new ZipLong(WORD_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,663,eadFully(b);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,664,al = new ZipLong(b);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,668,readFully(WORD_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,669,val = new ZipLong(WORD_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,679, = new byte[2 * DWORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,680,eadFully(b);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,681,"ipLong potentialSig = new ZipLong(b, DWORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,684,readFully(TWO_DWORD_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,685,"ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,684,"ushback(b, DWORD, DWORD);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,685,urrent.entry.setCompressedSize(ZipLong.getValue(b));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,686,"urrent.entry.setSize(ZipLong.getValue(b, WORD));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,688,"pushback(TWO_DWORD_BUF, DWORD, DWORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,689,current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,690,"current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,689,setCompressedSize(ZipEightByteInteger.getLongValue(b));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,690,"urrent.entry.setSize(ZipEightByteInteger.getLongValue(b, DWORD));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,693,.setCompressedSize(ZipEightByteInteger
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,694,.getLongValue(TWO_DWORD_BUF));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,695,current.entry.setSize(ZipEightByteInteger
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,696,".getLongValue(TWO_DWORD_BUF, DWORD));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,118,private static final byte[] EMPTY = new byte[0];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,447,"rite(new byte[0], 0, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,449,"write(EMPTY, 0, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,135,// cached buffers
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,136,private final byte[] DWORD_BUF = new byte[DWORD];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,137,private final byte[] WORD_BUF = new byte[WORD];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,138,private final byte[] CFH_BUF = new byte[CFH_LEN];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,139,private final byte[] SHORT_BUF = new byte[SHORT];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,408,yte[] signatureBytes = new byte[WORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,409,rchive.readFully(signatureBytes);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,410,ong sig = ZipLong.getValue(signatureBytes);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,414,archive.readFully(WORD_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,415,long sig = ZipLong.getValue(WORD_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,419,rchive.readFully(signatureBytes);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,420,ig = ZipLong.getValue(signatureBytes);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,424,archive.readFully(WORD_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,425,sig = ZipLong.getValue(WORD_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,437,yte[] cfh = new byte[CFH_LEN];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,439,rchive.readFully(cfh);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,442,archive.readFully(CFH_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,443,"nt versionMadeBy = ZipShort.getValue(cfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,446,"int versionMadeBy = ZipShort.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,449,"inal GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(cfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,452,"final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,457,"e.setMethod(ZipShort.getValue(cfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,460,"ze.setMethod(ZipShort.getValue(CFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,460,"ong time = ZipUtil.dosToJavaTime(ZipLong.getValue(cfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,463,"long time = ZipUtil.dosToJavaTime(ZipLong.getValue(CFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,464,"e.setCrc(ZipLong.getValue(cfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,467,"ze.setCrc(ZipLong.getValue(CFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,467,"e.setCompressedSize(ZipLong.getValue(cfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,470,"ze.setCompressedSize(ZipLong.getValue(CFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,470,"e.setSize(ZipLong.getValue(cfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,473,"ze.setSize(ZipLong.getValue(CFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,473,"nt fileNameLen = ZipShort.getValue(cfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,476,"int fileNameLen = ZipShort.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,476,"nt extraLen = ZipShort.getValue(cfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,479,"int extraLen = ZipShort.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,479,"nt commentLen = ZipShort.getValue(cfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,482,"int commentLen = ZipShort.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,482,"nt diskStart = ZipShort.getValue(cfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,485,"int diskStart = ZipShort.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,485,"e.setInternalAttributes(ZipShort.getValue(cfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,488,"ze.setInternalAttributes(ZipShort.getValue(CFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,488,"e.setExternalAttributes(ZipLong.getValue(cfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,491,"ze.setExternalAttributes(ZipLong.getValue(CFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,497,"ffset.headerOffset = ZipLong.getValue(cfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,500,"offset.headerOffset = ZipLong.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,687,yte[] zip64EocdOffset = new byte[DWORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,688,rchive.readFully(zip64EocdOffset);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,689,rchive.seek(ZipEightByteInteger.getLongValue(zip64EocdOffset));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,690,yte[] sig = new byte[WORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,691,rchive.readFully(sig);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,692,f (sig[POS_0] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_0]
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,693,| sig[POS_1] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_1]
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,694,| sig[POS_2] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_2]
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,695,| sig[POS_3] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_3]
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,690,archive.readFully(DWORD_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,691,archive.seek(ZipEightByteInteger.getLongValue(DWORD_BUF));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,692,archive.readFully(WORD_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,693,"if (!Arrays.equals(WORD_BUF, ZipArchiveOutputStream.ZIP64_EOCD_SIG)) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,702,yte[] cfdOffset = new byte[DWORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,703,rchive.readFully(cfdOffset);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,704,rchive.seek(ZipEightByteInteger.getLongValue(cfdOffset));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,699,archive.readFully(DWORD_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,700,archive.seek(ZipEightByteInteger.getLongValue(DWORD_BUF));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,720,yte[] cfdOffset = new byte[WORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,721,rchive.readFully(cfdOffset);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,722,rchive.seek(ZipLong.getValue(cfdOffset));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,716,archive.readFully(WORD_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,717,archive.seek(ZipLong.getValue(WORD_BUF));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,817,yte[] b = new byte[SHORT];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,818,rchive.readFully(b);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,819,nt fileNameLen = ZipShort.getValue(b);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,820,rchive.readFully(b);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,821,nt extraFieldLen = ZipShort.getValue(b);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,812,archive.readFully(SHORT_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,813,int fileNameLen = ZipShort.getValue(SHORT_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,814,archive.readFully(SHORT_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,815,int extraFieldLen = ZipShort.getValue(SHORT_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,857,inal byte[] start = new byte[WORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,858,rchive.readFully(start);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,859,or (int i = 0; i < start.length; i++) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,860,f (start[i] != ZipArchiveOutputStream.LFH_SIG[i]) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,861,eturn false;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,864,eturn true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,851,archive.readFully(WORD_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,852,"return Arrays.equals(WORD_BUF, ZipArchiveOutputStream.LFH_SIG);"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,79,// used in no-arg read method
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,80,private final byte[] oneByte = new byte[1];
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,216,yte[] buf = new byte[1];
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,217,"eturn read(buf, 0, 1) == -1 ? -1 : (buf[0] & 0xFF);"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,219,"return read(oneByte, 0, 1) == -1 ? -1 : (oneByte[0] & 0xFF);"

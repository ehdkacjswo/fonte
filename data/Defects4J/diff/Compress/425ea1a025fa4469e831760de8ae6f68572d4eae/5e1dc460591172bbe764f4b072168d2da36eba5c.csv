is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,19,package org.apache.commons.compress.compressors.snappy;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,23,import java.io.PushbackInputStream;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,24,import java.util.Arrays;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,26,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,27,import org.apache.commons.compress.utils.BoundedInputStream;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,28,import org.apache.commons.compress.utils.IOUtils;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,31,* CompressorInputStream for the framing Snappy format.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,33,"* @see ""http://code.google.com/p/snappy/source/browse/trunk/framing_format.txt"""
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,34,* @since 1.7
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,36,public class FramedSnappyCompressorInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,37,private static final int STREAM_IDENTIFIER_TYPE = 0xff;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,38,private static final int COMPRESSED_CHUNK_TYPE = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,39,private static final int UNCOMPRESSED_CHUNK_TYPE = 1;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,40,private static final int PADDING_CHUNK_TYPE = 0xfe;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,41,private static final int MIN_UNSKIPPABLE_TYPE = 2;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,42,private static final int MAX_UNSKIPPABLE_TYPE = 0x7f;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,43,private static final int MAX_SKIPPABLE_TYPE = 0xfd;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,45,/** The underlying stream to read compressed data from */
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,46,private final PushbackInputStream in;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,48,private SnappyCompressorInputStream currentCompressedChunk;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,50,// used in no-arg read method
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,51,private final byte[] oneByte = new byte[1];
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,53,"private boolean endReached, inUncompressedChunk;"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,55,private int uncompressedBytesRemaining;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,58,* Constructs a new input stream that decompresses snappy-framed-compressed data
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,59,* from the specified input stream.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,60,* @param in  the InputStream from which to read the compressed data
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,62,public FramedSnappyCompressorInputStream(InputStream in) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,63,"this.in = new PushbackInputStream(in, 1);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,64,readStreamIdentifier();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,67,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,68,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,69,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,70,"return read(oneByte, 0, 1) == -1 ? -1 : (oneByte[0] & 0xFF);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,73,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,74,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,75,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,76,in.close();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,79,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,80,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,81,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,82,"int read = readOnce(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,83,if (read == -1) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,84,readNextBlock();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,85,if (endReached) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,86,return -1;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,88,"read = readOnce(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,90,return read;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,94,* Read from the current chunk into the given array.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,96,* @return -1 if there is no current chunk or the number of bytes
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,97,* read from the current chunk (which may be -1 if the end od the
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,98,* chunk is reached.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,100,"private int readOnce(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,101,int read = -1;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,102,if (inUncompressedChunk) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,103,"int amount = Math.min(uncompressedBytesRemaining, len);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,104,"read = in.read(b, off, amount);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,105,if (read != -1) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,106,uncompressedBytesRemaining -= read;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,107,count(read);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,109,} else if (currentCompressedChunk != null) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,110,long before = currentCompressedChunk.getBytesRead();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,111,"read = currentCompressedChunk.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,112,if (read == -1) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,113,currentCompressedChunk = null;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,114,} else {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,115,count(currentCompressedChunk.getBytesRead() - before);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,118,return read;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,121,private void readNextBlock() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,122,int type = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,123,if (type == -1) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,124,endReached = true;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,125,} else if (type == STREAM_IDENTIFIER_TYPE) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,126,in.unread(type);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,127,count(-1);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,128,readStreamIdentifier();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,129,readNextBlock();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,130,} else if (type == PADDING_CHUNK_TYPE
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,131,|| (type > MAX_UNSKIPPABLE_TYPE && type <= MAX_SKIPPABLE_TYPE)) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,132,skipBlock();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,133,readNextBlock();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,134,} else if (type >= MIN_UNSKIPPABLE_TYPE && type <= MAX_UNSKIPPABLE_TYPE) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,135,"throw new IOException(""unskippable chunk with type "" + type"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,136,"+ "" detected."");"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,137,} else if (type == UNCOMPRESSED_CHUNK_TYPE) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,138,uncompressedBytesRemaining = readSize();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,139,readCrc();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,140,} else if (type == COMPRESSED_CHUNK_TYPE) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,141,int size = readSize();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,142,readCrc();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,143,currentCompressedChunk =
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,144,"new SnappyCompressorInputStream(new BoundedInputStream(in, size));"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,145,} else {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,146,// impossible as all potential byte values have been covered
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,147,"throw new IOException(""unknown chunk type "" + type"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,148,"+ "" detected."");"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,152,private void readCrc() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,153,byte[] b = new byte[4];
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,154,"if (IOUtils.readFully(in, b) != 4) {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,155,"throw new IOException(""premature end of stream"");"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,157,count(4);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,160,private int readSize() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,161,int b = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,162,int sz = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,163,for (int i = 0; i < 3; i++) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,164,b = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,165,if (b == -1) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,166,"throw new IOException(""premature end of stream"");"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,168,sz |= (b << (i * 8));
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,170,return sz;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,173,private void skipBlock() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,174,int size = readSize();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,175,"if (IOUtils.skip(in, size) != size) {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,176,"throw new IOException(""premature end of stream"");"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,178,count(size);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,181,private void readStreamIdentifier() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,182,byte[] b = new byte[10];
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,183,"if (10 != IOUtils.readFully(in, b) || !matches(b, 10)) {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,184,"throw new IOException(""Not a framed Snappy stream"");"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,186,count(10);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,189,private int readOneByte() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,190,int b = in.read();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,191,if (b != -1) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,192,count(1);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,193,return b & 0xFF;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,195,return -1;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,199,* Checks if the signature matches what is expected for a .sz file.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,201,* <p>.sz files start with a chuck with tag 0xff and content sNaPpY.
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,203,* @param signature the bytes to check
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,204,* @param length    the number of bytes to check
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,205,"* @return          true if this is a .sz stream, false otherwise"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,207,"public static boolean matches(byte[] signature, int length) {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,209,if (length < 10) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,210,return false;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,213,byte[] shortenedSig = signature;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,214,if (signature.length > 10) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,215,shortenedSig = new byte[10];
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,216,"System.arraycopy(signature, 0, shortenedSig, 0, 10);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,219,"return Arrays.equals(shortenedSig, new byte[] {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,220,"(byte) STREAM_IDENTIFIER_TYPE, // tag"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,221,"6, 0, 0, // length"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,222,"'s', 'N', 'a', 'P', 'p', 'Y'"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,19,package org.apache.commons.compress.compressors.snappy;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,24,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,27,* CompressorInputStream for the raw Snappy format.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,29,* <p>This implementation uses an internal buffer in order to handle
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,30,* the back-references that are at the heart of the LZ77 algorithm.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,31,* The size of the buffer must be at least as big as the biggest
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,32,* offset used in the compressed stream.  The current version of the
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,33,* Snappy algorithm as defined by Google works on 32k blocks and
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,34,* doesn't contain offsets bigger than 32k which is the default block
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,35,* size used by this class.</p>
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,37,"* @see ""http://code.google.com/p/snappy/source/browse/trunk/format_description.txt"""
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,38,* @since 1.7
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,40,public class SnappyCompressorInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,42,"/** Mask used to determine the type of ""tag"" is being processed */"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,43,private static final int TAG_MASK = 0x03;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,45,/** Default block size */
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,46,public static final int DEFAULT_BLOCK_SIZE = 32768;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,48,/** Buffer to write decompressed bytes to for back-references */
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,49,private final byte[] decompressBuf;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,52,* One behind the index of the last byte in the buffer that was
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,53,* written
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,55,private int writeIndex;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,58,* Index of the next byte to be read.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,60,private int readIndex;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,62,/** The actual block size specified */
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,63,private final int blockSize;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,65,/** The underlying stream to read compressed data from */
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,66,private final InputStream in;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,68,/** The size of the uncompressed data */
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,69,private final int size;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,72,* Number of uncompressed bytes still to be read.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,74,private int uncompressedBytesRemaining;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,76,// used in no-arg read method
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,77,private final byte[] oneByte = new byte[1];
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,79,private boolean endReached = false;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,82,* Constructor using the default buffer size of 32k.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,84,* @param is
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,85,*            An InputStream to read compressed data from
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,87,* @throws IOException
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,89,public SnappyCompressorInputStream(final InputStream is) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,90,"this(is, DEFAULT_BLOCK_SIZE);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,94,* Constructor using a configurable buffer size.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,96,* @param is
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,97,*            An InputStream to read compressed data from
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,98,* @param blockSize
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,99,*            The block size used in compression
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,101,* @throws IOException
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,103,"public SnappyCompressorInputStream(final InputStream is, final int blockSize)"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,104,throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,105,this.in = is;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,106,this.blockSize = blockSize;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,107,this.decompressBuf = new byte[blockSize * 3];
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,108,this.writeIndex = readIndex = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,109,uncompressedBytesRemaining = size = (int) readSize();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,112,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,113,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,114,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,115,"return read(oneByte, 0, 1) == -1 ? -1 : (oneByte[0] & 0xFF);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,118,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,119,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,120,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,121,in.close();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,124,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,125,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,126,public int available() {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,127,return writeIndex - readIndex;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,131,* {@inheritDoc}
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,133,@Override
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,134,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,135,if (endReached) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,136,return -1;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,138,if (len > available()) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,139,fill(len - available());
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,142,"int readable = Math.min(len, available());"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,143,"System.arraycopy(decompressBuf, readIndex, b, off, readable);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,144,readIndex += readable;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,145,if (readIndex > blockSize) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,146,slideBuffer();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,148,return readable;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,152,* Try to fill the buffer with enoug bytes to satisfy the current read request.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,154,* @param len the number of uncompressed bytes to read
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,156,private void fill(int len) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,157,if (uncompressedBytesRemaining == 0) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,158,endReached = true;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,160,"int readNow = Math.min(len, uncompressedBytesRemaining);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,162,while (readNow > 0) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,163,final int b = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,164,int length = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,165,int offset = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,167,switch (b & TAG_MASK) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,169,case 0x00:
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,171,length = readLiteralLength(b);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,173,if (expandLiteral(length)) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,174,return;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,176,break;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,178,case 0x01:
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,181,* These elements can encode lengths between [4..11] bytes and
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,182,* offsets between [0..2047] bytes. (len-4) occupies three bits
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,183,* and is stored in bits [2..4] of the tag byte. The offset
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,184,"* occupies 11 bits, of which the upper three are stored in the"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,185,"* upper three bits ([5..7]) of the tag byte, and the lower"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,186,* eight are stored in a byte following the tag byte.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,189,length = 4 + ((b >> 2) & 0x07);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,190,offset = (b & 0xE0) << 3;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,191,offset |= readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,193,"if (expandCopy(offset, length)) {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,194,return;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,196,break;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,198,case 0x02:
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,201,* These elements can encode lengths between [1..64] and offsets
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,202,* from [0..65535]. (len-1) occupies six bits and is stored in
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,203,* the upper six bits ([2..7]) of the tag byte. The offset is
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,204,* stored as a little-endian 16-bit integer in the two bytes
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,205,* following the tag byte.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,208,length = (b >> 2) + 1;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,210,offset = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,211,offset |= readOneByte() << 8;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,213,"if (expandCopy(offset, length)) {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,214,return;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,216,break;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,218,case 0x03:
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,221,* These are like the copies with 2-byte offsets (see previous
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,222,"* subsection), except that the offset is stored as a 32-bit"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,223,* integer instead of a 16-bit integer (and thus will occupy
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,224,* four bytes).
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,227,length = (b >> 2) + 1;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,229,offset = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,230,offset |= readOneByte() << 8;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,231,offset |= readOneByte() << 16;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,232,offset |= readOneByte() << 24;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,234,"if (expandCopy(offset, length)) {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,235,return;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,237,break;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,240,readNow -= length;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,241,uncompressedBytesRemaining -= length;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,246,* Slide buffer.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,248,* <p>Move all bytes of the buffer after the first block down
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,249,* tothe beginning of the buffer.</p>
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,251,private void slideBuffer() {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,252,"System.arraycopy(decompressBuf, blockSize, decompressBuf, 0,"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,253,blockSize);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,254,writeIndex -= blockSize;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,255,readIndex -= blockSize;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,260,"* For literals up to and including 60 bytes in length, the"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,261,* upper six bits of the tag byte contain (len-1). The literal
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,262,* follows immediately thereafter in the bytestream. - For
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,263,"* longer literals, the (len-1) value is stored after the tag"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,264,"* byte, little-endian. The upper six bits of the tag byte"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,265,"* describe how many bytes are used for the length; 60, 61, 62"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,266,"* or 63 for 1-4 bytes, respectively. The literal itself follows"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,267,* after the length.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,269,private int readLiteralLength(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,270,int length;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,271,switch (b >> 2) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,272,case 60:
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,273,length = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,274,break;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,275,case 61:
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,276,length = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,277,length |= (readOneByte() << 8);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,278,break;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,279,case 62:
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,280,length = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,281,length |= (readOneByte() << 8);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,282,length |= (readOneByte() << 16);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,283,break;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,284,case 63:
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,285,length = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,286,length |= (readOneByte() << 8);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,287,length |= (readOneByte() << 16);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,288,length |= (readOneByte() << 24);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,289,break;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,290,default:
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,291,length = b >> 2;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,292,break;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,295,return length + 1;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,299,* Literals are uncompressed data stored directly in the byte stream.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,301,* @param length
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,302,*            The number of bytes to read from the underlying stream
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,304,* @throws IOException
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,305,*             If the first byte cannot be read for any reason other than
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,306,"*             end of file, or if the input stream has been closed, or if"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,307,*             some other I/O error occurs.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,308,* @return True if the decompressed data should be flushed
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,310,private boolean expandLiteral(final int length) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,311,"int bytesRead = in.read(decompressBuf, writeIndex, length);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,312,count(bytesRead);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,313,if (length != bytesRead) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,314,"throw new IOException(""Premature end of stream"");"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,317,writeIndex += length;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,318,return (writeIndex >= (2 * this.blockSize));
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,322,"* Copies are references back into previous decompressed data, telling the"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,323,* decompressor to reuse data it has previously decoded. They encode two
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,324,"* values: The offset, saying how many bytes back from the current position"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,325,"* to read, and the length, how many bytes to copy. Offsets of zero can be"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,326,"* encoded, but are not legal; similarly, it is possible to encode"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,327,* backreferences that would go past the end of the block (offset > current
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,328,"* decompressed position), which is also nonsensical and thus not allowed."
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,330,* @param offset
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,331,*            The offset from the backward from the end of expanded stream
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,332,* @param length
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,333,*            The number of bytes to copy
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,335,* @throws IOException
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,336,*             An the offset expands past the front of the decompression
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,337,*             buffer
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,338,* @return True if the decompressed data should be flushed
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,340,"private boolean expandCopy(final int offset, int length) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,341,if (offset > blockSize) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,342,"throw new IOException(""Offset is larger than block size"");"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,345,if (offset == 1) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,346,byte lastChar = decompressBuf[writeIndex - 1];
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,347,for (int i = 0; i < length; i++) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,348,decompressBuf[writeIndex++] = lastChar;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,350,} else if (length < offset) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,351,"System.arraycopy(decompressBuf, writeIndex - offset,"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,352,"decompressBuf, writeIndex, length);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,353,writeIndex += length;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,354,} else {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,355,int fullRotations = length / offset;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,356,int pad = length - (offset * fullRotations);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,358,while (fullRotations-- != 0) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,359,"System.arraycopy(decompressBuf, writeIndex - offset,"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,360,"decompressBuf, writeIndex, offset);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,361,writeIndex += offset;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,364,if (pad > 0) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,365,"System.arraycopy(decompressBuf, writeIndex - offset,"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,366,"decompressBuf, writeIndex, pad);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,368,writeIndex += pad;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,371,return (writeIndex >= (2 * this.blockSize));
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,375,* This helper method reads the next byte of data from the input stream. The
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,376,* value byte is returned as an <code>int</code> in the range <code>0</code>
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,377,* to <code>255</code>. If no byte is available because the end of the
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,378,"* stream has been reached, an Exception is thrown."
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,380,* @return The next byte of data
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,381,* @throws IOException
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,382,*             EOF is reached or error reading the stream
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,384,private int readOneByte() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,385,int b = in.read();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,386,if (b == -1) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,387,"throw new IOException(""Premature end of stream"");"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,389,count(1);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,390,return b & 0xFF;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,394,* The stream starts with the uncompressed length (up to a maximum of 2^32 -
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,395,"* 1), stored as a little-endian varint. Varints consist of a series of"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,396,"* bytes, where the lower 7 bits are data and the upper bit is set iff there"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,397,"* are more bytes to be read. In other words, an uncompressed length of 64"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,398,"* would be stored as 0x40, and an uncompressed length of 2097150 (0x1FFFFE)"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,399,* would be stored as 0xFE 0xFF 0x7F.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,401,* @return The size of the uncompressed data
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,403,* @throws IOException
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,404,*             Could not read a byte
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,406,private long readSize() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,407,int index = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,408,long sz = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,409,int b = 0;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,411,do {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,412,b = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,413,sz |= (b & 0x7f) << (index++ * 7);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,414,} while (0 != (b & 0x80));
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,415,return sz;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,419,* Get the uncompressed size of the stream
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,421,* @return the uncompressed size
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,423,public int getSize() {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,424,return size;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,19,package org.apache.commons.compress.compressors;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,24,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,25,import java.util.Arrays;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,27,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,28,import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,29,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,31,public final class FramedSnappyTestCase
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,32,extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,34,public void testMatches() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,35,"assertFalse(FramedSnappyCompressorInputStream.matches(new byte[10], 10));"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,36,byte[] b = new byte[12];
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,37,"final File input = getFile(""bla.tar.sz"");"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,38,FileInputStream in = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,39,try {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,40,"IOUtils.readFully(in, b);"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,41,} finally {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,42,in.close();
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,44,"assertFalse(FramedSnappyCompressorInputStream.matches(b, 9));"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,45,"assertTrue(FramedSnappyCompressorInputStream.matches(b, 10));"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,46,"assertTrue(FramedSnappyCompressorInputStream.matches(b, 12));"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,49,public void testDefaultExtraction() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,50,"final File input = getFile(""bla.tar.sz"");"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,51,"final File output = new File(dir, ""bla.tar"");"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,52,final FileInputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,53,try {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,54,final CompressorInputStream in =
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,55,new FramedSnappyCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,56,FileOutputStream out = null;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,57,try {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,58,out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,59,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,60,} finally {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,61,if (out != null) {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,62,out.close();
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,64,in.close();
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,66,} finally {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,67,is.close();
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,69,"final File original = getFile(""bla.tar"");"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,70,final FileInputStream written = new FileInputStream(output);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,71,try {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,72,FileInputStream orig = new FileInputStream(original);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,73,try {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,74,"assertTrue(Arrays.equals(IOUtils.toByteArray(written),"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,75,IOUtils.toByteArray(orig)));
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,76,} finally {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,77,orig.close();
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,79,} finally {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,80,written.close();

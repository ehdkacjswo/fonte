is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,302,"riteAsciiLong(entry.getName().length() + 1, 8, 16);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,302,"writeAsciiLong(entry.getName().length() + 1l, 8, 16);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,333,"riteAsciiLong(entry.getName().length() + 1, 6, 8);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,333,"writeAsciiLong(entry.getName().length() + 1l, 6, 8);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,363,"riteBinaryLong(entry.getName().length() + 1, 2, swapHalfWord);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,363,"writeBinaryLong(entry.getName().length() + 1l, 2, swapHalfWord);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,522,inal long insertLength = length - tmp.length();
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,522,final int insertLength = length - tmp.length();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,188,f (raw.skip(DumpArchiveConstants.TP_SIZE * active.getHeaderCount())
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,188,if (raw.skip((long) DumpArchiveConstants.TP_SIZE * active.getHeaderCount())
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,212,f (raw.skip(DumpArchiveConstants.TP_SIZE * active.getHeaderCount())
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,212,if (raw.skip((long) DumpArchiveConstants.TP_SIZE * active.getHeaderCount())
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,267,f (raw.skip(DumpArchiveConstants.TP_SIZE
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,267,if (raw.skip((long) DumpArchiveConstants.TP_SIZE
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,185, = len - bytes;
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,185,n = (long) len - bytes;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,441,or (int i = 0; i < numCoders - 1; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,441,for (long i = 0; i < numCoders - 1; i++) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,680,ongLinkEntry.setSize(len + 1); // +1 for NUL
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,680,longLinkEntry.setSize(len + 1l); // +1 for NUL
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,196,"al ^= (long) Math.pow(2, (length - 1) * 8) - 1;"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,196,"val ^= (long) Math.pow(2.0, (length - 1) * 8) - 1;"
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,243,"s.awaitTermination(1000 * 60, TimeUnit.SECONDS);  // == Infinity. We really *must* wait for this to complete"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,243,"es.awaitTermination(1000 * 60l, TimeUnit.SECONDS);  // == Infinity. We really *must* wait for this to complete"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,919,ealSkip(entriesRead * CFH_LEN - LFH_LEN);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,919,realSkip((long) entriesRead * CFH_LEN - LFH_LEN);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,921,ealSkip(ZipFile.MIN_EOCD_SIZE - WORD /* signature */ - SHORT /* comment len */);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,921,realSkip((long) ZipFile.MIN_EOCD_SIZE - WORD /* signature */ - SHORT /* comment len */);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1389, DWORD /* offset of CD */
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1389,+ (long) DWORD /* offset of CD */
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1023,* uncompressed size               */ + WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1023,/* uncompressed size               */ + (long) WORD;
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,276,eturn current = nestedEnum.nextElement();
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,276,current = nestedEnum.nextElement();
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,277,return current;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,449,eturn eclass == null
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,450, (eclass = new int[quadrant.length / 2]) : eclass;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,449,if (eclass == null) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,450,eclass = new int[quadrant.length / 2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,452,return eclass;
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,136,".pack(ji = new JarInputStream(streamBridge.getInput()),"
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,137,riginalOutput);
True,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,136,ji = new JarInputStream(streamBridge.getInput());
True,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,137,"p.pack(ji, originalOutput);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,206,inal long size = readSize() - (expectChecksum ? 4 : 0);
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,206,final long size = readSize() - (expectChecksum ? 4l : 0l);

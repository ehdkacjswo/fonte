is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1032,rivate int readFully(ByteBuffer buf) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1033,inal int expectedLength = buf.rewind().remaining();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1034,nt read = 0;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1035,hile (read < expectedLength) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1036,nt readNow = channel.read(buf);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1037,f (readNow <= 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1038,reak;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1040,ead += readNow;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1032,private void readFully(ByteBuffer buf) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1033,buf.rewind();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1034,"IOUtils.readFully(channel, buf);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1043,eturn read;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,23,import java.io.EOFException;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,27,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,28,import java.nio.channels.ReadableByteChannel;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,173,* Reads {@code b.remaining()} bytes from the given channel
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,174,* starting at the current channel's position.
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,176,* <p>This method reads repeatedly from the channel until the
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,177,* requested number of bytes are read. This method blocks until
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,178,"* the requested number of bytes are read, the end of the channel"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,179,"* is detected, or an exception is thrown.</p>"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,181,* @param channel the channel to read from
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,182,* @param b the buffer into which the data is read.
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,183,* @throws IOException - if an I/O error occurs.
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,184,* @throws EOFException - if the channel reaches the end before reading all the bytes.
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,186,"public static void readFully(ReadableByteChannel channel, ByteBuffer b) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,187,final int expectedLength = b.remaining();
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,188,int read = 0;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,189,while (read < expectedLength) {
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,190,int readNow = channel.read(b);
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,191,if (readNow <= 0) {
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,192,break;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,194,read += readNow;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,196,if (read < expectedLength) {
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,197,throw new EOFException();
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,21,import java.io.EOFException;
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,25,import java.nio.ByteBuffer;
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,26,import java.nio.channels.ReadableByteChannel;
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,83,@Test
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,84,public void readFullyOnChannelReadsFully() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,85,ByteBuffer b = ByteBuffer.allocate(20);
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,86,final byte[] source = new byte[20];
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,87,for (byte i = 0; i < 20; i++) {
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,88,source[i] = i;
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,90,"readFully(source, b);"
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,91,"Assert.assertArrayEquals(source, b.array());"
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,94,@Test(expected = EOFException.class)
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,95,public void readFullyOnChannelThrowsEof() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,96,ByteBuffer b = ByteBuffer.allocate(21);
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,97,final byte[] source = new byte[20];
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,98,for (byte i = 0; i < 20; i++) {
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,99,source[i] = i;
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,101,"readFully(source, b);"
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,104,"private static void readFully(final byte[] source, ByteBuffer b) throws IOException {"
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,105,IOUtils.readFully(new ReadableByteChannel() {
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,106,private int idx;
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,107,@Override
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,108,public int read(ByteBuffer buf) {
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,109,if (idx >= source.length) {
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,110,return -1;
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,112,buf.put(source[idx++]);
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,113,return 1;
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,115,@Override
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,116,public void close() { }
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,117,@Override
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,118,public boolean isOpen() {
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,119,return true;
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,121,"}, b);"

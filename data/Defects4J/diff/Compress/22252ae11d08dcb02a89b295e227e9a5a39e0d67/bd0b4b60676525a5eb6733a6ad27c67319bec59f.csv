is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,21,import java.io.DataInput;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,22,import java.io.DataOutput;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,130,* Reads the given number of bytes from the given input as little endian long.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,131,* @param in the input to read from
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,132,* @param length the number of bytes representing the value
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,133,* @throws IllegalArgumentException if len is bigger than eight
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,134,* @throws IOException if reading fails or the stream doesn't
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,135,* contain the given number of bytes anymore
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,137,"public static long fromLittleEndian(DataInput in, int length) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,138,// somewhat duplicates the ByteSupplier version in order to save the creation of a wrapper object
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,139,checkReadLength(length);
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,140,long l = 0;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,141,for (int i = 0; i < length; i++) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,142,long b = in.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,143,l |= (b << (i * 8));
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,145,return l;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,184,* Writes the given value to the given stream as a little endian
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,185,* array of the given length.
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,186,* @param out the output to write to
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,187,* @param value the value to write
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,188,* @param length the number of bytes to use to represent the value
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,189,* @throws IOException if writing fails
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,191,"public static void toLittleEndian(DataOutput out, final long value, final int length)"
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,192,throws IOException {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,193,// somewhat duplicates the ByteConsumer version in order to save the creation of a wrapper object
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,194,long num = value;
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,195,for (int i = 0; i < length; i++) {
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,196,out.write((int) (num & 0xff));
True,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,src/main/java/org/apache/commons/compress/utils/ByteUtils.java,197,num >>= 8;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,23,import java.io.DataInput;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,24,import java.io.DataInputStream;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,25,import java.io.DataOutput;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,26,import java.io.DataOutputStream;
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,118,@Test
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,119,public void fromLittleEndianFromDataInput() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,120,"DataInput din = new DataInputStream(new ByteArrayInputStream(new byte[] { 2, 3, 4, 5 }));"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,121,"assertEquals(2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian(din, 3));"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,124,@Test
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,125,public void fromLittleEndianFromDataInputUnsignedInt32() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,126,"DataInput din = new DataInputStream(new ByteArrayInputStream(new byte[] { 2, 3, 4, (byte) 128 }));"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,127,"assertEquals(2 + 3 * 256 + 4 * 256 * 256 + 128l * 256 * 256 * 256, fromLittleEndian(din, 4));"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,130,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,131,public void fromLittleEndianFromDataInputThrowsForLengthTooBig() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,132,DataInput din = new DataInputStream(new ByteArrayInputStream(new byte[0]));
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,133,"fromLittleEndian(din, 9);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,136,@Test(expected = java.io.EOFException.class)
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,137,public void fromLittleEndianFromDataInputThrowsForPrematureEnd() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,138,"DataInput din = new DataInputStream(new ByteArrayInputStream(new byte[] { 2, 3 }));"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,139,"fromLittleEndian(din, 3);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,174,@Test
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,175,public void toLittleEndianToDataOutput() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,176,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,177,DataOutput dos = new DataOutputStream(bos);
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,178,"toLittleEndian(dos, 2 + 3 * 256 + 4 * 256 * 256, 3);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,179,bos.close();
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,180,"assertArrayEquals(new byte[] { 2, 3, 4 }, bos.toByteArray());"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,183,@Test
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,184,public void toLittleEndianToDataOutputUnsignedInt32() throws IOException {
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,185,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,186,DataOutput dos = new DataOutputStream(bos);
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,187,"toLittleEndian(dos, 2 + 3 * 256 + 4 * 256 * 256 + 128l * 256 * 256 * 256, 4);"
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,188,bos.close();
True,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java,189,"assertArrayEquals(new byte[] { 2, 3, 4, (byte) 128 }, bos.toByteArray());"

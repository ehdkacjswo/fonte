is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,28,import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,83,* Constant used to identify the ARJ archive format.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,84,* @since 1.6
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,86,"public static final String ARJ = ""arj"";"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,113," Returns the encoding to use for zip and tar files, or null for"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,114, the default.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,119,"* Returns the encoding to use for arj, zip and tar files,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,120,* or null for the default.
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,124, Sets the encoding to use for zip and tar files. Use null for
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,125, the default.
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,130,"* Sets the encoding to use for arj, zip and tar files."
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,131,* Use null for the default.
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,136," @param archiverName the archive name, i.e. ""ar"", ""zip"", ""tar"", ""jar"", ""dump"" or ""cpio"""
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,142,"* @param archiverName the archive name, i.e. ""ar"", ""arj"", ""zip"", ""tar"", ""jar"", ""dump"" or ""cpio"""
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,163,if (ARJ.equalsIgnoreCase(archiverName)) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,164,if (entryEncoding != null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,165,"return new ArjArchiveInputStream(in, entryEncoding);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,166,} else {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,167,return new ArjArchiveInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,279,"} else if (ArjArchiveInputStream.matches(signature, signatureLength)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,280,return new ArjArchiveInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,18,package org.apache.commons.compress.archivers.arj;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,20,import java.io.File;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,21,import java.util.Date;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,22,import java.util.regex.Matcher;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,25,import org.apache.commons.compress.archivers.zip.ZipUtil;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,28,* An entry in an ARJ archive.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,30,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,32,public class ArjArchiveEntry implements ArchiveEntry {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,33,private final LocalFileHeader localFileHeader;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,35,public ArjArchiveEntry() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,36,localFileHeader = new LocalFileHeader();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,39,ArjArchiveEntry(final LocalFileHeader localFileHeader) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,40,this.localFileHeader = localFileHeader;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,43,public String getName() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,44,if ((localFileHeader.arjFlags & LocalFileHeader.Flags.PATHSYM) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,45,"return localFileHeader.name.replaceAll(""/"","
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,46,Matcher.quoteReplacement(File.separator));
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,47,} else {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,48,return localFileHeader.name;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,52,public long getSize() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,53,return localFileHeader.originalSize;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,56,public boolean isDirectory() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,57,return localFileHeader.fileType == LocalFileHeader.FileTypes.DIRECTORY;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,60,public Date getLastModifiedDate() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,61,return new Date(ZipUtil.dosToJavaTime(
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,62,0xffffFFFFL & localFileHeader.dateTimeModified));
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,18,package org.apache.commons.compress.archivers.arj;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,20,import java.io.ByteArrayInputStream;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,21,import java.io.ByteArrayOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,22,import java.io.DataInputStream;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,23,import java.io.EOFException;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,24,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,25,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,26,import java.util.ArrayList;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,27,import java.util.zip.CRC32;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,29,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,30,import org.apache.commons.compress.archivers.ArchiveException;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,31,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,32,import org.apache.commons.compress.utils.BoundedInputStream;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,33,import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,36,"* Implements the ""arj"" archive format as an InputStream."
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,37,* <p>
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,38,"* <a href=""http://farmanager.com/svn/trunk/plugins/multiarc/arc.doc/arj.txt"">Reference</a>"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,39,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,41,public class ArjArchiveInputStream extends ArchiveInputStream {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,42,private static final boolean DEBUG = false;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,43,private static final int ARJ_MAGIC_1 = 0x60;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,44,private static final int ARJ_MAGIC_2 = 0xEA;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,45,private final DataInputStream in;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,46,private final String charset;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,47,private final MainHeader mainHeader;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,48,private LocalFileHeader currentLocalFileHeader = null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,49,private InputStream currentInputStream = null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,52,"* Constructs the ArjInputStream, taking ownership of the inputStream that is passed in."
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,53,"* @param inputStream the underlying stream, whose ownership is taken"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,54,* @param charset the charset used for file names and comments
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,55,*   in the archive
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,56,* @throws IOException
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,58,"public ArjArchiveInputStream(final InputStream inputStream,"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,59,final String charset) throws ArchiveException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,60,in = new DataInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,61,this.charset = charset;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,62,try {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,63,mainHeader = readMainHeader();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,64,if ((mainHeader.arjFlags & MainHeader.Flags.GARBLED) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,65,"throw new ArchiveException(""Encrypted ARJ files are unsupported"");"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,67,if ((mainHeader.arjFlags & MainHeader.Flags.VOLUME) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,68,"throw new ArchiveException(""Multi-volume ARJ files are unsupported"");"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,70,} catch (IOException ioException) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,71,"throw new ArchiveException(ioException.getMessage(), ioException);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,76,"* Constructs the ArjInputStream, taking ownership of the inputStream that is passed in,"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,77,* and using the CP437 character encoding.
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,78,"* @param inputStream the underlying stream, whose ownership is taken"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,79,* @throws IOException
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,81,public ArjArchiveInputStream(final InputStream inputStream)
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,82,throws ArchiveException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,83,"this(inputStream, ""CP437"");"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,86,@Override
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,87,public void close() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,88,try {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,89,in.close();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,90,} catch (IOException ignored) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,94,private static final void debug(final String message) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,95,if (DEBUG) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,96,System.out.println(message);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,100,private static final int read16(final DataInputStream in) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,101,final int value = in.readUnsignedShort();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,102,return Integer.reverseBytes(value) >>> 16;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,105,private final String readString(final DataInputStream in) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,106,final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,107,int nextByte;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,108,while ((nextByte = in.readUnsignedByte()) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,109,buffer.write(nextByte);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,111,"return new String(buffer.toByteArray(), charset);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,114,private byte[] readHeader() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,115,boolean found = false;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,116,byte[] basicHeaderBytes = null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,117,do {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,118,int first = 0;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,119,int second = in.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,120,do {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,121,first = second;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,122,second = in.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,123,} while (first != ARJ_MAGIC_1 && second != ARJ_MAGIC_2);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,124,final int basicHeaderSize = read16(in);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,125,if (basicHeaderSize == 0) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,126,// end of archive
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,127,return null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,129,if (basicHeaderSize <= 2600) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,130,basicHeaderBytes = new byte[basicHeaderSize];
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,131,in.readFully(basicHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,132,final int basicHeaderCrc32 = Integer.reverseBytes(in.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,133,final CRC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,134,crc32.update(basicHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,135,if (basicHeaderCrc32 == (int)crc32.getValue()) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,136,found = true;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,139,} while (!found);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,140,return basicHeaderBytes;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,143,private MainHeader readMainHeader() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,144,final byte[] basicHeaderBytes = readHeader();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,145,if (basicHeaderBytes == null) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,146,"throw new IOException(""Archive ends without any headers"");"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,148,final DataInputStream basicHeader = new DataInputStream(
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,149,new ByteArrayInputStream(basicHeaderBytes));
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,151,final int firstHeaderSize = basicHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,152,final byte[] firstHeaderBytes = new byte[firstHeaderSize - 1];
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,153,basicHeader.readFully(firstHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,154,final DataInputStream firstHeader = new DataInputStream(
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,155,new ByteArrayInputStream(firstHeaderBytes));
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,157,final MainHeader mainHeader = new MainHeader();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,158,mainHeader.archiverVersionNumber = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,159,mainHeader.minVersionToExtract = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,160,mainHeader.hostOS = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,161,mainHeader.arjFlags = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,162,mainHeader.securityVersion = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,163,mainHeader.fileType = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,164,mainHeader.reserved = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,165,mainHeader.dateTimeCreated = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,166,mainHeader.dateTimeModified = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,167,mainHeader.archiveSize = 0xffffFFFFL & Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,168,mainHeader.securityEnvelopeFilePosition = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,169,mainHeader.fileSpecPosition = read16(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,170,mainHeader.securityEnvelopeLength = read16(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,171,mainHeader.encryptionVersion = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,172,mainHeader.lastChapter = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,174,try {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,175,mainHeader.arjProtectionFactor = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,176,mainHeader.arjFlags2 = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,177,firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,178,firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,179,} catch (EOFException eof) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,182,mainHeader.name = readString(basicHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,183,mainHeader.comment = readString(basicHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,185,final  int extendedHeaderSize = read16(in);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,186,if (extendedHeaderSize > 0) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,187,mainHeader.extendedHeaderBytes = new byte[extendedHeaderSize];
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,188,in.readFully(mainHeader.extendedHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,189,final int extendedHeaderCrc32 = Integer.reverseBytes(in.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,190,final CRC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,191,crc32.update(mainHeader.extendedHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,192,if (extendedHeaderCrc32 != (int)crc32.getValue()) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,193,"throw new IOException(""Extended header CRC32 verification failure"");"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,197,debug(mainHeader.toString());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,199,return mainHeader;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,202,private LocalFileHeader readLocalFileHeader() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,203,final byte[] basicHeaderBytes = readHeader();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,204,if (basicHeaderBytes == null) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,205,return null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,207,final DataInputStream basicHeader = new DataInputStream(
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,208,new ByteArrayInputStream(basicHeaderBytes));
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,210,final int firstHeaderSize = basicHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,211,final byte[] firstHeaderBytes = new byte[firstHeaderSize - 1];
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,212,basicHeader.readFully(firstHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,213,final DataInputStream firstHeader = new DataInputStream(
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,214,new ByteArrayInputStream(firstHeaderBytes));
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,216,final LocalFileHeader localFileHeader = new LocalFileHeader();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,217,localFileHeader.archiverVersionNumber = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,218,localFileHeader.minVersionToExtract = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,219,localFileHeader.hostOS = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,220,localFileHeader.arjFlags = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,221,localFileHeader.method = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,222,localFileHeader.fileType = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,223,localFileHeader.reserved = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,224,localFileHeader.dateTimeModified = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,225,localFileHeader.compressedSize = 0xffffFFFFL & Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,226,localFileHeader.originalSize = 0xffffFFFFL & Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,227,localFileHeader.originalCrc32 = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,228,localFileHeader.fileSpecPosition = read16(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,229,localFileHeader.fileAccessMode = read16(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,230,localFileHeader.firstChapter = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,231,localFileHeader.lastChapter = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,233,try {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,234,localFileHeader.extendedFilePosition = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,235,localFileHeader.dateTimeAccessed = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,236,localFileHeader.dateTimeCreated = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,237,localFileHeader.originalSizeEvenForVolumes = Integer.reverseBytes(firstHeader.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,238,} catch (EOFException eof) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,241,localFileHeader.name = readString(basicHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,242,localFileHeader.comment = readString(basicHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,244,ArrayList<byte[]> extendedHeaders = new ArrayList<byte[]>();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,245,int extendedHeaderSize;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,246,while ((extendedHeaderSize = read16(in)) > 0) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,247,final byte[] extendedHeaderBytes = new byte[extendedHeaderSize];
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,248,in.readFully(extendedHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,249,final int extendedHeaderCrc32 = Integer.reverseBytes(in.readInt());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,250,final CRC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,251,crc32.update(extendedHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,252,if (extendedHeaderCrc32 != (int)crc32.getValue()) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,253,"throw new IOException(""Extended header CRC32 verification failure"");"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,255,extendedHeaders.add(extendedHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,257,localFileHeader.extendedHeaders = extendedHeaders.toArray(new byte[extendedHeaders.size()][]);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,259,debug(localFileHeader.toString());
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,261,return localFileHeader;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,264,"public static boolean matches(final byte[] signature, final int length) {"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,265,return length >= 2 &&
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,266,(0xff & signature[0]) == ARJ_MAGIC_1 &&
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,267,(0xff & signature[1]) == ARJ_MAGIC_2;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,270,public String getArchiveName() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,271,return mainHeader.name;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,274,public String getArchiveComment() {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,275,return mainHeader.comment;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,278,@Override
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,279,public ArjArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,280,if (currentInputStream != null) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,281,while (currentInputStream.read() >= 0) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,283,currentLocalFileHeader = null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,284,currentInputStream = null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,287,currentLocalFileHeader = readLocalFileHeader();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,288,if (currentLocalFileHeader != null) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,289,"currentInputStream = new BoundedInputStream(in, currentLocalFileHeader.compressedSize);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,290,if (currentLocalFileHeader.method == LocalFileHeader.Methods.STORED) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,291,"currentInputStream = new CRC32VerifyingInputStream(currentInputStream,"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,292,"currentLocalFileHeader.originalSize, currentLocalFileHeader.originalCrc32);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,294,return new ArjArchiveEntry(currentLocalFileHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,295,} else {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,296,currentInputStream = null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,297,return null;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,301,@Override
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,302,public boolean canReadEntryData(ArchiveEntry ae) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,303,return currentLocalFileHeader.method == LocalFileHeader.Methods.STORED;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,306,@Override
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,307,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,308,if (currentLocalFileHeader.method != LocalFileHeader.Methods.STORED) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,309,"throw new IOException(""Unsupported compression method "" + currentLocalFileHeader.method);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,311,return currentInputStream.read();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,314,@Override
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,315,"public int read(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,316,if (currentLocalFileHeader.method != LocalFileHeader.Methods.STORED) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,317,"throw new IOException(""Unsupported compression method "" + currentLocalFileHeader.method);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,319,"return currentInputStream.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,18,package org.apache.commons.compress.archivers.arj;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,22,class LocalFileHeader {
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,23,int archiverVersionNumber;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,24,int minVersionToExtract;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,25,int hostOS;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,26,int arjFlags;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,27,int method;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,28,int fileType;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,29,int reserved;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,30,int dateTimeModified;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,31,long compressedSize;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,32,long originalSize;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,33,int originalCrc32;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,34,int fileSpecPosition;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,35,int fileAccessMode;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,36,int firstChapter;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,37,int lastChapter;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,39,int extendedFilePosition;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,40,int dateTimeAccessed;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,41,int dateTimeCreated;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,42,int originalSizeEvenForVolumes;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,44,String name;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,45,String comment;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,47,byte[][] extendedHeaders = null;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,49,static class Flags {
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,50,static final int GARBLED = 0x01;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,51,static final int VOLUME = 0x04;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,52,static final int EXTFILE = 0x08;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,53,static final int PATHSYM = 0x10;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,54,static final int BACKUP = 0x20;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,57,static class FileTypes {
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,58,static final int BINARY = 0;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,59,static final int SEVEN_BIT_TEXT = 1;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,60,static final int DIRECTORY = 3;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,61,static final int VOLUME_LABEL = 4;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,62,static final int CHAPTER_LABEL = 5;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,65,static class Methods {
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,66,static final int STORED = 0;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,67,static final int COMPRESSED_MOST = 1;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,68,static final int COMPRESSED_FASTEST = 4;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,69,static final int NO_DATA_NO_CRC = 8;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,70,static final int NO_DATA = 9;
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,73,@Override
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,74,public String toString() {
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,75,StringBuilder builder = new StringBuilder();
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,76,"builder.append(""LocalFileHeader [archiverVersionNumber="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,77,builder.append(archiverVersionNumber);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,78,"builder.append("", minVersionToExtract="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,79,builder.append(minVersionToExtract);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,80,"builder.append("", hostOS="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,81,builder.append(hostOS);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,82,"builder.append("", arjFlags="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,83,builder.append(arjFlags);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,84,"builder.append("", method="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,85,builder.append(method);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,86,"builder.append("", fileType="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,87,builder.append(fileType);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,88,"builder.append("", reserved="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,89,builder.append(reserved);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,90,"builder.append("", dateTimeModified="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,91,builder.append(dateTimeModified);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,92,"builder.append("", compressedSize="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,93,builder.append(compressedSize);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,94,"builder.append("", originalSize="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,95,builder.append(originalSize);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,96,"builder.append("", originalCrc32="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,97,builder.append(originalCrc32);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,98,"builder.append("", fileSpecPosition="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,99,builder.append(fileSpecPosition);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,100,"builder.append("", fileAccessMode="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,101,builder.append(fileAccessMode);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,102,"builder.append("", firstChapter="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,103,builder.append(firstChapter);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,104,"builder.append("", lastChapter="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,105,builder.append(lastChapter);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,106,"builder.append("", extendedFilePosition="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,107,builder.append(extendedFilePosition);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,108,"builder.append("", dateTimeAccessed="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,109,builder.append(dateTimeAccessed);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,110,"builder.append("", dateTimeCreated="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,111,builder.append(dateTimeCreated);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,112,"builder.append("", originalSizeEvenForVolumes="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,113,builder.append(originalSizeEvenForVolumes);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,114,"builder.append("", name="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,115,builder.append(name);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,116,"builder.append("", comment="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,117,builder.append(comment);
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,118,"builder.append("", extendedHeaders="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,119,builder.append(Arrays.toString(extendedHeaders));
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,120,"builder.append(""]"");"
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,121,return builder.toString();
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,18,package org.apache.commons.compress.archivers.arj;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,22,class MainHeader {
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,23,int archiverVersionNumber;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,24,int minVersionToExtract;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,25,int hostOS;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,26,int arjFlags;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,27,int securityVersion;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,28,int fileType;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,29,int reserved;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,30,int dateTimeCreated;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,31,int dateTimeModified;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,32,long archiveSize;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,33,int securityEnvelopeFilePosition;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,34,int fileSpecPosition;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,35,int securityEnvelopeLength;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,36,int encryptionVersion;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,37,int lastChapter;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,38,int arjProtectionFactor;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,39,int arjFlags2;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,40,String name;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,41,String comment;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,42,byte[] extendedHeaderBytes = null;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,44,static class Flags {
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,45,static final int GARBLED = 0x01;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,46,static final int OLD_SECURED_NEW_ANSI_PAGE = 0x02;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,47,static final int VOLUME = 0x04;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,48,static final int ARJPROT = 0x08;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,49,static final int PATHSYM = 0x10;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,50,static final int BACKUP = 0x20;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,51,static final int SECURED = 0x40;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,52,static final int ALTNAME = 0x80;
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,56,@Override
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,57,public String toString() {
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,58,final StringBuilder builder = new StringBuilder();
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,59,"builder.append(""MainHeader [archiverVersionNumber="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,60,builder.append(archiverVersionNumber);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,61,"builder.append("", minVersionToExtract="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,62,builder.append(minVersionToExtract);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,63,"builder.append("", hostOS="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,64,builder.append(hostOS);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,65,"builder.append("", arjFlags="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,66,builder.append(arjFlags);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,67,"builder.append("", securityVersion="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,68,builder.append(securityVersion);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,69,"builder.append("", fileType="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,70,builder.append(fileType);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,71,"builder.append("", reserved="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,72,builder.append(reserved);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,73,"builder.append("", dateTimeCreated="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,74,builder.append(dateTimeCreated);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,75,"builder.append("", dateTimeModified="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,76,builder.append(dateTimeModified);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,77,"builder.append("", archiveSize="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,78,builder.append(archiveSize);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,79,"builder.append("", securityEnvelopeFilePosition="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,80,builder.append(securityEnvelopeFilePosition);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,81,"builder.append("", fileSpecPosition="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,82,builder.append(fileSpecPosition);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,83,"builder.append("", securityEnvelopeLength="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,84,builder.append(securityEnvelopeLength);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,85,"builder.append("", encryptionVersion="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,86,builder.append(encryptionVersion);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,87,"builder.append("", lastChapter="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,88,builder.append(lastChapter);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,89,"builder.append("", arjProtectionFactor="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,90,builder.append(arjProtectionFactor);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,91,"builder.append("", arjFlags2="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,92,builder.append(arjFlags2);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,93,"builder.append("", name="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,94,builder.append(name);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,95,"builder.append("", comment="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,96,builder.append(comment);
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,97,"builder.append("", extendedHeaderBytes="");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,98,builder.append(Arrays.toString(extendedHeaderBytes));
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,99,"builder.append(""]"");"
True,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java,100,return builder.toString();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,31,import org.apache.commons.compress.utils.BoundedInputStream;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,929,rivate static class BoundedInputStream extends InputStream {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,930,rivate final InputStream in;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,931,rivate long bytesRemaining;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,933,"ublic BoundedInputStream(final InputStream in, final long size) {"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,934,his.in = in;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,935,ytesRemaining = size;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,938,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,939,ublic int read() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,940,f (bytesRemaining > 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,941,-bytesRemaining;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,942,eturn in.read();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,943, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,944,eturn -1;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,948,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,949,"ublic int read(byte[] b, int off, int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,950,f (bytesRemaining == 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,951,eturn -1;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,953,nt bytesToRead = len;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,954,f (bytesToRead > bytesRemaining) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,955,ytesToRead = (int) bytesRemaining;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,957,"inal int bytesRead = in.read(b, off, bytesToRead);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,958,f (bytesRead >= 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,959,ytesRemaining -= bytesRead;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,961,eturn bytesRead;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,964,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,965,ublic void close() {
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,18,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,20,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,23,public class BoundedInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,24,private final InputStream in;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,25,private long bytesRemaining;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,27,"public BoundedInputStream(final InputStream in, final long size) {"
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,28,this.in = in;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,29,bytesRemaining = size;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,32,@Override
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,33,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,34,if (bytesRemaining > 0) {
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,35,--bytesRemaining;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,36,return in.read();
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,37,} else {
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,38,return -1;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,42,@Override
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,43,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,44,if (bytesRemaining == 0) {
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,45,return -1;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,47,int bytesToRead = len;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,48,if (bytesToRead > bytesRemaining) {
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,49,bytesToRead = (int) bytesRemaining;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,51,"final int bytesRead = in.read(b, off, bytesToRead);"
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,52,if (bytesRead >= 0) {
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,53,bytesRemaining -= bytesRead;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,55,return bytesRead;
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,58,@Override
True,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java,59,public void close() {

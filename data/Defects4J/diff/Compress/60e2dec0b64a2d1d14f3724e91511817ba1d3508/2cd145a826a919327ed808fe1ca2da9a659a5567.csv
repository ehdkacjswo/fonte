is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,46,register(Zip64ExtendedInformationExtraField.class);
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,21,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,24,* Holds size and other extended information for entries that use Zip64
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,25,* features.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,27,* <p>From {@link http://www.pkware.com/documents/casestudies/APPNOTE.TXT PKWARE's APPNOTE.TXT}
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,28,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,29,* Zip64 Extended Information Extra Field (0x0001):
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,31,*          The following is the layout of the zip64 extended
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,32,"*          information ""extra"" block. If one of the size or"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,33,*          offset fields in the Local or Central directory
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,34,"*          record is too small to hold the required data,"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,35,*          a Zip64 extended information record is created.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,36,*          The order of the fields in the zip64 extended
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,37,"*          information record is fixed, but the fields will"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,38,*          only appear if the corresponding Local or Central
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,39,*          directory record field is set to 0xFFFF or 0xFFFFFFFF.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,41,*          Note: all fields stored in Intel low-byte/high-byte order.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,43,*          Value      Size       Description
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,45,"*  (ZIP64) 0x0001     2 bytes    Tag for this ""extra"" block type"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,46,"*          Size       2 bytes    Size of this ""extra"" block"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,47,*          Original
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,48,*          Size       8 bytes    Original uncompressed file size
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,49,*          Compressed
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,50,*          Size       8 bytes    Size of compressed data
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,51,*          Relative Header
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,52,*          Offset     8 bytes    Offset of local header record
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,53,*          Disk Start
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,54,*          Number     4 bytes    Number of the disk on which
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,55,*                                this file starts
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,57,*          This entry in the Local header must include BOTH original
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,58,*          and compressed file size fields. If encrypting the
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,59,*          central directory and bit 13 of the general purpose bit
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,60,"*          flag is set indicating masking, the value stored in the"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,61,*          Local Header for the original file size will be zero.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,62,* </pre></p>
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,64,* <p>Currently Commons Compress doesn't support encrypting the
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,65,* central directory so the not about masking doesn't apply.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,67,* <p>The implementation relies on data being read from the local file
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,68,* header and assumes that both size values are always present.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,70,* @since Apache Commons Compress 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,71,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,73,public class Zip64ExtendedInformationExtraField implements ZipExtraField {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,74,// TODO: the LFH should probably not contain relativeHeaderOffset
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,75,// and diskStart but then ZipArchivePOutputStream won't write it to
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,76,// the CD either - need to test interop with other implementations
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,77,// to see whether they do have a problem with the extraneous
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,78,// information inside the LFH
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,80,private static final ZipShort HEADER_ID = new ZipShort(0x0001);
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,82,"private static final int WORD = 4, DWORD = 8;"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,84,"private ZipEightByteInteger size, compressedSize, relativeHeaderOffset;"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,85,private ZipLong diskStart;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,88,* This constructor should only be used by the code that reads
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,89,* archives inside of Commons Compress.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,91,public Zip64ExtendedInformationExtraField() { }
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,94,* Creates an extra field based on the original and compressed size.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,96,* @param size the entry's original size
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,97,* @param compressedSize the entry's compressed size
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,99,* @throws IllegalArgumentException if size or compressedSize is null
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,101,"public Zip64ExtendedInformationExtraField(ZipEightByteInteger size,"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,102,ZipEightByteInteger compressedSize) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,103,"this(size, compressedSize, null, null);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,107,* Creates an extra field based on all four possible values.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,109,* @param size the entry's original size
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,110,* @param compressedSize the entry's compressed size
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,112,* @throws IllegalArgumentException if size or compressedSize is null
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,114,"public Zip64ExtendedInformationExtraField(ZipEightByteInteger size,"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,115,"ZipEightByteInteger compressedSize,"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,116,"ZipEightByteInteger relativeHeaderOffset,"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,117,ZipLong diskStart) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,118,if (size == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,119,"throw new IllegalArgumentException(""size must not be null"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,121,if (compressedSize == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,122,"throw new IllegalArgumentException(""compressedSize must not be null"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,124,this.size = size;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,125,this.compressedSize = compressedSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,126,this.relativeHeaderOffset = relativeHeaderOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,127,this.diskStart = diskStart;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,130,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,131,public ZipShort getHeaderId() {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,132,return HEADER_ID;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,135,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,136,public ZipShort getLocalFileDataLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,137,return getCentralDirectoryLength();
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,140,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,141,public ZipShort getCentralDirectoryLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,142,return new ZipShort(2 * DWORD  // both size fields
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,143,+ (relativeHeaderOffset != null ? DWORD : 0)
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,144,+ (diskStart != null ? WORD : 0));
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,147,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,148,public byte[] getLocalFileDataData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,149,return getCentralDirectoryData();
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,152,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,153,public byte[] getCentralDirectoryData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,154,byte[] data = new byte[getCentralDirectoryLength().getValue()];
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,155,addSizes(data);
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,156,int off = 2 * DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,157,if (relativeHeaderOffset != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,158,"System.arraycopy(relativeHeaderOffset.getBytes(), 0, data, off, DWORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,159,off += DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,161,if (diskStart != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,162,"System.arraycopy(diskStart.getBytes(), 0, data, off, WORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,163,off += WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,165,return data;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,168,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,169,"public void parseFromLocalFileData(byte[] buffer, int offset, int length)"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,170,throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,171,if (length < 2 * DWORD) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,172,"throw new ZipException(""Zip64 extended information must contain"""
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,173,"+ "" both size values in the local file"""
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,174,"+ "" header."");"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,176,"size = new ZipEightByteInteger(buffer, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,177,offset += DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,178,"compressedSize = new ZipEightByteInteger(buffer, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,179,offset += DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,180,int remaining = length - 2 * DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,181,if (remaining >= DWORD) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,182,"relativeHeaderOffset = new ZipEightByteInteger(buffer, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,183,offset += DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,184,remaining -= DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,186,if (remaining >= WORD) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,187,"diskStart = new ZipLong(buffer, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,188,offset += WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,189,remaining -= WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,193,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,194,"public void parseFromCentralDirectoryData(byte[] buffer, int offset,"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,195,int length)
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,196,throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,197,"// if there is no size information in here, we are screwed and"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,198,// can only hope things will get resolved by LFH data later
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,199,// But there are some cases that can be detected
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,200,// * all data is there
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,201,// * length % 8 == 4 -> at least we can identify the diskStart field
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,202,if (length >= 3 * DWORD + WORD) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,203,"parseFromLocalFileData(buffer, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,204,} else if (length % DWORD == WORD) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,205,"diskStart = new ZipLong(buffer, offset + length - WORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,210,* The uncompressed size stored in this extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,212,public ZipEightByteInteger getSize() {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,213,return size;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,217,* The compressed size stored in this extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,219,public ZipEightByteInteger getCompressedSize() {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,220,return compressedSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,224,* The relative header offset stored in this extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,226,public ZipEightByteInteger getRelativeHeaderOffset() {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,227,return relativeHeaderOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,231,* The disk start number stored in this extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,233,public ZipLong getDiskStartNumber() {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,234,return diskStart;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,237,private void addSizes(byte[] data) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,238,"System.arraycopy(size.getBytes(), 0, data, 0, DWORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,239,"System.arraycopy(compressedSize.getBytes(), 0, data, DWORD, DWORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,224,public String toString() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,225,"return ""ZipEightByteInteger value: "" + value;"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,164,public String toString() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,165,"return ""ZipLong value: "" + value;"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,138,public String toString() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,139,"return ""ZipShort value: "" + value;"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,4,*  this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,7,*  the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,14,*  See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,15,*  limitations under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,19,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,21,import java.math.BigInteger;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,22,import java.util.zip.ZipException;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,23,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,25,public class Zip64ExtendedInformationExtraFieldTest extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,26,public Zip64ExtendedInformationExtraFieldTest(String name) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,27,super(name);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,30,private static final ZipEightByteInteger SIZE =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,31,new ZipEightByteInteger(0x12345678);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,32,private static final ZipEightByteInteger CSIZE =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,33,new ZipEightByteInteger(0x9ABCDEF);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,34,private static final ZipEightByteInteger OFF =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,35,new ZipEightByteInteger(BigInteger.valueOf(0xABCDEF091234567l)
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,36,.shiftLeft(4)
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,37,.setBit(3));
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,38,private static final ZipLong DISK = new ZipLong(0x12);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,40,public void testWriteCDOnlySizes() {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,41,Zip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,42,"new Zip64ExtendedInformationExtraField(SIZE, CSIZE);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,43,"assertEquals(new ZipShort(16), f.getCentralDirectoryLength());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,44,byte[] b = f.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,45,"assertEquals(16, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,46,checkSizes(b);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,49,public void testWriteCDSizeAndOffset() {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,50,Zip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,51,"new Zip64ExtendedInformationExtraField(SIZE, CSIZE, OFF, null);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,52,"assertEquals(new ZipShort(24), f.getCentralDirectoryLength());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,53,byte[] b = f.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,54,"assertEquals(24, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,55,checkSizes(b);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,56,"checkOffset(b, 16);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,59,public void testWriteCDSizeOffsetAndDisk() {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,60,Zip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,61,"new Zip64ExtendedInformationExtraField(SIZE, CSIZE, OFF, DISK);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,62,"assertEquals(new ZipShort(28), f.getCentralDirectoryLength());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,63,byte[] b = f.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,64,"assertEquals(28, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,65,checkSizes(b);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,66,"checkOffset(b, 16);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,67,"checkDisk(b, 24);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,70,public void testWriteCDSizeAndDisk() {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,71,Zip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,72,"new Zip64ExtendedInformationExtraField(SIZE, CSIZE, null, DISK);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,73,"assertEquals(new ZipShort(20), f.getCentralDirectoryLength());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,74,byte[] b = f.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,75,"assertEquals(20, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,76,checkSizes(b);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,77,"checkDisk(b, 16);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,80,public void testReadLFHSizesOnly() throws ZipException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,81,Zip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,82,new Zip64ExtendedInformationExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,83,byte[] b = new byte[16];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,84,"System.arraycopy(SIZE.getBytes(), 0, b, 0, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,85,"System.arraycopy(CSIZE.getBytes(), 0, b, 8, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,86,"f.parseFromLocalFileData(b, 0, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,87,"assertEquals(SIZE, f.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,88,"assertEquals(CSIZE, f.getCompressedSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,89,assertNull(f.getRelativeHeaderOffset());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,90,assertNull(f.getDiskStartNumber());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,93,public void testReadLFHSizesAndOffset() throws ZipException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,94,Zip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,95,new Zip64ExtendedInformationExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,96,byte[] b = new byte[24];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,97,"System.arraycopy(SIZE.getBytes(), 0, b, 0, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,98,"System.arraycopy(CSIZE.getBytes(), 0, b, 8, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,99,"System.arraycopy(OFF.getBytes(), 0, b, 16, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,100,"f.parseFromLocalFileData(b, 0, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,101,"assertEquals(SIZE, f.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,102,"assertEquals(CSIZE, f.getCompressedSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,103,"assertEquals(OFF, f.getRelativeHeaderOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,104,assertNull(f.getDiskStartNumber());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,107,public void testReadLFHSizesOffsetAndDisk() throws ZipException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,108,Zip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,109,new Zip64ExtendedInformationExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,110,byte[] b = new byte[28];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,111,"System.arraycopy(SIZE.getBytes(), 0, b, 0, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,112,"System.arraycopy(CSIZE.getBytes(), 0, b, 8, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,113,"System.arraycopy(OFF.getBytes(), 0, b, 16, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,114,"System.arraycopy(DISK.getBytes(), 0, b, 24, 4);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,115,"f.parseFromLocalFileData(b, 0, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,116,"assertEquals(SIZE, f.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,117,"assertEquals(CSIZE, f.getCompressedSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,118,"assertEquals(OFF, f.getRelativeHeaderOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,119,"assertEquals(DISK, f.getDiskStartNumber());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,122,public void testReadLFHSizesAndDisk() throws ZipException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,123,Zip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,124,new Zip64ExtendedInformationExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,125,byte[] b = new byte[20];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,126,"System.arraycopy(SIZE.getBytes(), 0, b, 0, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,127,"System.arraycopy(CSIZE.getBytes(), 0, b, 8, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,128,"System.arraycopy(DISK.getBytes(), 0, b, 16, 4);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,129,"f.parseFromLocalFileData(b, 0, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,130,"assertEquals(SIZE, f.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,131,"assertEquals(CSIZE, f.getCompressedSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,132,assertNull(f.getRelativeHeaderOffset());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,133,"assertEquals(DISK, f.getDiskStartNumber());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,136,public void testReadCDSizesOffsetAndDisk() throws ZipException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,137,Zip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,138,new Zip64ExtendedInformationExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,139,byte[] b = new byte[28];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,140,"System.arraycopy(SIZE.getBytes(), 0, b, 0, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,141,"System.arraycopy(CSIZE.getBytes(), 0, b, 8, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,142,"System.arraycopy(OFF.getBytes(), 0, b, 16, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,143,"System.arraycopy(DISK.getBytes(), 0, b, 24, 4);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,144,"f.parseFromCentralDirectoryData(b, 0, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,145,"assertEquals(SIZE, f.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,146,"assertEquals(CSIZE, f.getCompressedSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,147,"assertEquals(OFF, f.getRelativeHeaderOffset());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,148,"assertEquals(DISK, f.getDiskStartNumber());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,151,public void testReadCDSomethingAndDisk() throws ZipException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,152,Zip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,153,new Zip64ExtendedInformationExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,154,byte[] b = new byte[12];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,155,"System.arraycopy(SIZE.getBytes(), 0, b, 0, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,156,"System.arraycopy(DISK.getBytes(), 0, b, 8, 4);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,157,"f.parseFromCentralDirectoryData(b, 0, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,158,assertNull(f.getSize());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,159,assertNull(f.getCompressedSize());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,160,assertNull(f.getRelativeHeaderOffset());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,161,"assertEquals(DISK, f.getDiskStartNumber());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,164,private static void checkSizes(byte[] b) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,165,"assertEquals(0x78, b[0]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,166,"assertEquals(0x56, b[1]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,167,"assertEquals(0x34, b[2]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,168,"assertEquals(0x12, b[3]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,169,"assertEquals(0x00, b[4]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,170,"assertEquals(0x00, b[5]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,171,"assertEquals(0x00, b[6]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,172,"assertEquals(0x00, b[7]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,173,"assertEquals((byte) 0xEF, b[8]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,174,"assertEquals((byte) 0xCD, b[9]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,175,"assertEquals((byte) 0xAB, b[10]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,176,"assertEquals(0x09, b[11]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,177,"assertEquals(0x00, b[12]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,178,"assertEquals(0x00, b[13]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,179,"assertEquals(0x00, b[14]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,180,"assertEquals(0x00, b[15]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,183,"private static void checkOffset(byte[] b, int off) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,184,"assertEquals(0x78, b[0 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,185,"assertEquals(0x56, b[1 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,186,"assertEquals(0x34, b[2 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,187,"assertEquals(0x12, b[3 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,188,"assertEquals((byte) 0x09, b[4 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,189,"assertEquals((byte) 0xEF, b[5 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,190,"assertEquals((byte) 0xCD, b[6 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,191,"assertEquals((byte) 0xAB, b[7 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,194,"private static void checkDisk(byte[] b, int off) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,195,"assertEquals(0x12, b[0 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,196,"assertEquals(0x00, b[1 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,197,"assertEquals(0x00, b[2 + off]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,198,"assertEquals(0x00, b[3 + off]);"

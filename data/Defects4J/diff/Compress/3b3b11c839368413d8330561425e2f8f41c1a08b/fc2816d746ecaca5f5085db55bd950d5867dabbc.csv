is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,447,if (!hasZip64Extra(entry)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,450,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,451,writeOut(ZipLong.ZIP64_MAGIC.getBytes());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,452,writeOut(ZipLong.ZIP64_MAGIC.getBytes());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,453,raf.seek(localDataStart + 3 * WORD + 2 * SHORT
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,454,+ getName(entry).limit() + 2 * SHORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,455,writeOut(ZipEightByteInteger.getBytes(entry.getCompressedSize()));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,456,writeOut(ZipEightByteInteger.getBytes(entry.getSize()));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,693,inal ZipEncoding entryEncoding;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,695,f (!encodable && fallbackToUTF8) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,696,ntryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,697, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,698,ntryEncoding = zipEncoding;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,701,yteBuffer name = entryEncoding.encode(ze.getName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,701,ByteBuffer name = getName(ze);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,716,oolean commentEncodable = this.zipEncoding.canEncode(comm);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,716,boolean commentEncodable = zipEncoding.canEncode(comm);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,720,yteBuffer commentB = entryEncoding.encode(comm);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,720,ByteBuffer commentB = getEntryEncoding(ze).encode(comm);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,883,/ file name length
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,884,inal ZipEncoding entryEncoding;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,886,f (!encodable && fallbackToUTF8) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,887,ntryEncoding = ZipEncodingHelper.UTF8_ZIP_ENCODING;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,888, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,889,ntryEncoding = zipEncoding;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,892,yteBuffer name = entryEncoding.encode(ze.getName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,883,ByteBuffer name = getName(ze);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,908,yteBuffer commentB = entryEncoding.encode(comm);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,899,ByteBuffer commentB = getEntryEncoding(ze).encode(comm);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1166,e.addAsFirstExtraField(z64);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1159,"// even if the field is there already, make sure it is the first one"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1160,ze.addAsFirstExtraField(z64);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1177,private ZipEncoding getEntryEncoding(ZipArchiveEntry ze) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1178,boolean encodable = zipEncoding.canEncode(ze.getName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1179,return !encodable && fallbackToUTF8
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1180,? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1183,private ByteBuffer getName(ZipArchiveEntry ze) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1184,return getEntryEncoding(ze).encode(ze.getName());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,288,@Ignore
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,295,@Ignore
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,302, compression to a stream.
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,304,* compression.
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,304, No Compression + Stream => sizes must be known before data is
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,305, written and are stored directly inside the LFH.  No Data
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,306, Descriptor at all.
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,306,* No Compression => sizes are stored directly inside the LFH.  No
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,307,* Data Descriptor at all.
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,310,Test public void writeBigStoredEntryToStream() throws Throwable {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,311,"ithTemporaryArchive(""writeBigStoredEntryToStream"","
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,312,ew ZipOutputTest() {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,311,private static ZipOutputTest writeBigStoredEntry(final boolean knownSize) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,312,return new ZipOutputTest() {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,319,if (knownSize) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,320,ae.setMethod(ZipArchiveEntry.STORED);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,323,zae.setMethod(ZipArchiveEntry.STORED);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,460,* No Compression + Stream => sizes must be known before data is
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,461,* written.
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,463,@Test public void writeBigStoredEntryToStream() throws Throwable {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,464,"withTemporaryArchive(""writeBigStoredEntryToStream"","
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,465,"writeBigStoredEntry(true),"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,469,@Test public void writeBigStoredEntryKnownSizeToFile() throws Throwable {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,470,"withTemporaryArchive(""writeBigStoredEntryKnownSizeToFile"","
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,471,"writeBigStoredEntry(true),"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,472,true);

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,40,import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,163,* Constant (value {@value}) used to identify the block LZ4
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,164,* compression method. Not supported as an output stream type.
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,166,* @since 1.14
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,168,"public static final String LZ4_BLOCK = ""lz4-block"";"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,423,"            {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED}, {@value #Z} or"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,424,            {@value #DEFLATE}
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,432,"*            {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED}, {@value #Z},"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,433,*            {@value #LZ4_BLOCK}
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,434,*            or {@value #DEFLATE}
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,493,if (LZ4_BLOCK.equalsIgnoreCase(name)) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,494,return new BlockLZ4CompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,19,package org.apache.commons.compress.compressors.lz4;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,24,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,25,import org.apache.commons.compress.utils.ByteUtils;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,26,import org.apache.commons.compress.utils.IOUtils;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,29,* CompressorInputStream for the LZ4 block format.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,31,"* @see <a href=""http://lz4.github.io/lz4/lz4_Block_format.html"">LZ4 Block Format Description</a>"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,32,* @since 1.14
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,34,public class BlockLZ4CompressorInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,36,private static final int WINDOW_SIZE = 1 << 16;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,37,private static final int SIZE_BITS = 4;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,38,private static final int COPY_SIZE_MASK = (1 << SIZE_BITS) - 1;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,39,private static final int LITERAL_SIZE_MASK = COPY_SIZE_MASK << SIZE_BITS;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,41,/** Buffer to write decompressed bytes to for back-references */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,42,private final byte[] buf = new byte[3 * WINDOW_SIZE];
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,44,/** One behind the index of the last byte in the buffer that was written */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,45,private int writeIndex;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,47,/** Index of the next byte to be read. */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,48,private int readIndex;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,50,/** The underlying stream to read compressed data from */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,51,private final InputStream in;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,53,/** Number of bytes still to be read from the current literal or copy. */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,54,private long bytesRemaining;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,56,/** Copy-size part of the block starting byte. */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,57,private int nextCopySize;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,59,/** Offset of the current copy. */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,60,private int copyOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,62,/** Current state of the stream */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,63,private State state = State.NO_BLOCK;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,65,/** uncompressed size */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,66,private int size = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,68,// used in no-arg read method
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,69,private final byte[] oneByte = new byte[1];
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,71,private final ByteUtils.ByteSupplier supplier = new ByteUtils.ByteSupplier() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,72,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,73,public int getAsByte() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,74,return readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,79,* Creates a new LZ4 input stream.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,81,* @param is
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,82,*            An InputStream to read compressed data from
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,84,* @throws IOException if reading fails
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,86,public BlockLZ4CompressorInputStream(final InputStream is) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,87,this.in = is;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,88,writeIndex = readIndex = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,89,bytesRemaining = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,92,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,93,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,94,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,95,"return read(oneByte, 0, 1) == -1 ? -1 : oneByte[0] & 0xFF;"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,98,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,99,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,100,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,101,in.close();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,104,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,105,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,106,public int available() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,107,return writeIndex - readIndex;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,111,* {@inheritDoc}
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,113,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,114,"public int read(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,115,if (state == State.EOF) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,116,return -1;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,118,switch (state) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,119,case NO_BLOCK:
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,120,readSizes();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,121,/*FALLTHROUGH*/
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,122,case IN_LITERAL:
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,123,"int litLen = readLiteral(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,124,if (bytesRemaining == 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,125,state = State.LOOKING_FOR_COPY;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,127,return litLen;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,128,case LOOKING_FOR_COPY:
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,129,if (!initializeCopy()) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,130,state = State.EOF;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,131,return -1;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,133,/*FALLTHROUGH*/
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,134,case IN_COPY:
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,135,"int copyLen = readCopy(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,136,if (bytesRemaining == 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,137,state = State.NO_BLOCK;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,139,return copyLen;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,140,default:
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,141,"throw new IOException(""Unknown stream state "" + state);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,146,* Get the uncompressed size of the stream
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,148,* @return the uncompressed size
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,150,public int getSize() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,151,return size;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,154,private void readSizes() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,155,int nextBlock = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,156,if (nextBlock == -1) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,157,"throw new IOException(""Premature end of stream while looking for next block"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,159,nextCopySize = nextBlock & COPY_SIZE_MASK;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,160,long literalSizePart = (nextBlock & LITERAL_SIZE_MASK) >> SIZE_BITS;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,161,if (literalSizePart == COPY_SIZE_MASK) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,162,literalSizePart += readSizeBytes();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,164,bytesRemaining = literalSizePart;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,165,state = State.IN_LITERAL;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,168,private long readSizeBytes() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,169,long accum = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,170,int nextByte;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,171,do {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,172,nextByte = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,173,if (nextByte == -1) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,174,"throw new IOException(""Premature end of stream while parsing length"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,176,accum += nextByte;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,177,} while (nextByte == 255);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,178,return accum;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,181,"private int readLiteral(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,182,final int avail = available();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,183,if (len > avail) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,184,tryToReadLiteral(len - avail);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,186,"return readFromBuffer(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,189,private void tryToReadLiteral(int bytesToRead) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,190,"final int reallyTryToRead = (int) Math.min(Math.min(bytesToRead, bytesRemaining),"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,191,buf.length - writeIndex);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,192,final int bytesRead = reallyTryToRead > 0
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,193,"? IOUtils.readFully(in, buf, writeIndex, reallyTryToRead)"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,194,: 0 /* happens for bytesRemaining == 0 */;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,195,count(bytesRead);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,196,if (reallyTryToRead != bytesRead) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,197,"throw new IOException(""Premature end of stream reading literal"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,199,writeIndex += reallyTryToRead;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,200,bytesRemaining -= reallyTryToRead;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,203,"private int readFromBuffer(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,204,"final int readable = Math.min(len, available());"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,205,if (readable > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,206,"System.arraycopy(buf, readIndex, b, off, readable);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,207,readIndex += readable;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,208,if (readIndex > 2 * WINDOW_SIZE) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,209,slideBuffer();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,212,size += readable;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,213,return readable;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,216,private void slideBuffer() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,217,"System.arraycopy(buf, WINDOW_SIZE, buf, 0, WINDOW_SIZE);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,218,writeIndex -= WINDOW_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,219,readIndex -= WINDOW_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,223,* @return false if there is no more copy - this means this is the
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,224,* last block of the stream.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,226,private boolean initializeCopy() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,227,try {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,228,"copyOffset = (int) ByteUtils.fromLittleEndian(supplier, 2);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,229,} catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,230,if (nextCopySize == 0) { // the last block has no copy
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,231,return false;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,233,throw ex;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,235,long copySize = nextCopySize;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,236,if (nextCopySize == COPY_SIZE_MASK) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,237,copySize += readSizeBytes();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,239,bytesRemaining = copySize + 4; // minimal match length 4 is encoded as 0
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,240,state = State.IN_COPY;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,241,return true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,244,"private int readCopy(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,245,final int avail = available();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,246,if (len > avail) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,247,tryToCopy(len - avail);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,249,"return readFromBuffer(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,252,private void tryToCopy(int bytesToCopy) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,253,// this will fit into the buffer without sliding and not
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,254,// require more than is available inside the copy
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,255,"int copy = (int) Math.min(Math.min(bytesToCopy, bytesRemaining),"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,256,buf.length - writeIndex);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,257,if (copy == 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,258,// NOP
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,259,} else if (copyOffset == 1) { // pretty common special case
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,260,final byte last = buf[writeIndex - 1];
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,261,for (int i = 0; i < copy; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,262,buf[writeIndex++] = last;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,264,} else if (copy < copyOffset) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,265,"System.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, copy);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,266,writeIndex += copy;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,267,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,268,final int fullRots = copy / copyOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,269,for (int i = 0; i < fullRots; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,270,"System.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, copyOffset);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,271,writeIndex += copyOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,274,final int pad = copy - (copyOffset * fullRots);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,275,if (pad > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,276,"System.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, pad);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,277,writeIndex += pad;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,280,bytesRemaining -= copy;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,283,private int readOneByte() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,284,final int b = in.read();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,285,if (b != -1) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,286,count(1);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,287,return b & 0xFF;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,289,return -1;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,292,private enum State {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,293,"NO_BLOCK, IN_LITERAL, LOOKING_FOR_COPY, IN_COPY, EOF"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,19,package org.apache.commons.compress.compressors.lz4;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,21,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,22,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,23,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,24,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,25,import org.apache.commons.compress.compressors.CompressorStreamFactory;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,26,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,28,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,30,public class BlockLZ4CompressorInputStreamTest extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,32,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,33,public void readBlaLz4() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,34,"try (InputStream a = new BlockLZ4CompressorInputStream(new FileInputStream(getFile(""bla.tar.block_lz4"")));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,35,"FileInputStream e = new FileInputStream(getFile(""bla.tar""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,36,byte[] expected = IOUtils.toByteArray(e);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,37,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,38,"Assert.assertArrayEquals(expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,42,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,43,public void readBlaLz4ViaFactory() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,44,try (InputStream a = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,45,".createCompressorInputStream(CompressorStreamFactory.LZ4_BLOCK,"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,46,"new FileInputStream(getFile(""bla.tar.block_lz4"")));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,47,"FileInputStream e = new FileInputStream(getFile(""bla.tar""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,48,byte[] expected = IOUtils.toByteArray(e);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,49,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java,50,"Assert.assertArrayEquals(expected, actual);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,32,import org.apache.commons.compress.compressors.lzma.LZMAUtils;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,245,"if (LZMAUtils.matches(signature, signatureLength) &&"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,246,LZMAUtils.isLZMACompressionAvailable()) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,247,return new LZMACompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,86,* Checks if the signature matches what is expected for an lzma file.
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,88,* @param signature
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,89,*            the bytes to check
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,90,* @param length
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,91,*            the number of bytes to check
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,92,"* @return true, if this stream is an lzma  compressed stream, false otherwise"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,94,* @since 1.10
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,96,"public static boolean matches(byte[] signature, int length) {"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,98,if (signature == null || length < 3) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,99,return false;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,102,if (signature[0] != 0x5d) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,103,return false;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,106,if (signature[1] != 0) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,107,return false;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,110,if (signature[2] != 0) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,111,return false;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,114,return true;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,19,package org.apache.commons.compress.compressors.lzma;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,21,import java.util.HashMap;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,22,import java.util.Map;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,23,import org.apache.commons.compress.compressors.FileNameUtil;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,26,* Utility code for the lzma compression format.
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,27,* @ThreadSafe
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,28,* @since 1.10
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,30,public class LZMAUtils {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,32,private static final FileNameUtil fileNameUtil;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,35,* LZMA Header Magic Bytes begin a LZMA file.
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,37,private static final byte[] HEADER_MAGIC = {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,38,"(byte) 0x5D, 0, 0"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,41,static enum CachedAvailability {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,42,"DONT_CACHE, CACHED_AVAILABLE, CACHED_UNAVAILABLE"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,45,private static volatile CachedAvailability cachedLZMAAvailability;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,47,static {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,48,"Map<String, String> uncompressSuffix = new HashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,49,"uncompressSuffix.put("".lzma"", """");"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,50,"uncompressSuffix.put(""-lzma"", """");"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,51,"fileNameUtil = new FileNameUtil(uncompressSuffix, "".lzma"");"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,52,cachedLZMAAvailability = CachedAvailability.DONT_CACHE;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,53,try {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,54,"Class.forName(""org.osgi.framework.BundleEvent"");"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,55,} catch (Exception ex) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,56,setCacheLZMAAvailablity(true);
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,60,/** Private constructor to prevent instantiation of this utility class. */
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,61,private LZMAUtils() {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,65,* Checks if the signature matches what is expected for a .lzma file.
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,67,* @param   signature     the bytes to check
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,68,* @param   length        the number of bytes to check
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,69,"* @return  true if signature matches the .lzma magic bytes, false otherwise"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,71,"public static boolean matches(byte[] signature, int length) {"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,72,if (length < HEADER_MAGIC.length) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,73,return false;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,76,for (int i = 0; i < HEADER_MAGIC.length; ++i) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,77,if (signature[i] != HEADER_MAGIC[i]) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,78,return false;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,82,return true;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,86,* Are the classes required to support LZMA compression available?
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,88,public static boolean isLZMACompressionAvailable() {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,89,final CachedAvailability cachedResult = cachedLZMAAvailability;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,90,if (cachedResult != CachedAvailability.DONT_CACHE) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,91,return cachedResult == CachedAvailability.CACHED_AVAILABLE;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,93,return internalIsLZMACompressionAvailable();
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,96,private static boolean internalIsLZMACompressionAvailable() {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,97,try {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,98,"LZMACompressorInputStream.matches(null, 0);"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,99,return true;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,100,} catch (NoClassDefFoundError error) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,101,return false;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,106,* Detects common lzma suffixes in the given filename.
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,108,* @param filename name of a file
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,109,"* @return {@code true} if the filename has a common lzma suffix,"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,110,*         {@code false} otherwise
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,112,public static boolean isCompressedFilename(String filename) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,113,return fileNameUtil.isCompressedFilename(filename);
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,117,* Maps the given name of a lzma-compressed file to the name that
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,118,* the file should have after uncompression.  Any filenames with
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,119,"* the generic "".lzma"" suffix (or any other generic lzma suffix)"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,120,* is mapped to a name without that suffix. If no lzma suffix is
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,121,"* detected, then the filename is returned unmapped."
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,123,* @param filename name of a file
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,124,* @return name of the corresponding uncompressed file
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,126,public static String getUncompressedFilename(String filename) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,127,return fileNameUtil.getUncompressedFilename(filename);
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,131,* Maps the given filename to the name that the file should have after
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,132,* compression with lzma.
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,134,* @param filename name of a file
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,135,* @return name of the corresponding compressed file
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,137,public static String getCompressedFilename(String filename) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,138,return fileNameUtil.getCompressedFilename(filename);
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,142,* Whether to cache the result of the LZMA check.
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,144,* <p>This defaults to {@code false} in an OSGi environment and {@code true} otherwise.</p>
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,145,* @param doCache whether to cache the result
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,147,public static void setCacheLZMAAvailablity(boolean doCache) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,148,if (!doCache) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,149,cachedLZMAAvailability = CachedAvailability.DONT_CACHE;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,150,} else if (cachedLZMAAvailability == CachedAvailability.DONT_CACHE) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,151,final boolean hasLzma = internalIsLZMACompressionAvailable();
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,152,cachedLZMAAvailability = hasLzma ? CachedAvailability.CACHED_AVAILABLE
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,153,: CachedAvailability.CACHED_UNAVAILABLE;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,157,// only exists to support unit tests
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,158,static CachedAvailability getCachedLZMAAvailability() {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,159,return cachedLZMAAvailability;
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,21,import java.io.BufferedInputStream;
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,25,import java.io.IOException;
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,40,ileOutputStream out = null;
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,41,ry {
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,42,ut = new FileOutputStream(output);
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,43,"OUtils.copy(in, out);"
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,44, finally {
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,45,f (out != null) {
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,46,ut.close();
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,48,n.close();
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,42,"copy(in, output);"
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,43,} finally {
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,44,is.close();
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,48,@Test
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,49,public void testLZMAUnarchiveWithAutodetection() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,50,"final File input = getFile(""bla.tar.lzma"");"
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,51,"final File output = new File(dir, ""bla.tar"");"
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,52,final InputStream is = new BufferedInputStream(new FileInputStream(input));
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,53,try {
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,54,final CompressorInputStream in = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,55,.createCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,56,"copy(in, output);"
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,62,"private void copy(InputStream in, File output) throws IOException {"
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,63,FileOutputStream out = null;
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,64,try {
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,65,out = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,66,"IOUtils.copy(in, out);"
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,67,} finally {
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,68,if (out != null) {
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,69,out.close();
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,71,in.close();
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,19,package org.apache.commons.compress.compressors.lzma;
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,21,import static org.junit.Assert.*;
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,25,public class LZMAUtilsTestCase {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,27,@Test
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,28,public void testIsCompressedFilename() {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,29,"assertFalse(LZMAUtils.isCompressedFilename(""""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,30,"assertFalse(LZMAUtils.isCompressedFilename("".lzma""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,32,"assertTrue(LZMAUtils.isCompressedFilename(""x.lzma""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,33,"assertTrue(LZMAUtils.isCompressedFilename(""x-lzma""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,35,"assertFalse(LZMAUtils.isCompressedFilename(""xxgz""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,36,"assertFalse(LZMAUtils.isCompressedFilename(""lzmaz""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,37,"assertFalse(LZMAUtils.isCompressedFilename(""xaz""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,39,"assertFalse(LZMAUtils.isCompressedFilename(""x.lzma ""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,40,"assertFalse(LZMAUtils.isCompressedFilename(""x.lzma\n""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,41,"assertFalse(LZMAUtils.isCompressedFilename(""x.lzma.y""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,44,@Test
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,45,public void testGetUncompressedFilename() {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,46,"assertEquals("""", LZMAUtils.getUncompressedFilename(""""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,47,"assertEquals("".lzma"", LZMAUtils.getUncompressedFilename("".lzma""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,49,"assertEquals(""x"", LZMAUtils.getUncompressedFilename(""x.lzma""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,50,"assertEquals(""x"", LZMAUtils.getUncompressedFilename(""x-lzma""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,52,"assertEquals(""x.lzma "", LZMAUtils.getUncompressedFilename(""x.lzma ""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,53,"assertEquals(""x.lzma\n"", LZMAUtils.getUncompressedFilename(""x.lzma\n""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,54,"assertEquals(""x.lzma.y"", LZMAUtils.getUncompressedFilename(""x.lzma.y""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,57,@Test
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,58,public void testGetCompressedFilename() {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,59,"assertEquals("".lzma"", LZMAUtils.getCompressedFilename(""""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,60,"assertEquals(""x.lzma"", LZMAUtils.getCompressedFilename(""x""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,62,"assertEquals(""x.wmf .lzma"", LZMAUtils.getCompressedFilename(""x.wmf ""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,63,"assertEquals(""x.wmf\n.lzma"", LZMAUtils.getCompressedFilename(""x.wmf\n""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,64,"assertEquals(""x.wmf.y.lzma"", LZMAUtils.getCompressedFilename(""x.wmf.y""));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,67,@Test
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,68,public void testMatches() {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,69,byte[] data = {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,70,"(byte) 0x5D, 0, 0,"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,72,"assertFalse(LZMAUtils.matches(data, 2));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,73,"assertTrue(LZMAUtils.matches(data, 3));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,74,"assertTrue(LZMAUtils.matches(data, 4));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,75,data[2] = '0';
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,76,"assertFalse(LZMAUtils.matches(data, 3));"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,79,@Test
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,80,public void testCachingIsEnabledByDefaultAndLZMAIsPresent() {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,81,"assertEquals(LZMAUtils.CachedAvailability.CACHED_AVAILABLE, LZMAUtils.getCachedLZMAAvailability());"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,82,assertTrue(LZMAUtils.isLZMACompressionAvailable());
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,85,@Test
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,86,public void testCanTurnOffCaching() {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,87,try {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,88,LZMAUtils.setCacheLZMAAvailablity(false);
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,89,"assertEquals(LZMAUtils.CachedAvailability.DONT_CACHE, LZMAUtils.getCachedLZMAAvailability());"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,90,assertTrue(LZMAUtils.isLZMACompressionAvailable());
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,91,} finally {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,92,LZMAUtils.setCacheLZMAAvailablity(true);
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,96,@Test
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,97,public void testTurningOnCachingReEvaluatesAvailability() {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,98,try {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,99,LZMAUtils.setCacheLZMAAvailablity(false);
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,100,"assertEquals(LZMAUtils.CachedAvailability.DONT_CACHE, LZMAUtils.getCachedLZMAAvailability());"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,101,LZMAUtils.setCacheLZMAAvailablity(true);
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,102,"assertEquals(LZMAUtils.CachedAvailability.CACHED_AVAILABLE, LZMAUtils.getCachedLZMAAvailability());"
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,103,} finally {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,104,LZMAUtils.setCacheLZMAAvailablity(true);

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,18,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,21,import org.apache.commons.compress.utils.BoundedInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,23,import java.io.*;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,24,import java.util.*;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,25,import java.util.concurrent.ConcurrentLinkedQueue;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,26,import java.util.zip.Deflater;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,29,* A zip output stream that is optimized for multi-threaded scatter/gather construction of zip files.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,30,* <p/>
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,31,* The internal data format of the entries used by this class are entirely private to this class
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,32,* and are not part of any public api whatsoever.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,33,* <p/>
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,34,"* It is possible to extend this class to support different kinds of backing storage, the default"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,35,* implementation only supports file-based backing.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,36,* <p/>
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,37,"* Thread safety: This class supports multiple threads. But the ""writeTo"" method must be called"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,38,* by the thread that originally created the ZipArchiveEntry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,40,* @since 1.10
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,42,public abstract class ScatterZipOutputStream  {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,43,private final Queue<CompressedEntry> items = new ConcurrentLinkedQueue<CompressedEntry>();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,45,private static class CompressedEntry {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,46,final ZipArchiveEntry entry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,47,final long crc;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,48,final long compressedSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,49,final int method;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,50,final long size;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,52,"public CompressedEntry(ZipArchiveEntry entry, long crc, long compressedSize, int method, long size) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,53,this.entry = entry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,54,this.crc = crc;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,55,this.compressedSize = compressedSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,56,this.method = method;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,57,this.size = size;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,60,public ZipArchiveEntry transferToArchiveEntry(){
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,61,entry.setCompressedSize(compressedSize);
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,62,entry.setSize(size);
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,63,entry.setCrc(crc);
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,64,entry.setMethod(method);
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,65,return entry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,70,* Add an archive entry to this scatter stream.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,72,* @param zipArchiveEntry The entry to write
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,73,* @param payload         The content to write for the entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,74,* @param method          The compression method
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,75,* @throws IOException    If writing fails
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,77,"public void addArchiveEntry(ZipArchiveEntry zipArchiveEntry, InputStream payload, int method) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,78,StreamCompressor sc = getStreamCompressor();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,79,"sc.deflate(payload, method);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,80,payload.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,81,"items.add(new CompressedEntry(zipArchiveEntry, sc.getCrc32(), sc.getBytesWritten(), method, sc.getBytesRead()));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,85,* Write the contents of this scatter stream to a target archive.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,87,* @param target The archive to receive the contents of this #ScatterZipOutputStream
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,88,* @throws IOException If writing fails
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,90,public void writeTo(ZipArchiveOutputStream target) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,91,closeBackingStorage();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,92,InputStream data = getInputStream();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,93,for (CompressedEntry compressedEntry : items) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,94,"final BoundedInputStream rawStream = new BoundedInputStream(data, compressedEntry.compressedSize);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,95,"target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), rawStream);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,96,rawStream.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,98,data.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,102,* Returns a stream compressor that can be used to compress the data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,103,* <p/>
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,104,* This method is expected to return the same instance every time.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,106,* @return The stream compressor
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,107,* @throws FileNotFoundException
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,109,protected abstract StreamCompressor getStreamCompressor() throws FileNotFoundException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,112,* An input stream that contains the scattered payload
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,114,"* @return An InputStream, should be closed by the caller of this method."
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,115,* @throws IOException when something fails
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,117,protected abstract InputStream getInputStream() throws IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,121,* Closes whatever storage is backing this scatter stream
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,123,protected abstract void closeBackingStorage() throws IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,126,* Create a ScatterZipOutputStream with default compression level that is backed by a file
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,128,* @param file The file to offload compressed data into.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,129,* @return A  ScatterZipOutputStream that is ready for use.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,130,* @throws FileNotFoundException
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,132,public static ScatterZipOutputStream fileBased(File file) throws FileNotFoundException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,133,"return fileBased(file, Deflater.DEFAULT_COMPRESSION);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,137,* Create a ScatterZipOutputStream that is backed by a file
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,139,* @param file             The file to offload compressed data into.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,140,"* @param compressionLevel The compression level to use, @see #Deflater"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,141,* @return A  ScatterZipOutputStream that is ready for use.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,142,* @throws FileNotFoundException
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,144,"public static ScatterZipOutputStream fileBased(File file, int compressionLevel) throws FileNotFoundException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,145,"return new FileScatterOutputStream(file, compressionLevel);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,148,private static class FileScatterOutputStream extends ScatterZipOutputStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,149,final File target;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,150,private StreamCompressor streamDeflater;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,151,final FileOutputStream os;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,153,"FileScatterOutputStream(File target, int compressionLevel) throws FileNotFoundException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,154,this.target = target;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,155,os = new FileOutputStream(target);
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,156,"streamDeflater = StreamCompressor.create(compressionLevel, os);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,159,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,160,protected StreamCompressor getStreamCompressor() throws FileNotFoundException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,161,return streamDeflater;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,164,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,165,protected InputStream getInputStream() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,166,return new FileInputStream(target);
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,169,"@SuppressWarnings(""ResultOfMethodCallIgnored"")"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,170,public void closeBackingStorage() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,171,os.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,18,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,20,import java.io.DataOutput;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,23,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,24,import java.util.zip.CRC32;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,25,import java.util.zip.Deflater;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,28,"* Encapsulates a Deflater and crc calculator, handling multiple types of output streams."
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,29,* Currently #ZipEntry.DEFLATED and #ZipEntry.STORED are the only supported compression methods.
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,31,* @since 1.10
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,33,public abstract class StreamCompressor {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,36,* Apparently Deflater.setInput gets slowed down a lot on Sun JVMs
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,37,* when it gets handed a really big buffer.  See
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,38,* https://issues.apache.org/bugzilla/show_bug.cgi?id=45396
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,40,* Using a buffer size of 8 kB proved to be a good compromise
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,42,private static final int DEFLATER_BLOCK_SIZE = 8192;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,44,private final Deflater def;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,46,private final CRC32 crc = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,48,int writtenToOutputStream = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,49,int sourcePayloadLength = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,50,long actualCrc;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,52,private final int bufferSize = 4096;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,53,private final byte[] outputBuffer = new byte[bufferSize];
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,54,private final byte[] readerBuf = new byte[bufferSize];
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,56,protected StreamCompressor(Deflater deflater) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,57,this.def = deflater;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,61,* Create a stream compressor with the given compression level.
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,63,* @param compressionLevel The #Deflater compression level
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,64,* @param os The #OutputStream stream to receive output
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,65,* @return A stream compressor
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,67,"public static StreamCompressor create(int compressionLevel, OutputStream os) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,68,"final Deflater deflater = new Deflater(compressionLevel, true);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,69,"return new OutputStreamCompressor(deflater, os);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,73,* Create a stream compressor with the default compression level.
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,75,* @param os The #OutputStream stream to receive output
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,76,* @return A stream compressor
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,78,public static StreamCompressor create( OutputStream os) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,79,"return create(Deflater.DEFAULT_COMPRESSION, os);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,83,* Create a stream compressor with the given compression level.
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,85,* @param compressionLevel The #Deflater compression level
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,86,* @param os The #DataOutput to receive output
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,87,* @return A stream compressor
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,89,"public static StreamCompressor create(int compressionLevel, DataOutput os) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,90,"final Deflater deflater = new Deflater(compressionLevel, true);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,91,"return new DataOutputCompressor(deflater, os);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,95,* The crc32 of the last deflated file
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,96,* @return the crc32
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,99,public long getCrc32() {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,100,return actualCrc;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,104,* Return the number of bytes read from the source stream
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,105,"* @return The number of bytes read, never negative"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,107,public int getBytesRead() {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,108,return sourcePayloadLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,112,* The number of bytes written to the output
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,113,"* @return The number of bytes, never negative"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,115,public int getBytesWritten() {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,116,return writtenToOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,120,* Deflate the given source using the supplied compression method
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,121,* @param source The source to compress
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,122,* @param method The #ZipArchiveEntry compression method
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,123,* @throws IOException When failures happen
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,126,"public void deflate(InputStream source, int method) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,127,reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,128,int length;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,130,"while(( length = source.read(readerBuf, 0, readerBuf.length)) >= 0){"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,131,"crc.update(readerBuf, 0, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,132,if (method == ZipArchiveEntry.DEFLATED) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,133,"writeDeflated(readerBuf, 0, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,134,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,135,"writeOut(readerBuf, 0, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,136,writtenToOutputStream += length;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,138,sourcePayloadLength += length;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,140,if (method == ZipArchiveEntry.DEFLATED) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,141,flushDeflater();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,143,actualCrc = crc.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,148,private void reset(){
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,149,crc.reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,150,def.reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,151,sourcePayloadLength = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,152,writtenToOutputStream = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,155,private void flushDeflater() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,156,def.finish();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,157,while (!def.finished()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,158,deflate();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,162,"private void writeDeflated(byte[]b, int offset, int length)"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,163,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,164,if (length > 0 && !def.finished()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,165,if (length <= DEFLATER_BLOCK_SIZE) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,166,"def.setInput(b, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,167,deflateUntilInputIsNeeded();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,168,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,169,final int fullblocks = length / DEFLATER_BLOCK_SIZE;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,170,for (int i = 0; i < fullblocks; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,171,"def.setInput(b, offset + i * DEFLATER_BLOCK_SIZE,"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,172,DEFLATER_BLOCK_SIZE);
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,173,deflateUntilInputIsNeeded();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,175,final int done = fullblocks * DEFLATER_BLOCK_SIZE;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,176,if (done < length) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,177,"def.setInput(b, offset + done, length - done);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,178,deflateUntilInputIsNeeded();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,184,private void deflateUntilInputIsNeeded() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,185,while (!def.needsInput()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,186,deflate();
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,190,private void deflate() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,191,"int len = def.deflate(outputBuffer, 0, outputBuffer.length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,192,if (len > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,193,"writeOut(outputBuffer, 0, len);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,194,writtenToOutputStream += len;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,198,"protected abstract void writeOut(byte[] data, int offset, int length) throws IOException ;"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,200,private static final class OutputStreamCompressor extends StreamCompressor {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,201,private final OutputStream os;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,203,"public OutputStreamCompressor(Deflater deflater, OutputStream os) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,204,super(deflater);
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,205,this.os = os;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,208,"protected final void writeOut(byte[] data, int offset, int length)"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,209,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,210,"os.write(data, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,214,private static final class DataOutputCompressor extends StreamCompressor {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,215,private final DataOutput raf;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,216,"public DataOutputCompressor(Deflater deflater, DataOutput raf) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,217,super(deflater);
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,218,this.raf = raf;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,221,"protected final void writeOut(byte[] data, int offset, int length)"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,222,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,223,"raf.write(data, offset, length);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,508," Make a copy of this stream with all its settings, but point to a new file."
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,509, Used for scatter/gather operations to make several streams from a user-supplied master.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,511, @param newFile The file to use for the copy of this stream
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,512, @return A copy of this stream
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,514,ublic ZipArchiveOutputStream cloneWith(File newFile) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,515,ipArchiveOutputStream zos = new ZipArchiveOutputStream(newFile);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,516,os.setCreateUnicodeExtraFields(createUnicodeExtraFields);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,517,os.setMethod(method);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,518,os.setEncoding(encoding);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,519,os.setFallbackToUTF8(fallbackToUTF8);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,520,os.setUseLanguageEncodingFlag(useUTF8Flag);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,521,os.setUseZip64(zip64Mode);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,522,eturn zos;
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,297,ublic void testCloneZipOutputStream( ) throws IOException {
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,298,ile tempDir = createTempDir();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,299,"ile fred = new File(tempDir, ""fred"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,300,ipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(fred);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,301,"ile frank = new File(tempDir, ""frank"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,302,ipArchiveOutputStream actual = zipArchiveOutputStream.cloneWith(frank);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,303,ipArchiveOutputStream.close();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,304,ctual.close();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,305,ssertTrue( fred.exists());
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,306,ssertTrue( frank.exists());
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,4,*  this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,7,*  the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,14,*  See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,15,*  limitations under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,18,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,20,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,23,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,24,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,26,import static org.junit.Assert.assertArrayEquals;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,27,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,29,public class ScatterZipOutputStreamTest {
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,31,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,32,public void putArchiveEntry() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,33,"File scatteFile = File.createTempFile(""scattertest"", "".notzip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,34,ScatterZipOutputStream scatterZipOutputStream = ScatterZipOutputStream.fileBased(scatteFile);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,35,"final byte[] B_PAYLOAD = ""RBBBBBBS"".getBytes();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,36,"final byte[] A_PAYLOAD = ""XAAY"".getBytes();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,38,"ZipArchiveEntry zab = new ZipArchiveEntry(""b.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,39,"scatterZipOutputStream.addArchiveEntry(zab, new ByteArrayInputStream(B_PAYLOAD), ZipArchiveEntry.DEFLATED);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,41,"ZipArchiveEntry zae = new ZipArchiveEntry(""a.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,42,"scatterZipOutputStream.addArchiveEntry(zae, new ByteArrayInputStream(A_PAYLOAD), ZipArchiveEntry.DEFLATED);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,44,"File target = File.createTempFile(""scattertest"", "".zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,45,ZipArchiveOutputStream outputStream = new ZipArchiveOutputStream(target);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,46,scatterZipOutputStream.writeTo( outputStream);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,47,outputStream.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,49,ZipFile zf = new ZipFile(target);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,50,"final ZipArchiveEntry b_entry = zf.getEntries(""b.txt"").iterator().next();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,51,"assertEquals(8, b_entry.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,52,"assertArrayEquals(B_PAYLOAD, IOUtils.toByteArray(zf.getInputStream(b_entry)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,54,"final ZipArchiveEntry a_entry = zf.getEntries(""a.txt"").iterator().next();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,55,"assertEquals(4, a_entry.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,56,"assertArrayEquals(A_PAYLOAD, IOUtils.toByteArray(zf.getInputStream(a_entry)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,4,*  this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,7,*  the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,14,*  See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,15,*  limitations under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,18,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,20,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,22,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,23,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,24,import java.util.zip.ZipEntry;
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,26,import static org.junit.Assert.assertArrayEquals;
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,27,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,29,public class StreamCompressorTest {
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,31,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,32,public void storedEntries() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,33,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,34,StreamCompressor sc = StreamCompressor.create( baos);
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,35,"sc.deflate(new ByteArrayInputStream(""A"".getBytes()), ZipEntry.STORED);"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,36,"sc.deflate(new ByteArrayInputStream(""BAD"".getBytes()), ZipEntry.STORED);"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,37,"assertEquals(3, sc.getBytesRead());"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,38,"assertEquals(3, sc.getBytesWritten());"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,39,"assertEquals(344750961, sc.getCrc32());"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,40,"sc.deflate(new ByteArrayInputStream(""CAFE"".getBytes()), ZipEntry.STORED);"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,41,"assertEquals(""ABADCAFE"", baos.toString());"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,44,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,45,public void deflatedEntries() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,46,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,47,StreamCompressor sc = StreamCompressor.create( baos);
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,48,"sc.deflate(new ByteArrayInputStream(""AAAAAABBBBBB"".getBytes()), ZipEntry.DEFLATED);"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,49,"assertEquals(12, sc.getBytesRead());"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,50,"assertEquals(8, sc.getBytesWritten());"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,51,"assertEquals(3299542, sc.getCrc32());"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,53,final byte[] actuals = baos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,54,"byte[] expected = new byte[]{115,116,4,1,39,48,0,0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,55,"// Note that this test really asserts stuff about the java Deflater, which might be a little bit brittle"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,56,"assertArrayEquals(expected, actuals);"

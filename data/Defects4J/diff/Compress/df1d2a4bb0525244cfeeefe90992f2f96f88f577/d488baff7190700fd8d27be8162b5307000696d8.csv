is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,855,writeOut(inputStreamStack);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,856,file.seek(folderOffset);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,857,"inputStreamStack = new BoundedRandomAccessFileInputStream(file,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,858,archive.packSizes[firstPackStreamIndex]);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,878,private static void writeOut(InputStream in) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,879,"java.io.OutputStream out = new java.io.FileOutputStream(""raw"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,880,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,881,"IOUtils.copy(in, out);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,882,} finally {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,883,out.close();
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,45,rivate static final int DONT_CACHE = 2;
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,46,rivate static final int CACHED_AVAILABLE = 1;
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,47,rivate static final int CACHED_UNAVAILABLE = 0;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,45,static enum CachedAvailability {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,46,"DONT_CACHE, CACHED_AVAILABLE, CACHED_UNAVAILABLE"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,49,rivate static final AtomicInteger cachedXZAvailability;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,49,private static volatile CachedAvailability cachedXZAvailability;
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,57,achedXZAvailability = new AtomicInteger(DONT_CACHE);
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,57,cachedXZAvailability = CachedAvailability.DONT_CACHE;
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,100,inal int cachedResult = cachedXZAvailability.get();
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,101,f (cachedResult != DONT_CACHE) {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,102,eturn cachedResult == CACHED_AVAILABLE;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,100,final CachedAvailability cachedResult = cachedXZAvailability;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,101,if (cachedResult != CachedAvailability.DONT_CACHE) {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,102,return cachedResult == CachedAvailability.CACHED_AVAILABLE;
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,168,achedXZAvailability.set(DONT_CACHE);
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,169, else if (cachedXZAvailability.get() == DONT_CACHE) {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,168,cachedXZAvailability = CachedAvailability.DONT_CACHE;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,169,} else if (cachedXZAvailability == CachedAvailability.DONT_CACHE) {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,171,achedXZAvailability.set(hasXz ? CACHED_AVAILABLE : CACHED_UNAVAILABLE);
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,171,cachedXZAvailability = hasXz ? CachedAvailability.CACHED_AVAILABLE
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,172,: CachedAvailability.CACHED_UNAVAILABLE;
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,176,tatic int getCachedXZAvailability() {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,177,eturn cachedXZAvailability.get();
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,177,static CachedAvailability getCachedXZAvailability() {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,178,return cachedXZAvailability;
False,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,78,"ssertEquals(1, XZUtils.getCachedXZAvailability());"
True,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,78,"assertEquals(XZUtils.CachedAvailability.CACHED_AVAILABLE, XZUtils.getCachedXZAvailability());"
False,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,85,"ssertEquals(2, XZUtils.getCachedXZAvailability());"
True,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,85,"assertEquals(XZUtils.CachedAvailability.DONT_CACHE, XZUtils.getCachedXZAvailability());"
False,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,95,"ssertEquals(2, XZUtils.getCachedXZAvailability());"
True,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,95,"assertEquals(XZUtils.CachedAvailability.DONT_CACHE, XZUtils.getCachedXZAvailability());"
False,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,97,"ssertEquals(1, XZUtils.getCachedXZAvailability());"
True,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,97,"assertEquals(XZUtils.CachedAvailability.CACHED_AVAILABLE, XZUtils.getCachedXZAvailability());"

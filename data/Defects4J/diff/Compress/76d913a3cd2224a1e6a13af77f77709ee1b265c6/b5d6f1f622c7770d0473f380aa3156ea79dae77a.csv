is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,83,"// used for frame header checksum and content checksum, if present"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,84,private final XXHash32 contentHash = new XXHash32();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,145,contentHash.update(flags);
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,151,f (readOneByte() == -1) { // max size is irrelevant for this implementation
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,155,int bdByte = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,156,if (bdByte == -1) { // max size is irrelevant for this implementation
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,159,contentHash.update(bdByte);
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,155,"nt skipped = (int) IOUtils.skip(in, 8);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,161,byte[] contentSize = new byte[8];
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,162,"int skipped = (int) IOUtils.readFully(in, contentSize);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,167,"contentHash.update(contentSize, 0, contentSize.length);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,161,"f (readOneByte() == -1) { // partial hash of header. not supported, yet"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,169,int headerHash = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,170,if (headerHash == -1) { // partial hash of header.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,173,int expectedHash = (int) ((contentHash.getValue() >> 8) & 0xff);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,174,contentHash.reset();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,175,if (headerHash != expectedHash) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,176,"throw new IOException(""frame header checksum mismatch."");"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,43," + xxhash32 checksum creation for headers, content, blocks"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,43,"* + xxhash32 checksum creation for content, blocks"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,60,"// used for frame header checksum and content checksum, if present"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,61,private final XXHash32 contentHash = new XXHash32();
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,132,ut.write(FramedLZ4CompressorInputStream.SUPPORTED_VERSION
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,133, FramedLZ4CompressorInputStream.BLOCK_INDEPENDENCE_MASK);
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,134,ut.write(BLOCK_SIZES.indexOf(blockData.length) << 4);
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,135,ut.write(0); // TODO header checksum
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,135,int flags = FramedLZ4CompressorInputStream.SUPPORTED_VERSION
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,136,| FramedLZ4CompressorInputStream.BLOCK_INDEPENDENCE_MASK;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,137,out.write(flags);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,138,contentHash.update(flags);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,139,int bd = BLOCK_SIZES.indexOf(blockData.length) << 4;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,140,out.write(bd);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,141,contentHash.update(bd);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,142,out.write((int) ((contentHash.getValue() >> 8) & 0xff));
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java,143,contentHash.reset();
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,168,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,169,public void rejectsFileWithBadHeaderChecksum() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,170,byte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,171,"4, 0x22, 0x4d, 0x18, // signature"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,172,"0x64, // flag - Version 01, block independent, no block checksum, no content size, with content checksum"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,173,"0x70, // block size 4MB"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,174,"0,"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,176,try {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,177,try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input))) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,178,"fail(""expected exception"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,180,} catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,181,"assertThat(ex.getMessage(), containsString(""header checksum mismatch""));"
False,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,174,"x00, // checksum, revisit once it gets validated"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,191,"115, // checksum"
False,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,193,"x00, // checksum, revisit once it gets validated"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,210,"115, // checksum"
False,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,210,"x00, // checksum, revisit once it gets validated"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,227,"114, // checksum"
False,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,230,"x00, // checksum, revisit once it gets validated"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,247,"(byte) 185, // checksum"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,37,import org.apache.commons.compress.utils.ArchiveUtils;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,656,tring name = current.entry.getName();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,657,nt idx = firstUnprintableCharacter(current.entry.getName());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,658,f (idx >= 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,659,"ame = ""corrupted name starting with '"" + name.substring(0, idx) + ""'"";"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,661,"hrow new EOFException(""Truncated ZIP entry: "" + name);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,657,"throw new EOFException(""Truncated ZIP entry: """
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,658,+ ArchiveUtils.sanitize(current.entry.getName()));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,991,rivate int firstUnprintableCharacter(String name) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,992,inal char[] chars = name.toCharArray();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,993,inal int len = chars.length;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,994,or (int i = 0; i < len; i++) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,995,f (Character.isISOControl(chars[i]) || !Character.isDefined(chars[i])) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,996,eturn i;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,999,eturn -1;
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,256,"* Returns a ""sanitized"" version of the string given as arguments,"
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,257,* where sanitized means non-printable characters have been
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,258,* replaced with a question mark.
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,260,* <p>This method is used to clean up file names when they are
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,261,* used in exception messages as they may end up in log files or
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,262,* as console output and may have been read from a corrupted
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,263,* input.</p>
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,265,* @param s the string to sanitize
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,266,* @return a sanitized version of the argument
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,267,* @since Compress 1.12
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,269,public static String sanitize(String s) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,270,final char[] chars = s.toCharArray();
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,271,final int len = chars.length;
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,272,final StringBuilder sb = new StringBuilder();
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,273,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,274,final char c = chars[i];
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,275,if (!Character.isISOControl(c)) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,276,Character.UnicodeBlock block = Character.UnicodeBlock.of(c);
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,277,if (block != null && block != Character.UnicodeBlock.SPECIALS) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,278,sb.append(c);
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,279,continue;
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,282,sb.append('?');
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,284,return sb.toString();
